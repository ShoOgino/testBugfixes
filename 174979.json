{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","commits":[{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestDatePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false, MAX_DATE_EPOCH_MILLIS);\n\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, Instant.ofEpochMilli(values.get(i)).toString()));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='field(\" + field \n          + \")'][.='\" + Instant.ofEpochMilli(values.get(i)) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,ms(\" + field + \"))'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,ms(\" + field + \"))\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='\" + field\n          + \"'][.='\" + Instant.ofEpochMilli(values.get(posVal.pos)) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        ascNegXpathChecks);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e5fb6eefa1a16d0ecb984c19bcc48421782ce4e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2c87d20f012bf841bca4751583c938a2828dc65","date":1500064819,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","sourceNew":"  private void doTestDatePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false, MAX_DATE_EPOCH_MILLIS);\n\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, Instant.ofEpochMilli(values.get(i)).toString()));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='field(\" + field \n          + \")'][.='\" + Instant.ofEpochMilli(values.get(i)) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,ms(\" + field + \"))'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,ms(\" + field + \"))\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='\" + field\n          + \"'][.='\" + Instant.ofEpochMilli(values.get(posVal.pos)) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void doTestDatePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false, MAX_DATE_EPOCH_MILLIS);\n\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", String.valueOf(i), field, Instant.ofEpochMilli(values.get(i)).toString()));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='field(\" + field \n          + \")'][.='\" + Instant.ofEpochMilli(values.get(i)) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,ms(\" + field + \"))'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,ms(\" + field + \"))\", \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='\" + field\n          + \"'][.='\" + Instant.ofEpochMilli(values.get(posVal.pos)) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        ascNegXpathChecks);\n  }\n\n","bugFix":null,"bugIntro":["e5fb6eefa1a16d0ecb984c19bcc48421782ce4e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestDatePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false, MAX_DATE_EPOCH_MILLIS);\n\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, Instant.ofEpochMilli(values.get(i)).toString()));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='field(\" + field \n          + \")'][.='\" + Instant.ofEpochMilli(values.get(i)) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,ms(\" + field + \"))'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,ms(\" + field + \"))\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='\" + field\n          + \"'][.='\" + Instant.ofEpochMilli(values.get(posVal.pos)) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e45bfb783796234b0104a018de67f6f5904be09","date":1500413531,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","sourceNew":"  private void doTestDatePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false, MAX_DATE_EPOCH_MILLIS);\n\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, Instant.ofEpochMilli(values.get(i)).toString()));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='field(\" + field \n          + \")'][.='\" + Instant.ofEpochMilli(values.get(i)) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,ms(\" + field + \"))'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,ms(\" + field + \"))\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='\" + field\n          + \"'][.='\" + Instant.ofEpochMilli(values.get(posVal.pos)) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", field, \"1995-12-31T10:59:59Z\"));\n    assertU(adoc(\"id\", \"2\", field, \"1996-12-31T10:59:59Z\"));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":[* TO *]\", \"fl\", \"id, \" + field), \n        \"//*[@numFound='2']\");\n    assertQ(req(\"q\", field + \":{* TO *}\", \"fl\", \"id, \" + field), \n        \"//*[@numFound='2']\");\n  }\n\n","sourceOld":"  private void doTestDatePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false, MAX_DATE_EPOCH_MILLIS);\n\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, Instant.ofEpochMilli(values.get(i)).toString()));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='field(\" + field \n          + \")'][.='\" + Instant.ofEpochMilli(values.get(i)) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,ms(\" + field + \"))'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,ms(\" + field + \"))\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='\" + field\n          + \"'][.='\" + Instant.ofEpochMilli(values.get(posVal.pos)) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":["e5fb6eefa1a16d0ecb984c19bcc48421782ce4e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","sourceNew":"  private void doTestDatePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false, MAX_DATE_EPOCH_MILLIS);\n\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, Instant.ofEpochMilli(values.get(i)).toString()));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='field(\" + field \n          + \")'][.='\" + Instant.ofEpochMilli(values.get(i)) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,ms(\" + field + \"))'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,ms(\" + field + \"))\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='\" + field\n          + \"'][.='\" + Instant.ofEpochMilli(values.get(posVal.pos)) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", field, \"1995-12-31T10:59:59Z\"));\n    assertU(adoc(\"id\", \"2\", field, \"1996-12-31T10:59:59Z\"));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":[* TO *]\", \"fl\", \"id, \" + field), \n        \"//*[@numFound='2']\");\n    assertQ(req(\"q\", field + \":{* TO *}\", \"fl\", \"id, \" + field), \n        \"//*[@numFound='2']\");\n  }\n\n","sourceOld":"  private void doTestDatePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false, MAX_DATE_EPOCH_MILLIS);\n\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, Instant.ofEpochMilli(values.get(i)).toString()));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='field(\" + field \n          + \")'][.='\" + Instant.ofEpochMilli(values.get(i)) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,ms(\" + field + \"))'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,ms(\" + field + \"))\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='\" + field\n          + \"'][.='\" + Instant.ofEpochMilli(values.get(posVal.pos)) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fb6eefa1a16d0ecb984c19bcc48421782ce4e2","date":1515549861,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","sourceNew":"  private void doTestDatePointFunctionQuery(String field) {\n    // This method is intentionally not randomized, because sorting by function happens\n    // at float precision, which causes ms(date) to give the same value for different dates. \n    // See https://issues.apache.org/jira/browse/SOLR-11825\n\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n\n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \",\" + baseDate +\")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n  }\n\n","sourceOld":"  private void doTestDatePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false, MAX_DATE_EPOCH_MILLIS);\n\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, Instant.ofEpochMilli(values.get(i)).toString()));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='field(\" + field \n          + \")'][.='\" + Instant.ofEpochMilli(values.get(i)) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,ms(\" + field + \"))'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,ms(\" + field + \"))\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='\" + field\n          + \"'][.='\" + Instant.ofEpochMilli(values.get(posVal.pos)) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", field, \"1995-12-31T10:59:59Z\"));\n    assertU(adoc(\"id\", \"2\", field, \"1996-12-31T10:59:59Z\"));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":[* TO *]\", \"fl\", \"id, \" + field), \n        \"//*[@numFound='2']\");\n    assertQ(req(\"q\", field + \":{* TO *}\", \"fl\", \"id, \" + field), \n        \"//*[@numFound='2']\");\n  }\n\n","bugFix":["d2c87d20f012bf841bca4751583c938a2828dc65","2e45bfb783796234b0104a018de67f6f5904be09","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointFunctionQuery(String).mjava","sourceNew":"  private void doTestDatePointFunctionQuery(String field) {\n    // This method is intentionally not randomized, because sorting by function happens\n    // at float precision, which causes ms(date) to give the same value for different dates. \n    // See https://issues.apache.org/jira/browse/SOLR-11825\n\n    final String baseDate = \"1995-01-10T10:59:10Z\";\n\n    for (int i = 9; i >= 0; i--) {\n      String date = String.format(Locale.ROOT, \"%s+%dSECONDS\", baseDate, i+1);\n      assertU(adoc(\"id\", String.valueOf(i), field, date));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"sort\", \"product(-1,ms(\" + field + \",\" + baseDate +\")) asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='\" + field + \"'][.='1995-01-10T10:59:20Z']\",\n        \"//result/doc[2]/date[@name='\" + field + \"'][.='1995-01-10T10:59:19Z']\",\n        \"//result/doc[3]/date[@name='\" + field + \"'][.='1995-01-10T10:59:18Z']\",\n        \"//result/doc[10]/date[@name='\" + field + \"'][.='1995-01-10T10:59:11Z']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", ms(\" + field + \",\"+baseDate+\")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='1000.0']\",\n        \"//result/doc[2]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='2000.0']\",\n        \"//result/doc[3]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='3000.0']\",\n        \"//result/doc[10]/float[@name='ms(\" + field + \",\" + baseDate + \")'][.='10000.0']\");\n\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"sort\", \"id asc\"),\n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:11Z']\",\n        \"//result/doc[2]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:12Z']\",\n        \"//result/doc[3]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:13Z']\",\n        \"//result/doc[10]/date[@name='field(\" + field + \")'][.='1995-01-10T10:59:20Z']\");\n  }\n\n","sourceOld":"  private void doTestDatePointFunctionQuery(String field) throws Exception {\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);\n    int numVals = 10 * RANDOM_MULTIPLIER;\n    List<Long> values = getRandomLongs(numVals, false, MAX_DATE_EPOCH_MILLIS);\n\n    String assertNumFound = \"//*[@numFound='\" + numVals + \"']\";\n    String[] idAscXpathChecks = new String[numVals + 1];\n    String[] idAscNegXpathChecks = new String[numVals + 1];\n\n    idAscXpathChecks[0] = assertNumFound;\n    idAscNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < values.size() ; ++i) {\n      assertU(adoc(\"id\", Character.valueOf((char)('A' + i)).toString(), field, Instant.ofEpochMilli(values.get(i)).toString()));\n      // reminder: xpath array indexes start at 1\n      idAscXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='field(\" + field \n          + \")'][.='\" + Instant.ofEpochMilli(values.get(i)) + \"']\";\n      idAscNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/float[@name='product(-1,ms(\" + field + \"))'][.='\"\n          + (-1.0f * (float)values.get(i)) + \"']\";\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", field(\" + field + \")\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscXpathChecks);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field + \", product(-1,ms(\" + field + \"))\", \"rows\", String.valueOf(numVals), \"sort\", \"id asc\"),\n        idAscNegXpathChecks);\n\n    List<PosVal<Long>> ascNegPosVals\n        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);\n    String[] ascNegXpathChecks = new String[numVals + 1];\n    ascNegXpathChecks[0] = assertNumFound;\n    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {\n      PosVal<Long> posVal = ascNegPosVals.get(i);\n      ascNegXpathChecks[i + 1] = \"//result/doc[\" + (1 + i) + \"]/date[@name='\" + field\n          + \"'][.='\" + Instant.ofEpochMilli(values.get(posVal.pos)) + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(numVals), \"sort\", \"product(-1,ms(\" + field + \")) asc\"),\n        ascNegXpathChecks);\n\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", field, \"1995-12-31T10:59:59Z\"));\n    assertU(adoc(\"id\", \"2\", field, \"1996-12-31T10:59:59Z\"));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":[* TO *]\", \"fl\", \"id, \" + field), \n        \"//*[@numFound='2']\");\n    assertQ(req(\"q\", field + \":{* TO *}\", \"fl\", \"id, \" + field), \n        \"//*[@numFound='2']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["2e45bfb783796234b0104a018de67f6f5904be09","e5fb6eefa1a16d0ecb984c19bcc48421782ce4e2"],"e5fb6eefa1a16d0ecb984c19bcc48421782ce4e2":["2e45bfb783796234b0104a018de67f6f5904be09"],"2e45bfb783796234b0104a018de67f6f5904be09":["d2c87d20f012bf841bca4751583c938a2828dc65"],"d2c87d20f012bf841bca4751583c938a2828dc65":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d2c87d20f012bf841bca4751583c938a2828dc65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["aaf90fc29510e72665ac7934f34c3d1c25efad64","2e45bfb783796234b0104a018de67f6f5904be09"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e5fb6eefa1a16d0ecb984c19bcc48421782ce4e2":["b94236357aaa22b76c10629851fe4e376e0cea82"],"2e45bfb783796234b0104a018de67f6f5904be09":["b94236357aaa22b76c10629851fe4e376e0cea82","e5fb6eefa1a16d0ecb984c19bcc48421782ce4e2","936cdd5882761db3b844afd6f84ab81cbb011a75"],"d2c87d20f012bf841bca4751583c938a2828dc65":["2e45bfb783796234b0104a018de67f6f5904be09","aaf90fc29510e72665ac7934f34c3d1c25efad64"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["d2c87d20f012bf841bca4751583c938a2828dc65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}