{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#expression().mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#expression().mjava","pathOld":"/dev/null","sourceNew":"    // $ANTLR start \"expression\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;\n    public final JavascriptParser.expression_return expression() throws RecognitionException {\n        JavascriptParser.expression_return retval = new JavascriptParser.expression_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token EOF2=null;\n        JavascriptParser.conditional_return conditional1 =null;\n\n\n        CommonTree EOF2_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            pushFollow(FOLLOW_conditional_in_expression737);\n            conditional1=conditional();\n\n            state._fsp--;\n\n            adaptor.addChild(root_0, conditional1.getTree());\n\n            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_expression739); \n\n            }\n\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n        \t// do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"expression\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3623d67605fbbdfce2fadea678e2f4bbe2ab2310","date":1379042933,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#expression().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#expression().mjava","sourceNew":"    // $ANTLR start \"expression\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;\n    public final JavascriptParser.expression_return expression() throws RecognitionException {\n        JavascriptParser.expression_return retval = new JavascriptParser.expression_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token EOF2=null;\n        JavascriptParser.conditional_return conditional1 =null;\n\n\n        CommonTree EOF2_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            pushFollow(FOLLOW_conditional_in_expression737);\n            conditional1=conditional();\n\n            state._fsp--;\n\n            adaptor.addChild(root_0, conditional1.getTree());\n\n            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_expression739); \n\n            }\n\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"expression\"\n\n","sourceOld":"    // $ANTLR start \"expression\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;\n    public final JavascriptParser.expression_return expression() throws RecognitionException {\n        JavascriptParser.expression_return retval = new JavascriptParser.expression_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token EOF2=null;\n        JavascriptParser.conditional_return conditional1 =null;\n\n\n        CommonTree EOF2_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            pushFollow(FOLLOW_conditional_in_expression737);\n            conditional1=conditional();\n\n            state._fsp--;\n\n            adaptor.addChild(root_0, conditional1.getTree());\n\n            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_expression739); \n\n            }\n\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n    \tretval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n        \t// do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"expression\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2","date":1379096281,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#expression().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#expression().mjava","sourceNew":"    // $ANTLR start \"expression\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;\n    public final JavascriptParser.expression_return expression() throws RecognitionException {\n        JavascriptParser.expression_return retval = new JavascriptParser.expression_return();\n        retval.start = input.LT(1);\n\n        CommonTree root_0 = null;\n\n        Token EOF2=null;\n        ParserRuleReturnScope conditional1 =null;\n\n        CommonTree EOF2_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            pushFollow(FOLLOW_conditional_in_expression737);\n            conditional1=conditional();\n            state._fsp--;\n\n            adaptor.addChild(root_0, conditional1.getTree());\n\n            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_expression739); \n            }\n\n            retval.stop = input.LT(-1);\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n        }\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"expression\"\n\n","sourceOld":"    // $ANTLR start \"expression\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;\n    public final JavascriptParser.expression_return expression() throws RecognitionException {\n        JavascriptParser.expression_return retval = new JavascriptParser.expression_return();\n        retval.start = input.LT(1);\n\n\n        CommonTree root_0 = null;\n\n        Token EOF2=null;\n        JavascriptParser.conditional_return conditional1 =null;\n\n\n        CommonTree EOF2_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            pushFollow(FOLLOW_conditional_in_expression737);\n            conditional1=conditional();\n\n            state._fsp--;\n\n            adaptor.addChild(root_0, conditional1.getTree());\n\n            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_expression739); \n\n            }\n\n            retval.stop = input.LT(-1);\n\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n\n        }\n\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"expression\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1441eba4282a646ef88d12acb797483db37554e","date":1379096538,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#expression().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#expression().mjava","sourceNew":"  // $ANTLR start \"expression\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;\n  public final JavascriptParser.expression_return expression() throws RecognitionException {\n    JavascriptParser.expression_return retval = new JavascriptParser.expression_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token EOF2=null;\n    ParserRuleReturnScope conditional1 =null;\n\n    CommonTree EOF2_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      pushFollow(FOLLOW_conditional_in_expression737);\n      conditional1=conditional();\n      state._fsp--;\n\n      adaptor.addChild(root_0, conditional1.getTree());\n\n      EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_expression739); \n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"expression\"\n\n","sourceOld":"    // $ANTLR start \"expression\"\n    // src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;\n    public final JavascriptParser.expression_return expression() throws RecognitionException {\n        JavascriptParser.expression_return retval = new JavascriptParser.expression_return();\n        retval.start = input.LT(1);\n\n        CommonTree root_0 = null;\n\n        Token EOF2=null;\n        ParserRuleReturnScope conditional1 =null;\n\n        CommonTree EOF2_tree=null;\n\n        try {\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)\n            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !\n            {\n            root_0 = (CommonTree)adaptor.nil();\n\n\n            pushFollow(FOLLOW_conditional_in_expression737);\n            conditional1=conditional();\n            state._fsp--;\n\n            adaptor.addChild(root_0, conditional1.getTree());\n\n            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_expression739); \n            }\n\n            retval.stop = input.LT(-1);\n\n            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n        }\n        catch (RecognitionException re) {\n            reportError(re);\n            recover(input,re);\n            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n        }\n        finally {\n            // do for sure before leaving\n        }\n        return retval;\n    }\n    // $ANTLR end \"expression\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#expression().mjava","pathOld":"/dev/null","sourceNew":"  // $ANTLR start \"expression\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;\n  public final JavascriptParser.expression_return expression() throws RecognitionException {\n    JavascriptParser.expression_return retval = new JavascriptParser.expression_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token EOF2=null;\n    ParserRuleReturnScope conditional1 =null;\n\n    CommonTree EOF2_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      pushFollow(FOLLOW_conditional_in_expression737);\n      conditional1=conditional();\n      state._fsp--;\n\n      adaptor.addChild(root_0, conditional1.getTree());\n\n      EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_expression739); \n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"expression\"\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#expression().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParser#expression().mjava","sourceNew":"  public final ExpressionContext expression() throws RecognitionException {\n    return expression(0);\n  }\n\n","sourceOld":"  // $ANTLR start \"expression\"\n  // src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;\n  public final JavascriptParser.expression_return expression() throws RecognitionException {\n    JavascriptParser.expression_return retval = new JavascriptParser.expression_return();\n    retval.start = input.LT(1);\n\n    CommonTree root_0 = null;\n\n    Token EOF2=null;\n    ParserRuleReturnScope conditional1 =null;\n\n    CommonTree EOF2_tree=null;\n\n    try {\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)\n      // src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !\n      {\n      root_0 = (CommonTree)adaptor.nil();\n\n\n      pushFollow(FOLLOW_conditional_in_expression737);\n      conditional1=conditional();\n      state._fsp--;\n\n      adaptor.addChild(root_0, conditional1.getTree());\n\n      EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_expression739); \n      }\n\n      retval.stop = input.LT(-1);\n\n      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);\n      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);\n\n    }\n    catch (RecognitionException re) {\n      reportError(re);\n      recover(input,re);\n      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);\n    }\n    finally {\n      // do for sure before leaving\n    }\n    return retval;\n  }\n  // $ANTLR end \"expression\"\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d23d4828afa583ebf35b4a541763af6206133458":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1441eba4282a646ef88d12acb797483db37554e":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d23d4828afa583ebf35b4a541763af6206133458"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d1441eba4282a646ef88d12acb797483db37554e"]},"commit2Childs":{"d23d4828afa583ebf35b4a541763af6206133458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2":["d1441eba4282a646ef88d12acb797483db37554e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["3623d67605fbbdfce2fadea678e2f4bbe2ab2310"],"d1441eba4282a646ef88d12acb797483db37554e":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"3623d67605fbbdfce2fadea678e2f4bbe2ab2310":["68ed114b20ecbed3707b1ee8e8d42af9c2ad1ae2"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["d23d4828afa583ebf35b4a541763af6206133458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}