{"path":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,UpdateRequestProcessor,String,DistribPhase).mjava","commits":[{"id":"849083f8095b1ffaff05a66e0b1e024617b9968d","date":1536291524,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,UpdateRequestProcessor,String,DistribPhase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor,String,DistribPhase).mjava","sourceNew":"  private TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, UpdateRequestProcessor next,\n                                         String aliasName,\n                                         DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.req = req;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasProperties = zkController.getZkStateReader().getAliases().getCollectionAliasProperties(aliasName);\n    if (aliasProperties == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasProperties);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":"  protected TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next,\n                                           String aliasName,\n                                           DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    this.thisCollection = cloudDesc.getCollectionName();\n    this.req = req;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasProperties = zkController.getZkStateReader().getAliases().getCollectionAliasProperties(aliasName);\n    if (aliasProperties == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasProperties);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":5,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RoutedAliasUpdateProcessor#RoutedAliasUpdateProcessor(SolrQueryRequest,UpdateRequestProcessor,DistribPhase,RoutedAlias).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#TimeRoutedAliasUpdateProcessor(SolrQueryRequest,UpdateRequestProcessor,String,DistribPhase).mjava","sourceNew":"  private RoutedAliasUpdateProcessor(SolrQueryRequest req, UpdateRequestProcessor next,\n                                     DistribPhase aliasDistribPhase, RoutedAlias routedAlias) {\n    super(next);\n    this.routedAlias = routedAlias;\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    final CoreContainer cc = core.getCoreContainer();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.req = req;\n    this.zkController = cc.getZkController();\n    this.cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n\n\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","sourceOld":"  private TimeRoutedAliasUpdateProcessor(SolrQueryRequest req, UpdateRequestProcessor next,\n                                         String aliasName,\n                                         DistribPhase aliasDistribPhase) {\n    super(next);\n    assert aliasDistribPhase == DistribPhase.NONE;\n    final SolrCore core = req.getCore();\n    this.thisCollection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    this.req = req;\n    CoreContainer cc = core.getCoreContainer();\n    zkController = cc.getZkController();\n    cmdDistrib = new SolrCmdDistributor(cc.getUpdateShardHandler());\n    collHandler = cc.getCollectionsHandler();\n\n    final Map<String, String> aliasProperties = zkController.getZkStateReader().getAliases().getCollectionAliasProperties(aliasName);\n    if (aliasProperties == null) {\n      throw newAliasMustExistException(); // if it did exist, we'd have a non-null map\n    }\n    try {\n      this.timeRoutedAlias = new TimeRoutedAlias(aliasName, aliasProperties);\n    } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n    }\n\n    ModifiableSolrParams outParams = new ModifiableSolrParams(req.getParams());\n    // Don't distribute these params; they will be distributed from the local processCommit separately.\n    //   (See RequestHandlerUtils.handleCommit from which this list was retrieved from)\n    outParams.remove(UpdateParams.OPTIMIZE);\n    outParams.remove(UpdateParams.COMMIT);\n    outParams.remove(UpdateParams.SOFT_COMMIT);\n    outParams.remove(UpdateParams.PREPARE_COMMIT);\n    outParams.remove(UpdateParams.ROLLBACK);\n    // Add these...\n    //  Ensures we skip over URPs prior to DistributedURP (see UpdateRequestProcessorChain)\n    outParams.set(DISTRIB_UPDATE_PARAM, DistribPhase.NONE.toString());\n    //  Signal this is a distributed search from this URP (see #wrap())\n    outParams.set(ALIAS_DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n    outParams.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(zkController.getBaseUrl(), core.getName()));\n    outParamsToLeader = outParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849083f8095b1ffaff05a66e0b1e024617b9968d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b627755385655c7cd3fb296f17593658805cf4d5"]},"commit2Childs":{"849083f8095b1ffaff05a66e0b1e024617b9968d":["b627755385655c7cd3fb296f17593658805cf4d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849083f8095b1ffaff05a66e0b1e024617b9968d"],"b627755385655c7cd3fb296f17593658805cf4d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}