{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","commits":[{"id":"977b81ae1627f47e09182475f4256febbe837a59","date":1479315329,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedIndex() throws Exception {\n    String[] versions = new String[] {\"6.2.0\", \"6.2.1\", \"6.3.0\"};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getIndexSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedIndex() throws Exception {\n    String[] versions = new String[] {\"6.2.0\", \"6.2.1\", \"6.3.0\"};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getIndexSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","sourceNew":"  public void testSortedIndex() throws Exception {\n    String[] versions = new String[] {\"6.2.0\", \"6.2.1\", \"6.3.0\"};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getMetaData().getSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSortedIndex() throws Exception {\n    String[] versions = new String[] {\"6.2.0\", \"6.2.1\", \"6.3.0\"};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getIndexSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","sourceNew":"  public void testSortedIndex() throws Exception {\n    String[] versions = new String[] {\"6.2.0\", \"6.2.1\", \"6.3.0\"};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getMetaData().getSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSortedIndex() throws Exception {\n    String[] versions = new String[] {\"6.2.0\", \"6.2.1\", \"6.3.0\"};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getIndexSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fe05f332e77cbf262172227a8ab7b0c396db6fe","date":1499084178,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","sourceNew":"  public void testSortedIndex() throws Exception {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    String[] versions = new String[] {};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getMetaData().getSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSortedIndex() throws Exception {\n    String[] versions = new String[] {\"6.2.0\", \"6.2.1\", \"6.3.0\"};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getMetaData().getSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":3,"author":"Anshum Gupta","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","sourceNew":"  public void testSortedIndex() throws Exception {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    String[] versions = new String[] {};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getMetaData().getSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSortedIndex() throws Exception {\n    String[] versions = new String[] {\"6.2.0\", \"6.2.1\", \"6.3.0\"};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getMetaData().getSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","sourceNew":"  public void testSortedIndex() throws Exception {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    String[] versions = new String[] {};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getMetaData().getSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSortedIndex() throws Exception {\n    String[] versions = new String[] {\"6.2.0\", \"6.2.1\", \"6.3.0\"};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getMetaData().getSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87655ca85dc29fc6a56702a356b312ebac60bd2d","date":1506818641,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","sourceNew":"  public void testSortedIndex() throws Exception {\n    for(String name : oldSortedNames) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(name + \".zip\");\n      assertNotNull(\"Sorted index index \" + name + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getMetaData().getSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSortedIndex() throws Exception {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    String[] versions = new String[] {};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getMetaData().getSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testSortedIndex().mjava","sourceNew":"  public void testSortedIndex() throws Exception {\n    for(String name : oldSortedNames) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(name + \".zip\");\n      assertNotNull(\"Sorted index index \" + name + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getMetaData().getSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSortedIndex() throws Exception {\n    assumeTrue(\"Reenable when 7.0 is released\", false);\n    String[] versions = new String[] {};\n    for(String version : versions) {\n      Path path = createTempDir(\"sorted\");\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"sorted.\" + version + \".zip\");\n      assertNotNull(\"Sorted index index \" + version + \" not found\", resource);\n      TestUtil.unzip(resource, path);\n\n      // TODO: more tests\n      Directory dir = newFSDirectory(path);\n\n      DirectoryReader reader = DirectoryReader.open(dir);\n      assertEquals(1, reader.leaves().size());\n      Sort sort = reader.leaves().get(0).reader().getMetaData().getSort();\n      assertNotNull(sort);\n      assertEquals(\"<long: \\\"dateDV\\\">!\", sort.toString());\n      reader.close();\n\n      // this will confirm the docs really are sorted:\n      TestUtil.checkIndex(dir);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"977b81ae1627f47e09182475f4256febbe837a59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["30c8e5574b55d57947e989443dfde611646530ee","87655ca85dc29fc6a56702a356b312ebac60bd2d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87655ca85dc29fc6a56702a356b312ebac60bd2d":["cc018b79379c67835b40b1259cd3dc931df60944"],"cc018b79379c67835b40b1259cd3dc931df60944":["31741cf1390044e38a2ec3127cf302ba841bfd75","1fe05f332e77cbf262172227a8ab7b0c396db6fe"],"30c8e5574b55d57947e989443dfde611646530ee":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","cc018b79379c67835b40b1259cd3dc931df60944"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["977b81ae1627f47e09182475f4256febbe837a59"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","977b81ae1627f47e09182475f4256febbe837a59"],"1fe05f332e77cbf262172227a8ab7b0c396db6fe":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87655ca85dc29fc6a56702a356b312ebac60bd2d"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["977b81ae1627f47e09182475f4256febbe837a59"]},"commit2Childs":{"977b81ae1627f47e09182475f4256febbe837a59":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","2e859e664a65796dadf8aaf65db6f66f3a885368","31741cf1390044e38a2ec3127cf302ba841bfd75"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["977b81ae1627f47e09182475f4256febbe837a59","2e859e664a65796dadf8aaf65db6f66f3a885368"],"87655ca85dc29fc6a56702a356b312ebac60bd2d":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc018b79379c67835b40b1259cd3dc931df60944":["87655ca85dc29fc6a56702a356b312ebac60bd2d","30c8e5574b55d57947e989443dfde611646530ee"],"30c8e5574b55d57947e989443dfde611646530ee":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["30c8e5574b55d57947e989443dfde611646530ee"],"2e859e664a65796dadf8aaf65db6f66f3a885368":[],"1fe05f332e77cbf262172227a8ab7b0c396db6fe":["cc018b79379c67835b40b1259cd3dc931df60944"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["cc018b79379c67835b40b1259cd3dc931df60944","1fe05f332e77cbf262172227a8ab7b0c396db6fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}