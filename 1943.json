{"path":"src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","commits":[{"id":"15663e8ac5d62b8a3eccef533d0384f3b4c139ea","date":1260310472,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","pathOld":"/dev/null","sourceNew":"    public void testCreateDocFrequencyMap() throws IOException{\n      RAMDirectory dir1 = new RAMDirectory();\n      RAMDirectory dir2 = new RAMDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(dir1, i+10, i==0, contents[i]); \n        initIndex(dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcher#testCreateDocFrequencyMap().mjava","sourceNew":"    public void testCreateDocFrequencyMap() throws IOException{\n      RAMDirectory dir1 = new RAMDirectory();\n      RAMDirectory dir2 = new RAMDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(dir1, i+10, i==0, contents[i]); \n        initIndex(dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n    }\n\n","sourceOld":"    public void testCreateDocFrequencyMap() throws IOException{\n      RAMDirectory dir1 = new RAMDirectory();\n      RAMDirectory dir2 = new RAMDirectory();\n      Term template = new Term(\"contents\") ;\n      String[] contents  = {\"a\", \"b\", \"c\"};\n      HashSet<Term> termsSet = new HashSet<Term>();\n      for (int i = 0; i < contents.length; i++) {\n        initIndex(dir1, i+10, i==0, contents[i]); \n        initIndex(dir2, i+5, i==0, contents[i]);\n        termsSet.add(template.createTerm(contents[i]));\n      }\n      IndexSearcher searcher1 = new IndexSearcher(dir1, true);\n      IndexSearcher searcher2 = new IndexSearcher(dir2, true);\n      MultiSearcher multiSearcher = getMultiSearcherInstance(new Searcher[]{searcher1, searcher2});\n      Map<Term,Integer> docFrequencyMap = multiSearcher.createDocFrequencyMap(termsSet);\n      assertEquals(3, docFrequencyMap.size());\n      for (int i = 0; i < contents.length; i++) {\n        assertEquals(Integer.valueOf((i*2) +15), docFrequencyMap.get(template.createTerm(contents[i])));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15663e8ac5d62b8a3eccef533d0384f3b4c139ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["15663e8ac5d62b8a3eccef533d0384f3b4c139ea"]},"commit2Childs":{"15663e8ac5d62b8a3eccef533d0384f3b4c139ea":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15663e8ac5d62b8a3eccef533d0384f3b4c139ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}