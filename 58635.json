{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#testIgnoreStoredFields().mjava","commits":[{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#testIgnoreStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testIgnoreStoredFields().mjava","sourceNew":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    LeafReader ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1));\n    LeafReader ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2));\n    \n    // with overlapping\n    ParallelLeafReader pr = new ParallelLeafReader(false,\n        new LeafReader[] {ir1, ir2},\n        new LeafReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNotNull(pr.terms(\"f1\"));\n    assertNotNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelLeafReader(false,\n        new LeafReader[] {ir2},\n        new LeafReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(pr.terms(\"f1\"));\n    assertNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelLeafReader(true,\n        new LeafReader[] {ir2},\n        new LeafReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(pr.terms(\"f1\"));\n    assertNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    try {\n      new ParallelLeafReader(true,\n        new LeafReader[0],\n        new LeafReader[] {ir1});\n      fail(\"didn't get expected exception: need a non-empty main-reader array\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    LeafReader ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1));\n    LeafReader ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2));\n    \n    // with overlapping\n    ParallelLeafReader pr = new ParallelLeafReader(false,\n        new LeafReader[] {ir1, ir2},\n        new LeafReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNotNull(pr.terms(\"f1\"));\n    assertNotNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelLeafReader(false,\n        new LeafReader[] {ir2},\n        new LeafReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(pr.terms(\"f1\"));\n    assertNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelLeafReader(true,\n        new LeafReader[] {ir2},\n        new LeafReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(pr.terms(\"f1\"));\n    assertNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    try {\n      new ParallelLeafReader(true,\n        new LeafReader[0],\n        new LeafReader[] {ir1});\n      fail(\"didn't get expected exception: need a non-empty main-reader array\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#testIgnoreStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#testIgnoreStoredFields().mjava","sourceNew":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    LeafReader ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1));\n    LeafReader ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2));\n    \n    // with overlapping\n    ParallelLeafReader pr = new ParallelLeafReader(false,\n        new LeafReader[] {ir1, ir2},\n        new LeafReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNotNull(pr.terms(\"f1\"));\n    assertNotNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelLeafReader(false,\n        new LeafReader[] {ir2},\n        new LeafReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(pr.terms(\"f1\"));\n    assertNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelLeafReader(true,\n        new LeafReader[] {ir2},\n        new LeafReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(pr.terms(\"f1\"));\n    assertNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    expectThrows(IllegalArgumentException.class, () -> {\n      new ParallelLeafReader(true,\n        new LeafReader[0],\n        new LeafReader[] {ir1});\n    });\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    LeafReader ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1));\n    LeafReader ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2));\n    \n    // with overlapping\n    ParallelLeafReader pr = new ParallelLeafReader(false,\n        new LeafReader[] {ir1, ir2},\n        new LeafReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNotNull(pr.terms(\"f1\"));\n    assertNotNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelLeafReader(false,\n        new LeafReader[] {ir2},\n        new LeafReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(pr.terms(\"f1\"));\n    assertNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelLeafReader(true,\n        new LeafReader[] {ir2},\n        new LeafReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(pr.terms(\"f1\"));\n    assertNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    try {\n      new ParallelLeafReader(true,\n        new LeafReader[0],\n        new LeafReader[] {ir1});\n      fail(\"didn't get expected exception: need a non-empty main-reader array\");\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":["6e09a3a223be07d75777515a717312813221fe58"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#testIgnoreStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#testIgnoreStoredFields().mjava","sourceNew":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    LeafReader ir1 = getOnlyLeafReader(DirectoryReader.open(dir1));\n    LeafReader ir2 = getOnlyLeafReader(DirectoryReader.open(dir2));\n    \n    // with overlapping\n    ParallelLeafReader pr = new ParallelLeafReader(false,\n        new LeafReader[] {ir1, ir2},\n        new LeafReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNotNull(pr.terms(\"f1\"));\n    assertNotNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelLeafReader(false,\n        new LeafReader[] {ir2},\n        new LeafReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(pr.terms(\"f1\"));\n    assertNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelLeafReader(true,\n        new LeafReader[] {ir2},\n        new LeafReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(pr.terms(\"f1\"));\n    assertNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    expectThrows(IllegalArgumentException.class, () -> {\n      new ParallelLeafReader(true,\n        new LeafReader[0],\n        new LeafReader[] {ir1});\n    });\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIgnoreStoredFields() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    LeafReader ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1));\n    LeafReader ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2));\n    \n    // with overlapping\n    ParallelLeafReader pr = new ParallelLeafReader(false,\n        new LeafReader[] {ir1, ir2},\n        new LeafReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNotNull(pr.terms(\"f1\"));\n    assertNotNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // no stored fields at all\n    pr = new ParallelLeafReader(false,\n        new LeafReader[] {ir2},\n        new LeafReader[0]);\n    assertNull(pr.document(0).get(\"f1\"));\n    assertNull(pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(pr.terms(\"f1\"));\n    assertNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // without overlapping\n    pr = new ParallelLeafReader(true,\n        new LeafReader[] {ir2},\n        new LeafReader[] {ir1});\n    assertEquals(\"v1\", pr.document(0).get(\"f1\"));\n    assertEquals(\"v1\", pr.document(0).get(\"f2\"));\n    assertNull(pr.document(0).get(\"f3\"));\n    assertNull(pr.document(0).get(\"f4\"));\n    // check that fields are there\n    assertNull(pr.terms(\"f1\"));\n    assertNull(pr.terms(\"f2\"));\n    assertNotNull(pr.terms(\"f3\"));\n    assertNotNull(pr.terms(\"f4\"));\n    pr.close();\n    \n    // no main readers\n    expectThrows(IllegalArgumentException.class, () -> {\n      new ParallelLeafReader(true,\n        new LeafReader[0],\n        new LeafReader[] {ir1});\n    });\n    \n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["05fe562aa248790944d43cdd478f512572835ba0"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"05fe562aa248790944d43cdd478f512572835ba0":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}