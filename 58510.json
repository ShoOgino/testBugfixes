{"path":"lucene/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","commits":[{"id":"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e","date":1327757020,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n\n    Assume.assumeTrue(!(Codec.getDefault() instanceof PreFlexRWCodec));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n        if (random.nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random, dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random, 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random.nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random.nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n\n    Assume.assumeTrue(!(Codec.getDefault() instanceof PreFlexRWCodec));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n        if (random.nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random, dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random, 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random.nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random.nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n\n    Assume.assumeTrue(!(Codec.getDefault() instanceof PreFlexRWCodec));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n        if (random.nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random, dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random, 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random.nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random.nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMixedCodecs#test().mjava","sourceNew":"  public void test() throws Exception {\n\n    Assume.assumeTrue(!(Codec.getDefault() instanceof PreFlexRWCodec));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n        if (random.nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random, dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random, 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random.nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random.nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n\n    Assume.assumeTrue(!(Codec.getDefault() instanceof PreFlexRWCodec));\n\n    final int NUM_DOCS = atLeast(1000);\n\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = null;\n\n    int docsLeftInThisSegment = 0;\n    \n    int docUpto = 0;\n    while (docUpto < NUM_DOCS) {\n      if (docsLeftInThisSegment == 0) {\n        final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n        if (random.nextBoolean()) {\n          // Make sure we aggressively mix in SimpleText\n          // since it has different impls for all codec\n          // formats...\n          iwc.setCodec(Codec.forName(\"SimpleText\"));\n        }\n        if (w != null) {\n          w.close();\n        }\n        w = new RandomIndexWriter(random, dir, iwc);\n        docsLeftInThisSegment = _TestUtil.nextInt(random, 10, 100);\n      }\n      final Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(docUpto), StringField.TYPE_STORED));\n      w.addDocument(doc);\n      docUpto++;\n      docsLeftInThisSegment--;\n    }\n\n    // Random delete half the docs:\n    final Set<Integer> deleted = new HashSet<Integer>();\n    while(deleted.size() < NUM_DOCS/2) {\n      final Integer toDelete = random.nextInt(NUM_DOCS);\n      if (!deleted.contains(toDelete)) {\n        deleted.add(toDelete);\n        w.deleteDocuments(new Term(\"id\", String.valueOf(toDelete)));\n        if (random.nextInt(17) == 6) {\n          final IndexReader r = w.getReader();\n          assertEquals(NUM_DOCS - deleted.size(), r.numDocs());\n          r.close();\n        }\n      }\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}