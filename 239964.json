{"path":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testNodePreferenceRulesBase().mjava","commits":[{"id":"78d42a7a80ee59932aca8a1fe42b53cf202e75ad","date":1566412272,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testNodePreferenceRulesBase().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testNodePreferenceRulesBase() throws Exception {\n    SolrCore testCore = null;\n    HttpShardHandlerFactory fac = new HttpShardHandlerFactory();\n    fac.init(new PluginInfo(null, Collections.EMPTY_MAP));\n    SolrQueryRequestBase req;\n    NamedList<String> params = new NamedList<>();\n    List<Replica> replicas = getBasicReplicaList();\n\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n\n    req = new SolrQueryRequestBase(testCore, params.toSolrParams()) {};\n    ReplicaListTransformer rlt = fac.getReplicaListTransformer(req);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node3\", replicas.get(2).getNodeName());\n    req.close();\n\n    params.setVal(0, \"1\");\n    req = new SolrQueryRequestBase(testCore, params.toSolrParams()) {};\n    rlt = fac.getReplicaListTransformer(req);\n    rlt.transform(replicas);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node3\", replicas.get(1).getNodeName());\n    assertEquals(\"node1\", replicas.get(2).getNodeName());\n    req.close();\n\n    params.setVal(0, \"2\");\n    req = new SolrQueryRequestBase(testCore, params.toSolrParams()) {};\n    rlt = fac.getReplicaListTransformer(req);\n    rlt.transform(replicas);\n    assertEquals(\"node3\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    req.close();\n\n    params.setVal(0, \"3\");\n    req = new SolrQueryRequestBase(testCore, params.toSolrParams()) {};\n    rlt = fac.getReplicaListTransformer(req);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node3\", replicas.get(2).getNodeName());\n    req.close();\n\n    // Add a replica so that sorting by replicaType:TLOG can cause a tie\n    replicas.add(\n      new Replica(\n        \"node4\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node4\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n\n    // replicaType and replicaBase combined rule param\n    rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.setVal(0, \"0\");\n    params.setVal(1, rulesParam);\n    req = new SolrQueryRequestBase(testCore, params.toSolrParams()) {};\n    rlt = fac.getReplicaListTransformer(req);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node4\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n    req.close();\n\n    params.setVal(0, \"1\");\n    req = new SolrQueryRequestBase(testCore, params.toSolrParams()) {};\n    rlt = fac.getReplicaListTransformer(req);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n    req.close();\n    fac.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestHttpShardHandlerFactory#testNodePreferenceRulesBase().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void testNodePreferenceRulesBase() throws Exception {\n    SolrCore testCore = null;\n    HttpShardHandlerFactory fac = new HttpShardHandlerFactory();\n    fac.init(new PluginInfo(null, Collections.EMPTY_MAP));\n    SolrQueryRequestBase req;\n    NamedList<String> params = new NamedList<>();\n    List<Replica> replicas = getBasicReplicaList();\n\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n\n    req = new SolrQueryRequestBase(testCore, params.toSolrParams()) {};\n    ReplicaListTransformer rlt = fac.getReplicaListTransformer(req);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node3\", replicas.get(2).getNodeName());\n    req.close();\n\n    params.setVal(0, \"1\");\n    req = new SolrQueryRequestBase(testCore, params.toSolrParams()) {};\n    rlt = fac.getReplicaListTransformer(req);\n    rlt.transform(replicas);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node3\", replicas.get(1).getNodeName());\n    assertEquals(\"node1\", replicas.get(2).getNodeName());\n    req.close();\n\n    params.setVal(0, \"2\");\n    req = new SolrQueryRequestBase(testCore, params.toSolrParams()) {};\n    rlt = fac.getReplicaListTransformer(req);\n    rlt.transform(replicas);\n    assertEquals(\"node3\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    req.close();\n\n    params.setVal(0, \"3\");\n    req = new SolrQueryRequestBase(testCore, params.toSolrParams()) {};\n    rlt = fac.getReplicaListTransformer(req);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node3\", replicas.get(2).getNodeName());\n    req.close();\n\n    // Add a replica so that sorting by replicaType:TLOG can cause a tie\n    replicas.add(\n      new Replica(\n        \"node4\",\n        map(\n          ZkStateReader.BASE_URL_PROP, \"http://host2_2:8983/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node4\",\n          ZkStateReader.CORE_NAME_PROP, \"collection1\",\n          ZkStateReader.REPLICA_TYPE, \"TLOG\"\n        )\n      )\n    );\n\n    // replicaType and replicaBase combined rule param\n    rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":NRT,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG,\" + \n      ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.setVal(0, \"0\");\n    params.setVal(1, rulesParam);\n    req = new SolrQueryRequestBase(testCore, params.toSolrParams()) {};\n    rlt = fac.getReplicaListTransformer(req);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node4\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n    req.close();\n\n    params.setVal(0, \"1\");\n    req = new SolrQueryRequestBase(testCore, params.toSolrParams()) {};\n    rlt = fac.getReplicaListTransformer(req);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node4\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n    assertEquals(\"node3\", replicas.get(3).getNodeName());\n    req.close();\n    fac.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["833432c363468a5df50f87446a68015404b1fbcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}