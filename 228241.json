{"path":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testReset().mjava","commits":[{"id":"280bf88d9ed3d9923e393961b594d9553970e4fd","date":1343099563,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testReset().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/DoubleMetaphoneFilterFactoryTest[TestDoubleMetaphoneFilterFactory]#testReset().mjava","sourceNew":"  /**\n   * Ensure that reset() removes any state (buffered tokens)\n   */\n  public void testReset() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    factory.init(new HashMap<String, String>());\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    CharTermAttribute termAtt = filteredStream.addAttribute(CharTermAttribute.class);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    \n    filteredStream.reset();\n    assertTrue(filteredStream.incrementToken());\n    assertEquals(13, termAtt.length());\n    assertEquals(\"international\", termAtt.toString());\n    filteredStream.reset();\n    \n    // ensure there are no more tokens, such as ANTRNXNL\n    assertFalse(filteredStream.incrementToken());\n  }\n\n","sourceOld":"  /**\n   * Ensure that reset() removes any state (buffered tokens)\n   */\n  public void testReset() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    factory.init(new HashMap<String, String>());\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    CharTermAttribute termAtt = filteredStream.addAttribute(CharTermAttribute.class);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    \n    filteredStream.reset();\n    assertTrue(filteredStream.incrementToken());\n    assertEquals(13, termAtt.length());\n    assertEquals(\"international\", termAtt.toString());\n    filteredStream.reset();\n    \n    // ensure there are no more tokens, such as ANTRNXNL\n    assertFalse(filteredStream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/DoubleMetaphoneFilterFactoryTest#testReset().mjava","sourceNew":"  /**\n   * Ensure that reset() removes any state (buffered tokens)\n   */\n  public void testReset() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    factory.init(new HashMap<String, String>());\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    CharTermAttribute termAtt = filteredStream.addAttribute(CharTermAttribute.class);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    \n    filteredStream.reset();\n    assertTrue(filteredStream.incrementToken());\n    assertEquals(13, termAtt.length());\n    assertEquals(\"international\", termAtt.toString());\n    filteredStream.reset();\n    \n    // ensure there are no more tokens, such as ANTRNXNL\n    assertFalse(filteredStream.incrementToken());\n  }\n\n","sourceOld":"  /**\n   * Ensure that reset() removes any state (buffered tokens)\n   */\n  public void testReset() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    factory.init(new HashMap<String, String>());\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    CharTermAttribute termAtt = filteredStream.addAttribute(CharTermAttribute.class);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    \n    filteredStream.reset();\n    assertTrue(filteredStream.incrementToken());\n    assertEquals(13, termAtt.length());\n    assertEquals(\"international\", termAtt.toString());\n    filteredStream.reset();\n    \n    // ensure there are no more tokens, such as ANTRNXNL\n    assertFalse(filteredStream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/DoubleMetaphoneFilterFactoryTest#testReset().mjava","sourceNew":"  /**\n   * Ensure that reset() removes any state (buffered tokens)\n   */\n  public void testReset() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    factory.init(new HashMap<String, String>());\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    CharTermAttribute termAtt = filteredStream.addAttribute(CharTermAttribute.class);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    \n    filteredStream.reset();\n    assertTrue(filteredStream.incrementToken());\n    assertEquals(13, termAtt.length());\n    assertEquals(\"international\", termAtt.toString());\n    filteredStream.reset();\n    \n    // ensure there are no more tokens, such as ANTRNXNL\n    assertFalse(filteredStream.incrementToken());\n  }\n\n","sourceOld":"  /**\n   * Ensure that reset() removes any state (buffered tokens)\n   */\n  public void testReset() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    factory.init(new HashMap<String, String>());\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    CharTermAttribute termAtt = filteredStream.addAttribute(CharTermAttribute.class);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    \n    filteredStream.reset();\n    assertTrue(filteredStream.incrementToken());\n    assertEquals(13, termAtt.length());\n    assertEquals(\"international\", termAtt.toString());\n    filteredStream.reset();\n    \n    // ensure there are no more tokens, such as ANTRNXNL\n    assertFalse(filteredStream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/DoubleMetaphoneFilterFactoryTest#testReset().mjava","sourceNew":"  /**\n   * Ensure that reset() removes any state (buffered tokens)\n   */\n  public void testReset() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    factory.init(new HashMap<String, String>());\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    CharTermAttribute termAtt = filteredStream.addAttribute(CharTermAttribute.class);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    \n    filteredStream.reset();\n    assertTrue(filteredStream.incrementToken());\n    assertEquals(13, termAtt.length());\n    assertEquals(\"international\", termAtt.toString());\n    filteredStream.reset();\n    \n    // ensure there are no more tokens, such as ANTRNXNL\n    assertFalse(filteredStream.incrementToken());\n  }\n\n","sourceOld":"  /**\n   * Ensure that reset() removes any state (buffered tokens)\n   */\n  public void testReset() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    factory.init(new HashMap<String, String>());\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    CharTermAttribute termAtt = filteredStream.addAttribute(CharTermAttribute.class);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    \n    filteredStream.reset();\n    assertTrue(filteredStream.incrementToken());\n    assertEquals(13, termAtt.length());\n    assertEquals(\"international\", termAtt.toString());\n    filteredStream.reset();\n    \n    // ensure there are no more tokens, such as ANTRNXNL\n    assertFalse(filteredStream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testReset().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testReset().mjava","sourceNew":"  /**\n   * Ensure that reset() removes any state (buffered tokens)\n   */\n  public void testReset() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory(new HashMap<String, String>());\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    CharTermAttribute termAtt = filteredStream.addAttribute(CharTermAttribute.class);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    \n    filteredStream.reset();\n    assertTrue(filteredStream.incrementToken());\n    assertEquals(13, termAtt.length());\n    assertEquals(\"international\", termAtt.toString());\n    filteredStream.reset();\n    \n    // ensure there are no more tokens, such as ANTRNXNL\n    assertFalse(filteredStream.incrementToken());\n  }\n\n","sourceOld":"  /**\n   * Ensure that reset() removes any state (buffered tokens)\n   */\n  public void testReset() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory();\n    factory.init(new HashMap<String, String>());\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    CharTermAttribute termAtt = filteredStream.addAttribute(CharTermAttribute.class);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    \n    filteredStream.reset();\n    assertTrue(filteredStream.incrementToken());\n    assertEquals(13, termAtt.length());\n    assertEquals(\"international\", termAtt.toString());\n    filteredStream.reset();\n    \n    // ensure there are no more tokens, such as ANTRNXNL\n    assertFalse(filteredStream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","date":1379858263,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestDoubleMetaphoneFilterFactory#testReset().mjava","sourceNew":null,"sourceOld":"  /**\n   * Ensure that reset() removes any state (buffered tokens)\n   */\n  public void testReset() throws Exception {\n    DoubleMetaphoneFilterFactory factory = new DoubleMetaphoneFilterFactory(new HashMap<String, String>());\n    TokenStream inputStream = new MockTokenizer(new StringReader(\"international\"), MockTokenizer.WHITESPACE, false);\n\n    TokenStream filteredStream = factory.create(inputStream);\n    CharTermAttribute termAtt = filteredStream.addAttribute(CharTermAttribute.class);\n    assertEquals(DoubleMetaphoneFilter.class, filteredStream.getClass());\n    \n    filteredStream.reset();\n    assertTrue(filteredStream.incrementToken());\n    assertEquals(13, termAtt.length());\n    assertEquals(\"international\", termAtt.toString());\n    filteredStream.reset();\n    \n    // ensure there are no more tokens, such as ANTRNXNL\n    assertFalse(filteredStream.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"280bf88d9ed3d9923e393961b594d9553970e4fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","280bf88d9ed3d9923e393961b594d9553970e4fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"]},"commit2Childs":{"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"280bf88d9ed3d9923e393961b594d9553970e4fd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","280bf88d9ed3d9923e393961b594d9553970e4fd","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}