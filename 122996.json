{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollWithDefaultClusterPropertiesNewFormat().mjava","commits":[{"id":"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e","date":1538649775,"type":2,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollWithDefaultClusterPropertiesNewFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollWithDefaultClusterProperties().mjava","sourceNew":"  @Test\n  public void testCreateCollWithDefaultClusterPropertiesNewFormat() throws Exception {\n    String COLL_NAME = \"CollWithDefaultClusterProperties\";\n    try {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults : {collection:{numShards : 2 , nrtReplicas : 2}}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n      for (int i = 0; i < 10; i++) {\n        Map m = cluster.getSolrClient().getZkStateReader().getClusterProperty(COLLECTION_DEF, null);\n        if (m != null) break;\n        Thread.sleep(10);\n      }\n      Object clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      CollectionAdminResponse response = CollectionAdminRequest\n          .createCollection(COLL_NAME, \"conf\", null, null, null, null)\n          .process(cluster.getSolrClient());\n      assertEquals(0, response.getStatus());\n      assertTrue(response.isSuccess());\n\n      DocCollection coll = cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollection(COLL_NAME);\n      Map<String, Slice> slices = coll.getSlicesMap();\n      assertEquals(2, slices.size());\n      for (Slice slice : slices.values()) {\n        assertEquals(2, slice.getReplicas().size());\n      }\n      CollectionAdminRequest.deleteCollection(COLL_NAME).process(cluster.getSolrClient());\n\n      // unset only a single value\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{\\n\" +\n              \"  \\\"set-obj-property\\\": {\\n\" +\n              \"    \\\"defaults\\\" : {\\n\" +\n              \"      \\\"collection\\\": {\\n\" +\n              \"        \\\"nrtReplicas\\\": null\\n\" +\n              \"      }\\n\" +\n              \"    }\\n\" +\n              \"  }\\n\" +\n              \"}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // we use a timeout so that the change made in ZK is reflected in the watched copy inside ZkStateReader\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut())  {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: {collection:null}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // assert that it is really gone in both old and new paths\n      timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut()) {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP), null);\n      assertNull(clusterProperty);\n    } finally {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: null}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollWithDefaultClusterProperties() throws Exception {\n    String COLL_NAME = \"CollWithDefaultClusterProperties\";\n    try {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{collectionDefaults:{numShards : 2 , nrtReplicas : 2}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n      for (int i = 0; i < 10; i++) {\n        Map m = cluster.getSolrClient().getZkStateReader().getClusterProperty(COLLECTION_DEF, null);\n        if (m != null) break;\n        Thread.sleep(10);\n      }\n      Object clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, NRT_REPLICAS), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      CollectionAdminResponse response = CollectionAdminRequest\n          .createCollection(COLL_NAME, \"conf\", null, null, null, null)\n          .process(cluster.getSolrClient());\n      assertEquals(0, response.getStatus());\n      assertTrue(response.isSuccess());\n\n      DocCollection coll = cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollection(COLL_NAME);\n      Map<String, Slice> slices = coll.getSlicesMap();\n      assertEquals(2, slices.size());\n      for (Slice slice : slices.values()) {\n        assertEquals(2, slice.getReplicas().size());\n      }\n      CollectionAdminRequest.deleteCollection(COLL_NAME).process(cluster.getSolrClient());\n    } finally {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{collectionDefaults: null}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollWithDefaultClusterPropertiesNewFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollWithDefaultClusterPropertiesNewFormat().mjava","sourceNew":"  @Test\n  public void testCreateCollWithDefaultClusterPropertiesNewFormat() throws Exception {\n    String COLL_NAME = \"CollWithDefaultClusterProperties\";\n    try {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults : {collection:{numShards : 2 , nrtReplicas : 2}}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n      for (int i = 0; i < 10; i++) {\n        Map m = cluster.getSolrClient().getZkStateReader().getClusterProperty(COLLECTION_DEF, null);\n        if (m != null) break;\n        Thread.sleep(10);\n      }\n      Object clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      CollectionAdminResponse response = CollectionAdminRequest\n          .createCollection(COLL_NAME, \"conf\", null, null, null, null)\n          .process(cluster.getSolrClient());\n      assertEquals(0, response.getStatus());\n      assertTrue(response.isSuccess());\n      cluster.waitForActiveCollection(COLL_NAME, 2, 4);\n\n      DocCollection coll = cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollection(COLL_NAME);\n      Map<String, Slice> slices = coll.getSlicesMap();\n      assertEquals(2, slices.size());\n      for (Slice slice : slices.values()) {\n        assertEquals(2, slice.getReplicas().size());\n      }\n      CollectionAdminRequest.deleteCollection(COLL_NAME).process(cluster.getSolrClient());\n\n      // unset only a single value\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{\\n\" +\n              \"  \\\"set-obj-property\\\": {\\n\" +\n              \"    \\\"defaults\\\" : {\\n\" +\n              \"      \\\"collection\\\": {\\n\" +\n              \"        \\\"nrtReplicas\\\": null\\n\" +\n              \"      }\\n\" +\n              \"    }\\n\" +\n              \"  }\\n\" +\n              \"}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // we use a timeout so that the change made in ZK is reflected in the watched copy inside ZkStateReader\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut())  {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: {collection:null}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // assert that it is really gone in both old and new paths\n      timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut()) {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP), null);\n      assertNull(clusterProperty);\n    } finally {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: null}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollWithDefaultClusterPropertiesNewFormat() throws Exception {\n    String COLL_NAME = \"CollWithDefaultClusterProperties\";\n    try {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults : {collection:{numShards : 2 , nrtReplicas : 2}}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n      for (int i = 0; i < 10; i++) {\n        Map m = cluster.getSolrClient().getZkStateReader().getClusterProperty(COLLECTION_DEF, null);\n        if (m != null) break;\n        Thread.sleep(10);\n      }\n      Object clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      CollectionAdminResponse response = CollectionAdminRequest\n          .createCollection(COLL_NAME, \"conf\", null, null, null, null)\n          .process(cluster.getSolrClient());\n      assertEquals(0, response.getStatus());\n      assertTrue(response.isSuccess());\n\n      DocCollection coll = cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollection(COLL_NAME);\n      Map<String, Slice> slices = coll.getSlicesMap();\n      assertEquals(2, slices.size());\n      for (Slice slice : slices.values()) {\n        assertEquals(2, slice.getReplicas().size());\n      }\n      CollectionAdminRequest.deleteCollection(COLL_NAME).process(cluster.getSolrClient());\n\n      // unset only a single value\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{\\n\" +\n              \"  \\\"set-obj-property\\\": {\\n\" +\n              \"    \\\"defaults\\\" : {\\n\" +\n              \"      \\\"collection\\\": {\\n\" +\n              \"        \\\"nrtReplicas\\\": null\\n\" +\n              \"      }\\n\" +\n              \"    }\\n\" +\n              \"  }\\n\" +\n              \"}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // we use a timeout so that the change made in ZK is reflected in the watched copy inside ZkStateReader\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut())  {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: {collection:null}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // assert that it is really gone in both old and new paths\n      timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut()) {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP), null);\n      assertNull(clusterProperty);\n    } finally {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: null}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"370de78cf1e0c4c9db1d278b09e8fc3312379d8a","date":1544410323,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollWithDefaultClusterPropertiesNewFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollWithDefaultClusterPropertiesNewFormat().mjava","sourceNew":"  @Test\n  public void testCreateCollWithDefaultClusterPropertiesNewFormat() throws Exception {\n    String COLL_NAME = \"CollWithDefaultClusterProperties\";\n    try {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults : {collection:{numShards : 2 , nrtReplicas : 2}}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n      for (int i = 0; i < 300; i++) {\n        Map m = cluster.getSolrClient().getZkStateReader().getClusterProperty(COLLECTION_DEF, null);\n        if (m != null) break;\n        Thread.sleep(10);\n      }\n      Object clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      CollectionAdminResponse response = CollectionAdminRequest\n          .createCollection(COLL_NAME, \"conf\", null, null, null, null)\n          .process(cluster.getSolrClient());\n      assertEquals(0, response.getStatus());\n      assertTrue(response.isSuccess());\n      cluster.waitForActiveCollection(COLL_NAME, 2, 4);\n\n      DocCollection coll = cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollection(COLL_NAME);\n      Map<String, Slice> slices = coll.getSlicesMap();\n      assertEquals(2, slices.size());\n      for (Slice slice : slices.values()) {\n        assertEquals(2, slice.getReplicas().size());\n      }\n      CollectionAdminRequest.deleteCollection(COLL_NAME).process(cluster.getSolrClient());\n\n      // unset only a single value\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{\\n\" +\n              \"  \\\"set-obj-property\\\": {\\n\" +\n              \"    \\\"defaults\\\" : {\\n\" +\n              \"      \\\"collection\\\": {\\n\" +\n              \"        \\\"nrtReplicas\\\": null\\n\" +\n              \"      }\\n\" +\n              \"    }\\n\" +\n              \"  }\\n\" +\n              \"}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // we use a timeout so that the change made in ZK is reflected in the watched copy inside ZkStateReader\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut())  {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: {collection:null}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // assert that it is really gone in both old and new paths\n      timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut()) {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP), null);\n      assertNull(clusterProperty);\n    } finally {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: null}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollWithDefaultClusterPropertiesNewFormat() throws Exception {\n    String COLL_NAME = \"CollWithDefaultClusterProperties\";\n    try {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults : {collection:{numShards : 2 , nrtReplicas : 2}}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n      for (int i = 0; i < 10; i++) {\n        Map m = cluster.getSolrClient().getZkStateReader().getClusterProperty(COLLECTION_DEF, null);\n        if (m != null) break;\n        Thread.sleep(10);\n      }\n      Object clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      CollectionAdminResponse response = CollectionAdminRequest\n          .createCollection(COLL_NAME, \"conf\", null, null, null, null)\n          .process(cluster.getSolrClient());\n      assertEquals(0, response.getStatus());\n      assertTrue(response.isSuccess());\n      cluster.waitForActiveCollection(COLL_NAME, 2, 4);\n\n      DocCollection coll = cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollection(COLL_NAME);\n      Map<String, Slice> slices = coll.getSlicesMap();\n      assertEquals(2, slices.size());\n      for (Slice slice : slices.values()) {\n        assertEquals(2, slice.getReplicas().size());\n      }\n      CollectionAdminRequest.deleteCollection(COLL_NAME).process(cluster.getSolrClient());\n\n      // unset only a single value\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{\\n\" +\n              \"  \\\"set-obj-property\\\": {\\n\" +\n              \"    \\\"defaults\\\" : {\\n\" +\n              \"      \\\"collection\\\": {\\n\" +\n              \"        \\\"nrtReplicas\\\": null\\n\" +\n              \"      }\\n\" +\n              \"    }\\n\" +\n              \"  }\\n\" +\n              \"}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // we use a timeout so that the change made in ZK is reflected in the watched copy inside ZkStateReader\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut())  {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: {collection:null}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // assert that it is really gone in both old and new paths\n      timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut()) {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP), null);\n      assertNull(clusterProperty);\n    } finally {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: null}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollWithDefaultClusterPropertiesNewFormat().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollWithDefaultClusterPropertiesNewFormat().mjava","sourceNew":"  @Test\n  public void testCreateCollWithDefaultClusterPropertiesNewFormat() throws Exception {\n    String COLL_NAME = \"CollWithDefaultClusterProperties\";\n    try {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults : {collection:{numShards : 2 , nrtReplicas : 2}}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n      for (int i = 0; i < 300; i++) {\n        @SuppressWarnings({\"rawtypes\"})\n        Map m = cluster.getSolrClient().getZkStateReader().getClusterProperty(COLLECTION_DEF, null);\n        if (m != null) break;\n        Thread.sleep(10);\n      }\n      Object clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      CollectionAdminResponse response = CollectionAdminRequest\n          .createCollection(COLL_NAME, \"conf\", null, null, null, null)\n          .process(cluster.getSolrClient());\n      assertEquals(0, response.getStatus());\n      assertTrue(response.isSuccess());\n      cluster.waitForActiveCollection(COLL_NAME, 2, 4);\n\n      DocCollection coll = cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollection(COLL_NAME);\n      Map<String, Slice> slices = coll.getSlicesMap();\n      assertEquals(2, slices.size());\n      for (Slice slice : slices.values()) {\n        assertEquals(2, slice.getReplicas().size());\n      }\n      CollectionAdminRequest.deleteCollection(COLL_NAME).process(cluster.getSolrClient());\n\n      // unset only a single value\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{\\n\" +\n              \"  \\\"set-obj-property\\\": {\\n\" +\n              \"    \\\"defaults\\\" : {\\n\" +\n              \"      \\\"collection\\\": {\\n\" +\n              \"        \\\"nrtReplicas\\\": null\\n\" +\n              \"      }\\n\" +\n              \"    }\\n\" +\n              \"  }\\n\" +\n              \"}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // we use a timeout so that the change made in ZK is reflected in the watched copy inside ZkStateReader\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut())  {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: {collection:null}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // assert that it is really gone in both old and new paths\n      timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut()) {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP), null);\n      assertNull(clusterProperty);\n    } finally {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: null}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollWithDefaultClusterPropertiesNewFormat() throws Exception {\n    String COLL_NAME = \"CollWithDefaultClusterProperties\";\n    try {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults : {collection:{numShards : 2 , nrtReplicas : 2}}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n      for (int i = 0; i < 300; i++) {\n        Map m = cluster.getSolrClient().getZkStateReader().getClusterProperty(COLLECTION_DEF, null);\n        if (m != null) break;\n        Thread.sleep(10);\n      }\n      Object clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n      assertEquals(\"2\", String.valueOf(clusterProperty));\n      CollectionAdminResponse response = CollectionAdminRequest\n          .createCollection(COLL_NAME, \"conf\", null, null, null, null)\n          .process(cluster.getSolrClient());\n      assertEquals(0, response.getStatus());\n      assertTrue(response.isSuccess());\n      cluster.waitForActiveCollection(COLL_NAME, 2, 4);\n\n      DocCollection coll = cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollection(COLL_NAME);\n      Map<String, Slice> slices = coll.getSlicesMap();\n      assertEquals(2, slices.size());\n      for (Slice slice : slices.values()) {\n        assertEquals(2, slice.getReplicas().size());\n      }\n      CollectionAdminRequest.deleteCollection(COLL_NAME).process(cluster.getSolrClient());\n\n      // unset only a single value\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{\\n\" +\n              \"  \\\"set-obj-property\\\": {\\n\" +\n              \"    \\\"defaults\\\" : {\\n\" +\n              \"      \\\"collection\\\": {\\n\" +\n              \"        \\\"nrtReplicas\\\": null\\n\" +\n              \"      }\\n\" +\n              \"    }\\n\" +\n              \"  }\\n\" +\n              \"}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // we use a timeout so that the change made in ZK is reflected in the watched copy inside ZkStateReader\n      TimeOut timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut())  {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NRT_REPLICAS), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n\n      rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: {collection:null}}}\")\n          .build()\n          .process(cluster.getSolrClient());\n      // assert that it is really gone in both old and new paths\n      timeOut = new TimeOut(5, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n      while (!timeOut.hasTimedOut()) {\n        clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(DEFAULTS, COLLECTION, NUM_SHARDS_PROP), null);\n        if (clusterProperty == null)  break;\n      }\n      assertNull(clusterProperty);\n      clusterProperty = cluster.getSolrClient().getZkStateReader().getClusterProperty(ImmutableList.of(COLLECTION_DEF, NUM_SHARDS_PROP), null);\n      assertNull(clusterProperty);\n    } finally {\n      V2Response rsp = new V2Request.Builder(\"/cluster\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .withPayload(\"{set-obj-property:{defaults: null}}\")\n          .build()\n          .process(cluster.getSolrClient());\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"370de78cf1e0c4c9db1d278b09e8fc3312379d8a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["370de78cf1e0c4c9db1d278b09e8fc3312379d8a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e"],"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"370de78cf1e0c4c9db1d278b09e8fc3312379d8a":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["370de78cf1e0c4c9db1d278b09e8fc3312379d8a"],"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}