{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(HttpPost).mjava","commits":[{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(HttpPost).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(PostMethod).mjava","sourceNew":"  private NamedList<?> getNamedListResponse(HttpPost method) throws IOException {\n    InputStream input = null;\n    NamedList<?> result = null;\n    try {\n      HttpResponse response = myHttpClient.execute(method);\n      int status = response.getStatusLine().getStatusCode();\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      input = response.getEntity().getContent();\n      result = (NamedList<?>)new JavaBinCodec().unmarshal(input);\n    } finally {\n      try {\n        if (input != null) {\n          input.close();\n        }\n      } catch (Exception e) {\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private NamedList<?> getNamedListResponse(PostMethod method) throws IOException {\n    try {\n      int status = myHttpClient.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return (NamedList<?>) new JavaBinCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2425308ebcd91b538a601df94ae1551ccaab2bb","date":1340702883,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(HttpPost).mjava","sourceNew":null,"sourceOld":"  private NamedList<?> getNamedListResponse(HttpPost method) throws IOException {\n    InputStream input = null;\n    NamedList<?> result = null;\n    try {\n      HttpResponse response = myHttpClient.execute(method);\n      int status = response.getStatusLine().getStatusCode();\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      input = response.getEntity().getContent();\n      result = (NamedList<?>)new JavaBinCodec().unmarshal(input);\n    } finally {\n      try {\n        if (input != null) {\n          input.close();\n        }\n      } catch (Exception e) {\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(HttpPost).mjava","sourceNew":null,"sourceOld":"  private NamedList<?> getNamedListResponse(HttpPost method) throws IOException {\n    InputStream input = null;\n    NamedList<?> result = null;\n    try {\n      HttpResponse response = myHttpClient.execute(method);\n      int status = response.getStatusLine().getStatusCode();\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      input = response.getEntity().getContent();\n      result = (NamedList<?>)new JavaBinCodec().unmarshal(input);\n    } finally {\n      try {\n        if (input != null) {\n          input.close();\n        }\n      } catch (Exception e) {\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2425308ebcd91b538a601df94ae1551ccaab2bb"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f2425308ebcd91b538a601df94ae1551ccaab2bb"],"f2425308ebcd91b538a601df94ae1551ccaab2bb":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}