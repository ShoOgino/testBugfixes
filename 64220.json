{"path":"client/java/solrj/src/org/apache/solr/client/solrj/response/LukeResponse.FieldInfo#read(NamedList[Object]).mjava","commits":[{"id":"acdd729ace9db5d0803eea4849ddc3c2ba196127","date":1181861605,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/response/LukeResponse.FieldInfo#read(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public void read( NamedList<Object> nl )\n    {\n      for( Map.Entry<String, Object> entry : nl ) {\n        if( \"type\".equals( entry.getKey() ) ) {\n          type = (String)entry.getValue();\n        }\n        else if( \"schema\".equals( entry.getKey() ) ) {\n          schema = (String)entry.getValue();\n        }\n        else if( \"docs\".equals( entry.getKey() ) ) {\n          docs = (Integer)entry.getValue();\n        }\n        else if( \"distinct\".equals( entry.getKey() ) ) {\n          distinct = (Integer)entry.getValue();\n        }\n        else if( \"cacheableFaceting\".equals( entry.getKey() ) ) {\n          cacheableFaceting = (Boolean)entry.getValue();\n        }\n        else if( \"topTerms\".equals( entry.getKey() ) ) {\n          topTerms = (NamedList<Integer>)entry.getValue();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34a68b3240cf63c0ebea7a73b217a999a8f585c6","date":1190911422,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/response/LukeResponse.FieldInfo#read(NamedList[Object]).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/response/LukeResponse.FieldInfo#read(NamedList[Object]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        if (\"type\".equals(entry.getKey())) {\n          type = (String) entry.getValue();\n        }\n        if (\"flags\".equals(entry.getKey())) {\n          flags = parseFlags((String) entry.getValue());\n        } else if (\"schema\".equals(entry.getKey())) {\n          schema = (String) entry.getValue();\n        } else if (\"docs\".equals(entry.getKey())) {\n          docs = (Integer) entry.getValue();\n        } else if (\"distinct\".equals(entry.getKey())) {\n          distinct = (Integer) entry.getValue();\n        } else if (\"cacheableFaceting\".equals(entry.getKey())) {\n          cacheableFaceting = (Boolean) entry.getValue();\n        } else if (\"topTerms\".equals(entry.getKey())) {\n          topTerms = (NamedList<Integer>) entry.getValue();\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public void read( NamedList<Object> nl )\n    {\n      for( Map.Entry<String, Object> entry : nl ) {\n        if( \"type\".equals( entry.getKey() ) ) {\n          type = (String)entry.getValue();\n        }\n        else if( \"schema\".equals( entry.getKey() ) ) {\n          schema = (String)entry.getValue();\n        }\n        else if( \"docs\".equals( entry.getKey() ) ) {\n          docs = (Integer)entry.getValue();\n        }\n        else if( \"distinct\".equals( entry.getKey() ) ) {\n          distinct = (Integer)entry.getValue();\n        }\n        else if( \"cacheableFaceting\".equals( entry.getKey() ) ) {\n          cacheableFaceting = (Boolean)entry.getValue();\n        }\n        else if( \"topTerms\".equals( entry.getKey() ) ) {\n          topTerms = (NamedList<Integer>)entry.getValue();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/response/LukeResponse.FieldInfo#read(NamedList[Object]).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/response/LukeResponse.FieldInfo#read(NamedList[Object]).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        if (\"type\".equals(entry.getKey())) {\n          type = (String) entry.getValue();\n        }\n        if (\"flags\".equals(entry.getKey())) {\n          flags = parseFlags((String) entry.getValue());\n        } else if (\"schema\".equals(entry.getKey())) {\n          schema = (String) entry.getValue();\n        } else if (\"docs\".equals(entry.getKey())) {\n          docs = (Integer) entry.getValue();\n        } else if (\"distinct\".equals(entry.getKey())) {\n          distinct = (Integer) entry.getValue();\n        } else if (\"cacheableFaceting\".equals(entry.getKey())) {\n          cacheableFaceting = (Boolean) entry.getValue();\n        } else if (\"topTerms\".equals(entry.getKey())) {\n          topTerms = (NamedList<Integer>) entry.getValue();\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    public void read(NamedList<Object> nl) {\n      for (Map.Entry<String, Object> entry : nl) {\n        if (\"type\".equals(entry.getKey())) {\n          type = (String) entry.getValue();\n        }\n        if (\"flags\".equals(entry.getKey())) {\n          flags = parseFlags((String) entry.getValue());\n        } else if (\"schema\".equals(entry.getKey())) {\n          schema = (String) entry.getValue();\n        } else if (\"docs\".equals(entry.getKey())) {\n          docs = (Integer) entry.getValue();\n        } else if (\"distinct\".equals(entry.getKey())) {\n          distinct = (Integer) entry.getValue();\n        } else if (\"cacheableFaceting\".equals(entry.getKey())) {\n          cacheableFaceting = (Boolean) entry.getValue();\n        } else if (\"topTerms\".equals(entry.getKey())) {\n          topTerms = (NamedList<Integer>) entry.getValue();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["34a68b3240cf63c0ebea7a73b217a999a8f585c6"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34a68b3240cf63c0ebea7a73b217a999a8f585c6":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["34a68b3240cf63c0ebea7a73b217a999a8f585c6"],"34a68b3240cf63c0ebea7a73b217a999a8f585c6":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}