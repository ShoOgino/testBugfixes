{"path":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext).mjava","commits":[{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext,ReturnFields).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res) throws IOException {\n    DocList ids = res.getDocList();\n    Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        res.wantsScores() ? new Float(ids.maxScore()) : null);\n\n    int idx = 0;\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), res.getReturnFields(), idx);\n      idx++;\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res, ReturnFields fields ) throws IOException {\n    DocList ids = res.docs;\n    DocsStreamer docsStreamer = new DocsStreamer(res.docs,res.query, req, fields);\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        docsStreamer.hasScores() ? new Float(ids.maxScore()) : null);\n\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), returnFields, docsStreamer.currentIndex());\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res) throws IOException {\n    DocList ids = res.getDocList();\n    Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        res.wantsScores() ? ids.maxScore() : null);\n\n    int idx = 0;\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), res.getReturnFields(), idx);\n      idx++;\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res) throws IOException {\n    DocList ids = res.getDocList();\n    Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        res.wantsScores() ? new Float(ids.maxScore()) : null);\n\n    int idx = 0;\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), res.getReturnFields(), idx);\n      idx++;\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res) throws IOException {\n    DocList ids = res.getDocList();\n    Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        res.wantsScores() ? ids.maxScore() : null);\n\n    int idx = 0;\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), res.getReturnFields(), idx);\n      idx++;\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res) throws IOException {\n    DocList ids = res.getDocList();\n    Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        res.wantsScores() ? new Float(ids.maxScore()) : null);\n\n    int idx = 0;\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), res.getReturnFields(), idx);\n      idx++;\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res) throws IOException {\n    DocList ids = res.getDocList();\n    Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        res.wantsScores() ? ids.maxScore() : null);\n\n    int idx = 0;\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), res.getReturnFields(), idx);\n      idx++;\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res) throws IOException {\n    DocList ids = res.getDocList();\n    Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        res.wantsScores() ? new Float(ids.maxScore()) : null);\n\n    int idx = 0;\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), res.getReturnFields(), idx);\n      idx++;\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeDocuments(String,ResultContext).mjava","sourceNew":"  public final void writeDocuments(String name, ResultContext res) throws IOException {\n    DocList ids = res.getDocList();\n    Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        res.wantsScores() ? ids.maxScore() : null, ids.hitCountRelation() == TotalHits.Relation.EQUAL_TO);\n\n    int idx = 0;\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), res.getReturnFields(), idx);\n      idx++;\n    }\n    writeEndDocumentList();\n  }\n\n","sourceOld":"  public final void writeDocuments(String name, ResultContext res) throws IOException {\n    DocList ids = res.getDocList();\n    Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n    writeStartDocumentList(name, ids.offset(), ids.size(), ids.matches(),\n        res.wantsScores() ? ids.maxScore() : null);\n\n    int idx = 0;\n    while (docsStreamer.hasNext()) {\n      writeSolrDocument(null, docsStreamer.next(), res.getReturnFields(), idx);\n      idx++;\n    }\n    writeEndDocumentList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}