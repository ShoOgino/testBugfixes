{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#addTransition(int,int,int,int).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#addTransition(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#addTransition(int,int,int,int).mjava","sourceNew":"  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    if (source >= nextState/2) {\n      throw new IllegalArgumentException(\"source=\" + source + \" is out of bounds (maxState is \" + (nextState/2-1) + \")\");\n    }\n    if (dest >= nextState/2) {\n      throw new IllegalArgumentException(\"dest=\" + dest + \" is out of bounds (max state is \" + (nextState/2-1) + \")\");\n    }\n\n    //System.out.println(\"  addTransition nextTransition=\" + nextTransition + \" source=\" + source + \" dest=\" + dest + \" min=\" + min + \" max=\" + max);\n    growTransitions();\n    if (curState != source) {\n      //System.out.println(\"    newstate\");\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","sourceOld":"  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    if (source >= nextState/2) {\n      throw new IllegalArgumentException(\"source=\" + source + \" is out of bounds (maxState is \" + (nextState/2-1) + \")\");\n    }\n    if (dest >= nextState/2) {\n      throw new IllegalArgumentException(\"dest=\" + dest + \" is out of bounds (max state is \" + (nextState/2-1) + \")\");\n    }\n\n    //System.out.println(\"  addTransition nextTransition=\" + nextTransition + \" source=\" + source + \" dest=\" + dest + \" min=\" + min + \" max=\" + max);\n    growTransitions();\n    if (curState != source) {\n      //System.out.println(\"    newstate\");\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#addTransition(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#addTransition(int,int,int,int).mjava","sourceNew":"  /** Add a new transition with the specified source, dest, min, max. */\n  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    if (source >= nextState/2) {\n      throw new IllegalArgumentException(\"source=\" + source + \" is out of bounds (maxState is \" + (nextState/2-1) + \")\");\n    }\n    if (dest >= nextState/2) {\n      throw new IllegalArgumentException(\"dest=\" + dest + \" is out of bounds (max state is \" + (nextState/2-1) + \")\");\n    }\n\n    growTransitions();\n    if (curState != source) {\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","sourceOld":"  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    if (source >= nextState/2) {\n      throw new IllegalArgumentException(\"source=\" + source + \" is out of bounds (maxState is \" + (nextState/2-1) + \")\");\n    }\n    if (dest >= nextState/2) {\n      throw new IllegalArgumentException(\"dest=\" + dest + \" is out of bounds (max state is \" + (nextState/2-1) + \")\");\n    }\n\n    //System.out.println(\"  addTransition nextTransition=\" + nextTransition + \" source=\" + source + \" dest=\" + dest + \" min=\" + min + \" max=\" + max);\n    growTransitions();\n    if (curState != source) {\n      //System.out.println(\"    newstate\");\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#addTransition(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Add a new transition with the specified source, dest, min, max. */\n  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    if (source >= nextState/2) {\n      throw new IllegalArgumentException(\"source=\" + source + \" is out of bounds (maxState is \" + (nextState/2-1) + \")\");\n    }\n    if (dest >= nextState/2) {\n      throw new IllegalArgumentException(\"dest=\" + dest + \" is out of bounds (max state is \" + (nextState/2-1) + \")\");\n    }\n\n    growTransitions();\n    if (curState != source) {\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#addTransition(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#addTransition(int,int,int,int).mjava","sourceNew":"  /** Add a new transition with the specified source, dest, min, max. */\n  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    int bounds = nextState/2;\n    FutureObjects.checkIndex(source, bounds);\n    FutureObjects.checkIndex(dest, bounds);\n\n    growTransitions();\n    if (curState != source) {\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","sourceOld":"  /** Add a new transition with the specified source, dest, min, max. */\n  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    if (source >= nextState/2) {\n      throw new IllegalArgumentException(\"source=\" + source + \" is out of bounds (maxState is \" + (nextState/2-1) + \")\");\n    }\n    if (dest >= nextState/2) {\n      throw new IllegalArgumentException(\"dest=\" + dest + \" is out of bounds (max state is \" + (nextState/2-1) + \")\");\n    }\n\n    growTransitions();\n    if (curState != source) {\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#addTransition(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#addTransition(int,int,int,int).mjava","sourceNew":"  /** Add a new transition with the specified source, dest, min, max. */\n  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    int bounds = nextState/2;\n    Objects.checkIndex(source, bounds);\n    Objects.checkIndex(dest, bounds);\n\n    growTransitions();\n    if (curState != source) {\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","sourceOld":"  /** Add a new transition with the specified source, dest, min, max. */\n  public void addTransition(int source, int dest, int min, int max) {\n    assert nextTransition%3 == 0;\n\n    int bounds = nextState/2;\n    FutureObjects.checkIndex(source, bounds);\n    FutureObjects.checkIndex(dest, bounds);\n\n    growTransitions();\n    if (curState != source) {\n      if (curState != -1) {\n        finishCurrentState();\n      }\n\n      // Move to next source:\n      curState = source;\n      if (states[2*curState] != -1) {\n        throw new IllegalStateException(\"from state (\" + source + \") already had transitions added\");\n      }\n      assert states[2*curState+1] == 0;\n      states[2*curState] = nextTransition;\n    }\n\n    transitions[nextTransition++] = dest;\n    transitions[nextTransition++] = min;\n    transitions[nextTransition++] = max;\n\n    // Increment transition count for this state\n    states[2*curState+1]++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["456d7e7092cb043c740b4674301660ee8abc26fe"],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"456d7e7092cb043c740b4674301660ee8abc26fe":["5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["456d7e7092cb043c740b4674301660ee8abc26fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}