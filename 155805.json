{"path":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testExtractTerms().mjava","commits":[{"id":"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302","date":1526484586,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testExtractTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtractTerms() throws IOException {\n    IndexReader reader = new MultiReader();\n    IndexSearcher searcher = newSearcher(reader);\n    Query query = FeatureField.newLogQuery(\"field\", \"term\", 2f, 42);\n\n    Weight weight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    Set<Term> terms = new HashSet<>();\n    weight.extractTerms(terms);\n    assertEquals(Collections.emptySet(), terms);\n\n    terms = new HashSet<>();\n    weight = searcher.createWeight(query, ScoreMode.COMPLETE, 1f);\n    weight.extractTerms(terms);\n    assertEquals(Collections.singleton(new Term(\"field\", \"term\")), terms);\n\n    terms = new HashSet<>();\n    weight = searcher.createWeight(query, ScoreMode.TOP_SCORES, 1f);\n    weight.extractTerms(terms);\n    assertEquals(Collections.singleton(new Term(\"field\", \"term\")), terms);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFeatureField#testExtractTerms().mjava","sourceNew":null,"sourceOld":"  public void testExtractTerms() throws IOException {\n    IndexReader reader = new MultiReader();\n    IndexSearcher searcher = newSearcher(reader);\n    Query query = FeatureField.newLogQuery(\"field\", \"term\", 2f, 42);\n\n    Weight weight = searcher.createWeight(query, ScoreMode.COMPLETE_NO_SCORES, 1f);\n    Set<Term> terms = new HashSet<>();\n    weight.extractTerms(terms);\n    assertEquals(Collections.emptySet(), terms);\n\n    terms = new HashSet<>();\n    weight = searcher.createWeight(query, ScoreMode.COMPLETE, 1f);\n    weight.extractTerms(terms);\n    assertEquals(Collections.singleton(new Term(\"field\", \"term\")), terms);\n\n    terms = new HashSet<>();\n    weight = searcher.createWeight(query, ScoreMode.TOP_SCORES, 1f);\n    weight.extractTerms(terms);\n    assertEquals(Collections.singleton(new Term(\"field\", \"term\")), terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["808f86d4b1e5fa52de29b80a5e44b1dcc79ea302"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["808f86d4b1e5fa52de29b80a5e44b1dcc79ea302"],"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}