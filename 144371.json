{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#sort().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#sort().mjava","pathOld":"/dev/null","sourceNew":"    void sort() {\n        final int starts[] = matchStarts;\n        final int ends[] = matchEnds;\n        final BytesRef terms[] = matchTerms;\n        new InPlaceMergeSorter() {\n            @Override\n            protected void swap(int i, int j) {\n                int temp = starts[i];\n                starts[i] = starts[j];\n                starts[j] = temp;\n\n                temp = ends[i];\n                ends[i] = ends[j];\n                ends[j] = temp;\n\n                BytesRef tempTerm = terms[i];\n                terms[i] = terms[j];\n                terms[j] = tempTerm;\n            }\n\n            @Override\n            protected int compare(int i, int j) {\n                return Integer.compare(starts[i], starts[j]);\n            }\n\n        }.sort(0, numMatches);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#sort().mjava","pathOld":"/dev/null","sourceNew":"    void sort() {\n        final int starts[] = matchStarts;\n        final int ends[] = matchEnds;\n        final BytesRef terms[] = matchTerms;\n        new InPlaceMergeSorter() {\n            @Override\n            protected void swap(int i, int j) {\n                int temp = starts[i];\n                starts[i] = starts[j];\n                starts[j] = temp;\n\n                temp = ends[i];\n                ends[i] = ends[j];\n                ends[j] = temp;\n\n                BytesRef tempTerm = terms[i];\n                terms[i] = terms[j];\n                terms[j] = tempTerm;\n            }\n\n            @Override\n            protected int compare(int i, int j) {\n                return Integer.compare(starts[i], starts[j]);\n            }\n\n        }.sort(0, numMatches);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f714d649962c934166dedd1e83173e36356b328","date":1479399594,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#sort().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#sort().mjava","sourceNew":"    /** @lucene.internal */\n    public void sort() {\n        final int starts[] = matchStarts;\n        final int ends[] = matchEnds;\n        final BytesRef terms[] = matchTerms;\n        new InPlaceMergeSorter() {\n            @Override\n            protected void swap(int i, int j) {\n                int temp = starts[i];\n                starts[i] = starts[j];\n                starts[j] = temp;\n\n                temp = ends[i];\n                ends[i] = ends[j];\n                ends[j] = temp;\n\n                BytesRef tempTerm = terms[i];\n                terms[i] = terms[j];\n                terms[j] = tempTerm;\n            }\n\n            @Override\n            protected int compare(int i, int j) {\n                return Integer.compare(starts[i], starts[j]);\n            }\n\n        }.sort(0, numMatches);\n    }\n\n","sourceOld":"    void sort() {\n        final int starts[] = matchStarts;\n        final int ends[] = matchEnds;\n        final BytesRef terms[] = matchTerms;\n        new InPlaceMergeSorter() {\n            @Override\n            protected void swap(int i, int j) {\n                int temp = starts[i];\n                starts[i] = starts[j];\n                starts[j] = temp;\n\n                temp = ends[i];\n                ends[i] = ends[j];\n                ends[j] = temp;\n\n                BytesRef tempTerm = terms[i];\n                terms[i] = terms[j];\n                terms[j] = tempTerm;\n            }\n\n            @Override\n            protected int compare(int i, int j) {\n                return Integer.compare(starts[i], starts[j]);\n            }\n\n        }.sort(0, numMatches);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8","date":1479399820,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#sort().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#sort().mjava","sourceNew":"  /** @lucene.internal */\n  public void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final BytesRef terms[] = matchTerms;\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n\n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n\n        BytesRef tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Integer.compare(starts[i], starts[j]);\n      }\n\n    }.sort(0, numMatches);\n  }\n\n","sourceOld":"    /** @lucene.internal */\n    public void sort() {\n        final int starts[] = matchStarts;\n        final int ends[] = matchEnds;\n        final BytesRef terms[] = matchTerms;\n        new InPlaceMergeSorter() {\n            @Override\n            protected void swap(int i, int j) {\n                int temp = starts[i];\n                starts[i] = starts[j];\n                starts[j] = temp;\n\n                temp = ends[i];\n                ends[i] = ends[j];\n                ends[j] = temp;\n\n                BytesRef tempTerm = terms[i];\n                terms[i] = terms[j];\n                terms[j] = tempTerm;\n            }\n\n            @Override\n            protected int compare(int i, int j) {\n                return Integer.compare(starts[i], starts[j]);\n            }\n\n        }.sort(0, numMatches);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#sort().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#sort().mjava","sourceNew":"  /** @lucene.internal */\n  public void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final BytesRef terms[] = matchTerms;\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n\n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n\n        BytesRef tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Integer.compare(starts[i], starts[j]);\n      }\n\n    }.sort(0, numMatches);\n  }\n\n","sourceOld":"    void sort() {\n        final int starts[] = matchStarts;\n        final int ends[] = matchEnds;\n        final BytesRef terms[] = matchTerms;\n        new InPlaceMergeSorter() {\n            @Override\n            protected void swap(int i, int j) {\n                int temp = starts[i];\n                starts[i] = starts[j];\n                starts[j] = temp;\n\n                temp = ends[i];\n                ends[i] = ends[j];\n                ends[j] = temp;\n\n                BytesRef tempTerm = terms[i];\n                terms[i] = terms[j];\n                terms[j] = tempTerm;\n            }\n\n            @Override\n            protected int compare(int i, int j) {\n                return Integer.compare(starts[i], starts[j]);\n            }\n\n        }.sort(0, numMatches);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8764ca7bb74ee716c839b9545a93ec4a578c2005","date":1517564468,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/Passage#sort().mjava","sourceNew":null,"sourceOld":"  /** @lucene.internal */\n  public void sort() {\n    final int starts[] = matchStarts;\n    final int ends[] = matchEnds;\n    final BytesRef terms[] = matchTerms;\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        int temp = starts[i];\n        starts[i] = starts[j];\n        starts[j] = temp;\n\n        temp = ends[i];\n        ends[i] = ends[j];\n        ends[j] = temp;\n\n        BytesRef tempTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tempTerm;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Integer.compare(starts[i], starts[j]);\n      }\n\n    }.sort(0, numMatches);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8764ca7bb74ee716c839b9545a93ec4a578c2005":["2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f714d649962c934166dedd1e83173e36356b328":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8":["1f714d649962c934166dedd1e83173e36356b328"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8764ca7bb74ee716c839b9545a93ec4a578c2005"]},"commit2Childs":{"8764ca7bb74ee716c839b9545a93ec4a578c2005":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["1f714d649962c934166dedd1e83173e36356b328","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f714d649962c934166dedd1e83173e36356b328":["2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8"],"2b0859e6cfbc8e4ed86039d82fbebe98cb5f72a8":["8764ca7bb74ee716c839b9545a93ec4a578c2005","2e859e664a65796dadf8aaf65db6f66f3a885368"],"2e859e664a65796dadf8aaf65db6f66f3a885368":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2e859e664a65796dadf8aaf65db6f66f3a885368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}