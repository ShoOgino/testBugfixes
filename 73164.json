{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","commits":[{"id":"09a42395865f791464f0bd5f6118a4abbfa3eb8a","date":1376920143,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    \n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    \n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    \n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    \n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    \n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    \n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    if (field.getDocValuesGen() != -1) {\n      throw new UnsupportedOperationException(\"4.2 does not support dv updates\");\n    }\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    \n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    \n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}