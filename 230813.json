{"path":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/SamplePluginRandomPlacement#computePlacement(Cluster,PlacementRequest,AttributeFetcher,PlacementPlanFactory).mjava","commits":[{"id":"f5d9700b23e8e9b11b845fcecef89dbdf21373d9","date":1600294231,"type":0,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/SamplePluginRandomPlacement#computePlacement(Cluster,PlacementRequest,AttributeFetcher,PlacementPlanFactory).mjava","pathOld":"/dev/null","sourceNew":"  public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                        PlacementPlanFactory placementPlanFactory) throws PlacementException {\n    int totalReplicasPerShard = 0;\n    for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n      totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n    }\n\n    if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n      throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n    }\n\n    Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n    // Now place randomly all replicas of all shards on available nodes\n    for (String shardName : request.getShardNames()) {\n      // Shuffle the nodes for each shard so that replicas for a shard are placed on distinct yet random nodes\n      ArrayList<Node> nodesToAssign = new ArrayList<>(cluster.getLiveNodes());\n      Collections.shuffle(nodesToAssign, new Random());\n\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        placeForReplicaType(request.getCollection(), nodesToAssign, placementPlanFactory, replicaPlacements, shardName, request, rt);\n      }\n    }\n\n    return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65352f844eb9e9a677ec4eb2abced4404f08181d","date":1600297608,"type":0,"author":"noblepaul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/SamplePluginRandomPlacement#computePlacement(Cluster,PlacementRequest,AttributeFetcher,PlacementPlanFactory).mjava","pathOld":"/dev/null","sourceNew":"  public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                        PlacementPlanFactory placementPlanFactory) throws PlacementException {\n    int totalReplicasPerShard = 0;\n    for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n      totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n    }\n\n    if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n      throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n    }\n\n    Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n    // Now place randomly all replicas of all shards on available nodes\n    for (String shardName : request.getShardNames()) {\n      // Shuffle the nodes for each shard so that replicas for a shard are placed on distinct yet random nodes\n      ArrayList<Node> nodesToAssign = new ArrayList<>(cluster.getLiveNodes());\n      Collections.shuffle(nodesToAssign, new Random());\n\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        placeForReplicaType(request.getCollection(), nodesToAssign, placementPlanFactory, replicaPlacements, shardName, request, rt);\n      }\n    }\n\n    return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65352f844eb9e9a677ec4eb2abced4404f08181d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5d9700b23e8e9b11b845fcecef89dbdf21373d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65352f844eb9e9a677ec4eb2abced4404f08181d"]},"commit2Childs":{"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f5d9700b23e8e9b11b845fcecef89dbdf21373d9","65352f844eb9e9a677ec4eb2abced4404f08181d"],"65352f844eb9e9a677ec4eb2abced4404f08181d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}