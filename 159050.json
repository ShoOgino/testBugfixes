{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testFilterConstantScore().mjava","commits":[{"id":"4ae09ef6db22a0e704f2d832b5ce8737167ab09b","date":1564387489,"type":0,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testFilterConstantScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilterConstantScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bat\", Store.NO));\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n\n    {\n      // single filter rewrites to a constant score query\n      Query query = new BooleanQuery.Builder().add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER).build();\n      Query rewrite = searcher.rewrite(query);\n      assertTrue(rewrite instanceof BoostQuery);\n      assertTrue(((BoostQuery) rewrite).getQuery() instanceof ConstantScoreQuery);\n    }\n\n    Query[] queries = new Query[] {\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            .build(),\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            // non-existing term\n            .add(new TermQuery(new Term(\"foo\", \"arf\")), Occur.SHOULD)\n            .build(),\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            // non-existing term\n            .add(new TermQuery(new Term(\"foo\", \"arf\")), Occur.SHOULD)\n            .add(new TermQuery(new Term(\"foo\", \"arw\")), Occur.SHOULD)\n            .build()\n    };\n    for (Query query : queries) {\n      Query rewrite = searcher.rewrite(query);\n      for (ScoreMode scoreMode : ScoreMode.values()) {\n        Weight weight = searcher.createWeight(rewrite, scoreMode, 1f);\n        Scorer scorer = weight.scorer(reader.leaves().get(0));\n        if (scoreMode == ScoreMode.TOP_SCORES) {\n          assertTrue(scorer instanceof ConstantScoreScorer);\n        } else {\n          assertFalse(scorer instanceof ConstantScoreScorer);\n        }\n      }\n    }\n\n    queries = new Query[]{\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n            .build(),\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n            // non-existing term\n            .add(new TermQuery(new Term(\"foo\", \"arf\")), Occur.SHOULD)\n            .build(),\n        new BooleanQuery.Builder()\n            // non-existing term\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n            // non-existing term\n            .add(new TermQuery(new Term(\"foo\", \"arf\")), Occur.MUST)\n            .build()\n    };\n    for (Query query : queries) {\n      Query rewrite = searcher.rewrite(query);\n      for (ScoreMode scoreMode : ScoreMode.values()) {\n        Weight weight = searcher.createWeight(rewrite, scoreMode, 1f);\n        Scorer scorer = weight.scorer(reader.leaves().get(0));\n        assertFalse(scorer instanceof ConstantScoreScorer);\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testFilterConstantScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilterConstantScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bat\", Store.NO));\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null);\n\n    {\n      // single filter rewrites to a constant score query\n      Query query = new BooleanQuery.Builder().add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER).build();\n      Query rewrite = searcher.rewrite(query);\n      assertTrue(rewrite instanceof BoostQuery);\n      assertTrue(((BoostQuery) rewrite).getQuery() instanceof ConstantScoreQuery);\n    }\n\n    Query[] queries = new Query[] {\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            .build(),\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            // non-existing term\n            .add(new TermQuery(new Term(\"foo\", \"arf\")), Occur.SHOULD)\n            .build(),\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            // non-existing term\n            .add(new TermQuery(new Term(\"foo\", \"arf\")), Occur.SHOULD)\n            .add(new TermQuery(new Term(\"foo\", \"arw\")), Occur.SHOULD)\n            .build()\n    };\n    for (Query query : queries) {\n      Query rewrite = searcher.rewrite(query);\n      for (ScoreMode scoreMode : ScoreMode.values()) {\n        Weight weight = searcher.createWeight(rewrite, scoreMode, 1f);\n        Scorer scorer = weight.scorer(reader.leaves().get(0));\n        if (scoreMode == ScoreMode.TOP_SCORES) {\n          assertTrue(scorer instanceof ConstantScoreScorer);\n        } else {\n          assertFalse(scorer instanceof ConstantScoreScorer);\n        }\n      }\n    }\n\n    queries = new Query[]{\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n            .build(),\n        new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n            // non-existing term\n            .add(new TermQuery(new Term(\"foo\", \"arf\")), Occur.SHOULD)\n            .build(),\n        new BooleanQuery.Builder()\n            // non-existing term\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n            // non-existing term\n            .add(new TermQuery(new Term(\"foo\", \"arf\")), Occur.MUST)\n            .build()\n    };\n    for (Query query : queries) {\n      Query rewrite = searcher.rewrite(query);\n      for (ScoreMode scoreMode : ScoreMode.values()) {\n        Weight weight = searcher.createWeight(rewrite, scoreMode, 1f);\n        Scorer scorer = weight.scorer(reader.leaves().get(0));\n        assertFalse(scorer instanceof ConstantScoreScorer);\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ae09ef6db22a0e704f2d832b5ce8737167ab09b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ae09ef6db22a0e704f2d832b5ce8737167ab09b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ae09ef6db22a0e704f2d832b5ce8737167ab09b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ae09ef6db22a0e704f2d832b5ce8737167ab09b","f8061ddd97f3352007d927dae445884a6f3d857b"],"4ae09ef6db22a0e704f2d832b5ce8737167ab09b":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}