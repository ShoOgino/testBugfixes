{"path":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","commits":[{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#doClose().mjava","sourceNew":"  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].decRef();\n\n    if (closeDirectory)\n      directory.close();\n  }\n\n","sourceOld":"  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].decRef();\n    \n    // maybe close directory\n    super.doClose();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e54e4a9a2442944e55f58e835877841cdac1271","date":1244628560,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  protected synchronized void doClose() throws IOException {\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].decRef();\n\n    if (closeDirectory)\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ea004a2bef3f964ba2e0d26e94325213909526","date":1245927336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653534f92e19662cbe285c9c01801afbe2247da3","date":1260576498,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901ca90e401ba1870fce0630240b1aacdd386e49","date":1265972851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    normsCache = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    // NOTE: only needed in case someone had asked for\n    // FieldCache for top-level reader (which is generally\n    // not a good idea):\n    FieldCache.DEFAULT.purge(this);\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deleteUnusedFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"901ca90e401ba1870fce0630240b1aacdd386e49":["653534f92e19662cbe285c9c01801afbe2247da3"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"653534f92e19662cbe285c9c01801afbe2247da3":["8a9e385641d717e641408d8fbbc62be8fc766357"],"95ea004a2bef3f964ba2e0d26e94325213909526":["4e54e4a9a2442944e55f58e835877841cdac1271"],"8a9e385641d717e641408d8fbbc62be8fc766357":["95ea004a2bef3f964ba2e0d26e94325213909526"],"4e54e4a9a2442944e55f58e835877841cdac1271":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["901ca90e401ba1870fce0630240b1aacdd386e49"]},"commit2Childs":{"901ca90e401ba1870fce0630240b1aacdd386e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["4e54e4a9a2442944e55f58e835877841cdac1271"],"653534f92e19662cbe285c9c01801afbe2247da3":["901ca90e401ba1870fce0630240b1aacdd386e49"],"95ea004a2bef3f964ba2e0d26e94325213909526":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"8a9e385641d717e641408d8fbbc62be8fc766357":["653534f92e19662cbe285c9c01801afbe2247da3"],"4e54e4a9a2442944e55f58e835877841cdac1271":["95ea004a2bef3f964ba2e0d26e94325213909526"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}