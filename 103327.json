{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","commits":[{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger#MetricTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    this.metric = (String) properties.get(METRIC);\n    this.above = (Number) properties.get(ABOVE);\n    this.below = (Number) properties.get(BELOW);\n    this.collection = (String) properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String) properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new TriggerValidationException(\"shard\", \"When 'shard' is other than #ANY then collection name must be also other than #ANY\");\n    }\n    node = (String) properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    preferredOp = (String) properties.getOrDefault(PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n  }\n\n","sourceOld":"  public MetricTrigger(String name, Map<String, Object> properties, SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    super(TriggerEventType.METRIC, name, properties, loader, cloudManager);\n    this.metric = (String) properties.get(METRIC);\n    this.above = (Number) properties.get(ABOVE);\n    this.below = (Number) properties.get(BELOW);\n    this.collection = (String) properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String) properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new IllegalArgumentException(\"When 'shard' is other than #ANY then collection name must be also other than #ANY\");\n    }\n    node = (String) properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    preferredOp = (String) properties.getOrDefault(PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/MetricTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    this.metric = (String) properties.get(METRIC);\n    this.above = (Number) properties.get(ABOVE);\n    this.below = (Number) properties.get(BELOW);\n    this.collection = (String) properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String) properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new TriggerValidationException(\"shard\", \"When 'shard' is other than #ANY then collection name must be also other than #ANY\");\n    }\n    node = (String) properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    preferredOp = (String) properties.getOrDefault(PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}