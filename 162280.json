{"path":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/recipe/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String  clusterState) {\n    return new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n          Map<String, Object> result = new LinkedHashMap<>();\n          keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n          return result;\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return nodeValues.keySet();\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return getReplicaDetails(node, clusterState);\n        }\n\n      };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String  clusterState) {\n    return new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n          Map<String, Object> result = new LinkedHashMap<>();\n          keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n          return result;\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return nodeValues.keySet();\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return getReplicaDetails(node, clusterState);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","date":1492510959,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#getClusterDataProvider(Map[String,Map],String).mjava","sourceNew":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String  clusterState) {\n    return new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n          Map<String, Object> result = new LinkedHashMap<>();\n          keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n          return result;\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return nodeValues.keySet();\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return getReplicaDetails(node, clusterState);\n        }\n\n      };\n  }\n\n","sourceOld":"  private ClusterDataProvider getClusterDataProvider(final Map<String, Map> nodeValues, String  clusterState) {\n    return new ClusterDataProvider() {\n        @Override\n        public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n          Map<String, Object> result = new LinkedHashMap<>();\n          keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n          return result;\n        }\n\n        @Override\n        public Collection<String> getNodes() {\n          return nodeValues.keySet();\n        }\n\n        @Override\n        public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n          return getReplicaDetails(node, clusterState);\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}