{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","commits":[{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","sourceNew":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      FacetLabel cp = r.getPath(child);\n      out.println(\"/\" + cp + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      FacetLabel cp = r.getPath(child);\n      out.println(\"/\" + cp + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","sourceNew":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      FacetLabel cp = r.getPath(child);\n      out.println(\"/\" + cp.components[0] + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      FacetLabel cp = r.getPath(child);\n      out.println(\"/\" + cp + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b656cbf28fe2a4be7de3f0e561623ca39d06884","date":1388622204,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","sourceNew":"  /** Recursively prints stats for all ordinals. */\n  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      FacetLabel cp = r.getPath(child);\n      out.println(\"/\" + cp.components[0] + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      FacetLabel cp = r.getPath(child);\n      out.println(\"/\" + cp.components[0] + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/PrintTaxonomyStats#printStats(TaxonomyReader,PrintStream,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Recursively prints stats for all ordinals. */\n  public static void printStats(TaxonomyReader r, PrintStream out, boolean printTree) throws IOException {\n    out.println(r.getSize() + \" total categories.\");\n\n    ChildrenIterator it = r.getChildren(TaxonomyReader.ROOT_ORDINAL);\n    int child;\n    while ((child = it.next()) != TaxonomyReader.INVALID_ORDINAL) {\n      ChildrenIterator chilrenIt = r.getChildren(child);\n      int numImmediateChildren = 0;\n      while (chilrenIt.next() != TaxonomyReader.INVALID_ORDINAL) {\n        numImmediateChildren++;\n      }\n      FacetLabel cp = r.getPath(child);\n      out.println(\"/\" + cp.components[0] + \": \" + numImmediateChildren + \" immediate children; \" + (1+countAllChildren(r, child)) + \" total categories\");\n      if (printTree) {\n        printAllChildren(out, r, child, \"  \", 1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0b656cbf28fe2a4be7de3f0e561623ca39d06884"],"0b656cbf28fe2a4be7de3f0e561623ca39d06884":["bbe9946d3cd818d329255e4c325597ac3480503e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"bbe9946d3cd818d329255e4c325597ac3480503e":["d33e19a97046248623a7591aeaa6547233fd15e2"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["bbe9946d3cd818d329255e4c325597ac3480503e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0b656cbf28fe2a4be7de3f0e561623ca39d06884":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"bbe9946d3cd818d329255e4c325597ac3480503e":["0b656cbf28fe2a4be7de3f0e561623ca39d06884"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}