{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/LocalReplicator#obtainFile(String,String,String).mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/LocalReplicator#obtainFile(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized InputStream obtainFile(String sessionID, String source, String fileName) throws IOException {\n    ensureOpen();\n    ReplicationSession session = sessions.get(sessionID);\n    if (session != null && session.isExpired(expirationThresholdMilllis)) {\n      releaseSession(sessionID);\n      session = null;\n    }\n    // session either previously expired, or we just expired it\n    if (session == null) {\n      throw new SessionExpiredException(\"session (\" + sessionID + \") expired while obtaining file: source=\" + source\n          + \" file=\" + fileName);\n    }\n    sessions.get(sessionID).markAccessed();\n    return session.revision.revision.open(source, fileName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/LocalReplicator#obtainFile(String,String,String).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/LocalReplicator#obtainFile(String,String,String).mjava","sourceNew":"  @Override\n  public synchronized InputStream obtainFile(String sessionID, String source, String fileName) throws IOException {\n    ensureOpen();\n    ReplicationSession session = sessions.get(sessionID);\n    if (session != null && session.isExpired(expirationThresholdMilllis)) {\n      releaseSession(sessionID);\n      session = null;\n    }\n    // session either previously expired, or we just expired it\n    if (session == null) {\n      throw new SessionExpiredException(\"session (\" + sessionID + \") expired while obtaining file: source=\" + source\n          + \" file=\" + fileName);\n    }\n    sessions.get(sessionID).markAccessed();\n    return session.revision.revision.open(source, fileName);\n  }\n\n","sourceOld":"  @Override\n  public synchronized InputStream obtainFile(String sessionID, String source, String fileName) throws IOException {\n    ensureOpen();\n    ReplicationSession session = sessions.get(sessionID);\n    if (session != null && session.isExpired(expirationThresholdMilllis)) {\n      releaseSession(sessionID);\n      session = null;\n    }\n    // session either previously expired, or we just expired it\n    if (session == null) {\n      throw new SessionExpiredException(\"session (\" + sessionID + \") expired while obtaining file: source=\" + source\n          + \" file=\" + fileName);\n    }\n    sessions.get(sessionID).markAccessed();\n    return session.revision.revision.open(source, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/LocalReplicator#obtainFile(String,String,String).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/LocalReplicator#obtainFile(String,String,String).mjava","sourceNew":"  @Override\n  public synchronized InputStream obtainFile(String sessionID, String source, String fileName) throws IOException {\n    ensureOpen();\n    ReplicationSession session = sessions.get(sessionID);\n    if (session != null && session.isExpired(expirationThresholdMilllis)) {\n      releaseSession(sessionID);\n      session = null;\n    }\n    // session either previously expired, or we just expired it\n    if (session == null) {\n      throw new SessionExpiredException(\"session (\" + sessionID + \") expired while obtaining file: source=\" + source\n          + \" file=\" + fileName);\n    }\n    sessions.get(sessionID).markAccessed();\n    return session.revision.revision.open(source, fileName);\n  }\n\n","sourceOld":"  @Override\n  public synchronized InputStream obtainFile(String sessionID, String source, String fileName) throws IOException {\n    ensureOpen();\n    ReplicationSession session = sessions.get(sessionID);\n    if (session != null && session.isExpired(expirationThresholdMilllis)) {\n      releaseSession(sessionID);\n      session = null;\n    }\n    // session either previously expired, or we just expired it\n    if (session == null) {\n      throw new SessionExpiredException(\"session (\" + sessionID + \") expired while obtaining file: source=\" + source\n          + \" file=\" + fileName);\n    }\n    sessions.get(sessionID).markAccessed();\n    return session.revision.revision.open(source, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}