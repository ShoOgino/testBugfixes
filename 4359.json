{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/BasicHttpSolrServerTest#testCompression().mjava","commits":[{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/BasicHttpSolrServerTest#testCompression().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\"\n        + jetty.getLocalPort() + \"/solr/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    DefaultHttpClient client = new DefaultHttpClient();\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22c400c38732e4cee017b09622fb10e5c55b04b8","date":1334921975,"type":5,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/BasicHttpSolrServerTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\"\n        + jetty.getLocalPort() + \"/solr/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    DefaultHttpClient client = new DefaultHttpClient();\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(\"http://127.0.0.1:\"\n        + jetty.getLocalPort() + \"/solr/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    DefaultHttpClient client = new DefaultHttpClient();\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(\"http://127.0.0.1:\" + jetty.getLocalPort()\n        + \"/solr\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22c400c38732e4cee017b09622fb10e5c55b04b8":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22c400c38732e4cee017b09622fb10e5c55b04b8"]},"commit2Childs":{"22c400c38732e4cee017b09622fb10e5c55b04b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["22c400c38732e4cee017b09622fb10e5c55b04b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}