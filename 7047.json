{"path":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","commits":[{"id":"7032b137d6c884c55b34a33fdc6634af6deb07e1","date":1002820870,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      directory.mkdir();\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1edc4cf68dd8c959ef3b13a5f71fd73d702c3195","date":1016171577,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n\tif (!directory.mkdir())\n\t    throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      directory.mkdir();\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5256e856e1442a6e1250d26f1236a33380632dc2","date":1046725105,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n    if (!directory.mkdir())\n      throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n\tif (!directory.mkdir())\n\t    throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16df95df890d76f133a069351e752080aada6c46","date":1054239498,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdir())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n    \n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    File tmpdir = new File(System.getProperty(\"java.io.tmpdir\"));\n    files = tmpdir.list();\n    for (int i = 0; i < files.length; i++) {      \n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File file = new File(tmpdir, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n    if (!directory.mkdir())\n      throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed663e4e170cfa0ae8b86b54d14a9b3c34a1de9d","date":1075480570,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n    \n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    File tmpdir = new File(System.getProperty(\"java.io.tmpdir\"));\n    files = tmpdir.list();\n    for (int i = 0; i < files.length; i++) {      \n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File file = new File(tmpdir, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdir())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n    \n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    File tmpdir = new File(System.getProperty(\"java.io.tmpdir\"));\n    files = tmpdir.list();\n    for (int i = 0; i < files.length; i++) {      \n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File file = new File(tmpdir, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09627d3c8ba7784d4c31705fe1e8ea4d7b697ad4","date":1079639085,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n    \n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    File tmpdir = new File(System.getProperty(\"java.io.tmpdir\"));\n    files = tmpdir.list();\n    for (int i = 0; i < files.length; i++) {      \n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File file = new File(tmpdir, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626a6760d7df571ac4f6a0b4d5a7c9446b0a4e5","date":1084887750,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create lock directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"couldn't delete \" + files[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98428c062f6310c5aae8ba98844c6dbd98871ef2","date":1084981593,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create lock directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aedb7dd77568e161823334b79f4a9b42d7546031","date":1115249692,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list(new LuceneFileFilter());            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list();            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ff37d58ca224def21b586911fb9acddcaca27d8","date":1115563889,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    if (!directory.isDirectory())\n      throw new IOException(directory + \" not a directory\");\n\n    String[] files = directory.list(new LuceneFileFilter());            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    String[] files = directory.list(new LuceneFileFilter());            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2ad89b02efdb7835a3b64635f6021509a5e751","date":1118343550,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    if (!directory.isDirectory())\n      throw new IOException(directory + \" not a directory\");\n\n    String[] files = directory.list(new IndexFileNameFilter());            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    if (!directory.isDirectory())\n      throw new IOException(directory + \" not a directory\");\n\n    String[] files = directory.list(new LuceneFileFilter());            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4fca359fabc76b89737cb9c72258fbee416e860","date":1128972802,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    if (!directory.isDirectory())\n      throw new IOException(directory + \" not a directory\");\n\n    String[] files = directory.list(new IndexFileNameFilter());            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    if (files == null)\n      throw new IOException(\"Cannot read lock directory \" + lockDir.getAbsolutePath());\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    if (!directory.isDirectory())\n      throw new IOException(directory + \" not a directory\");\n\n    String[] files = directory.list(new IndexFileNameFilter());            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d61f4c23cc2cce8021776edaf50078c935f8d4aa","date":1147464779,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    if (!directory.isDirectory())\n      throw new IOException(directory + \" not a directory\");\n\n    String[] files = directory.list(new IndexFileNameFilter());            // clear old files\n    if (files == null)\n      throw new IOException(\"Cannot read directory \" + directory.getAbsolutePath());\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + file);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    if (files == null)\n      throw new IOException(\"Cannot read lock directory \" + lockDir.getAbsolutePath());\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + lockFile);\n    }\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    if (!directory.isDirectory())\n      throw new IOException(directory + \" not a directory\");\n\n    String[] files = directory.list(new IndexFileNameFilter());            // clear old files\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    if (files == null)\n      throw new IOException(\"Cannot read lock directory \" + lockDir.getAbsolutePath());\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + files[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    if (!directory.isDirectory())\n      throw new IOException(directory + \" not a directory\");\n\n    String[] files = directory.list(new IndexFileNameFilter());            // clear old files\n    if (files == null)\n      throw new IOException(\"Cannot read directory \" + directory.getAbsolutePath());\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + file);\n    }\n\n    lockFactory.clearAllLocks();\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    if (!directory.isDirectory())\n      throw new IOException(directory + \" not a directory\");\n\n    String[] files = directory.list(new IndexFileNameFilter());            // clear old files\n    if (files == null)\n      throw new IOException(\"Cannot read directory \" + directory.getAbsolutePath());\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + file);\n    }\n\n    String lockPrefix = getLockPrefix().toString(); // clear old locks\n    files = lockDir.list();\n    if (files == null)\n      throw new IOException(\"Cannot read lock directory \" + lockDir.getAbsolutePath());\n    for (int i = 0; i < files.length; i++) {\n      if (!files[i].startsWith(lockPrefix))\n        continue;\n      File lockFile = new File(lockDir, files[i]);\n      if (!lockFile.delete())\n        throw new IOException(\"Cannot delete \" + lockFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create(boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private synchronized void create(boolean doRemoveOldFiles) throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    if (!directory.isDirectory())\n      throw new IOException(directory + \" not a directory\");\n\n    if (doRemoveOldFiles) {\n      String[] files = directory.list(IndexFileNameFilter.getFilter());            // clear old files\n      if (files == null)\n        throw new IOException(\"Cannot read directory \" + directory.getAbsolutePath());\n      for (int i = 0; i < files.length; i++) {\n        File file = new File(directory, files[i]);\n        if (!file.delete())\n          throw new IOException(\"Cannot delete \" + file);\n      }\n    }\n\n    lockFactory.clearAllLocks();\n  }\n\n","sourceOld":"  private synchronized void create() throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    if (!directory.isDirectory())\n      throw new IOException(directory + \" not a directory\");\n\n    String[] files = directory.list(new IndexFileNameFilter());            // clear old files\n    if (files == null)\n      throw new IOException(\"Cannot read directory \" + directory.getAbsolutePath());\n    for (int i = 0; i < files.length; i++) {\n      File file = new File(directory, files[i]);\n      if (!file.delete())\n        throw new IOException(\"Cannot delete \" + file);\n    }\n\n    lockFactory.clearAllLocks();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create(boolean).mjava","sourceNew":"  private void create() throws IOException {\n    if (directory.exists()) {\n      String[] files = directory.list(IndexFileNameFilter.getFilter());            // clear old files\n      if (files == null)\n        throw new IOException(\"Cannot read directory \" + directory.getAbsolutePath());\n      for (int i = 0; i < files.length; i++) {\n        File file = new File(directory, files[i]);\n        if (!file.delete())\n          throw new IOException(\"Cannot delete \" + file);\n      }\n    }\n    lockFactory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n  }\n\n","sourceOld":"  private synchronized void create(boolean doRemoveOldFiles) throws IOException {\n    if (!directory.exists())\n      if (!directory.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + directory);\n\n    if (!directory.isDirectory())\n      throw new IOException(directory + \" not a directory\");\n\n    if (doRemoveOldFiles) {\n      String[] files = directory.list(IndexFileNameFilter.getFilter());            // clear old files\n      if (files == null)\n        throw new IOException(\"Cannot read directory \" + directory.getAbsolutePath());\n      for (int i = 0; i < files.length; i++) {\n        File file = new File(directory, files[i]);\n        if (!file.delete())\n          throw new IOException(\"Cannot delete \" + file);\n      }\n    }\n\n    lockFactory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daaba12f8cbc8a402310a4c4d0ee3fe71f67b051","date":1173376751,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  private void create() throws IOException {\n    if (directory.exists()) {\n      String[] files = directory.list(IndexFileNameFilter.getFilter());            // clear old files\n      if (files == null)\n        throw new IOException(\"cannot read directory \" + directory.getAbsolutePath() + \": list() returned null\");\n      for (int i = 0; i < files.length; i++) {\n        File file = new File(directory, files[i]);\n        if (!file.delete())\n          throw new IOException(\"Cannot delete \" + file);\n      }\n    }\n    lockFactory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n  }\n\n","sourceOld":"  private void create() throws IOException {\n    if (directory.exists()) {\n      String[] files = directory.list(IndexFileNameFilter.getFilter());            // clear old files\n      if (files == null)\n        throw new IOException(\"Cannot read directory \" + directory.getAbsolutePath());\n      for (int i = 0; i < files.length; i++) {\n        File file = new File(directory, files[i]);\n        if (!file.delete())\n          throw new IOException(\"Cannot delete \" + file);\n      }\n    }\n    lockFactory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n  }\n\n","bugFix":["66b12ba4967665216eeb706b58d424c51fb3641a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d54c7739bfe85d68f0352823cd70c10c619fad38","date":1228496593,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":"  /** @deprecated */\n  private void create() throws IOException {\n    if (directory.exists()) {\n      String[] files = directory.list(IndexFileNameFilter.getFilter());            // clear old files\n      if (files == null)\n        throw new IOException(\"cannot read directory \" + directory.getAbsolutePath() + \": list() returned null\");\n      for (int i = 0; i < files.length; i++) {\n        File file = new File(directory, files[i]);\n        if (!file.delete())\n          throw new IOException(\"Cannot delete \" + file);\n      }\n    }\n    lockFactory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n  }\n\n","sourceOld":"  private void create() throws IOException {\n    if (directory.exists()) {\n      String[] files = directory.list(IndexFileNameFilter.getFilter());            // clear old files\n      if (files == null)\n        throw new IOException(\"cannot read directory \" + directory.getAbsolutePath() + \": list() returned null\");\n      for (int i = 0; i < files.length; i++) {\n        File file = new File(directory, files[i]);\n        if (!file.delete())\n          throw new IOException(\"Cannot delete \" + file);\n      }\n    }\n    lockFactory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/store/FSDirectory#create().mjava","sourceNew":null,"sourceOld":"  /** @deprecated */\n  private void create() throws IOException {\n    if (directory.exists()) {\n      String[] files = directory.list(IndexFileNameFilter.getFilter());            // clear old files\n      if (files == null)\n        throw new IOException(\"cannot read directory \" + directory.getAbsolutePath() + \": list() returned null\");\n      for (int i = 0; i < files.length; i++) {\n        File file = new File(directory, files[i]);\n        if (!file.delete())\n          throw new IOException(\"Cannot delete \" + file);\n      }\n    }\n    lockFactory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"98428c062f6310c5aae8ba98844c6dbd98871ef2":["a626a6760d7df571ac4f6a0b4d5a7c9446b0a4e5"],"16df95df890d76f133a069351e752080aada6c46":["5256e856e1442a6e1250d26f1236a33380632dc2"],"daaba12f8cbc8a402310a4c4d0ee3fe71f67b051":["66b12ba4967665216eeb706b58d424c51fb3641a"],"09627d3c8ba7784d4c31705fe1e8ea4d7b697ad4":["ed663e4e170cfa0ae8b86b54d14a9b3c34a1de9d"],"aedb7dd77568e161823334b79f4a9b42d7546031":["98428c062f6310c5aae8ba98844c6dbd98871ef2"],"0d2ad89b02efdb7835a3b64635f6021509a5e751":["9ff37d58ca224def21b586911fb9acddcaca27d8"],"d61f4c23cc2cce8021776edaf50078c935f8d4aa":["f4fca359fabc76b89737cb9c72258fbee416e860"],"a626a6760d7df571ac4f6a0b4d5a7c9446b0a4e5":["09627d3c8ba7784d4c31705fe1e8ea4d7b697ad4"],"5256e856e1442a6e1250d26f1236a33380632dc2":["1edc4cf68dd8c959ef3b13a5f71fd73d702c3195"],"1edc4cf68dd8c959ef3b13a5f71fd73d702c3195":["7032b137d6c884c55b34a33fdc6634af6deb07e1"],"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["d61f4c23cc2cce8021776edaf50078c935f8d4aa"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["daaba12f8cbc8a402310a4c4d0ee3fe71f67b051"],"ed663e4e170cfa0ae8b86b54d14a9b3c34a1de9d":["16df95df890d76f133a069351e752080aada6c46"],"66b12ba4967665216eeb706b58d424c51fb3641a":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"7032b137d6c884c55b34a33fdc6634af6deb07e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4fca359fabc76b89737cb9c72258fbee416e860":["0d2ad89b02efdb7835a3b64635f6021509a5e751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ff37d58ca224def21b586911fb9acddcaca27d8":["aedb7dd77568e161823334b79f4a9b42d7546031"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98428c062f6310c5aae8ba98844c6dbd98871ef2":["aedb7dd77568e161823334b79f4a9b42d7546031"],"16df95df890d76f133a069351e752080aada6c46":["ed663e4e170cfa0ae8b86b54d14a9b3c34a1de9d"],"daaba12f8cbc8a402310a4c4d0ee3fe71f67b051":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"09627d3c8ba7784d4c31705fe1e8ea4d7b697ad4":["a626a6760d7df571ac4f6a0b4d5a7c9446b0a4e5"],"aedb7dd77568e161823334b79f4a9b42d7546031":["9ff37d58ca224def21b586911fb9acddcaca27d8"],"0d2ad89b02efdb7835a3b64635f6021509a5e751":["f4fca359fabc76b89737cb9c72258fbee416e860"],"d61f4c23cc2cce8021776edaf50078c935f8d4aa":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"a626a6760d7df571ac4f6a0b4d5a7c9446b0a4e5":["98428c062f6310c5aae8ba98844c6dbd98871ef2"],"5256e856e1442a6e1250d26f1236a33380632dc2":["16df95df890d76f133a069351e752080aada6c46"],"1edc4cf68dd8c959ef3b13a5f71fd73d702c3195":["5256e856e1442a6e1250d26f1236a33380632dc2"],"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"ed663e4e170cfa0ae8b86b54d14a9b3c34a1de9d":["09627d3c8ba7784d4c31705fe1e8ea4d7b697ad4"],"66b12ba4967665216eeb706b58d424c51fb3641a":["daaba12f8cbc8a402310a4c4d0ee3fe71f67b051"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["66b12ba4967665216eeb706b58d424c51fb3641a"],"7032b137d6c884c55b34a33fdc6634af6deb07e1":["1edc4cf68dd8c959ef3b13a5f71fd73d702c3195"],"f4fca359fabc76b89737cb9c72258fbee416e860":["d61f4c23cc2cce8021776edaf50078c935f8d4aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7032b137d6c884c55b34a33fdc6634af6deb07e1"],"9ff37d58ca224def21b586911fb9acddcaca27d8":["0d2ad89b02efdb7835a3b64635f6021509a5e751"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}