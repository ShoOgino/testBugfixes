{"path":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","commits":[{"id":"432127b09840b2b70209e404d242e7029421ef0a","date":1280433941,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","pathOld":"/dev/null","sourceNew":"  private void helpTestFractionalNumberRangeFacets(final String fieldName) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ae34115bd06f6c8b343179130ee8bdb9b897e62e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","pathOld":"/dev/null","sourceNew":"  private void helpTestFractionalNumberRangeFacets(final String fieldName) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae34115bd06f6c8b343179130ee8bdb9b897e62e","date":1310069935,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","sourceNew":"   private void helpTestFractionalNumberRangeFacets(final String fieldName) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","sourceOld":"  private void helpTestFractionalNumberRangeFacets(final String fieldName) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","bugFix":["432127b09840b2b70209e404d242e7029421ef0a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","sourceNew":"  private void helpTestFractionalNumberRangeFacets(final String fieldName) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","sourceOld":"  private void helpTestFractionalNumberRangeFacets(final String fieldName) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","sourceNew":"   private void helpTestFractionalNumberRangeFacets(final String fieldName) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","sourceOld":"   private void helpTestFractionalNumberRangeFacets(final String fieldName) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","sourceNew":"   private void helpTestFractionalNumberRangeFacets(final String fieldName) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","sourceOld":"  private void helpTestFractionalNumberRangeFacets(final String fieldName) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#helpTestFractionalNumberRangeFacets(String).mjava","sourceNew":"   private void helpTestFractionalNumberRangeFacets(final String fieldName) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","sourceOld":"   private void helpTestFractionalNumberRangeFacets(final String fieldName) {\n\n    final String f = fieldName;\n    final String pre = \"//lst[@name='facet_ranges']/lst[@name='\"+f+\"']/lst[@name='counts']\";\n    final String meta = pre + \"/../\";\n\n    assertQ(f+\": checking counts for lower\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \":checking counts for lower & upper\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"lower\"\n                )\n            ,\"*[count(\"+pre+\"/int)=4]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='6']\"\n            );\n\n    assertQ(f + \": checking counts for upper & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"50\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=3]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='1'  ]\"\n            ,pre+\"/int[@name='40.0'][.='0'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='1']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for upper & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"upper\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='2'  ]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='2']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"10\"\n                ,\"facet.range.end\",   \"30\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='10.0'][.='1'  ]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='0']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"40\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='0']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for lower & edge & outer\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"lower\"\n                ,\"facet.range.include\", \"edge\"\n                ,\"facet.range.include\", \"outer\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='3'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n\n    assertQ(f + \": checking counts for include all\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,\"facet.range\", f\n                ,\"facet.range.start\", \"20\"\n                ,\"facet.range.end\",   \"35.3\"\n                ,\"facet.range.gap\",   \"10\"\n                ,\"facet.range.other\", \"all\"\n                ,\"facet.range.hardend\", \"true\"\n                ,\"facet.range.include\", \"all\"\n                )\n            ,\"*[count(\"+pre+\"/int)=2]\"\n            ,pre+\"/int[@name='20.0'][.='4'  ]\"\n            ,pre+\"/int[@name='30.0'][.='2'  ]\"\n            //\n            ,meta+\"/int[@name='before' ][.='2']\"\n            ,meta+\"/int[@name='after'  ][.='1']\"\n            ,meta+\"/int[@name='between'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["432127b09840b2b70209e404d242e7029421ef0a","ae34115bd06f6c8b343179130ee8bdb9b897e62e"],"ae34115bd06f6c8b343179130ee8bdb9b897e62e":["432127b09840b2b70209e404d242e7029421ef0a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["432127b09840b2b70209e404d242e7029421ef0a"],"c26f00b574427b55127e869b935845554afde1fa":["ae34115bd06f6c8b343179130ee8bdb9b897e62e","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ae34115bd06f6c8b343179130ee8bdb9b897e62e"],"432127b09840b2b70209e404d242e7029421ef0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","432127b09840b2b70209e404d242e7029421ef0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"ae34115bd06f6c8b343179130ee8bdb9b897e62e":["1291e4568eb7d9463d751627596ef14baf4c1603","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["432127b09840b2b70209e404d242e7029421ef0a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"432127b09840b2b70209e404d242e7029421ef0a":["1291e4568eb7d9463d751627596ef14baf4c1603","ae34115bd06f6c8b343179130ee8bdb9b897e62e","c903c3d15906a3da96b8c0c2fb704491005fdbdb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}