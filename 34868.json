{"path":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/CharacterDefinitionWriter#write(String).mjava","commits":[{"id":"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","date":1326399048,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/CharacterDefinitionWriter#write(String).mjava","pathOld":"/dev/null","sourceNew":"  public void write(String baseDir) throws IOException {\n    String filename = baseDir + File.separator +\n      CharacterDefinition.class.getName().replace('.', File.separatorChar) + CharacterDefinition.FILENAME_SUFFIX;\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, CharacterDefinition.HEADER, CharacterDefinition.VERSION);\n      out.writeBytes(characterCategoryMap, 0, characterCategoryMap.length);\n      for (int i = 0; i < CharacterDefinition.CLASS_COUNT; i++) {\n        final byte b = (byte) (\n          (invokeMap[i] ? 0x01 : 0x00) | \n          (groupMap[i] ? 0x02 : 0x00)\n        );\n        out.writeByte(b);\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/CharacterDefinitionWriter#write(String).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/CharacterDefinitionWriter#write(String).mjava","sourceNew":"  public void write(String baseDir) throws IOException {\n    String filename = baseDir + File.separator +\n      CharacterDefinition.class.getName().replace('.', File.separatorChar) + CharacterDefinition.FILENAME_SUFFIX;\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, CharacterDefinition.HEADER, CharacterDefinition.VERSION);\n      out.writeBytes(characterCategoryMap, 0, characterCategoryMap.length);\n      for (int i = 0; i < CharacterDefinition.CLASS_COUNT; i++) {\n        final byte b = (byte) (\n          (invokeMap[i] ? 0x01 : 0x00) | \n          (groupMap[i] ? 0x02 : 0x00)\n        );\n        out.writeByte(b);\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","sourceOld":"  public void write(String baseDir) throws IOException {\n    String filename = baseDir + File.separator +\n      CharacterDefinition.class.getName().replace('.', File.separatorChar) + CharacterDefinition.FILENAME_SUFFIX;\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, CharacterDefinition.HEADER, CharacterDefinition.VERSION);\n      out.writeBytes(characterCategoryMap, 0, characterCategoryMap.length);\n      for (int i = 0; i < CharacterDefinition.CLASS_COUNT; i++) {\n        final byte b = (byte) (\n          (invokeMap[i] ? 0x01 : 0x00) | \n          (groupMap[i] ? 0x02 : 0x00)\n        );\n        out.writeByte(b);\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}