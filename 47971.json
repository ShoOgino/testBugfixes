{"path":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testRebalanceLeaders().mjava","commits":[{"id":"bb3e074ae11c1a9314839f364f6bcb94aba27b0c","date":1595610635,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testRebalanceLeaders().mjava","pathOld":"/dev/null","sourceNew":"  public void testRebalanceLeaders() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), collectionName);\n\n    // Find a replica which isn't leader\n    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollection(collectionName);\n    Slice slice = docCollection.getSlices().iterator().next();\n    Replica newLeader = null;\n    for (Replica replica : slice.getReplicas()) {\n      if (slice.getLeader() == replica) continue;\n      newLeader = replica;\n      break;\n    }\n    assertNotNull(\"Failed to find a candidate of new leader\", newLeader);\n\n    // Set preferredLeader flag to the replica\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", slice.getName());\n    params.set(\"replica\", newLeader.getName());\n    params.set(\"property\", \"preferredLeader\");\n    params.set(\"property.value\", \"true\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cloudClient.request(request);\n\n    // Wait until a preferredleader flag is set to the new leader candidate\n    TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeout.hasTimedOut()) {\n      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlicesMap();\n      Replica me = slices.get(slice.getName()).getReplica(newLeader.getName());\n      if (me.getBool(\"property.preferredleader\", false)) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertFalse(\"Timeout waiting for setting preferredleader flag\", timeout.hasTimedOut());\n\n    // Rebalance leaders\n    params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"maxAtOnce\", \"10\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cloudClient.request(request);\n\n    // Wait until a new leader is elected\n    timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (!timeout.hasTimedOut()) {\n      docCollection = getCollectionState(collectionName);\n      Replica leader = docCollection.getSlice(slice.getName()).getLeader();\n      if (leader != null && leader.getName().equals(newLeader.getName()) &&\n          leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertFalse(\"Timeout waiting for a new leader to be elected\", timeout.hasTimedOut());\n\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, collectionName);\n    checkRTG(1,4, cluster.getJettySolrRunners());\n    new UpdateRequest()\n        .commit(cloudClient, collectionName);\n    waitForNumDocsInAllActiveReplicas(4);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb3e074ae11c1a9314839f364f6bcb94aba27b0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb3e074ae11c1a9314839f364f6bcb94aba27b0c"]},"commit2Childs":{"bb3e074ae11c1a9314839f364f6bcb94aba27b0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb3e074ae11c1a9314839f364f6bcb94aba27b0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}