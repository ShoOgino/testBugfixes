{"path":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n            \n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n          \n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n            \n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n          \n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n            \n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n          \n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n            \n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n          \n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          return Matches.forField(query.field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, query.field, getTermsEnum(fcsi)));\n        }\n\n        private TermsEnum getTermsEnum(SortedSetDocValues fcsi) throws IOException {\n          return query.getTermsEnum(new Terms() {\n\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = getTermsEnum(fcsi);\n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n            \n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n          \n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          return Matches.forField(query.field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, query.field, getTermsEnum(fcsi)));\n        }\n\n        private TermsEnum getTermsEnum(SortedSetDocValues fcsi) throws IOException {\n          return query.getTermsEnum(new Terms() {\n\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = getTermsEnum(fcsi);\n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n            \n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n            \n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n          \n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          return Matches.forField(query.field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, query, query.field, getTermsEnum(fcsi)));\n        }\n\n        private TermsEnum getTermsEnum(SortedSetDocValues fcsi) throws IOException {\n          return query.getTermsEnum(new Terms() {\n\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = getTermsEnum(fcsi);\n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          return Matches.forField(query.field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, query.field, getTermsEnum(fcsi)));\n        }\n\n        private TermsEnum getTermsEnum(SortedSetDocValues fcsi) throws IOException {\n          return query.getTermsEnum(new Terms() {\n\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = getTermsEnum(fcsi);\n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          return MatchesUtils.forField(query.field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, query, query.field, getTermsEnum(fcsi)));\n        }\n\n        private TermsEnum getTermsEnum(SortedSetDocValues fcsi) throws IOException {\n          return query.getTermsEnum(new Terms() {\n\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = getTermsEnum(fcsi);\n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          return Matches.forField(query.field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, query, query.field, getTermsEnum(fcsi)));\n        }\n\n        private TermsEnum getTermsEnum(SortedSetDocValues fcsi) throws IOException {\n          return query.getTermsEnum(new Terms() {\n\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = getTermsEnum(fcsi);\n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesRewriteMethod.MultiTermQueryDocValuesWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          return MatchesUtils.forField(query.field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, query, query.field, getTermsEnum(fcsi)));\n        }\n\n        private TermsEnum getTermsEnum(SortedSetDocValues fcsi) throws IOException {\n          return query.getTermsEnum(new Terms() {\n\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = getTermsEnum(fcsi);\n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), scoreMode, new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      return new ConstantScoreWeight(this, boost) {\n\n        @Override\n        public Matches matches(LeafReaderContext context, int doc) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          return MatchesUtils.forField(query.field, () -> DisjunctionMatchesIterator.fromTermsEnum(context, doc, query, query.field, getTermsEnum(fcsi)));\n        }\n\n        private TermsEnum getTermsEnum(SortedSetDocValues fcsi) throws IOException {\n          return query.getTermsEnum(new Terms() {\n\n            @Override\n            public TermsEnum iterator() throws IOException {\n              return fcsi.termsEnum();\n            }\n\n            @Override\n            public long getSumTotalTermFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long getSumDocFreq() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public int getDocCount() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public long size() {\n              return -1;\n            }\n\n            @Override\n            public boolean hasFreqs() {\n              return false;\n            }\n\n            @Override\n            public boolean hasOffsets() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPositions() {\n              return false;\n            }\n\n            @Override\n            public boolean hasPayloads() {\n              return false;\n            }\n          });\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);\n          TermsEnum termsEnum = getTermsEnum(fcsi);\n          assert termsEnum != null;\n          if (termsEnum.next() == null) {\n            // no matching terms\n            return null;\n          }\n          // fill into a bitset\n          // Cannot use FixedBitSet because we require long index (ord):\n          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());\n          do {\n            long ord = termsEnum.ord();\n            if (ord >= 0) {\n              termSet.set(ord);\n            }\n          } while (termsEnum.next() != null);\n\n          return new ConstantScoreScorer(this, score(), new TwoPhaseIterator(fcsi) {\n\n            @Override\n            public boolean matches() throws IOException {\n              for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {\n                if (termSet.get(ord)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n\n            @Override\n            public float matchCost() {\n              return 3; // lookup in a bitset\n            }\n          });\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return DocValues.isCacheable(ctx, query.field);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["417142ff08fda9cf0b72d5133e63097a166c6458"],"2375622520a4e480775e3104a2f9a423536755b4":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["417142ff08fda9cf0b72d5133e63097a166c6458","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"9c226b0eeb8b028f572020f459851a663a2c064e":["2375622520a4e480775e3104a2f9a423536755b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"2375622520a4e480775e3104a2f9a423536755b4":["9c226b0eeb8b028f572020f459851a663a2c064e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["2375622520a4e480775e3104a2f9a423536755b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}