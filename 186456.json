{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","pathOld":"/dev/null","sourceNew":"      // Pushes next'd frame or seek'd frame; we later\n      // lazy-load the frame only when needed\n      Frame pushFrame(FST.Arc<BytesRef> arc, long fp, int length) throws IOException {\n        final Frame f = getFrame(1+currentFrame.ord);\n        f.arc = arc;\n        if (f.fpOrig == fp && f.nextEnt != -1) {\n          //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n          if (f.prefix > targetBeforeCurrentLength) {\n            f.rewind();\n          } else {\n            // if (DEBUG) {\n            //   System.out.println(\"        skip rewind!\");\n            // }\n          }\n          assert length == f.prefix;\n        } else {\n          f.nextEnt = -1;\n          f.prefix = length;\n          f.state.termBlockOrd = 0;\n          f.fpOrig = f.fp = fp;\n          f.lastSubFP = -1;\n          // if (DEBUG) {\n          //   final int sav = term.length;\n          //   term.length = length;\n          //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n          //   term.length = sav;\n          // }\n        }\n\n        return f;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],long,int).mjava","sourceNew":"      // Pushes next'd frame or seek'd frame; we later\n      // lazy-load the frame only when needed\n      Frame pushFrame(FST.Arc<BytesRef> arc, long fp, int length) throws IOException {\n        final Frame f = getFrame(1+currentFrame.ord);\n        f.arc = arc;\n        if (f.fpOrig == fp && f.nextEnt != -1) {\n          //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n          if (f.prefix > targetBeforeCurrentLength) {\n            f.rewind();\n          } else {\n            // if (DEBUG) {\n            //   System.out.println(\"        skip rewind!\");\n            // }\n          }\n          assert length == f.prefix;\n        } else {\n          f.nextEnt = -1;\n          f.prefix = length;\n          f.state.termBlockOrd = 0;\n          f.fpOrig = f.fp = fp;\n          f.lastSubFP = -1;\n          // if (DEBUG) {\n          //   final int sav = term.length;\n          //   term.length = length;\n          //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n          //   term.length = sav;\n          // }\n        }\n\n        return f;\n      }\n\n","sourceOld":"      // Pushes next'd frame or seek'd frame; we later\n      // lazy-load the frame only when needed\n      Frame pushFrame(FST.Arc<BytesRef> arc, long fp, int length) throws IOException {\n        final Frame f = getFrame(1+currentFrame.ord);\n        f.arc = arc;\n        if (f.fpOrig == fp && f.nextEnt != -1) {\n          //if (DEBUG) System.out.println(\"      push reused frame ord=\" + f.ord + \" fp=\" + f.fp + \" isFloor?=\" + f.isFloor + \" hasTerms=\" + f.hasTerms + \" pref=\" + term + \" nextEnt=\" + f.nextEnt + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength + \" term.length=\" + term.length + \" vs prefix=\" + f.prefix);\n          if (f.prefix > targetBeforeCurrentLength) {\n            f.rewind();\n          } else {\n            // if (DEBUG) {\n            //   System.out.println(\"        skip rewind!\");\n            // }\n          }\n          assert length == f.prefix;\n        } else {\n          f.nextEnt = -1;\n          f.prefix = length;\n          f.state.termBlockOrd = 0;\n          f.fpOrig = f.fp = fp;\n          f.lastSubFP = -1;\n          // if (DEBUG) {\n          //   final int sav = term.length;\n          //   term.length = length;\n          //   System.out.println(\"      push new frame ord=\" + f.ord + \" fp=\" + f.fp + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" pref=\" + brToString(term));\n          //   term.length = sav;\n          // }\n        }\n\n        return f;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}