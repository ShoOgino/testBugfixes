{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery#FilteredQuery(Query,Filter,FilterStrategy).mjava","commits":[{"id":"cc7674a6feb46b954ebfb8ace9eb0383adb93de9","date":1348214796,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery#FilteredQuery(Query,Filter,FilterStrategy).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Constructs a new query which applies a filter to the results of the original query.\n   * {@link Filter#getDocIdSet} will be called every time this query is used in a search.\n   * @param query  Query to be filtered, cannot be <code>null</code>.\n   * @param filter Filter to apply to query results, cannot be <code>null</code>.\n   * @param strategy a filter strategy used to create a filtered scorer. \n   * \n   * @see FilterStrategy\n   */\n  public FilteredQuery (Query query, Filter filter, FilterStrategy strategy) {\n    if (query == null || filter == null)\n      throw new IllegalArgumentException(\"Query and filter cannot be null.\");\n    if (strategy == null)\n      throw new IllegalArgumentException(\"FilterStrategy can not be null\");\n    this.strategy = strategy;\n    this.query = query;\n    this.filter = filter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"40640359164f629dd440a47df2e145d084ce9645","date":1391711808,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery#FilteredQuery(Query,Filter,FilterStrategy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery#FilteredQuery(Query,Filter,FilterStrategy).mjava","sourceNew":"  /**\n   * Expert: Constructs a new query which applies a filter to the results of the original query.\n   * {@link Filter#getDocIdSet} will be called every time this query is used in a search.\n   * @param query  Query to be filtered, cannot be <code>null</code>.\n   * @param filter Filter to apply to query results, cannot be <code>null</code>.\n   * @param strategy a filter strategy used to create a filtered scorer. \n   * \n   * @see FilterStrategy\n   */\n  public FilteredQuery(Query query, Filter filter, FilterStrategy strategy) {\n    if (query == null || filter == null)\n      throw new IllegalArgumentException(\"Query and filter cannot be null.\");\n    if (strategy == null)\n      throw new IllegalArgumentException(\"FilterStrategy can not be null\");\n    this.strategy = strategy;\n    this.query = query;\n    this.filter = filter;\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a new query which applies a filter to the results of the original query.\n   * {@link Filter#getDocIdSet} will be called every time this query is used in a search.\n   * @param query  Query to be filtered, cannot be <code>null</code>.\n   * @param filter Filter to apply to query results, cannot be <code>null</code>.\n   * @param strategy a filter strategy used to create a filtered scorer. \n   * \n   * @see FilterStrategy\n   */\n  public FilteredQuery (Query query, Filter filter, FilterStrategy strategy) {\n    if (query == null || filter == null)\n      throw new IllegalArgumentException(\"Query and filter cannot be null.\");\n    if (strategy == null)\n      throw new IllegalArgumentException(\"FilterStrategy can not be null\");\n    this.strategy = strategy;\n    this.query = query;\n    this.filter = filter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2efbe96401e2c5791b40b9fb77981fccc8bd8fa","date":1424904848,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery#FilteredQuery(Query,Filter,FilterStrategy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery#FilteredQuery(Query,Filter,FilterStrategy).mjava","sourceNew":"  /**\n   * Expert: Constructs a new query which applies a filter to the results of the original query.\n   * {@link Filter#getDocIdSet} will be called every time this query is used in a search.\n   * @param query  Query to be filtered, cannot be <code>null</code>.\n   * @param filter Filter to apply to query results, cannot be <code>null</code>.\n   * @param strategy a filter strategy used to create a filtered scorer. \n   * \n   * @see FilterStrategy\n   */\n  public FilteredQuery(Query query, Filter filter, FilterStrategy strategy) {\n    if (query == null) {\n      throw new IllegalArgumentException(\"Query must not be be null.\");\n    }\n    if (filter == null) {\n      throw new IllegalArgumentException(\"Filter must not be be null.\");\n    }\n    if (strategy == null) {\n      throw new IllegalArgumentException(\"FilterStrategy must not be null\");\n    }\n    this.strategy = strategy;\n    this.query = query;\n    this.filter = filter;\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a new query which applies a filter to the results of the original query.\n   * {@link Filter#getDocIdSet} will be called every time this query is used in a search.\n   * @param query  Query to be filtered, cannot be <code>null</code>.\n   * @param filter Filter to apply to query results, cannot be <code>null</code>.\n   * @param strategy a filter strategy used to create a filtered scorer. \n   * \n   * @see FilterStrategy\n   */\n  public FilteredQuery(Query query, Filter filter, FilterStrategy strategy) {\n    if (query == null || filter == null)\n      throw new IllegalArgumentException(\"Query and filter cannot be null.\");\n    if (strategy == null)\n      throw new IllegalArgumentException(\"FilterStrategy can not be null\");\n    this.strategy = strategy;\n    this.query = query;\n    this.filter = filter;\n  }\n\n","bugFix":null,"bugIntro":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery#FilteredQuery(Query,Filter,FilterStrategy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery#FilteredQuery(Query,Filter,FilterStrategy).mjava","sourceNew":"  /**\n   * Expert: Constructs a new query which applies a filter to the results of the original query.\n   * {@link Filter#getDocIdSet} will be called every time this query is used in a search.\n   * @param query  Query to be filtered, cannot be <code>null</code>.\n   * @param filter Filter to apply to query results, cannot be <code>null</code>.\n   * @param strategy a filter strategy used to create a filtered scorer. \n   * \n   * @see FilterStrategy\n   */\n  public FilteredQuery(Query query, Filter filter, FilterStrategy strategy) {\n    if (query == null) {\n      throw new IllegalArgumentException(\"Query must not be be null.\");\n    }\n    if (filter == null) {\n      throw new IllegalArgumentException(\"Filter must not be be null.\");\n    }\n    if (strategy == null) {\n      throw new IllegalArgumentException(\"FilterStrategy must not be null\");\n    }\n    this.strategy = strategy;\n    this.query = query;\n    this.filter = filter;\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a new query which applies a filter to the results of the original query.\n   * {@link Filter#getDocIdSet} will be called every time this query is used in a search.\n   * @param query  Query to be filtered, cannot be <code>null</code>.\n   * @param filter Filter to apply to query results, cannot be <code>null</code>.\n   * @param strategy a filter strategy used to create a filtered scorer. \n   * \n   * @see FilterStrategy\n   */\n  public FilteredQuery(Query query, Filter filter, FilterStrategy strategy) {\n    if (query == null || filter == null)\n      throw new IllegalArgumentException(\"Query and filter cannot be null.\");\n    if (strategy == null)\n      throw new IllegalArgumentException(\"FilterStrategy can not be null\");\n    this.strategy = strategy;\n    this.query = query;\n    this.filter = filter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685c242a4f1bc78f1fa61c131bd557355edad6c7","date":1429208182,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery#FilteredQuery(Query,Filter,FilterStrategy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery#FilteredQuery(Query,Filter,FilterStrategy).mjava","sourceNew":"  /**\n   * Expert: Constructs a new query which applies a filter to the results of the original query.\n   * {@link Filter#getDocIdSet} will be called every time this query is used in a search.\n   * @param query  Query to be filtered, cannot be <code>null</code>.\n   * @param filter Filter to apply to query results, cannot be <code>null</code>.\n   * @param strategy a filter strategy used to create a filtered scorer. \n   * \n   * @see FilterStrategy\n   */\n  public FilteredQuery(Query query, Filter filter, FilterStrategy strategy) {\n    this.strategy = Objects.requireNonNull(strategy, \"FilterStrategy must not be null\");\n    this.query = Objects.requireNonNull(query, \"Query must not be null\");\n    this.filter = Objects.requireNonNull(filter, \"Filter must not be null\");\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs a new query which applies a filter to the results of the original query.\n   * {@link Filter#getDocIdSet} will be called every time this query is used in a search.\n   * @param query  Query to be filtered, cannot be <code>null</code>.\n   * @param filter Filter to apply to query results, cannot be <code>null</code>.\n   * @param strategy a filter strategy used to create a filtered scorer. \n   * \n   * @see FilterStrategy\n   */\n  public FilteredQuery(Query query, Filter filter, FilterStrategy strategy) {\n    if (query == null) {\n      throw new IllegalArgumentException(\"Query must not be be null.\");\n    }\n    if (filter == null) {\n      throw new IllegalArgumentException(\"Filter must not be be null.\");\n    }\n    if (strategy == null) {\n      throw new IllegalArgumentException(\"FilterStrategy must not be null\");\n    }\n    this.strategy = strategy;\n    this.query = query;\n    this.filter = filter;\n  }\n\n","bugFix":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9","e2efbe96401e2c5791b40b9fb77981fccc8bd8fa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery#FilteredQuery(Query,Filter,FilterStrategy).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Constructs a new query which applies a filter to the results of the original query.\n   * {@link Filter#getDocIdSet} will be called every time this query is used in a search.\n   * @param query  Query to be filtered, cannot be <code>null</code>.\n   * @param filter Filter to apply to query results, cannot be <code>null</code>.\n   * @param strategy a filter strategy used to create a filtered scorer. \n   * \n   * @see FilterStrategy\n   */\n  public FilteredQuery(Query query, Filter filter, FilterStrategy strategy) {\n    this.strategy = Objects.requireNonNull(strategy, \"FilterStrategy must not be null\");\n    this.query = Objects.requireNonNull(query, \"Query must not be null\");\n    this.filter = Objects.requireNonNull(filter, \"Filter must not be null\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2efbe96401e2c5791b40b9fb77981fccc8bd8fa":["40640359164f629dd440a47df2e145d084ce9645"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["40640359164f629dd440a47df2e145d084ce9645","e2efbe96401e2c5791b40b9fb77981fccc8bd8fa"],"1db68e96dd908fcd79ef809095822736aa601d08":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["e2efbe96401e2c5791b40b9fb77981fccc8bd8fa"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"40640359164f629dd440a47df2e145d084ce9645":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"e2efbe96401e2c5791b40b9fb77981fccc8bd8fa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","685c242a4f1bc78f1fa61c131bd557355edad6c7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["1db68e96dd908fcd79ef809095822736aa601d08"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["40640359164f629dd440a47df2e145d084ce9645"],"40640359164f629dd440a47df2e145d084ce9645":["e2efbe96401e2c5791b40b9fb77981fccc8bd8fa","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}