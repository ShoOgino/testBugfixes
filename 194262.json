{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testOverrideGetters().mjava","commits":[{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testOverrideGetters().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOverrideGetters() throws Exception {\n    // Test that IndexWriterConfig overrides all getters, so that javadocs\n    // contain all methods for the users. Also, ensures that IndexWriterConfig\n    // doesn't declare getters that are not declared on LiveIWC.\n    HashSet<String> liveGetters = new HashSet<String>();\n    for (Method m : LiveIndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getName().startsWith(\"get\") && !Modifier.isStatic(m.getModifiers())) {\n        liveGetters.add(m.getName());\n      }\n    }\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getName().startsWith(\"get\") && !Modifier.isStatic(m.getModifiers())) {\n        assertEquals(\"method \" + m.getName() + \" not overrided by IndexWriterConfig\", \n            IndexWriterConfig.class, m.getDeclaringClass());\n        assertTrue(\"method \" + m.getName() + \" not declared on LiveIndexWriterConfig\", \n            liveGetters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testOverrideGetters().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testOverrideGetters().mjava","sourceNew":"  @Test\n  public void testOverrideGetters() throws Exception {\n    // Test that IndexWriterConfig overrides all getters, so that javadocs\n    // contain all methods for the users. Also, ensures that IndexWriterConfig\n    // doesn't declare getters that are not declared on LiveIWC.\n    HashSet<String> liveGetters = new HashSet<>();\n    for (Method m : LiveIndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getName().startsWith(\"get\") && !Modifier.isStatic(m.getModifiers())) {\n        liveGetters.add(m.getName());\n      }\n    }\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getName().startsWith(\"get\") && !Modifier.isStatic(m.getModifiers())) {\n        assertEquals(\"method \" + m.getName() + \" not overrided by IndexWriterConfig\", \n            IndexWriterConfig.class, m.getDeclaringClass());\n        assertTrue(\"method \" + m.getName() + \" not declared on LiveIndexWriterConfig\", \n            liveGetters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverrideGetters() throws Exception {\n    // Test that IndexWriterConfig overrides all getters, so that javadocs\n    // contain all methods for the users. Also, ensures that IndexWriterConfig\n    // doesn't declare getters that are not declared on LiveIWC.\n    HashSet<String> liveGetters = new HashSet<String>();\n    for (Method m : LiveIndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getName().startsWith(\"get\") && !Modifier.isStatic(m.getModifiers())) {\n        liveGetters.add(m.getName());\n      }\n    }\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getName().startsWith(\"get\") && !Modifier.isStatic(m.getModifiers())) {\n        assertEquals(\"method \" + m.getName() + \" not overrided by IndexWriterConfig\", \n            IndexWriterConfig.class, m.getDeclaringClass());\n        assertTrue(\"method \" + m.getName() + \" not declared on LiveIndexWriterConfig\", \n            liveGetters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4e54ed7cef46f86888b5fb547594f62160395c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}