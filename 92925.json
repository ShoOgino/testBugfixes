{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProviderPerReplicaDetails().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5, false, true));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5, false, true));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudUtil.clusterShape(1, 5, false, true));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudTestUtils.clusterShape(1, 5, false, true));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudUtil.clusterShape(1, 5, false, true));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudUtil.clusterShape(1, 5, false, true));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProviderPerReplicaDetails().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudUtil.clusterShape(1, 5, false, true));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (Replica replicaInfo : replicaInfos) {\n          if (replicaInfo.getProperties().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudUtil.clusterShape(1, 5, false, true));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (ReplicaInfo replicaInfo : replicaInfos) {\n          if (replicaInfo.getVariables().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testDataProviderPerReplicaDetails().mjava","sourceNew":null,"sourceOld":"  public void testDataProviderPerReplicaDetails() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    CollectionAdminRequest.createCollection(\"perReplicaDataColl\", \"conf\", 1, 5)\n        .process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"perReplicaDataColl\",\n        CloudUtil.clusterShape(1, 5, false, true));\n    DocCollection coll = getCollectionState(\"perReplicaDataColl\");\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson));\n    Policy.Session session = config.getPolicy().createSession(cluster);\n\n    AtomicInteger count = new AtomicInteger(0);\n    for (Row row : session.getSortedNodes()) {\n      row.collectionVsShardVsReplicas.forEach((c, shardVsReplicas) -> shardVsReplicas.forEach((s, replicaInfos) -> {\n        for (Replica replicaInfo : replicaInfos) {\n          if (replicaInfo.getProperties().containsKey(Type.CORE_IDX.tagName)) count.incrementAndGet();\n        }\n      }));\n    }\n    assertTrue(count.get() > 0);\n\n    CollectionAdminRequest.deleteCollection(\"perReplicaDataColl\").process(solrClient);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}