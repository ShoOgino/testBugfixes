{"path":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyMapUpdates(Map[String,Object],boolean).mjava","commits":[{"id":"eb58c4024f450cc56f3a748012536d763700adb5","date":1495748960,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyMapUpdates(Map[String,Object],boolean).mjava","pathOld":"/dev/null","sourceNew":"    protected boolean applyMapUpdates(Map<String,Object> jsonMap, boolean ignoreCase) {\n      boolean madeChanges = false;\n\n      for (String term : jsonMap.keySet()) {\n\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n\n        // find the mappings using the case aware key\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> output = cpsm.mappings.get(origTerm);\n\n        Object val = jsonMap.get(origTerm); // IMPORTANT: use the original\n        if (val instanceof String) {\n          String strVal = (String)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          if (output.add(strVal)) {\n            madeChanges = true;\n          }\n        } else if (val instanceof List) {\n          List<String> vals = (List<String>)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          for (String nextVal : vals) {\n            if (output.add(nextVal)) {\n              madeChanges = true;\n            }\n          }\n\n        } else {\n          throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, \"Unsupported value \"+val+\n              \" for \"+term+\"; expected single value or a JSON array!\");\n        }\n\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n\n      return madeChanges;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyMapUpdates(Map[String,Object],boolean).mjava","pathOld":"/dev/null","sourceNew":"    protected boolean applyMapUpdates(Map<String,Object> jsonMap, boolean ignoreCase) {\n      boolean madeChanges = false;\n\n      for (String term : jsonMap.keySet()) {\n\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n\n        // find the mappings using the case aware key\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> output = cpsm.mappings.get(origTerm);\n\n        Object val = jsonMap.get(origTerm); // IMPORTANT: use the original\n        if (val instanceof String) {\n          String strVal = (String)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          if (output.add(strVal)) {\n            madeChanges = true;\n          }\n        } else if (val instanceof List) {\n          List<String> vals = (List<String>)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          for (String nextVal : vals) {\n            if (output.add(nextVal)) {\n              madeChanges = true;\n            }\n          }\n\n        } else {\n          throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, \"Unsupported value \"+val+\n              \" for \"+term+\"; expected single value or a JSON array!\");\n        }\n\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n\n      return madeChanges;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyMapUpdates(Map[String,Object],boolean).mjava","pathOld":"/dev/null","sourceNew":"    protected boolean applyMapUpdates(Map<String,Object> jsonMap, boolean ignoreCase) {\n      boolean madeChanges = false;\n\n      for (String term : jsonMap.keySet()) {\n\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n\n        // find the mappings using the case aware key\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> output = cpsm.mappings.get(origTerm);\n\n        Object val = jsonMap.get(origTerm); // IMPORTANT: use the original\n        if (val instanceof String) {\n          String strVal = (String)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          if (output.add(strVal)) {\n            madeChanges = true;\n          }\n        } else if (val instanceof List) {\n          List<String> vals = (List<String>)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          for (String nextVal : vals) {\n            if (output.add(nextVal)) {\n              madeChanges = true;\n            }\n          }\n\n        } else {\n          throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, \"Unsupported value \"+val+\n              \" for \"+term+\"; expected single value or a JSON array!\");\n        }\n\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n\n      return madeChanges;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyMapUpdates(Map[String,Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyMapUpdates(Map[String,Object],boolean).mjava","sourceNew":"    protected boolean applyMapUpdates(Map<String,Object> jsonMap, boolean ignoreCase) {\n      boolean madeChanges = false;\n\n      for (String term : jsonMap.keySet()) {\n\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n\n        // find the mappings using the case aware key\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> output = cpsm.mappings.get(origTerm);\n\n        Object val = jsonMap.get(origTerm); // IMPORTANT: use the original\n        if (val instanceof String) {\n          String strVal = (String)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          if (output.add(strVal)) {\n            madeChanges = true;\n          }\n        } else if (val instanceof List) {\n          @SuppressWarnings({\"unchecked\"})\n          List<String> vals = (List<String>)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          for (String nextVal : vals) {\n            if (output.add(nextVal)) {\n              madeChanges = true;\n            }\n          }\n\n        } else {\n          throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, \"Unsupported value \"+val+\n              \" for \"+term+\"; expected single value or a JSON array!\");\n        }\n\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n\n      return madeChanges;\n    }\n\n","sourceOld":"    protected boolean applyMapUpdates(Map<String,Object> jsonMap, boolean ignoreCase) {\n      boolean madeChanges = false;\n\n      for (String term : jsonMap.keySet()) {\n\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n\n        // find the mappings using the case aware key\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> output = cpsm.mappings.get(origTerm);\n\n        Object val = jsonMap.get(origTerm); // IMPORTANT: use the original\n        if (val instanceof String) {\n          String strVal = (String)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          if (output.add(strVal)) {\n            madeChanges = true;\n          }\n        } else if (val instanceof List) {\n          List<String> vals = (List<String>)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          for (String nextVal : vals) {\n            if (output.add(nextVal)) {\n              madeChanges = true;\n            }\n          }\n\n        } else {\n          throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, \"Unsupported value \"+val+\n              \" for \"+term+\"; expected single value or a JSON array!\");\n        }\n\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n\n      return madeChanges;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyMapUpdates(Map[String,Object],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#applyMapUpdates(Map[String,Object],boolean).mjava","sourceNew":"    protected boolean applyMapUpdates(Map<String,Object> jsonMap, boolean ignoreCase) {\n      boolean madeChanges = false;\n\n      for (String term : jsonMap.keySet()) {\n\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n\n        // find the mappings using the case aware key\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> output = cpsm.mappings.get(origTerm);\n\n        Object val = jsonMap.get(origTerm); // IMPORTANT: use the original\n        if (val instanceof String) {\n          String strVal = (String)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          if (output.add(strVal)) {\n            madeChanges = true;\n          }\n        } else if (val instanceof List) {\n          @SuppressWarnings({\"unchecked\"})\n          List<String> vals = (List<String>)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          for (String nextVal : vals) {\n            if (output.add(nextVal)) {\n              madeChanges = true;\n            }\n          }\n\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unsupported value \"+val+\n              \" for \"+term+\"; expected single value or a JSON array!\");\n        }\n\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n\n      return madeChanges;\n    }\n\n","sourceOld":"    protected boolean applyMapUpdates(Map<String,Object> jsonMap, boolean ignoreCase) {\n      boolean madeChanges = false;\n\n      for (String term : jsonMap.keySet()) {\n\n        String origTerm = term;\n        term = applyCaseSetting(ignoreCase, term);\n\n        // find the mappings using the case aware key\n        CasePreservedSynonymMappings cpsm = synonymMappings.get(term);\n        if (cpsm == null)\n          cpsm = new CasePreservedSynonymMappings();\n\n        Set<String> output = cpsm.mappings.get(origTerm);\n\n        Object val = jsonMap.get(origTerm); // IMPORTANT: use the original\n        if (val instanceof String) {\n          String strVal = (String)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          if (output.add(strVal)) {\n            madeChanges = true;\n          }\n        } else if (val instanceof List) {\n          @SuppressWarnings({\"unchecked\"})\n          List<String> vals = (List<String>)val;\n\n          if (output == null) {\n            output = new TreeSet<>();\n            cpsm.mappings.put(origTerm, output);\n          }\n\n          for (String nextVal : vals) {\n            if (output.add(nextVal)) {\n              madeChanges = true;\n            }\n          }\n\n        } else {\n          throw new ResourceException(Status.CLIENT_ERROR_BAD_REQUEST, \"Unsupported value \"+val+\n              \" for \"+term+\"; expected single value or a JSON array!\");\n        }\n\n        // only add the cpsm to the synonymMappings if it has valid data\n        if (!synonymMappings.containsKey(term) && cpsm.mappings.get(origTerm) != null) {\n          synonymMappings.put(term, cpsm);\n        }\n      }\n\n      return madeChanges;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb58c4024f450cc56f3a748012536d763700adb5"],"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"eb58c4024f450cc56f3a748012536d763700adb5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb58c4024f450cc56f3a748012536d763700adb5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eb58c4024f450cc56f3a748012536d763700adb5":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","eb58c4024f450cc56f3a748012536d763700adb5","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}