{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetSumValueSource#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = _TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<String,Float>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = _TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      TopDocs hits = FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<String,Float>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = _TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<String,Float>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<String,Float>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = _TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<String,Float>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<String,Float>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    w.shutdown();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    w.close();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    w.shutdown();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9190e1c8e3ef93e60501a940d72d4cab5c78ff33","date":1483794433,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, DoubleValuesSource.fromFloatField(\"value\"));\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    w.close();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    w.close();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, DoubleValuesSource.fromFloatField(\"value\"));\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    w.close();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    ValueSource values = new FloatFieldSource(\"value\");\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, values);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v.floatValue() + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    w.close();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d95b99a8aef9635128c666e8594d3fe2fa5a5327","date":1550734586,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, DoubleValuesSource.fromFloatField(\"value\"));\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          if (ent.getValue() > 0) {\n            labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n            totValue += ent.getValue();\n          }\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    w.close();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      testDoc.value = random().nextFloat();\n      doc.add(new FloatDocValuesField(\"value\", testDoc.value));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = new TaxonomyFacetSumValueSource(tr, config, fc, DoubleValuesSource.fromFloatField(\"value\"));\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Float>[] expectedValues = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedValues[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Float v = expectedValues[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedValues[j].put(doc.dims[j], doc.value);\n              } else {\n                expectedValues[j].put(doc.dims[j], v + doc.value);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        double totValue = 0;\n        for(Map.Entry<String,Float> ent : expectedValues[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totValue += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totValue > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totValue, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      if (VERBOSE) {\n        System.out.println(\"expected=\\n\" + expected.toString());\n        System.out.println(\"actual=\\n\" + actual.toString());\n      }\n\n      assertFloatValuesEquals(expected, actual);\n    }\n\n    w.close();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d95b99a8aef9635128c666e8594d3fe2fa5a5327":["9190e1c8e3ef93e60501a940d72d4cab5c78ff33"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["d0ef034a4f10871667ae75181537775ddcf8ade4","9190e1c8e3ef93e60501a940d72d4cab5c78ff33"],"9190e1c8e3ef93e60501a940d72d4cab5c78ff33":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d95b99a8aef9635128c666e8594d3fe2fa5a5327"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","9190e1c8e3ef93e60501a940d72d4cab5c78ff33"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6613659748fe4411a7dcf85266e55db1f95f7315"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d95b99a8aef9635128c666e8594d3fe2fa5a5327":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"9190e1c8e3ef93e60501a940d72d4cab5c78ff33":["d95b99a8aef9635128c666e8594d3fe2fa5a5327","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}