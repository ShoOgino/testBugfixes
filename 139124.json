{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","sourceNew":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolverImpl(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","sourceOld":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolverImpl(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","sourceNew":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolverImpl(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","sourceOld":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolverImpl(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","sourceNew":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","sourceOld":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolverImpl(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","sourceNew":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","sourceOld":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolverImpl(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","sourceNew":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","sourceOld":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","sourceNew":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","sourceOld":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","sourceNew":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<>();\n    Map<String, String> f = new HashMap<>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","sourceOld":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<String, Object>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","sourceNew":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<>();\n    Map<String, String> f = new HashMap<>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.emptyMap());\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","sourceOld":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<>();\n    Map<String, String> f = new HashMap<>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","sourceNew":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<>();\n    Map<String, String> f = new HashMap<>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","sourceOld":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<>();\n    Map<String, String> f = new HashMap<>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.emptyMap());\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","sourceNew":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<>();\n    Map<String, String> f = new HashMap<>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<>();\n    @SuppressWarnings({\"rawtypes\"})\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","sourceOld":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<>();\n    Map<String, String> f = new HashMap<>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<>();\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestClobTransformer#simple().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void simple() throws Exception {\n    List<Map<String, String>> flds = new ArrayList<>();\n    Map<String, String> f = new HashMap<>();\n    // <field column=\"dsc\" clob=\"true\" name=\"description\" />\n    f.put(DataImporter.COLUMN, \"dsc\");\n    f.put(ClobTransformer.CLOB, \"true\");\n    f.put(DataImporter.NAME, \"description\");\n    flds.add(f);\n    Context ctx = getContext(null, new VariableResolver(), null, Context.FULL_DUMP, flds, Collections.EMPTY_MAP);\n    Transformer t = new ClobTransformer();\n    Map<String, Object> row = new HashMap<>();\n    @SuppressWarnings({\"rawtypes\"})\n    Clob clob = (Clob) Proxy.newProxyInstance(this.getClass().getClassLoader(), new Class[]{Clob.class}, new InvocationHandler() {\n      @Override\n      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (method.getName().equals(\"getCharacterStream\")) {\n          return new StringReader(\"hello!\");\n        }\n        return null;\n      }\n    });\n\n    row.put(\"dsc\", clob);\n    t.transformRow(row, ctx);\n    assertEquals(\"hello!\", row.get(\"dsc\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","7c7b0ae5716b6c2044195a818e9ae58205175659"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"7530de27b87b961b51f01bd1299b7004d46e8823":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["407687e67faf6e1f02a211ca078d8e3eed631027","7530de27b87b961b51f01bd1299b7004d46e8823"],"c26f00b574427b55127e869b935845554afde1fa":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}