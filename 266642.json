{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"319624eb66a10b717d3e66af448543e7dc5c479d","date":1322741556,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","sourceNew":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af9b2f910f7011e60325d367a3aefa7a319d3ba7","date":1324575573,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","sourceNew":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa3fe9cc629305c15730ce240ccec397736cc777","date":1325604510,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","sourceNew":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n      if (t instanceof ThreadInterruptedException) {\n        throw (ThreadInterruptedException) t;\n      }\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","sourceNew":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n      if (t instanceof ThreadInterruptedException) {\n        throw (ThreadInterruptedException) t;\n      }\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n        dir.sync(Collections.singleton(IndexFileNames.SEGMENTS_GEN));\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      try {\n        dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      } catch (Throwable t2) {\n        // Ignore; this file is only used in a retry\n        // fallback on init.\n      }\n      if (t instanceof ThreadInterruptedException) {\n        throw (ThreadInterruptedException) t;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa3fe9cc629305c15730ce240ccec397736cc777"],"af9b2f910f7011e60325d367a3aefa7a319d3ba7":["319624eb66a10b717d3e66af448543e7dc5c479d"],"fa3fe9cc629305c15730ce240ccec397736cc777":["af9b2f910f7011e60325d367a3aefa7a319d3ba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"319624eb66a10b717d3e66af448543e7dc5c479d":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["319624eb66a10b717d3e66af448543e7dc5c479d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af9b2f910f7011e60325d367a3aefa7a319d3ba7":["fa3fe9cc629305c15730ce240ccec397736cc777"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"fa3fe9cc629305c15730ce240ccec397736cc777":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"319624eb66a10b717d3e66af448543e7dc5c479d":["af9b2f910f7011e60325d367a3aefa7a319d3ba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}