{"path":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    triggered = true;\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    triggered = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    triggered = true;\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    triggered = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    triggered = true;\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    triggered = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f39780a18aae7ef039e09985b32e302d079e7f","date":1313764730,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    if (triggerOnType == TriggerOn.Soft && lastType == TriggerOn.Soft) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Hard && lastType == TriggerOn.Hard) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Both) {\n      triggered = true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    triggered = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b0203706833d89696e68ebfc15ecdc12ff58acd","date":1315510060,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    if (triggerOnType == TriggerOn.Soft && lastType == TriggerOn.Soft) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Hard && lastType == TriggerOn.Hard) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Both) {\n      triggered = true;\n    }\n    this.newSearcher = newSearcher;\n    // log.info(\"TEST: newSearcher event: triggered=\"+triggered+\" newSearcher=\"+newSearcher);\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    if (triggerOnType == TriggerOn.Soft && lastType == TriggerOn.Soft) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Hard && lastType == TriggerOn.Hard) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Both) {\n      triggered = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02d6c14a1126ed2a641e4de1b0008414004f653b","date":1474882270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    waitForTrigger();\n    if (triggerOnType == TriggerOn.Soft && lastType == TriggerOn.Soft) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Hard && lastType == TriggerOn.Hard) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Both) {\n      triggered = true;\n    }\n    this.newSearcher = newSearcher;\n    // log.info(\"TEST: newSearcher event: triggered=\"+triggered+\" newSearcher=\"+newSearcher);\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    if (triggerOnType == TriggerOn.Soft && lastType == TriggerOn.Soft) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Hard && lastType == TriggerOn.Hard) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Both) {\n      triggered = true;\n    }\n    this.newSearcher = newSearcher;\n    // log.info(\"TEST: newSearcher event: triggered=\"+triggered+\" newSearcher=\"+newSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    waitForTrigger();\n    if (triggerOnType == TriggerOn.Soft && lastType == TriggerOn.Soft) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Hard && lastType == TriggerOn.Hard) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Both) {\n      triggered = true;\n    }\n    this.newSearcher = newSearcher;\n    // log.info(\"TEST: newSearcher event: triggered=\"+triggered+\" newSearcher=\"+newSearcher);\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    if (triggerOnType == TriggerOn.Soft && lastType == TriggerOn.Soft) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Hard && lastType == TriggerOn.Hard) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Both) {\n      triggered = true;\n    }\n    this.newSearcher = newSearcher;\n    // log.info(\"TEST: newSearcher event: triggered=\"+triggered+\" newSearcher=\"+newSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    waitForTrigger();\n    if (triggerOnType == TriggerOn.Soft && lastType == TriggerOn.Soft) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Hard && lastType == TriggerOn.Hard) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Both) {\n      triggered = true;\n    }\n    this.newSearcher = newSearcher;\n    // log.info(\"TEST: newSearcher event: triggered=\"+triggered+\" newSearcher=\"+newSearcher);\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    if (triggerOnType == TriggerOn.Soft && lastType == TriggerOn.Soft) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Hard && lastType == TriggerOn.Hard) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Both) {\n      triggered = true;\n    }\n    this.newSearcher = newSearcher;\n    // log.info(\"TEST: newSearcher event: triggered=\"+triggered+\" newSearcher=\"+newSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff7024b6ebcfb64924eed7543a71a1cbd1e7466c","date":1508275071,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher,\n      SolrIndexSearcher currentSearcher) {\n    waitForTrigger();\n    if (triggerOnType == TriggerOn.Soft && lastType == TriggerOn.Soft) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Hard && lastType == TriggerOn.Hard) {\n      triggered = true;\n    } else if (triggerOnType == TriggerOn.Both) {\n      triggered = true;\n    }\n    this.newSearcher = newSearcher;\n    // log.info(\"TEST: newSearcher event: triggered=\"+triggered+\" newSearcher=\"+newSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b0203706833d89696e68ebfc15ecdc12ff58acd":["51f39780a18aae7ef039e09985b32e302d079e7f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4b0203706833d89696e68ebfc15ecdc12ff58acd","02d6c14a1126ed2a641e4de1b0008414004f653b"],"ff7024b6ebcfb64924eed7543a71a1cbd1e7466c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"51f39780a18aae7ef039e09985b32e302d079e7f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02d6c14a1126ed2a641e4de1b0008414004f653b":["4b0203706833d89696e68ebfc15ecdc12ff58acd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4b0203706833d89696e68ebfc15ecdc12ff58acd","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff7024b6ebcfb64924eed7543a71a1cbd1e7466c"]},"commit2Childs":{"4b0203706833d89696e68ebfc15ecdc12ff58acd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","02d6c14a1126ed2a641e4de1b0008414004f653b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["51f39780a18aae7ef039e09985b32e302d079e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ff7024b6ebcfb64924eed7543a71a1cbd1e7466c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"51f39780a18aae7ef039e09985b32e302d079e7f":["4b0203706833d89696e68ebfc15ecdc12ff58acd"],"ff7024b6ebcfb64924eed7543a71a1cbd1e7466c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"02d6c14a1126ed2a641e4de1b0008414004f653b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}