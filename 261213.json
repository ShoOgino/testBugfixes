{"path":"solr/core/src/test/org/apache/solr/search/TestValueSourceCache#tryQuerySameTypes(String,String,String).mjava","commits":[{"id":"160f7ef2c09376d87dbbda20e03577e483ce0172","date":1320520837,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestValueSourceCache#tryQuerySameTypes(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // This test should will fail because q1 and q3 evaluate as equal unless\n  // fixes for bug 2829 are in place.\n  void tryQuerySameTypes(String template, String numbers, String type) throws ParseException {\n    String s1 = template;\n    String s2 = template;\n    String s3 = template;\n\n    String[] numParts = numbers.split(\",\");\n    String type2 = type.replace(\"val1\", \"val2\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, type).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, type).replace(patN, numParts[idx]);\n      s3 = s3.replace(patV, type2).replace(patN, numParts[idx]);\n    }\n\n    //SolrQueryRequest req1 = req( \"q\",\"*:*\", \"fq\", s1);\n\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    Query q3 = getQuery(s3);\n    QueryUtils.checkEqual(q1, q2);\n    QueryUtils.checkUnequal(q1, q3);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestValueSourceCache#tryQuerySameTypes(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestValueSourceCache#tryQuerySameTypes(String,String,String).mjava","sourceNew":"  // This test should will fail because q1 and q3 evaluate as equal unless\n  // fixes for bug 2829 are in place.\n  void tryQuerySameTypes(String template, String numbers, String type) throws SyntaxError {\n    String s1 = template;\n    String s2 = template;\n    String s3 = template;\n\n    String[] numParts = numbers.split(\",\");\n    String type2 = type.replace(\"val1\", \"val2\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, type).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, type).replace(patN, numParts[idx]);\n      s3 = s3.replace(patV, type2).replace(patN, numParts[idx]);\n    }\n\n    //SolrQueryRequest req1 = req( \"q\",\"*:*\", \"fq\", s1);\n\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    Query q3 = getQuery(s3);\n    QueryUtils.checkEqual(q1, q2);\n    QueryUtils.checkUnequal(q1, q3);\n  }\n\n","sourceOld":"  // This test should will fail because q1 and q3 evaluate as equal unless\n  // fixes for bug 2829 are in place.\n  void tryQuerySameTypes(String template, String numbers, String type) throws ParseException {\n    String s1 = template;\n    String s2 = template;\n    String s3 = template;\n\n    String[] numParts = numbers.split(\",\");\n    String type2 = type.replace(\"val1\", \"val2\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, type).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, type).replace(patN, numParts[idx]);\n      s3 = s3.replace(patV, type2).replace(patN, numParts[idx]);\n    }\n\n    //SolrQueryRequest req1 = req( \"q\",\"*:*\", \"fq\", s1);\n\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    Query q3 = getQuery(s3);\n    QueryUtils.checkEqual(q1, q2);\n    QueryUtils.checkUnequal(q1, q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestValueSourceCache#tryQuerySameTypes(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestValueSourceCache#tryQuerySameTypes(String,String,String).mjava","sourceNew":"  // This test should will fail because q1 and q3 evaluate as equal unless\n  // fixes for bug 2829 are in place.\n  void tryQuerySameTypes(String template, String numbers, String type) throws SyntaxError {\n    String s1 = template;\n    String s2 = template;\n    String s3 = template;\n\n    String[] numParts = numbers.split(\",\");\n    String type2 = type.replace(\"val1\", \"val2\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, type).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, type).replace(patN, numParts[idx]);\n      s3 = s3.replace(patV, type2).replace(patN, numParts[idx]);\n    }\n\n    //SolrQueryRequest req1 = req( \"q\",\"*:*\", \"fq\", s1);\n\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    Query q3 = getQuery(s3);\n    QueryUtils.checkEqual(q1, q2);\n    QueryUtils.checkUnequal(q1, q3);\n  }\n\n","sourceOld":"  // This test should will fail because q1 and q3 evaluate as equal unless\n  // fixes for bug 2829 are in place.\n  void tryQuerySameTypes(String template, String numbers, String type) throws ParseException {\n    String s1 = template;\n    String s2 = template;\n    String s3 = template;\n\n    String[] numParts = numbers.split(\",\");\n    String type2 = type.replace(\"val1\", \"val2\");\n    for (int idx = 0; s1.contains(\"#\"); ++idx) {\n      String patV = \"#v\" + Integer.toString(idx);\n      String patN = \"#n\" + Integer.toString(idx);\n      s1 = s1.replace(patV, type).replace(patN, numParts[idx]);\n      s2 = s2.replace(patV, type).replace(patN, numParts[idx]);\n      s3 = s3.replace(patV, type2).replace(patN, numParts[idx]);\n    }\n\n    //SolrQueryRequest req1 = req( \"q\",\"*:*\", \"fq\", s1);\n\n    Query q1 = getQuery(s1);\n    Query q2 = getQuery(s2);\n    Query q3 = getQuery(s3);\n    QueryUtils.checkEqual(q1, q2);\n    QueryUtils.checkUnequal(q1, q3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdb67100dc016748799a77218aa409478372d79":["160f7ef2c09376d87dbbda20e03577e483ce0172"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["160f7ef2c09376d87dbbda20e03577e483ce0172","3cdb67100dc016748799a77218aa409478372d79"],"160f7ef2c09376d87dbbda20e03577e483ce0172":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cdb67100dc016748799a77218aa409478372d79"]},"commit2Childs":{"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["160f7ef2c09376d87dbbda20e03577e483ce0172"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"160f7ef2c09376d87dbbda20e03577e483ce0172":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}