{"path":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#test64BitCollapseFieldException().mjava","commits":[{"id":"4d048016075a0b8589fcfc77fdf8e2a29fc80964","date":1494631326,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#test64BitCollapseFieldException().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test64BitCollapseFieldException() {\n    ModifiableSolrParams doubleParams = new ModifiableSolrParams();\n    doubleParams.add(\"q\", \"*:*\");\n    doubleParams.add(\"fq\", \"{!collapse field=group_d}\");\n    expectThrows(RuntimeException.class, IOException.class, () -> h.query(req(doubleParams)));\n\n    ModifiableSolrParams dateParams = new ModifiableSolrParams();\n    dateParams.add(\"q\", \"*:*\");\n    dateParams.add(\"fq\", \"{!collapse field=group_dt}\");\n    expectThrows(RuntimeException.class, IOException.class, () -> h.query(req(dateParams)));\n\n    ModifiableSolrParams longParams = new ModifiableSolrParams();\n    longParams.add(\"q\", \"*:*\");\n    longParams.add(\"fq\", \"{!collapse field=group_l}\");\n    expectThrows(RuntimeException.class, IOException.class, () -> h.query(req(longParams)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["432fdfa612cbca5b4cf9125a2c6aa055cd53cadb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#test64BitCollapseFieldException().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test64BitCollapseFieldException() {\n    ModifiableSolrParams doubleParams = new ModifiableSolrParams();\n    doubleParams.add(\"q\", \"*:*\");\n    doubleParams.add(\"fq\", \"{!collapse field=group_d}\");\n    expectThrows(RuntimeException.class, IOException.class, () -> h.query(req(doubleParams)));\n\n    ModifiableSolrParams dateParams = new ModifiableSolrParams();\n    dateParams.add(\"q\", \"*:*\");\n    dateParams.add(\"fq\", \"{!collapse field=group_dt}\");\n    expectThrows(RuntimeException.class, IOException.class, () -> h.query(req(dateParams)));\n\n    ModifiableSolrParams longParams = new ModifiableSolrParams();\n    longParams.add(\"q\", \"*:*\");\n    longParams.add(\"fq\", \"{!collapse field=group_l}\");\n    expectThrows(RuntimeException.class, IOException.class, () -> h.query(req(longParams)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432fdfa612cbca5b4cf9125a2c6aa055cd53cadb","date":1561824429,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#test64BitCollapseFieldException().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#test64BitCollapseFieldException().mjava","sourceNew":"  @Test\n  public void test64BitCollapseFieldException() {\n    assertQEx(\"Should Fail For collapsing on Long fields\", \"Collapsing field should be of either String, Int or Float type\",\n        req(\"q\", \"*:*\", \"fq\", \"{!collapse field=group_l}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should Fail For collapsing on Double fields\", \"Collapsing field should be of either String, Int or Float type\",\n        req(\"q\", \"*:*\", \"fq\", \"{!collapse field=group_d}\"), SolrException.ErrorCode.BAD_REQUEST);\n\n    assertQEx(\"Should Fail For collapsing on Date fields\", \"Collapsing field should be of either String, Int or Float type\",\n        req(\"q\", \"*:*\", \"fq\", \"{!collapse field=group_dt}\"), SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  @Test\n  public void test64BitCollapseFieldException() {\n    ModifiableSolrParams doubleParams = new ModifiableSolrParams();\n    doubleParams.add(\"q\", \"*:*\");\n    doubleParams.add(\"fq\", \"{!collapse field=group_d}\");\n    expectThrows(RuntimeException.class, IOException.class, () -> h.query(req(doubleParams)));\n\n    ModifiableSolrParams dateParams = new ModifiableSolrParams();\n    dateParams.add(\"q\", \"*:*\");\n    dateParams.add(\"fq\", \"{!collapse field=group_dt}\");\n    expectThrows(RuntimeException.class, IOException.class, () -> h.query(req(dateParams)));\n\n    ModifiableSolrParams longParams = new ModifiableSolrParams();\n    longParams.add(\"q\", \"*:*\");\n    longParams.add(\"fq\", \"{!collapse field=group_l}\");\n    expectThrows(RuntimeException.class, IOException.class, () -> h.query(req(longParams)));\n  }\n\n","bugFix":["4d048016075a0b8589fcfc77fdf8e2a29fc80964"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4d048016075a0b8589fcfc77fdf8e2a29fc80964"],"432fdfa612cbca5b4cf9125a2c6aa055cd53cadb":["4d048016075a0b8589fcfc77fdf8e2a29fc80964"],"4d048016075a0b8589fcfc77fdf8e2a29fc80964":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["432fdfa612cbca5b4cf9125a2c6aa055cd53cadb"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"432fdfa612cbca5b4cf9125a2c6aa055cd53cadb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d048016075a0b8589fcfc77fdf8e2a29fc80964":["e9017cf144952056066919f1ebc7897ff9bd71b1","432fdfa612cbca5b4cf9125a2c6aa055cd53cadb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","4d048016075a0b8589fcfc77fdf8e2a29fc80964"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}