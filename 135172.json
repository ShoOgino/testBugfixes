{"path":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","commits":[{"id":"6703e55954db440ab8a2bc2a615c4fa9f66b602b","date":1305691248,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83a37dc263cf01dea15f850a6c6c4d143c48a21b","date":1306448428,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","sourceNew":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          cachedScorer.doc = curDocs[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","sourceNew":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          cachedScorer.doc = curDocs[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","sourceNew":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          cachedScorer.doc = curDocs[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8619be97b9d33e970bfc969eec3b5f2ba1e5bc34","date":1307053289,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","sourceNew":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        other.setScorer(cachedScorer);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          cachedScorer.doc = curDocs[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          cachedScorer.doc = curDocs[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","sourceNew":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        other.setScorer(cachedScorer);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          cachedScorer.doc = curDocs[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          cachedScorer.doc = curDocs[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","sourceNew":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        other.setScorer(cachedScorer);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          cachedScorer.doc = curDocs[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      other.setScorer(cachedScorer);\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          cachedScorer.doc = curDocs[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector.ScoreCachingCollector#replay(Collector).mjava","sourceNew":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        other.setScorer(cachedScorer);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          cachedScorer.doc = curDocs[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void replay(Collector other) throws IOException {\n      replayInit(other);\n      \n      int curUpto = 0;\n      int curBase = 0;\n      int chunkUpto = 0;\n      curDocs = EMPTY_INT_ARRAY;\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        other.setScorer(cachedScorer);\n        while (curBase + curUpto < seg.end) {\n          if (curUpto == curDocs.length) {\n            curBase += curDocs.length;\n            curDocs = cachedDocs.get(chunkUpto);\n            curScores = cachedScores.get(chunkUpto);\n            chunkUpto++;\n            curUpto = 0;\n          }\n          cachedScorer.score = curScores[curUpto];\n          cachedScorer.doc = curDocs[curUpto];\n          other.collect(curDocs[curUpto++]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8619be97b9d33e970bfc969eec3b5f2ba1e5bc34":["83a37dc263cf01dea15f850a6c6c4d143c48a21b"],"6703e55954db440ab8a2bc2a615c4fa9f66b602b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83a37dc263cf01dea15f850a6c6c4d143c48a21b":["6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","83a37dc263cf01dea15f850a6c6c4d143c48a21b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8619be97b9d33e970bfc969eec3b5f2ba1e5bc34"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["2e10cb22a8bdb44339e282925a29182bb2f3174d","8619be97b9d33e970bfc969eec3b5f2ba1e5bc34"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","8619be97b9d33e970bfc969eec3b5f2ba1e5bc34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c3a8a449466c1ff7ce2274fe73dab487256964b4","83a37dc263cf01dea15f850a6c6c4d143c48a21b"]},"commit2Childs":{"8619be97b9d33e970bfc969eec3b5f2ba1e5bc34":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c715a0f99152be7566591f323c6c5a25725a1bcb","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"6703e55954db440ab8a2bc2a615c4fa9f66b602b":["83a37dc263cf01dea15f850a6c6c4d143c48a21b","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"83a37dc263cf01dea15f850a6c6c4d143c48a21b":["8619be97b9d33e970bfc969eec3b5f2ba1e5bc34","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6703e55954db440ab8a2bc2a615c4fa9f66b602b","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c715a0f99152be7566591f323c6c5a25725a1bcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c715a0f99152be7566591f323c6c5a25725a1bcb","1e7c99bd45fa88a3d93a03fdd773053bef72268e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}