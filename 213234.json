{"path":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","commits":[{"id":"d64148a458eb3ddf4d1bb1f1753cb9af194e1707","date":1247144811,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    \n    for( String term : tpv.getTerms() ){\n      if( !termSet.contains( term ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term, tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","pathOld":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldTermStack#FieldTermStack(IndexReader,int,String,FieldQuery).mjava","sourceNew":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    \n    for( String term : tpv.getTerms() ){\n      if( !termSet.contains( term ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term, tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","sourceOld":"  /**\n   * a constructor.\n   * \n   * @param reader IndexReader of the index\n   * @param docId document id to be highlighted\n   * @param fieldName field of the document to be highlighted\n   * @param fieldQuery FieldQuery object\n   * @throws IOException\n   */\n  public FieldTermStack( IndexReader reader, int docId, String fieldName, final FieldQuery fieldQuery ) throws IOException {\n    this.fieldName = fieldName;\n\n    TermFreqVector tfv = reader.getTermFreqVector( docId, fieldName );\n    if( tfv == null ) return; // just return to make null snippets\n    TermPositionVector tpv = null;\n    try{\n      tpv = (TermPositionVector)tfv;\n    }\n    catch( ClassCastException e ){\n      return; // just return to make null snippets\n    }\n    \n    Set<String> termSet = fieldQuery.getTermSet( fieldName );\n    // just return to make null snippet if un-matched fieldName specified when fieldMatch == true\n    if( termSet == null ) return;\n    \n    for( String term : tpv.getTerms() ){\n      if( !termSet.contains( term ) ) continue;\n      int index = tpv.indexOf( term );\n      TermVectorOffsetInfo[] tvois = tpv.getOffsets( index );\n      if( tvois == null ) return; // just return to make null snippets\n      int[] poss = tpv.getTermPositions( index );\n      if( poss == null ) return; // just return to make null snippets\n      for( int i = 0; i < tvois.length; i++ )\n        termList.add( new TermInfo( term, tvois[i].getStartOffset(), tvois[i].getEndOffset(), poss[i] ) );\n    }\n    \n    // sort by position\n    Collections.sort( termList );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d64148a458eb3ddf4d1bb1f1753cb9af194e1707":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707"],"d64148a458eb3ddf4d1bb1f1753cb9af194e1707":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}