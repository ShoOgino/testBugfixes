{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/el/GreekCharsets#toLowerCase(char,char[]).mjava","commits":[{"id":"79bcc705ddb2efccac2124e1382a0c55a820e201","date":1114471417,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/el/GreekCharsets#toLowerCase(char,char[]).mjava","pathOld":"/dev/null","sourceNew":"    public static char toLowerCase(char letter, char[] charset)\r\n    {\r\n        if (charset == UnicodeGreek) {\r\n        \t// First deal with lower case, not accented letters\r\n            if (letter >= '\\u03B1' && letter <= '\\u03C9')\r\n            {\r\n            \t// Special case 'small final sigma', where we return 'small sigma'\r\n                if (letter == '\\u03C2') {\r\n                \treturn '\\u03C3';\r\n                } else {\r\n                \treturn letter;\r\n                }\r\n            }\r\n            // Then deal with lower case, accented letters\r\n            // alpha with acute\r\n            if (letter == '\\u03AC') {\r\n            \treturn '\\u03B1';\r\n            }\r\n            // epsilon with acute\r\n            if (letter == '\\u03AD') {\r\n            \treturn '\\u03B5';\r\n            }\r\n            // eta with acute\r\n            if (letter == '\\u03AE') {\r\n            \treturn '\\u03B7';\r\n            }\r\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\r\n            if (letter == '\\u03AF' || letter == '\\u03CA' || letter == '\\u0390') {\r\n            \treturn '\\u03B9';\r\n            }\r\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\r\n            if (letter == '\\u03CD' || letter == '\\u03CB' || letter == '\\u03B0') {\r\n            \treturn '\\u03C5';\r\n            }\r\n            // omicron with acute\r\n            if (letter == '\\u03CC') {\r\n            \treturn '\\u03BF';\r\n            }\r\n            // omega with acute\r\n            if (letter == '\\u03CE') {\r\n            \treturn '\\u03C9';\r\n            }\r\n            // After that, deal with upper case, not accented letters\r\n            if (letter >= '\\u0391' && letter <= '\\u03A9')\r\n            {\r\n                return (char) (letter + 32);\r\n            }\r\n            // Finally deal with upper case, accented letters\r\n            // alpha with acute\r\n            if (letter == '\\u0386') {\r\n            \treturn '\\u03B1';\r\n            }\r\n            // epsilon with acute\r\n            if (letter == '\\u0388') {\r\n            \treturn '\\u03B5';\r\n            }\r\n            // eta with acute\r\n            if (letter == '\\u0389') {\r\n            \treturn '\\u03B7';\r\n            }\r\n            // iota with acute, iota with diaeresis\r\n            if (letter == '\\u038A' || letter == '\\u03AA') {\r\n            \treturn '\\u03B9';\r\n            }\r\n            // upsilon with acute, upsilon with diaeresis\r\n            if (letter == '\\u038E' || letter == '\\u03AB') {\r\n            \treturn '\\u03C5';\r\n            }\r\n            // omicron with acute\r\n            if (letter == '\\u038C') {\r\n            \treturn '\\u03BF';\r\n            }\r\n            // omega with acute\r\n            if (letter == '\\u038F') {\r\n            \treturn '\\u03C9';\r\n            }\r\n        } else if (charset == ISO) {\r\n        \t// First deal with lower case, not accented letters\r\n            if (letter >= 0xe1 && letter <= 0xf9)\r\n            {\r\n            \t// Special case 'small final sigma', where we return 'small sigma'\r\n                if (letter == 0xf2) {\r\n                \treturn 0xf3;\r\n                } else {\r\n                \treturn letter;\r\n                }\r\n            }\r\n            // Then deal with lower case, accented letters\r\n            // alpha with acute\r\n            if (letter == 0xdc) {\r\n            \treturn 0xe1;\r\n            }\r\n            // epsilon with acute\r\n            if (letter == 0xdd) {\r\n            \treturn 0xe5;\r\n            }\r\n            // eta with acute\r\n            if (letter == 0xde) {\r\n            \treturn 0xe7;\r\n            }\r\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\r\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\r\n            \treturn '\\u03B9';\r\n            }\r\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\r\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\r\n            \treturn 0xf5;\r\n            }\r\n            // omicron with acute\r\n            if (letter == 0xfc) {\r\n            \treturn 0xef;\r\n            }\r\n            // omega with acute\r\n            if (letter == 0xfe) {\r\n            \treturn 0xf9;\r\n            }\r\n            // After that, deal with upper case, not accented letters\r\n            if (letter >= 0xc1 && letter <= 0xd9) {\r\n                return (char) (letter + 32);\r\n            }\r\n            // Finally deal with upper case, accented letters\r\n            // alpha with acute\r\n            if (letter == 0xb6) {\r\n            \treturn 0xe1;\r\n            }\r\n            // epsilon with acute\r\n            if (letter == 0xb8) {\r\n            \treturn 0xe5;\r\n            }\r\n            // eta with acute\r\n            if (letter == 0xb9) {\r\n            \treturn 0xe7;\r\n            }\r\n            // iota with acute, iota with diaeresis\r\n            if (letter == 0xba || letter == 0xda) {\r\n            \treturn 0xe9;\r\n            }\r\n            // upsilon with acute, upsilon with diaeresis\r\n            if (letter == 0xbe || letter == 0xdb) {\r\n            \treturn 0xf5;\r\n            }\r\n            // omicron with acute\r\n            if (letter == 0xbc) {\r\n            \treturn 0xef;\r\n            }\r\n            // omega with acute\r\n            if (letter == 0xbf) {\r\n            \treturn 0xf9;\r\n            }\r\n        } else if (charset == CP1253) {\r\n        \t// First deal with lower case, not accented letters\r\n            if (letter >= 0xe1 && letter <= 0xf9)\r\n            {\r\n            \t// Special case 'small final sigma', where we return 'small sigma'\r\n                if (letter == 0xf2) {\r\n                \treturn 0xf3;\r\n                } else {\r\n                \treturn letter;\r\n                }\r\n            }\r\n            // Then deal with lower case, accented letters\r\n            // alpha with acute\r\n            if (letter == 0xdc) {\r\n            \treturn 0xe1;\r\n            }\r\n            // epsilon with acute\r\n            if (letter == 0xdd) {\r\n            \treturn 0xe5;\r\n            }\r\n            // eta with acute\r\n            if (letter == 0xde) {\r\n            \treturn 0xe7;\r\n            }\r\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\r\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\r\n            \treturn '\\u03B9';\r\n            }\r\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\r\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\r\n            \treturn 0xf5;\r\n            }\r\n            // omicron with acute\r\n            if (letter == 0xfc) {\r\n            \treturn 0xef;\r\n            }\r\n            // omega with acute\r\n            if (letter == 0xfe) {\r\n            \treturn 0xf9;\r\n            }\r\n            // After that, deal with upper case, not accented letters\r\n            if (letter >= 0xc1 && letter <= 0xd9) {\r\n                return (char) (letter + 32);\r\n            }\r\n            // Finally deal with upper case, accented letters\r\n            // alpha with acute\r\n            if (letter == 0xa2) {\r\n            \treturn 0xe1;\r\n            }\r\n            // epsilon with acute\r\n            if (letter == 0xb8) {\r\n            \treturn 0xe5;\r\n            }\r\n            // eta with acute\r\n            if (letter == 0xb9) {\r\n            \treturn 0xe7;\r\n            }\r\n            // iota with acute, iota with diaeresis\r\n            if (letter == 0xba || letter == 0xda) {\r\n            \treturn 0xe9;\r\n            }\r\n            // upsilon with acute, upsilon with diaeresis\r\n            if (letter == 0xbe || letter == 0xdb) {\r\n            \treturn 0xf5;\r\n            }\r\n            // omicron with acute\r\n            if (letter == 0xbc) {\r\n            \treturn 0xef;\r\n            }\r\n            // omega with acute\r\n            if (letter == 0xbf) {\r\n            \treturn 0xf9;\r\n            }\r\n        }\r\n\r\n        return Character.toLowerCase(letter);\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/el/GreekCharsets#toLowerCase(char,char[]).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/el/GreekCharsets#toLowerCase(char,char[]).mjava","sourceNew":"    public static char toLowerCase(char letter, char[] charset)\n    {\n        if (charset == UnicodeGreek) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= '\\u03B1' && letter <= '\\u03C9')\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == '\\u03C2') {\n                \treturn '\\u03C3';\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == '\\u03AC') {\n            \treturn '\\u03B1';\n            }\n            // epsilon with acute\n            if (letter == '\\u03AD') {\n            \treturn '\\u03B5';\n            }\n            // eta with acute\n            if (letter == '\\u03AE') {\n            \treturn '\\u03B7';\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == '\\u03AF' || letter == '\\u03CA' || letter == '\\u0390') {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == '\\u03CD' || letter == '\\u03CB' || letter == '\\u03B0') {\n            \treturn '\\u03C5';\n            }\n            // omicron with acute\n            if (letter == '\\u03CC') {\n            \treturn '\\u03BF';\n            }\n            // omega with acute\n            if (letter == '\\u03CE') {\n            \treturn '\\u03C9';\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= '\\u0391' && letter <= '\\u03A9')\n            {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == '\\u0386') {\n            \treturn '\\u03B1';\n            }\n            // epsilon with acute\n            if (letter == '\\u0388') {\n            \treturn '\\u03B5';\n            }\n            // eta with acute\n            if (letter == '\\u0389') {\n            \treturn '\\u03B7';\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == '\\u038A' || letter == '\\u03AA') {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == '\\u038E' || letter == '\\u03AB') {\n            \treturn '\\u03C5';\n            }\n            // omicron with acute\n            if (letter == '\\u038C') {\n            \treturn '\\u03BF';\n            }\n            // omega with acute\n            if (letter == '\\u038F') {\n            \treturn '\\u03C9';\n            }\n        } else if (charset == ISO) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= 0xe1 && letter <= 0xf9)\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == 0xf2) {\n                \treturn 0xf3;\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == 0xdc) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xdd) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xde) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xfc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xfe) {\n            \treturn 0xf9;\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= 0xc1 && letter <= 0xd9) {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == 0xb6) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xb8) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xb9) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == 0xba || letter == 0xda) {\n            \treturn 0xe9;\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == 0xbe || letter == 0xdb) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xbc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xbf) {\n            \treturn 0xf9;\n            }\n        } else if (charset == CP1253) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= 0xe1 && letter <= 0xf9)\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == 0xf2) {\n                \treturn 0xf3;\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == 0xdc) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xdd) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xde) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xfc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xfe) {\n            \treturn 0xf9;\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= 0xc1 && letter <= 0xd9) {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == 0xa2) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xb8) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xb9) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == 0xba || letter == 0xda) {\n            \treturn 0xe9;\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == 0xbe || letter == 0xdb) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xbc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xbf) {\n            \treturn 0xf9;\n            }\n        }\n\n        return Character.toLowerCase(letter);\n    }\n\n","sourceOld":"    public static char toLowerCase(char letter, char[] charset)\r\n    {\r\n        if (charset == UnicodeGreek) {\r\n        \t// First deal with lower case, not accented letters\r\n            if (letter >= '\\u03B1' && letter <= '\\u03C9')\r\n            {\r\n            \t// Special case 'small final sigma', where we return 'small sigma'\r\n                if (letter == '\\u03C2') {\r\n                \treturn '\\u03C3';\r\n                } else {\r\n                \treturn letter;\r\n                }\r\n            }\r\n            // Then deal with lower case, accented letters\r\n            // alpha with acute\r\n            if (letter == '\\u03AC') {\r\n            \treturn '\\u03B1';\r\n            }\r\n            // epsilon with acute\r\n            if (letter == '\\u03AD') {\r\n            \treturn '\\u03B5';\r\n            }\r\n            // eta with acute\r\n            if (letter == '\\u03AE') {\r\n            \treturn '\\u03B7';\r\n            }\r\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\r\n            if (letter == '\\u03AF' || letter == '\\u03CA' || letter == '\\u0390') {\r\n            \treturn '\\u03B9';\r\n            }\r\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\r\n            if (letter == '\\u03CD' || letter == '\\u03CB' || letter == '\\u03B0') {\r\n            \treturn '\\u03C5';\r\n            }\r\n            // omicron with acute\r\n            if (letter == '\\u03CC') {\r\n            \treturn '\\u03BF';\r\n            }\r\n            // omega with acute\r\n            if (letter == '\\u03CE') {\r\n            \treturn '\\u03C9';\r\n            }\r\n            // After that, deal with upper case, not accented letters\r\n            if (letter >= '\\u0391' && letter <= '\\u03A9')\r\n            {\r\n                return (char) (letter + 32);\r\n            }\r\n            // Finally deal with upper case, accented letters\r\n            // alpha with acute\r\n            if (letter == '\\u0386') {\r\n            \treturn '\\u03B1';\r\n            }\r\n            // epsilon with acute\r\n            if (letter == '\\u0388') {\r\n            \treturn '\\u03B5';\r\n            }\r\n            // eta with acute\r\n            if (letter == '\\u0389') {\r\n            \treturn '\\u03B7';\r\n            }\r\n            // iota with acute, iota with diaeresis\r\n            if (letter == '\\u038A' || letter == '\\u03AA') {\r\n            \treturn '\\u03B9';\r\n            }\r\n            // upsilon with acute, upsilon with diaeresis\r\n            if (letter == '\\u038E' || letter == '\\u03AB') {\r\n            \treturn '\\u03C5';\r\n            }\r\n            // omicron with acute\r\n            if (letter == '\\u038C') {\r\n            \treturn '\\u03BF';\r\n            }\r\n            // omega with acute\r\n            if (letter == '\\u038F') {\r\n            \treturn '\\u03C9';\r\n            }\r\n        } else if (charset == ISO) {\r\n        \t// First deal with lower case, not accented letters\r\n            if (letter >= 0xe1 && letter <= 0xf9)\r\n            {\r\n            \t// Special case 'small final sigma', where we return 'small sigma'\r\n                if (letter == 0xf2) {\r\n                \treturn 0xf3;\r\n                } else {\r\n                \treturn letter;\r\n                }\r\n            }\r\n            // Then deal with lower case, accented letters\r\n            // alpha with acute\r\n            if (letter == 0xdc) {\r\n            \treturn 0xe1;\r\n            }\r\n            // epsilon with acute\r\n            if (letter == 0xdd) {\r\n            \treturn 0xe5;\r\n            }\r\n            // eta with acute\r\n            if (letter == 0xde) {\r\n            \treturn 0xe7;\r\n            }\r\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\r\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\r\n            \treturn '\\u03B9';\r\n            }\r\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\r\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\r\n            \treturn 0xf5;\r\n            }\r\n            // omicron with acute\r\n            if (letter == 0xfc) {\r\n            \treturn 0xef;\r\n            }\r\n            // omega with acute\r\n            if (letter == 0xfe) {\r\n            \treturn 0xf9;\r\n            }\r\n            // After that, deal with upper case, not accented letters\r\n            if (letter >= 0xc1 && letter <= 0xd9) {\r\n                return (char) (letter + 32);\r\n            }\r\n            // Finally deal with upper case, accented letters\r\n            // alpha with acute\r\n            if (letter == 0xb6) {\r\n            \treturn 0xe1;\r\n            }\r\n            // epsilon with acute\r\n            if (letter == 0xb8) {\r\n            \treturn 0xe5;\r\n            }\r\n            // eta with acute\r\n            if (letter == 0xb9) {\r\n            \treturn 0xe7;\r\n            }\r\n            // iota with acute, iota with diaeresis\r\n            if (letter == 0xba || letter == 0xda) {\r\n            \treturn 0xe9;\r\n            }\r\n            // upsilon with acute, upsilon with diaeresis\r\n            if (letter == 0xbe || letter == 0xdb) {\r\n            \treturn 0xf5;\r\n            }\r\n            // omicron with acute\r\n            if (letter == 0xbc) {\r\n            \treturn 0xef;\r\n            }\r\n            // omega with acute\r\n            if (letter == 0xbf) {\r\n            \treturn 0xf9;\r\n            }\r\n        } else if (charset == CP1253) {\r\n        \t// First deal with lower case, not accented letters\r\n            if (letter >= 0xe1 && letter <= 0xf9)\r\n            {\r\n            \t// Special case 'small final sigma', where we return 'small sigma'\r\n                if (letter == 0xf2) {\r\n                \treturn 0xf3;\r\n                } else {\r\n                \treturn letter;\r\n                }\r\n            }\r\n            // Then deal with lower case, accented letters\r\n            // alpha with acute\r\n            if (letter == 0xdc) {\r\n            \treturn 0xe1;\r\n            }\r\n            // epsilon with acute\r\n            if (letter == 0xdd) {\r\n            \treturn 0xe5;\r\n            }\r\n            // eta with acute\r\n            if (letter == 0xde) {\r\n            \treturn 0xe7;\r\n            }\r\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\r\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\r\n            \treturn '\\u03B9';\r\n            }\r\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\r\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\r\n            \treturn 0xf5;\r\n            }\r\n            // omicron with acute\r\n            if (letter == 0xfc) {\r\n            \treturn 0xef;\r\n            }\r\n            // omega with acute\r\n            if (letter == 0xfe) {\r\n            \treturn 0xf9;\r\n            }\r\n            // After that, deal with upper case, not accented letters\r\n            if (letter >= 0xc1 && letter <= 0xd9) {\r\n                return (char) (letter + 32);\r\n            }\r\n            // Finally deal with upper case, accented letters\r\n            // alpha with acute\r\n            if (letter == 0xa2) {\r\n            \treturn 0xe1;\r\n            }\r\n            // epsilon with acute\r\n            if (letter == 0xb8) {\r\n            \treturn 0xe5;\r\n            }\r\n            // eta with acute\r\n            if (letter == 0xb9) {\r\n            \treturn 0xe7;\r\n            }\r\n            // iota with acute, iota with diaeresis\r\n            if (letter == 0xba || letter == 0xda) {\r\n            \treturn 0xe9;\r\n            }\r\n            // upsilon with acute, upsilon with diaeresis\r\n            if (letter == 0xbe || letter == 0xdb) {\r\n            \treturn 0xf5;\r\n            }\r\n            // omicron with acute\r\n            if (letter == 0xbc) {\r\n            \treturn 0xef;\r\n            }\r\n            // omega with acute\r\n            if (letter == 0xbf) {\r\n            \treturn 0xf9;\r\n            }\r\n        }\r\n\r\n        return Character.toLowerCase(letter);\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/el/GreekCharsets#toLowerCase(char,char[]).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/el/GreekCharsets#toLowerCase(char,char[]).mjava","sourceNew":"    public static char toLowerCase(char letter, char[] charset)\n    {\n        if (charset == UnicodeGreek) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= '\\u03B1' && letter <= '\\u03C9')\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == '\\u03C2') {\n                \treturn '\\u03C3';\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == '\\u03AC') {\n            \treturn '\\u03B1';\n            }\n            // epsilon with acute\n            if (letter == '\\u03AD') {\n            \treturn '\\u03B5';\n            }\n            // eta with acute\n            if (letter == '\\u03AE') {\n            \treturn '\\u03B7';\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == '\\u03AF' || letter == '\\u03CA' || letter == '\\u0390') {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == '\\u03CD' || letter == '\\u03CB' || letter == '\\u03B0') {\n            \treturn '\\u03C5';\n            }\n            // omicron with acute\n            if (letter == '\\u03CC') {\n            \treturn '\\u03BF';\n            }\n            // omega with acute\n            if (letter == '\\u03CE') {\n            \treturn '\\u03C9';\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= '\\u0391' && letter <= '\\u03A9')\n            {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == '\\u0386') {\n            \treturn '\\u03B1';\n            }\n            // epsilon with acute\n            if (letter == '\\u0388') {\n            \treturn '\\u03B5';\n            }\n            // eta with acute\n            if (letter == '\\u0389') {\n            \treturn '\\u03B7';\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == '\\u038A' || letter == '\\u03AA') {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == '\\u038E' || letter == '\\u03AB') {\n            \treturn '\\u03C5';\n            }\n            // omicron with acute\n            if (letter == '\\u038C') {\n            \treturn '\\u03BF';\n            }\n            // omega with acute\n            if (letter == '\\u038F') {\n            \treturn '\\u03C9';\n            }\n        } else if (charset == ISO) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= 0xe1 && letter <= 0xf9)\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == 0xf2) {\n                \treturn 0xf3;\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == 0xdc) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xdd) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xde) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xfc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xfe) {\n            \treturn 0xf9;\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= 0xc1 && letter <= 0xd9) {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == 0xb6) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xb8) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xb9) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == 0xba || letter == 0xda) {\n            \treturn 0xe9;\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == 0xbe || letter == 0xdb) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xbc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xbf) {\n            \treturn 0xf9;\n            }\n        } else if (charset == CP1253) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= 0xe1 && letter <= 0xf9)\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == 0xf2) {\n                \treturn 0xf3;\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == 0xdc) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xdd) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xde) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xfc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xfe) {\n            \treturn 0xf9;\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= 0xc1 && letter <= 0xd9) {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == 0xa2) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xb8) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xb9) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == 0xba || letter == 0xda) {\n            \treturn 0xe9;\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == 0xbe || letter == 0xdb) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xbc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xbf) {\n            \treturn 0xf9;\n            }\n        }\n\n        return Character.toLowerCase(letter);\n    }\n\n","sourceOld":"    public static char toLowerCase(char letter, char[] charset)\n    {\n        if (charset == UnicodeGreek) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= '\\u03B1' && letter <= '\\u03C9')\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == '\\u03C2') {\n                \treturn '\\u03C3';\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == '\\u03AC') {\n            \treturn '\\u03B1';\n            }\n            // epsilon with acute\n            if (letter == '\\u03AD') {\n            \treturn '\\u03B5';\n            }\n            // eta with acute\n            if (letter == '\\u03AE') {\n            \treturn '\\u03B7';\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == '\\u03AF' || letter == '\\u03CA' || letter == '\\u0390') {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == '\\u03CD' || letter == '\\u03CB' || letter == '\\u03B0') {\n            \treturn '\\u03C5';\n            }\n            // omicron with acute\n            if (letter == '\\u03CC') {\n            \treturn '\\u03BF';\n            }\n            // omega with acute\n            if (letter == '\\u03CE') {\n            \treturn '\\u03C9';\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= '\\u0391' && letter <= '\\u03A9')\n            {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == '\\u0386') {\n            \treturn '\\u03B1';\n            }\n            // epsilon with acute\n            if (letter == '\\u0388') {\n            \treturn '\\u03B5';\n            }\n            // eta with acute\n            if (letter == '\\u0389') {\n            \treturn '\\u03B7';\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == '\\u038A' || letter == '\\u03AA') {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == '\\u038E' || letter == '\\u03AB') {\n            \treturn '\\u03C5';\n            }\n            // omicron with acute\n            if (letter == '\\u038C') {\n            \treturn '\\u03BF';\n            }\n            // omega with acute\n            if (letter == '\\u038F') {\n            \treturn '\\u03C9';\n            }\n        } else if (charset == ISO) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= 0xe1 && letter <= 0xf9)\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == 0xf2) {\n                \treturn 0xf3;\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == 0xdc) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xdd) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xde) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xfc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xfe) {\n            \treturn 0xf9;\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= 0xc1 && letter <= 0xd9) {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == 0xb6) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xb8) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xb9) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == 0xba || letter == 0xda) {\n            \treturn 0xe9;\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == 0xbe || letter == 0xdb) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xbc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xbf) {\n            \treturn 0xf9;\n            }\n        } else if (charset == CP1253) {\n        \t// First deal with lower case, not accented letters\n            if (letter >= 0xe1 && letter <= 0xf9)\n            {\n            \t// Special case 'small final sigma', where we return 'small sigma'\n                if (letter == 0xf2) {\n                \treturn 0xf3;\n                } else {\n                \treturn letter;\n                }\n            }\n            // Then deal with lower case, accented letters\n            // alpha with acute\n            if (letter == 0xdc) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xdd) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xde) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis, iota with acute and diaeresis\n            if (letter == 0xdf || letter == 0xfa || letter == 0xc0) {\n            \treturn '\\u03B9';\n            }\n            // upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis\n            if (letter == 0xfd || letter == 0xfb || letter == 0xe0) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xfc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xfe) {\n            \treturn 0xf9;\n            }\n            // After that, deal with upper case, not accented letters\n            if (letter >= 0xc1 && letter <= 0xd9) {\n                return (char) (letter + 32);\n            }\n            // Finally deal with upper case, accented letters\n            // alpha with acute\n            if (letter == 0xa2) {\n            \treturn 0xe1;\n            }\n            // epsilon with acute\n            if (letter == 0xb8) {\n            \treturn 0xe5;\n            }\n            // eta with acute\n            if (letter == 0xb9) {\n            \treturn 0xe7;\n            }\n            // iota with acute, iota with diaeresis\n            if (letter == 0xba || letter == 0xda) {\n            \treturn 0xe9;\n            }\n            // upsilon with acute, upsilon with diaeresis\n            if (letter == 0xbe || letter == 0xdb) {\n            \treturn 0xf5;\n            }\n            // omicron with acute\n            if (letter == 0xbc) {\n            \treturn 0xef;\n            }\n            // omega with acute\n            if (letter == 0xbf) {\n            \treturn 0xf9;\n            }\n        }\n\n        return Character.toLowerCase(letter);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"79bcc705ddb2efccac2124e1382a0c55a820e201":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["79bcc705ddb2efccac2124e1382a0c55a820e201"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79bcc705ddb2efccac2124e1382a0c55a820e201":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79bcc705ddb2efccac2124e1382a0c55a820e201"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}