{"path":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#width().mjava","commits":[{"id":"e10aa10647f2ded96fbb246cbbd6e13eb8b032dc","date":1434656225,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#width().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the width of the match, which is typically used to compute\n   * the {@link SimScorer#computeSlopFactor(int) slop factor}. It is only legal\n   * to call this method when the iterator is on a valid doc ID and positioned.\n   * The return value must be positive, and lower values means that the match is\n   * better.\n   */\n  public abstract int width();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"136d4e97e5588b3f560e4d157962baa796f6c259","date":1510236334,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#width().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#width().mjava","sourceNew":"  /**\n   * Return the width of the match, which is typically used to sloppy freq. It is only legal\n   * to call this method when the iterator is on a valid doc ID and positioned.\n   * The return value must be positive, and lower values means that the match is\n   * better.\n   */\n  public abstract int width();\n\n","sourceOld":"  /**\n   * Return the width of the match, which is typically used to compute\n   * the {@link SimScorer#computeSlopFactor(int) slop factor}. It is only legal\n   * to call this method when the iterator is on a valid doc ID and positioned.\n   * The return value must be positive, and lower values means that the match is\n   * better.\n   */\n  public abstract int width();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"297201ceb6f93f54f44df6d02cdc988591428b75","date":1510304523,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#width().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#width().mjava","sourceNew":"  /**\n   * Return the width of the match, which is typically used to compute\n   * the {@link SimScorer#computeSlopFactor(int) slop factor}. It is only legal\n   * to call this method when the iterator is on a valid doc ID and positioned.\n   * The return value must be positive, and lower values means that the match is\n   * better.\n   */\n  public abstract int width();\n\n","sourceOld":"  /**\n   * Return the width of the match, which is typically used to sloppy freq. It is only legal\n   * to call this method when the iterator is on a valid doc ID and positioned.\n   * The return value must be positive, and lower values means that the match is\n   * better.\n   */\n  public abstract int width();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9b82182bcb9110d24f7de32032113dbf31606c2","date":1510306998,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#width().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#width().mjava","sourceNew":"  /**\n   * Return the width of the match, which is typically used to sloppy freq. It is only legal\n   * to call this method when the iterator is on a valid doc ID and positioned.\n   * The return value must be positive, and lower values means that the match is\n   * better.\n   */\n  public abstract int width();\n\n","sourceOld":"  /**\n   * Return the width of the match, which is typically used to compute\n   * the {@link SimScorer#computeSlopFactor(int) slop factor}. It is only legal\n   * to call this method when the iterator is on a valid doc ID and positioned.\n   * The return value must be positive, and lower values means that the match is\n   * better.\n   */\n  public abstract int width();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e10aa10647f2ded96fbb246cbbd6e13eb8b032dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9b82182bcb9110d24f7de32032113dbf31606c2":["297201ceb6f93f54f44df6d02cdc988591428b75"],"297201ceb6f93f54f44df6d02cdc988591428b75":["136d4e97e5588b3f560e4d157962baa796f6c259"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b9b82182bcb9110d24f7de32032113dbf31606c2"],"136d4e97e5588b3f560e4d157962baa796f6c259":["e10aa10647f2ded96fbb246cbbd6e13eb8b032dc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e10aa10647f2ded96fbb246cbbd6e13eb8b032dc"],"e10aa10647f2ded96fbb246cbbd6e13eb8b032dc":["136d4e97e5588b3f560e4d157962baa796f6c259"],"b9b82182bcb9110d24f7de32032113dbf31606c2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"297201ceb6f93f54f44df6d02cdc988591428b75":["b9b82182bcb9110d24f7de32032113dbf31606c2"],"136d4e97e5588b3f560e4d157962baa796f6c259":["297201ceb6f93f54f44df6d02cdc988591428b75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}