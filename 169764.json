{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton repeat(Automaton a) {\n    a = a.cloneExpanded();\n    State s = new State();\n    s.accept = true;\n    s.addEpsilon(a.initial);\n    for (State p : a.getAcceptStates())\n      p.addEpsilon(s);\n    a.initial = s;\n    a.deterministic = false;\n    //a.clearHashCode();\n    a.clearNumberedStates();\n    a.checkMinimizeAlways();\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton repeat(Automaton a) {\n    a = a.cloneExpanded();\n    State s = new State();\n    s.accept = true;\n    s.addEpsilon(a.initial);\n    for (State p : a.getAcceptStates())\n      p.addEpsilon(s);\n    a.initial = s;\n    a.deterministic = false;\n    //a.clearHashCode();\n    a.clearNumberedStates();\n    a.checkMinimizeAlways();\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton repeat(Automaton a) {\n    a = a.cloneExpanded();\n    State s = new State();\n    s.accept = true;\n    s.addEpsilon(a.initial);\n    for (State p : a.getAcceptStates())\n      p.addEpsilon(s);\n    a.initial = s;\n    a.deterministic = false;\n    //a.clearHashCode();\n    a.clearNumberedStates();\n    a.checkMinimizeAlways();\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton repeat(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n    builder.createState();\n    builder.setAccept(0, true);\n    builder.copy(a);\n\n    Transition t = new Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      builder.addTransition(0, t.dest+1, t.min, t.max);\n    }\n\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      if (a.isAccept(s)) {\n        count = a.initTransition(0, t);\n        for(int i=0;i<count;i++) {\n          a.getNextTransition(t);\n          builder.addTransition(s+1, t.dest+1, t.min, t.max);\n        }\n      }\n    }\n\n    return builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton repeat(Automaton a) {\n    a = a.cloneExpanded();\n    State s = new State();\n    s.accept = true;\n    s.addEpsilon(a.initial);\n    for (State p : a.getAcceptStates())\n      p.addEpsilon(s);\n    a.initial = s;\n    a.deterministic = false;\n    //a.clearHashCode();\n    a.clearNumberedStates();\n    a.checkMinimizeAlways();\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}