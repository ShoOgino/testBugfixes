{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testUnknownError().mjava","commits":[{"id":"c48871ed951104729f5e17a8ee1091b43fa18980","date":1446564542,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testUnknownError().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOutOfMemory#testBasics().mjava","sourceNew":"  public void testUnknownError() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (r.nextInt(3000) == 0) {\n          StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n          boolean ok = false;\n          for (int i = 0; i < stack.length; i++) {\n            if (stack[i].getClassName().equals(IndexWriter.class.getName())) {\n              ok = true;\n            }\n          }\n          if (ok) {\n            throw new UnknownError(\"Fake UnknownError\");\n          }\n        }\n      }\n    });\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (r.nextInt(3000) == 0) {\n          StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n          boolean ok = false;\n          for (int i = 0; i < stack.length; i++) {\n            if (stack[i].getClassName().equals(IndexWriter.class.getName())) {\n              ok = true;\n            }\n          }\n          if (ok) {\n            throw new OutOfMemoryError(\"Fake OutOfMemoryError\");\n          }\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2916966cc9815e973c01452a0d76c98c5e0d0926","date":1577444040,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testUnknownError().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testUnknownError().mjava","sourceNew":"  public void testUnknownError() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (r.nextInt(3000) == 0) {\n          if (callStackContains(IndexWriter.class)) {\n            throw new UnknownError(\"Fake UnknownError\");\n          }\n        }\n      }\n    });\n  }\n\n","sourceOld":"  public void testUnknownError() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (r.nextInt(3000) == 0) {\n          StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n          boolean ok = false;\n          for (int i = 0; i < stack.length; i++) {\n            if (stack[i].getClassName().equals(IndexWriter.class.getName())) {\n              ok = true;\n            }\n          }\n          if (ok) {\n            throw new UnknownError(\"Fake UnknownError\");\n          }\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec73c5617c177b1d81ddfe04bbff1d08fccecc","date":1577456244,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testUnknownError().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnVMError#testUnknownError().mjava","sourceNew":"  public void testUnknownError() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (r.nextInt(3000) == 0) {\n          if (callStackContains(IndexWriter.class)) {\n            throw new UnknownError(\"Fake UnknownError\");\n          }\n        }\n      }\n    });\n  }\n\n","sourceOld":"  public void testUnknownError() throws Exception {\n    final Random r = new Random(random().nextLong());\n    doTest(new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (r.nextInt(3000) == 0) {\n          StackTraceElement stack[] = Thread.currentThread().getStackTrace();\n          boolean ok = false;\n          for (int i = 0; i < stack.length; i++) {\n            if (stack[i].getClassName().equals(IndexWriter.class.getName())) {\n              ok = true;\n            }\n          }\n          if (ok) {\n            throw new UnknownError(\"Fake UnknownError\");\n          }\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2916966cc9815e973c01452a0d76c98c5e0d0926":["c48871ed951104729f5e17a8ee1091b43fa18980"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":["c48871ed951104729f5e17a8ee1091b43fa18980","2916966cc9815e973c01452a0d76c98c5e0d0926"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2916966cc9815e973c01452a0d76c98c5e0d0926"],"c48871ed951104729f5e17a8ee1091b43fa18980":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c48871ed951104729f5e17a8ee1091b43fa18980"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":[],"c48871ed951104729f5e17a8ee1091b43fa18980":["2916966cc9815e973c01452a0d76c98c5e0d0926","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}