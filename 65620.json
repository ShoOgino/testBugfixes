{"path":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamBody().mjava","sourceNew":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<>();\n    ArrayList<String> output = new ArrayList<>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamBody() throws Exception\n  {\n    String body1 = \"AMANAPLANPANAMA\";\n    String body2 = \"qwertasdfgzxcvb\";\n    String body3 = \"1234567890\";\n    \n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertEquals( body1, IOUtils.toString( streams.get(0).getReader() ) );\n    req.close();\n\n    // Now add three and make sure they come out ok\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_BODY, new String[] {body1,body2,body3} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 3, streams.size() );\n    ArrayList<String> input  = new ArrayList<String>();\n    ArrayList<String> output = new ArrayList<String>();\n    input.add( body1 );\n    input.add( body2 );\n    input.add( body3 );\n    output.add( IOUtils.toString( streams.get(0).getReader() ) );\n    output.add( IOUtils.toString( streams.get(1).getReader() ) );\n    output.add( IOUtils.toString( streams.get(2).getReader() ) );\n    // sort them so the output is consistent\n    Collections.sort( input );\n    Collections.sort( output );\n    assertEquals( input.toString(), output.toString() );\n    req.close();\n\n    // set the contentType and make sure tat gets set\n    String ctype = \"text/xxx\";\n    streams = new ArrayList<ContentStream>();\n    args.put( CommonParams.STREAM_CONTENTTYPE, new String[] {ctype} );\n    req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    for( ContentStream s : streams ) {\n      assertEquals( ctype, s.getContentType() );\n    }\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}