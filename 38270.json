{"path":"lucene/core/src/java/org/apache/lucene/codecs/SortedDocValuesConsumer.Merger#finish(SortedDocValuesConsumer).mjava","commits":[{"id":"f45b94f31bcc0de4497b99f7b51993765f64c601","date":1352745246,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SortedDocValuesConsumer.Merger#finish(SortedDocValuesConsumer).mjava","pathOld":"/dev/null","sourceNew":"    public void finish(SortedDocValuesConsumer consumer) throws IOException {\n\n      // Third pass: write merged result\n      for(BytesRef term : mergedTerms) {\n        consumer.addValue(term);\n      }\n\n      for(SegmentState segState : segStates) {\n        Bits liveDocs = segState.reader.getLiveDocs();\n        int maxDoc = segState.reader.maxDoc();\n        for(int docID=0;docID<maxDoc;docID++) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int segOrd = segState.source.ord(docID);\n            int mergedOrd = segState.segOrdToMergedOrd[segOrd];\n            consumer.addDoc(mergedOrd);\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SortedDocValuesConsumer.Merger#finish(SortedDocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SortedDocValuesConsumer.Merger#finish(SortedDocValuesConsumer).mjava","sourceNew":"    public void finish(SortedDocValuesConsumer consumer) throws IOException {\n\n      // Third pass: write merged result\n      for(BytesRef term : mergedTerms) {\n        consumer.addValue(term);\n      }\n\n      for(SegmentState segState : segStates) {\n        Bits liveDocs = segState.reader.getLiveDocs();\n        int maxDoc = segState.reader.maxDoc();\n        for(int docID=0;docID<maxDoc;docID++) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int segOrd = segState.values.getOrd(docID);\n            int mergedOrd = segState.segOrdToMergedOrd[segOrd];\n            consumer.addDoc(mergedOrd);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void finish(SortedDocValuesConsumer consumer) throws IOException {\n\n      // Third pass: write merged result\n      for(BytesRef term : mergedTerms) {\n        consumer.addValue(term);\n      }\n\n      for(SegmentState segState : segStates) {\n        Bits liveDocs = segState.reader.getLiveDocs();\n        int maxDoc = segState.reader.maxDoc();\n        for(int docID=0;docID<maxDoc;docID++) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int segOrd = segState.source.ord(docID);\n            int mergedOrd = segState.segOrdToMergedOrd[segOrd];\n            consumer.addDoc(mergedOrd);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83f7535831b82edd777d50f0276d244b3c9a4734","date":1353267152,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SortedDocValuesConsumer.Merger#finish(SortedDocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SortedDocValuesConsumer.Merger#finish(SortedDocValuesConsumer).mjava","sourceNew":"    public void finish(SortedDocValuesConsumer consumer) throws IOException {\n\n      // Third pass: write merged result\n      for(BytesRef term : mergedTerms) {\n        consumer.addValue(term);\n      }\n\n      for(SegmentState segState : segStates) {\n        Bits liveDocs = segState.reader.getLiveDocs();\n        int maxDoc = segState.reader.maxDoc();\n        for(int docID=0;docID<maxDoc;docID++) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int segOrd = segState.values.getOrd(docID);\n            /*\n            if (segState.segOrdToMergedOrd == null) {\n              BytesRef scratch = new BytesRef();\n              segState.values.lookupOrd(segOrd, scratch);\n              System.out.println(\"docID=\" + docID + \" segOrd=\" + segOrd + \" segValue=\" + scratch.utf8ToString());\n            }\n            */\n            int mergedOrd = segState.segOrdToMergedOrd[segOrd];\n            consumer.addDoc(mergedOrd);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void finish(SortedDocValuesConsumer consumer) throws IOException {\n\n      // Third pass: write merged result\n      for(BytesRef term : mergedTerms) {\n        consumer.addValue(term);\n      }\n\n      for(SegmentState segState : segStates) {\n        Bits liveDocs = segState.reader.getLiveDocs();\n        int maxDoc = segState.reader.maxDoc();\n        for(int docID=0;docID<maxDoc;docID++) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int segOrd = segState.values.getOrd(docID);\n            int mergedOrd = segState.segOrdToMergedOrd[segOrd];\n            consumer.addDoc(mergedOrd);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59b3aad76859740c1ab8da298bf0f9ccc903b4cf","date":1353279192,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SortedDocValuesConsumer.Merger#finish(SortedDocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SortedDocValuesConsumer.Merger#finish(SortedDocValuesConsumer).mjava","sourceNew":"    public void finish(SortedDocValuesConsumer consumer) throws IOException {\n\n      // Third pass: write merged result\n      for(BytesRef term : mergedTerms) {\n        consumer.addValue(term);\n      }\n\n      for(SegmentState segState : segStates) {\n        Bits liveDocs = segState.reader.getLiveDocs();\n        int maxDoc = segState.reader.maxDoc();\n        for(int docID=0;docID<maxDoc;docID++) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int segOrd = segState.values.getOrd(docID);\n            int mergedOrd = segState.segOrdToMergedOrd[segOrd];\n            consumer.addDoc(mergedOrd);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void finish(SortedDocValuesConsumer consumer) throws IOException {\n\n      // Third pass: write merged result\n      for(BytesRef term : mergedTerms) {\n        consumer.addValue(term);\n      }\n\n      for(SegmentState segState : segStates) {\n        Bits liveDocs = segState.reader.getLiveDocs();\n        int maxDoc = segState.reader.maxDoc();\n        for(int docID=0;docID<maxDoc;docID++) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int segOrd = segState.values.getOrd(docID);\n            /*\n            if (segState.segOrdToMergedOrd == null) {\n              BytesRef scratch = new BytesRef();\n              segState.values.lookupOrd(segOrd, scratch);\n              System.out.println(\"docID=\" + docID + \" segOrd=\" + segOrd + \" segValue=\" + scratch.utf8ToString());\n            }\n            */\n            int mergedOrd = segState.segOrdToMergedOrd[segOrd];\n            consumer.addDoc(mergedOrd);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed9002c5afac843c7f2d04d88e74b40d627e1af","date":1357602069,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SortedDocValuesConsumer.Merger#finish(SortedDocValuesConsumer).mjava","sourceNew":null,"sourceOld":"    public void finish(SortedDocValuesConsumer consumer) throws IOException {\n\n      // Third pass: write merged result\n      for(BytesRef term : mergedTerms) {\n        consumer.addValue(term);\n      }\n\n      for(SegmentState segState : segStates) {\n        Bits liveDocs = segState.reader.getLiveDocs();\n        int maxDoc = segState.reader.maxDoc();\n        for(int docID=0;docID<maxDoc;docID++) {\n          if (liveDocs == null || liveDocs.get(docID)) {\n            int segOrd = segState.values.getOrd(docID);\n            int mergedOrd = segState.segOrdToMergedOrd[segOrd];\n            consumer.addDoc(mergedOrd);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59b3aad76859740c1ab8da298bf0f9ccc903b4cf":["83f7535831b82edd777d50f0276d244b3c9a4734"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["f45b94f31bcc0de4497b99f7b51993765f64c601"],"1ed9002c5afac843c7f2d04d88e74b40d627e1af":["59b3aad76859740c1ab8da298bf0f9ccc903b4cf"],"f45b94f31bcc0de4497b99f7b51993765f64c601":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83f7535831b82edd777d50f0276d244b3c9a4734":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f45b94f31bcc0de4497b99f7b51993765f64c601","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59b3aad76859740c1ab8da298bf0f9ccc903b4cf":["1ed9002c5afac843c7f2d04d88e74b40d627e1af"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["83f7535831b82edd777d50f0276d244b3c9a4734"],"f45b94f31bcc0de4497b99f7b51993765f64c601":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"1ed9002c5afac843c7f2d04d88e74b40d627e1af":[],"83f7535831b82edd777d50f0276d244b3c9a4734":["59b3aad76859740c1ab8da298bf0f9ccc903b4cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1ed9002c5afac843c7f2d04d88e74b40d627e1af","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}