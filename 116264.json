{"path":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,IndexReader.AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, IndexReader.AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader, field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=0; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=0; i<nord; i++) {\n      sindex.lookupOrd(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=0; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=0; i<nord; i++) {\n      sindex.lookupOrd(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.numOrd();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=1; i<nord; i++) {\n      sindex.lookup(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != 0);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["96d207426bd26fa5c1014e26d21d87603aea68b7","80f6925d29ae169407185d52267ba1969126e1e2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8495d1696be6631b1d4dbd7ea88c52ffbefba022","date":1378920924,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    BytesRef br = new BytesRef();\n    // if no values in the segment, default trueOrd to something other then -1 (missing)\n    int tord = -2;\n    for (int i=0; i<nord; i++) {\n      sindex.lookupOrd(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    BytesRef br = new BytesRef();\n    int tord = -1;\n    for (int i=0; i<nord; i++) {\n      sindex.lookupOrd(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["80f6925d29ae169407185d52267ba1969126e1e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e28b14e7783d24ca69089f13ddadadbd2afdcb29","date":1399840701,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = DocValues.getSorted(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    BytesRef br = new BytesRef();\n    // if no values in the segment, default trueOrd to something other then -1 (missing)\n    int tord = -2;\n    for (int i=0; i<nord; i++) {\n      sindex.lookupOrd(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    BytesRef br = new BytesRef();\n    // if no values in the segment, default trueOrd to something other then -1 (missing)\n    int tord = -2;\n    for (int i=0; i<nord; i++) {\n      sindex.lookupOrd(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = DocValues.getSorted(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    BytesRef br = new BytesRef();\n    // if no values in the segment, default trueOrd to something other then -1 (missing)\n    int tord = -2;\n    for (int i=0; i<nord; i++) {\n      sindex.lookupOrd(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    BytesRef br = new BytesRef();\n    // if no values in the segment, default trueOrd to something other then -1 (missing)\n    int tord = -2;\n    for (int i=0; i<nord; i++) {\n      sindex.lookupOrd(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = DocValues.getSorted(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    BytesRef br = new BytesRef();\n    // if no values in the segment, default trueOrd to something other then -1 (missing)\n    int tord = -2;\n    for (int i=0; i<nord; i++) {\n      sindex.lookupOrd(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = FieldCache.DEFAULT.getTermsIndex(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    BytesRef br = new BytesRef();\n    // if no values in the segment, default trueOrd to something other then -1 (missing)\n    int tord = -2;\n    for (int i=0; i<nord; i++) {\n      sindex.lookupOrd(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = DocValues.getSorted(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    // if no values in the segment, default trueOrd to something other then -1 (missing)\n    int tord = -2;\n    for (int i=0; i<nord; i++) {\n      final BytesRef br = sindex.lookupOrd(i);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = DocValues.getSorted(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    BytesRef br = new BytesRef();\n    // if no values in the segment, default trueOrd to something other then -1 (missing)\n    int tord = -2;\n    for (int i=0; i<nord; i++) {\n      sindex.lookupOrd(i, br);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/BoolFieldSource[BoolField]#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final SortedDocValues sindex = DocValues.getSorted(readerContext.reader(), field);\n\n    // figure out what ord maps to true\n    int nord = sindex.getValueCount();\n    // if no values in the segment, default trueOrd to something other then -1 (missing)\n    int tord = -2;\n    for (int i=0; i<nord; i++) {\n      final BytesRef br = sindex.lookupOrd(i);\n      if (br.length==1 && br.bytes[br.offset]=='T') {\n        tord = i;\n        break;\n      }\n    }\n\n    final int trueOrd = tord;\n\n    return new BoolDocValues(this) {\n      @Override\n      public boolean boolVal(int doc) {\n        return sindex.getOrd(doc) == trueOrd;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc) != -1;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueBool mval = new MutableValueBool();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            int ord = sindex.getOrd(doc);\n            mval.value = (ord == trueOrd);\n            mval.exists = (ord != -1);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8495d1696be6631b1d4dbd7ea88c52ffbefba022":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["8495d1696be6631b1d4dbd7ea88c52ffbefba022","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","96d207426bd26fa5c1014e26d21d87603aea68b7"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["5cab9a86bd67202d20b6adc463008c8e982b070a","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["8495d1696be6631b1d4dbd7ea88c52ffbefba022","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["8495d1696be6631b1d4dbd7ea88c52ffbefba022"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"8495d1696be6631b1d4dbd7ea88c52ffbefba022":["56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6e2893fd5349134af382d33ccc3d84840394c6c1","d4d69c535930b5cce125cff868d40f6373dc27d4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["8495d1696be6631b1d4dbd7ea88c52ffbefba022"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}