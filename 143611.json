{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testEbeAdd().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testEbeAdd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testEbeAdd().mjava","sourceNew":"  @Test\n  public void testEbeAdd() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(2, 4, 6, 8, 10, 12),\" +\n        \"               b=array(1, 2, 3, 4, 5, 6),\" +\n        \"               c=ebeAdd(a,b),\" +\n        \"               d=array(10, 11, 12, 13, 14, 15),\" +\n        \"               e=array(100, 200, 300, 400, 500, 600),\" +\n        \"               f=matrix(a, b),\" +\n        \"               g=matrix(d, e),\" +\n        \"               h=ebeAdd(f, g))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(out.size(), 6);\n    assertEquals(out.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(out.get(1).doubleValue(), 6.0, 0.0);\n    assertEquals(out.get(2).doubleValue(), 9.0, 0.0);\n    assertEquals(out.get(3).doubleValue(), 12.0, 0.0);\n    assertEquals(out.get(4).doubleValue(), 15.0, 0.0);\n    assertEquals(out.get(5).doubleValue(), 18.0, 0.0);\n\n    List<List<Number>> mout = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(mout.size(), 2);\n    List<Number> row1 = mout.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 12.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 15.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 18.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 21.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 24.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 27.0, 0.0);\n\n    List<Number> row2 = mout.get(1);\n    assertEquals(row2.size(), 6);\n    assertEquals(row2.get(0).doubleValue(), 101.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 202.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 303.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 404.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 505.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 606.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testEbeAdd() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(2, 4, 6, 8, 10, 12),\" +\n        \"               b=array(1, 2, 3, 4, 5, 6),\" +\n        \"               c=ebeAdd(a,b),\" +\n        \"               d=array(10, 11, 12, 13, 14, 15),\" +\n        \"               e=array(100, 200, 300, 400, 500, 600),\" +\n        \"               f=matrix(a, b),\" +\n        \"               g=matrix(d, e),\" +\n        \"               h=ebeAdd(f, g))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(out.size(), 6);\n    assertEquals(out.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(out.get(1).doubleValue(), 6.0, 0.0);\n    assertEquals(out.get(2).doubleValue(), 9.0, 0.0);\n    assertEquals(out.get(3).doubleValue(), 12.0, 0.0);\n    assertEquals(out.get(4).doubleValue(), 15.0, 0.0);\n    assertEquals(out.get(5).doubleValue(), 18.0, 0.0);\n\n    List<List<Number>> mout = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(mout.size(), 2);\n    List<Number> row1 = mout.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 12.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 15.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 18.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 21.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 24.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 27.0, 0.0);\n\n    List<Number> row2 = mout.get(1);\n    assertEquals(row2.size(), 6);\n    assertEquals(row2.get(0).doubleValue(), 101.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 202.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 303.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 404.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 505.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 606.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testEbeAdd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testEbeAdd().mjava","sourceNew":"  @Test\n  public void testEbeAdd() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(2, 4, 6, 8, 10, 12),\" +\n        \"               b=array(1, 2, 3, 4, 5, 6),\" +\n        \"               c=ebeAdd(a,b),\" +\n        \"               d=array(10, 11, 12, 13, 14, 15),\" +\n        \"               e=array(100, 200, 300, 400, 500, 600),\" +\n        \"               f=matrix(a, b),\" +\n        \"               g=matrix(d, e),\" +\n        \"               h=ebeAdd(f, g))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> out = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(out.size(), 6);\n    assertEquals(out.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(out.get(1).doubleValue(), 6.0, 0.0);\n    assertEquals(out.get(2).doubleValue(), 9.0, 0.0);\n    assertEquals(out.get(3).doubleValue(), 12.0, 0.0);\n    assertEquals(out.get(4).doubleValue(), 15.0, 0.0);\n    assertEquals(out.get(5).doubleValue(), 18.0, 0.0);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> mout = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(mout.size(), 2);\n    List<Number> row1 = mout.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 12.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 15.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 18.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 21.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 24.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 27.0, 0.0);\n\n    List<Number> row2 = mout.get(1);\n    assertEquals(row2.size(), 6);\n    assertEquals(row2.get(0).doubleValue(), 101.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 202.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 303.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 404.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 505.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 606.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testEbeAdd() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(2, 4, 6, 8, 10, 12),\" +\n        \"               b=array(1, 2, 3, 4, 5, 6),\" +\n        \"               c=ebeAdd(a,b),\" +\n        \"               d=array(10, 11, 12, 13, 14, 15),\" +\n        \"               e=array(100, 200, 300, 400, 500, 600),\" +\n        \"               f=matrix(a, b),\" +\n        \"               g=matrix(d, e),\" +\n        \"               h=ebeAdd(f, g))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(out.size(), 6);\n    assertEquals(out.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(out.get(1).doubleValue(), 6.0, 0.0);\n    assertEquals(out.get(2).doubleValue(), 9.0, 0.0);\n    assertEquals(out.get(3).doubleValue(), 12.0, 0.0);\n    assertEquals(out.get(4).doubleValue(), 15.0, 0.0);\n    assertEquals(out.get(5).doubleValue(), 18.0, 0.0);\n\n    List<List<Number>> mout = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(mout.size(), 2);\n    List<Number> row1 = mout.get(0);\n    assertEquals(row1.size(), 6);\n    assertEquals(row1.get(0).doubleValue(), 12.0, 0.0);\n    assertEquals(row1.get(1).doubleValue(), 15.0, 0.0);\n    assertEquals(row1.get(2).doubleValue(), 18.0, 0.0);\n    assertEquals(row1.get(3).doubleValue(), 21.0, 0.0);\n    assertEquals(row1.get(4).doubleValue(), 24.0, 0.0);\n    assertEquals(row1.get(5).doubleValue(), 27.0, 0.0);\n\n    List<Number> row2 = mout.get(1);\n    assertEquals(row2.size(), 6);\n    assertEquals(row2.get(0).doubleValue(), 101.0, 0.0);\n    assertEquals(row2.get(1).doubleValue(), 202.0, 0.0);\n    assertEquals(row2.get(2).doubleValue(), 303.0, 0.0);\n    assertEquals(row2.get(3).doubleValue(), 404.0, 0.0);\n    assertEquals(row2.get(4).doubleValue(), 505.0, 0.0);\n    assertEquals(row2.get(5).doubleValue(), 606.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}