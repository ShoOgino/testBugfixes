{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexReader reader = IndexReader.open(dBase.getDb());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      reader.close();\n    }\n    tc.checkNrHits();\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexReader reader = IndexReader.open(dBase.getDb());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      reader.close();\n    }\n    tc.checkNrHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexReader reader = DirectoryReader.open(dBase.getDb());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      reader.close();\n    }\n    tc.checkNrHits();\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexReader reader = IndexReader.open(dBase.getDb());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      reader.close();\n    }\n    tc.checkNrHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}