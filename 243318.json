{"path":"src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","commits":[{"id":"4aa57ace203f336e00a38867cb7e815ca4e1572e","date":1190088278,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"/dev/null","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edbf9afd4cdd6b3413e3f4067e7479fee4a019c3","date":1190475222,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1833c624d42634c14299628650e0a70626349a71","date":1204207883,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7074ac9bb3423ad148c7269a478bf1f7ef14030","date":1236285231,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"920a0686ed72437773f441d7d5088d3aff98f6cb","date":1250805909,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#doTest(String).mjava","sourceNew":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","sourceOld":"  void doTest(String field) {\n    // lrf.args.put(\"version\",\"2.0\");\n    float[] vals = new float[] {\n      100,-4,0,10,25,5\n    };\n    createIndex(field,vals);\n    createIndex(null, 88);  // id with no value\n\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 10,10);\n\n    // test constant score\n    singleTest(field,\"1.414213\", 10, 1.414213f);\n    singleTest(field,\"-1.414213\", 10, -1.414213f);\n\n    singleTest(field,\"sum(\\0,1)\", 10, 11);\n    singleTest(field,\"sum(\\0,\\0)\", 10, 20);\n    singleTest(field,\"sum(\\0,\\0,5)\", 10, 25);\n\n    singleTest(field,\"sub(\\0,1)\", 10, 9);\n\n    singleTest(field,\"product(\\0,1)\", 10, 10);\n    singleTest(field,\"product(\\0,-2,-4)\", 10, 80);\n\n    singleTest(field,\"log(\\0)\",10,1, 100,2);\n    singleTest(field,\"sqrt(\\0)\",100,10, 25,5, 0,0);\n    singleTest(field,\"abs(\\0)\",10,10, -4,4);\n    singleTest(field,\"pow(\\0,\\0)\",0,1, 5,3125);\n    singleTest(field,\"pow(\\0,0.5)\",100,10, 25,5, 0,0);\n    singleTest(field,\"div(1,\\0)\",-4,-.25f, 10,.1f, 100,.01f);\n    singleTest(field,\"div(1,1)\",-4,1, 10,1);\n\n    singleTest(field,\"sqrt(abs(\\0))\",-4,2);\n    singleTest(field,\"sqrt(sum(29,\\0))\",-4,5);\n\n    singleTest(field,\"map(\\0,0,0,500)\",10,10, -4,-4, 0,500);\n    singleTest(field,\"map(\\0,-4,5,500)\",100,100, -4,500, 0,500, 5,500, 10,10, 25,25);\n\n    singleTest(field,\"scale(\\0,-1,1)\",-4,-1, 100,1, 0,-0.9230769f);\n    singleTest(field,\"scale(\\0,-10,1000)\",-4,-10, 100,1000, 0,28.846153f);\n\n    // test that infinity doesn't mess up scale function\n    singleTest(field,\"scale(log(\\0),-1000,1000)\",100,1000);\n\n    // test use of an ValueSourceParser plugin: nvl function\n    singleTest(field,\"nvl(\\0,1)\", 0, 1, 100, 100);\n    \n    // compose the ValueSourceParser plugin function with another function\n    singleTest(field, \"nvl(sum(0,\\0),1)\", 0, 1, 100, 100);\n\n    // test simple embedded query\n    singleTest(field,\"query({!func v=\\0})\", 10, 10, 88, 0);\n    // test default value for embedded query\n    singleTest(field,\"query({!lucene v='\\0:[* TO *]'},8)\", 88, 8);\n    singleTest(field,\"sum(query({!func v=\\0},7.1),query({!func v=\\0}))\", 10, 20, 100, 200);\n    // test with sub-queries specified by other request args\n    singleTest(field,\"query({!func v=$vv})\", Arrays.asList(\"vv\",\"\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"query($vv)\",Arrays.asList(\"vv\",\"{!func}\\0\"), 10, 10, 88, 0);\n    singleTest(field,\"sum(query($v1,5),query($v1,7))\",\n            Arrays.asList(\"v1\",\"\\0:[* TO *]\"),  88,12\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b7074ac9bb3423ad148c7269a478bf1f7ef14030":["1833c624d42634c14299628650e0a70626349a71"],"4aa57ace203f336e00a38867cb7e815ca4e1572e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["920a0686ed72437773f441d7d5088d3aff98f6cb"],"1833c624d42634c14299628650e0a70626349a71":["edbf9afd4cdd6b3413e3f4067e7479fee4a019c3"],"edbf9afd4cdd6b3413e3f4067e7479fee4a019c3":["4aa57ace203f336e00a38867cb7e815ca4e1572e"],"920a0686ed72437773f441d7d5088d3aff98f6cb":["b7074ac9bb3423ad148c7269a478bf1f7ef14030"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b7074ac9bb3423ad148c7269a478bf1f7ef14030":["920a0686ed72437773f441d7d5088d3aff98f6cb"],"4aa57ace203f336e00a38867cb7e815ca4e1572e":["edbf9afd4cdd6b3413e3f4067e7479fee4a019c3"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4aa57ace203f336e00a38867cb7e815ca4e1572e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1833c624d42634c14299628650e0a70626349a71":["b7074ac9bb3423ad148c7269a478bf1f7ef14030"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"edbf9afd4cdd6b3413e3f4067e7479fee4a019c3":["1833c624d42634c14299628650e0a70626349a71"],"920a0686ed72437773f441d7d5088d3aff98f6cb":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}