{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter#generatePart(boolean).mjava","commits":[{"id":"c85fa43e6918808743daa7847ba0264373af687f","date":1395166336,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter#generatePart(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Generates a word/number part, updating the appropriate attributes\n   *\n   * @param isSingleWord {@code true} if the generation is occurring from a single word, {@code false} otherwise\n   */\n  private void generatePart(boolean isSingleWord) {\n    clearAttributes();\n    termAttribute.copyBuffer(savedBuffer, iterator.current, iterator.end - iterator.current);\n\n    int startOffset = savedStartOffset + iterator.current;\n    int endOffset = savedStartOffset + iterator.end;\n    \n    if (hasIllegalOffsets) {\n      // historically this filter did this regardless for 'isSingleWord', \n      // but we must do a sanity check:\n      if (isSingleWord && startOffset <= savedEndOffset) {\n        offsetAttribute.setOffset(startOffset, savedEndOffset);\n      } else {\n        offsetAttribute.setOffset(savedStartOffset, savedEndOffset);\n      }\n    } else {\n      offsetAttribute.setOffset(startOffset, endOffset);\n    }\n    posIncAttribute.setPositionIncrement(position(false));\n    typeAttribute.setType(savedType);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter#generatePart(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Generates a word/number part, updating the appropriate attributes\n   *\n   * @param isSingleWord {@code true} if the generation is occurring from a single word, {@code false} otherwise\n   */\n  private void generatePart(boolean isSingleWord) {\n    clearAttributes();\n    termAttribute.copyBuffer(savedBuffer, iterator.current, iterator.end - iterator.current);\n\n    int startOffset = savedStartOffset + iterator.current;\n    int endOffset = savedStartOffset + iterator.end;\n    \n    if (hasIllegalOffsets) {\n      // historically this filter did this regardless for 'isSingleWord', \n      // but we must do a sanity check:\n      if (isSingleWord && startOffset <= savedEndOffset) {\n        offsetAttribute.setOffset(startOffset, savedEndOffset);\n      } else {\n        offsetAttribute.setOffset(savedStartOffset, savedEndOffset);\n      }\n    } else {\n      offsetAttribute.setOffset(startOffset, endOffset);\n    }\n    posIncAttribute.setPositionIncrement(position(false));\n    typeAttribute.setType(savedType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["c85fa43e6918808743daa7847ba0264373af687f"],"c85fa43e6918808743daa7847ba0264373af687f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c85fa43e6918808743daa7847ba0264373af687f"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c85fa43e6918808743daa7847ba0264373af687f":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}