{"path":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler.SecurityConfig#setData(Object).mjava","commits":[{"id":"170ef9c82c0d27d4151feff316ba63fbedd91bbf","date":1477436680,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler.SecurityConfig#setData(Object).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sets the data as an Object, but the object needs to be of type Map\n     * @param data an Object of type Map&lt;String,Object&gt;\n     * @return SecurityConf object (builder pattern)\n     */\n    public SecurityConfig setData(Object data) {\n      if (data instanceof Map) {\n        this.data = (Map<String, Object>) data;\n        return this;\n      } else {\n        throw new SolrException(SERVER_ERROR, \"Illegal format when parsing security.json, not object\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b363b110592b02d7f488aff0dbe40a53d3ce81df","date":1477469211,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler.SecurityConfig#setData(Object).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sets the data as an Object, but the object needs to be of type Map\n     * @param data an Object of type Map&lt;String,Object&gt;\n     * @return SecurityConf object (builder pattern)\n     */\n    public SecurityConfig setData(Object data) {\n      if (data instanceof Map) {\n        this.data = (Map<String, Object>) data;\n        return this;\n      } else {\n        throw new SolrException(SERVER_ERROR, \"Illegal format when parsing security.json, not object\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler.SecurityConfig#setData(Object).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sets the data as an Object, but the object needs to be of type Map\n     * @param data an Object of type Map&lt;String,Object&gt;\n     * @return SecurityConf object (builder pattern)\n     */\n    public SecurityConfig setData(Object data) {\n      if (data instanceof Map) {\n        this.data = (Map<String, Object>) data;\n        return this;\n      } else {\n        throw new SolrException(SERVER_ERROR, \"Illegal format when parsing security.json, not object\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler.SecurityConfig#setData(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SecurityConfHandler.SecurityConfig#setData(Object).mjava","sourceNew":"    /**\n     * Sets the data as an Object, but the object needs to be of type Map\n     * @param data an Object of type Map&lt;String,Object&gt;\n     * @return SecurityConf object (builder pattern)\n     */\n    @SuppressWarnings({\"unchecked\"})\n    public SecurityConfig setData(Object data) {\n      if (data instanceof Map) {\n        this.data = (Map<String, Object>) data;\n        return this;\n      } else {\n        throw new SolrException(SERVER_ERROR, \"Illegal format when parsing security.json, not object\");\n      }\n    }\n\n","sourceOld":"    /**\n     * Sets the data as an Object, but the object needs to be of type Map\n     * @param data an Object of type Map&lt;String,Object&gt;\n     * @return SecurityConf object (builder pattern)\n     */\n    public SecurityConfig setData(Object data) {\n      if (data instanceof Map) {\n        this.data = (Map<String, Object>) data;\n        return this;\n      } else {\n        throw new SolrException(SERVER_ERROR, \"Illegal format when parsing security.json, not object\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba055e19afc289adcb5bedaf68513793a7254012":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","170ef9c82c0d27d4151feff316ba63fbedd91bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["170ef9c82c0d27d4151feff316ba63fbedd91bbf","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["ba055e19afc289adcb5bedaf68513793a7254012","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}