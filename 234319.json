{"path":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"/dev/null","sourceNew":"  private void parseEventListeners() {\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postCommit\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          Class clazz = Class.forName(className);\n          SolrEventListener listener = (SolrEventListener)clazz.newInstance();\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          // listener.init(DOMUtil.toMapExcept(node.getAttributes(),\"class\",\"synchronized\"));\n          commitCallbacks.add(listener);\n          log.info(\"added SolrEventListener for postCommit: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException(1,\"error parsing event listevers\", e, false);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d212034baf7f62c91b903dbf8aeb7d59dfbb3be","date":1143082982,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postCommit\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          // listener.init(DOMUtil.toMapExcept(node.getAttributes(),\"class\",\"synchronized\"));\n          commitCallbacks.add(listener);\n          log.info(\"added SolrEventListener for postCommit: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException(1,\"error parsing event listevers\", e, false);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postCommit\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          Class clazz = Class.forName(className);\n          SolrEventListener listener = (SolrEventListener)clazz.newInstance();\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          // listener.init(DOMUtil.toMapExcept(node.getAttributes(),\"class\",\"synchronized\"));\n          commitCallbacks.add(listener);\n          log.info(\"added SolrEventListener for postCommit: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException(1,\"error parsing event listevers\", e, false);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91b8465fcccc31866b472215d79574deeb023eb6","date":1143840320,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postCommit\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          // listener.init(DOMUtil.toMapExcept(node.getAttributes(),\"class\",\"synchronized\"));\n          commitCallbacks.add(listener);\n          log.info(\"added SolrEventListener for postCommit: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException(1,\"error parsing event listevers\", e, false);\n        }\n      }\n    }\n    nodes = (NodeList)SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postOptimize\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          optimizeCallbacks.add(listener);\n          log.info(\"added SolarEventListener for postOptimize: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException(1,\"error parsing event listeners\", e, false);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postCommit\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          // listener.init(DOMUtil.toMapExcept(node.getAttributes(),\"class\",\"synchronized\"));\n          commitCallbacks.add(listener);\n          log.info(\"added SolrEventListener for postCommit: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException(1,\"error parsing event listevers\", e, false);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffa55a3112f6a9ed19ca7e20579dff40c1f493b2","date":1180428723,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postCommit\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          // listener.init(DOMUtil.toMapExcept(node.getAttributes(),\"class\",\"synchronized\"));\n          commitCallbacks.add(listener);\n          log.info(\"added SolrEventListener for postCommit: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException(500,\"error parsing event listevers\", e, false);\n        }\n      }\n    }\n    nodes = (NodeList)SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postOptimize\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          optimizeCallbacks.add(listener);\n          log.info(\"added SolarEventListener for postOptimize: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException(500,\"error parsing event listeners\", e, false);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postCommit\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          // listener.init(DOMUtil.toMapExcept(node.getAttributes(),\"class\",\"synchronized\"));\n          commitCallbacks.add(listener);\n          log.info(\"added SolrEventListener for postCommit: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException(1,\"error parsing event listevers\", e, false);\n        }\n      }\n    }\n    nodes = (NodeList)SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postOptimize\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          optimizeCallbacks.add(listener);\n          log.info(\"added SolarEventListener for postOptimize: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException(1,\"error parsing event listeners\", e, false);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postCommit\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          // listener.init(DOMUtil.toMapExcept(node.getAttributes(),\"class\",\"synchronized\"));\n          commitCallbacks.add(listener);\n          log.info(\"added SolrEventListener for postCommit: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"error parsing event listevers\", e, false);\n        }\n      }\n    }\n    nodes = (NodeList)SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postOptimize\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          optimizeCallbacks.add(listener);\n          log.info(\"added SolarEventListener for postOptimize: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"error parsing event listeners\", e, false);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postCommit\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          // listener.init(DOMUtil.toMapExcept(node.getAttributes(),\"class\",\"synchronized\"));\n          commitCallbacks.add(listener);\n          log.info(\"added SolrEventListener for postCommit: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException(500,\"error parsing event listevers\", e, false);\n        }\n      }\n    }\n    nodes = (NodeList)SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postOptimize\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          optimizeCallbacks.add(listener);\n          log.info(\"added SolarEventListener for postOptimize: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException(500,\"error parsing event listeners\", e, false);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    final SolrConfig solrConfig = core.getSolrConfig();\n    NodeList nodes = (NodeList) solrConfig.evaluate(\"updateHandler/listener[@event=\\\"postCommit\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = core.createEventListener(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          // listener.init(DOMUtil.toMapExcept(node.getAttributes(),\"class\",\"synchronized\"));\n          commitCallbacks.add(listener);\n          log.info(\"added SolrEventListener for postCommit: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"error parsing event listevers\", e, false);\n        }\n      }\n    }\n    nodes = (NodeList) solrConfig.evaluate(\"updateHandler/listener[@event=\\\"postOptimize\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = core.createEventListener(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          optimizeCallbacks.add(listener);\n          log.info(\"added SolarEventListener for postOptimize: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"error parsing event listeners\", e, false);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postCommit\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          // listener.init(DOMUtil.toMapExcept(node.getAttributes(),\"class\",\"synchronized\"));\n          commitCallbacks.add(listener);\n          log.info(\"added SolrEventListener for postCommit: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"error parsing event listevers\", e, false);\n        }\n      }\n    }\n    nodes = (NodeList)SolrConfig.config.evaluate(\"updateHandler/listener[@event=\\\"postOptimize\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = (SolrEventListener)Config.newInstance(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          optimizeCallbacks.add(listener);\n          log.info(\"added SolarEventListener for postOptimize: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"error parsing event listeners\", e, false);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8147abadc2b9e098aa8746114cdbad06627e946e","date":1252311927,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    for (PluginInfo pluginInfo : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = pluginInfo.attributes.get(\"event\");\n      SolrEventListener listener = core.createEventListener(pluginInfo.className);\n      listener.init(pluginInfo.initArgs);\n      if (\"postCommit\".equals(event)) {\n        commitCallbacks.add(listener);\n        log.info(\"added SolrEventListener for postCommit: \" + listener);\n      } else if (\"postOptimize\".equals(event)) {\n        optimizeCallbacks.add(listener);\n        log.info(\"added SolrEventListener for postOptimize: \" + listener);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    final SolrConfig solrConfig = core.getSolrConfig();\n    NodeList nodes = (NodeList) solrConfig.evaluate(\"updateHandler/listener[@event=\\\"postCommit\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = core.createEventListener(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          // listener.init(DOMUtil.toMapExcept(node.getAttributes(),\"class\",\"synchronized\"));\n          commitCallbacks.add(listener);\n          log.info(\"added SolrEventListener for postCommit: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"error parsing event listevers\", e, false);\n        }\n      }\n    }\n    nodes = (NodeList) solrConfig.evaluate(\"updateHandler/listener[@event=\\\"postOptimize\\\"]\", XPathConstants.NODESET);\n    if (nodes!=null) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String className = DOMUtil.getAttr(node,\"class\");\n          SolrEventListener listener = core.createEventListener(className);\n          listener.init(DOMUtil.childNodesToNamedList(node));\n          optimizeCallbacks.add(listener);\n          log.info(\"added SolarEventListener for postOptimize: \" + listener);\n        } catch (Exception e) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"error parsing event listeners\", e, false);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["28e9b4f0446e4a60433a9442e4b2fa4e2f68d737"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf8271e70a650d15fbc7354d641c4b1eb2b62d7f","date":1265373758,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    for (PluginInfo pluginInfo : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = pluginInfo.attributes.get(\"event\");\n      SolrEventListener listener = core.createInitInstance(pluginInfo,SolrEventListener.class,\"Event Listener\",null);\n      if (\"postCommit\".equals(event)) {\n        commitCallbacks.add(core.createInitInstance(pluginInfo,SolrEventListener.class,\"Event Listener\",null));\n        log.info(\"added SolrEventListener for postCommit: \" + listener);\n      } else if (\"postOptimize\".equals(event)) {\n        optimizeCallbacks.add(listener);\n        log.info(\"added SolrEventListener for postOptimize: \" + listener);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    for (PluginInfo pluginInfo : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = pluginInfo.attributes.get(\"event\");\n      SolrEventListener listener = core.createEventListener(pluginInfo.className);\n      listener.init(pluginInfo.initArgs);\n      if (\"postCommit\".equals(event)) {\n        commitCallbacks.add(listener);\n        log.info(\"added SolrEventListener for postCommit: \" + listener);\n      } else if (\"postOptimize\".equals(event)) {\n        optimizeCallbacks.add(listener);\n        log.info(\"added SolrEventListener for postOptimize: \" + listener);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["28e9b4f0446e4a60433a9442e4b2fa4e2f68d737"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","pathOld":"src/java/org/apache/solr/update/UpdateHandler#parseEventListeners().mjava","sourceNew":"  private void parseEventListeners() {\n    for (PluginInfo pluginInfo : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = pluginInfo.attributes.get(\"event\");\n      SolrEventListener listener = core.createInitInstance(pluginInfo,SolrEventListener.class,\"Event Listener\",null);\n      if (\"postCommit\".equals(event)) {\n        commitCallbacks.add(core.createInitInstance(pluginInfo,SolrEventListener.class,\"Event Listener\",null));\n        log.info(\"added SolrEventListener for postCommit: \" + listener);\n      } else if (\"postOptimize\".equals(event)) {\n        optimizeCallbacks.add(listener);\n        log.info(\"added SolrEventListener for postOptimize: \" + listener);\n      }\n    }\n  }\n\n","sourceOld":"  private void parseEventListeners() {\n    for (PluginInfo pluginInfo : core.getSolrConfig().getPluginInfos(SolrEventListener.class.getName())) {\n      String event = pluginInfo.attributes.get(\"event\");\n      SolrEventListener listener = core.createInitInstance(pluginInfo,SolrEventListener.class,\"Event Listener\",null);\n      if (\"postCommit\".equals(event)) {\n        commitCallbacks.add(core.createInitInstance(pluginInfo,SolrEventListener.class,\"Event Listener\",null));\n        log.info(\"added SolrEventListener for postCommit: \" + listener);\n      } else if (\"postOptimize\".equals(event)) {\n        optimizeCallbacks.add(listener);\n        log.info(\"added SolrEventListener for postOptimize: \" + listener);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"91b8465fcccc31866b472215d79574deeb023eb6":["7d212034baf7f62c91b903dbf8aeb7d59dfbb3be"],"cf8271e70a650d15fbc7354d641c4b1eb2b62d7f":["8147abadc2b9e098aa8746114cdbad06627e946e"],"6d6338c87060be5f66757a94945975f3bbd377a9":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"8147abadc2b9e098aa8746114cdbad06627e946e":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["cf8271e70a650d15fbc7354d641c4b1eb2b62d7f"],"7d212034baf7f62c91b903dbf8aeb7d59dfbb3be":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"ffa55a3112f6a9ed19ca7e20579dff40c1f493b2":["91b8465fcccc31866b472215d79574deeb023eb6"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["ffa55a3112f6a9ed19ca7e20579dff40c1f493b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"91b8465fcccc31866b472215d79574deeb023eb6":["ffa55a3112f6a9ed19ca7e20579dff40c1f493b2"],"cf8271e70a650d15fbc7354d641c4b1eb2b62d7f":["ad94625fb8d088209f46650c8097196fec67f00c"],"6d6338c87060be5f66757a94945975f3bbd377a9":["8147abadc2b9e098aa8746114cdbad06627e946e"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["7d212034baf7f62c91b903dbf8aeb7d59dfbb3be"],"8147abadc2b9e098aa8746114cdbad06627e946e":["cf8271e70a650d15fbc7354d641c4b1eb2b62d7f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d212034baf7f62c91b903dbf8aeb7d59dfbb3be":["91b8465fcccc31866b472215d79574deeb023eb6"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"ffa55a3112f6a9ed19ca7e20579dff40c1f493b2":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}