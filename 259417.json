{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","sourceNew":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on the specified \n   * SSLConfig param which may be null.\n   *\n   * if the SSLConfig param is non-null, then this method will return the results of \n   * {@link #createContextFactory()}.\n   * \n   * If the SSLConfig param is null, then this method will return null unless the \n   * <code>tests.jettySsl</code> system property is true, in which case standard \"javax.net.ssl.*\" \n   * system properties will be used instead, along with \"tests.jettySsl.clientAuth\".\n   * \n   * @see #createContextFactory()\n   */\n  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig != null) {\n      return sslConfig.createContextFactory();\n    }\n    // else...\n    if (Boolean.getBoolean(\"tests.jettySsl\")) {\n      return configureSslFromSysProps();\n    }\n    // else...\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on the specified \n   * SSLConfig param which may be null.\n   *\n   * if the SSLConfig param is non-null, then this method will return the results of \n   * {@link #createContextFactory()}.\n   * \n   * If the SSLConfig param is null, then this method will return null unless the \n   * <code>tests.jettySsl</code> system property is true, in which case standard \"javax.net.ssl.*\" \n   * system properties will be used instead, along with \"tests.jettySsl.clientAuth\".\n   * \n   * @see #createContextFactory()\n   */\n  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig != null) {\n      return sslConfig.createContextFactory();\n    }\n    // else...\n    if (Boolean.getBoolean(\"tests.jettySsl\")) {\n      return configureSslFromSysProps();\n    }\n    // else...\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea0f43f20834b3c8930e074b144aba27a935fee8","date":1576814747,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","sourceNew":"  /**\n   * Returns an SslContextFactory.Server that should be used by a jetty server based on the specified\n   * SSLConfig param which may be null.\n   *\n   * if the SSLConfig param is non-null, then this method will return the results of \n   * {@link #createContextFactory()}.\n   * \n   * If the SSLConfig param is null, then this method will return null unless the \n   * <code>tests.jettySsl</code> system property is true, in which case standard \"javax.net.ssl.*\" \n   * system properties will be used instead, along with \"tests.jettySsl.clientAuth\".\n   * \n   * @see #createContextFactory()\n   */\n  public static SslContextFactory.Server createContextFactory(SSLConfig sslConfig) {\n    if (sslConfig != null) {\n      return sslConfig.createContextFactory();\n    }\n    // else...\n    if (Boolean.getBoolean(\"tests.jettySsl\")) {\n      return configureSslFromSysProps();\n    }\n    // else...\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on the specified \n   * SSLConfig param which may be null.\n   *\n   * if the SSLConfig param is non-null, then this method will return the results of \n   * {@link #createContextFactory()}.\n   * \n   * If the SSLConfig param is null, then this method will return null unless the \n   * <code>tests.jettySsl</code> system property is true, in which case standard \"javax.net.ssl.*\" \n   * system properties will be used instead, along with \"tests.jettySsl.clientAuth\".\n   * \n   * @see #createContextFactory()\n   */\n  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig != null) {\n      return sslConfig.createContextFactory();\n    }\n    // else...\n    if (Boolean.getBoolean(\"tests.jettySsl\")) {\n      return configureSslFromSysProps();\n    }\n    // else...\n    return null;\n  }\n\n","bugFix":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","c66158bb16e902a21272772f1b911f04b1a55abb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/embedded/SSLConfig#createContextFactory(SSLConfig).mjava","sourceNew":"  /**\n   * Returns an SslContextFactory.Server that should be used by a jetty server based on the specified\n   * SSLConfig param which may be null.\n   *\n   * if the SSLConfig param is non-null, then this method will return the results of \n   * {@link #createContextFactory()}.\n   * \n   * If the SSLConfig param is null, then this method will return null unless the \n   * <code>tests.jettySsl</code> system property is true, in which case standard \"javax.net.ssl.*\" \n   * system properties will be used instead, along with \"tests.jettySsl.clientAuth\".\n   * \n   * @see #createContextFactory()\n   */\n  public static SslContextFactory.Server createContextFactory(SSLConfig sslConfig) {\n    if (sslConfig != null) {\n      return sslConfig.createContextFactory();\n    }\n    // else...\n    if (Boolean.getBoolean(\"tests.jettySsl\")) {\n      return configureSslFromSysProps();\n    }\n    // else...\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns an SslContextFactory that should be used by a jetty server based on the specified \n   * SSLConfig param which may be null.\n   *\n   * if the SSLConfig param is non-null, then this method will return the results of \n   * {@link #createContextFactory()}.\n   * \n   * If the SSLConfig param is null, then this method will return null unless the \n   * <code>tests.jettySsl</code> system property is true, in which case standard \"javax.net.ssl.*\" \n   * system properties will be used instead, along with \"tests.jettySsl.clientAuth\".\n   * \n   * @see #createContextFactory()\n   */\n  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {\n\n    if (sslConfig != null) {\n      return sslConfig.createContextFactory();\n    }\n    // else...\n    if (Boolean.getBoolean(\"tests.jettySsl\")) {\n      return configureSslFromSysProps();\n    }\n    // else...\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ea0f43f20834b3c8930e074b144aba27a935fee8":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["1a77e5e21cbd575a8240b0e3926164f15295f4e8","ea0f43f20834b3c8930e074b144aba27a935fee8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea0f43f20834b3c8930e074b144aba27a935fee8"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["ea0f43f20834b3c8930e074b144aba27a935fee8","4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"ea0f43f20834b3c8930e074b144aba27a935fee8":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}