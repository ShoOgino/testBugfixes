{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerTest#test().mjava","commits":[{"id":"67f215f0e4d5c92f5d96ab7675170115b0983501","date":1492649385,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", \"true\");\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n      String lostNodeName = cluster.getJettySolrRunner(1).getNodeName();\n      cluster.stopJettySolrRunner(1);\n\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeLostTrigger.NodeLostEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Lost node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = eventRef.get();\n      assertNotNull(nodeLostEvent);\n      assertEquals(\"\", lostNodeName, nodeLostEvent.getNodeName());\n\n    }\n\n    // remove a node but add it back before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      final int waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner lostNode = cluster.getJettySolrRunner(1);\n      lostNode.stop();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      int counter = 0;\n      do {\n        if (container.getZkController().getZkStateReader().getClusterState().getLiveNodes().size() == 3) {\n          break;\n        }\n        Thread.sleep(100);\n        if (counter++ > 20) {\n          fail(\"Live nodes not updated!\");\n        }\n      } while (true);\n      counter = 0;\n      lostNode.start();\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6992a29fa6d0e1a619094e6d7b025fd851f63af6","date":1493274332,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", \"true\");\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n      String lostNodeName = cluster.getJettySolrRunner(1).getNodeName();\n      cluster.stopJettySolrRunner(1);\n\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeLostTrigger.NodeLostEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Lost node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = eventRef.get();\n      assertNotNull(nodeLostEvent);\n      assertEquals(\"\", lostNodeName, nodeLostEvent.getNodeName());\n\n    }\n\n    // remove a node but add it back before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner lostNode = cluster.getJettySolrRunner(1);\n      lostNode.stop();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      int counter = 0;\n      do {\n        if (container.getZkController().getZkStateReader().getClusterState().getLiveNodes().size() == 3) {\n          break;\n        }\n        Thread.sleep(100);\n        if (counter++ > 20) {\n          fail(\"Live nodes not updated!\");\n        }\n      } while (true);\n      counter = 0;\n      lostNode.start();\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", \"true\");\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n      String lostNodeName = cluster.getJettySolrRunner(1).getNodeName();\n      cluster.stopJettySolrRunner(1);\n\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeLostTrigger.NodeLostEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Lost node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = eventRef.get();\n      assertNotNull(nodeLostEvent);\n      assertEquals(\"\", lostNodeName, nodeLostEvent.getNodeName());\n\n    }\n\n    // remove a node but add it back before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      final int waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner lostNode = cluster.getJettySolrRunner(1);\n      lostNode.stop();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      int counter = 0;\n      do {\n        if (container.getZkController().getZkStateReader().getClusterState().getLiveNodes().size() == 3) {\n          break;\n        }\n        Thread.sleep(100);\n        if (counter++ > 20) {\n          fail(\"Live nodes not updated!\");\n        }\n      } while (true);\n      counter = 0;\n      lostNode.start();\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5a648360be52f2b0cc9971af641fe1e68778dab","date":1493361164,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", true);\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n      String lostNodeName = cluster.getJettySolrRunner(1).getNodeName();\n      cluster.stopJettySolrRunner(1);\n\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeLostTrigger.NodeLostEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Lost node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = eventRef.get();\n      assertNotNull(nodeLostEvent);\n      assertEquals(\"\", lostNodeName, nodeLostEvent.getNodeName());\n\n    }\n\n    // remove a node but add it back before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner lostNode = cluster.getJettySolrRunner(1);\n      lostNode.stop();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      int counter = 0;\n      do {\n        if (container.getZkController().getZkStateReader().getClusterState().getLiveNodes().size() == 3) {\n          break;\n        }\n        Thread.sleep(100);\n        if (counter++ > 20) {\n          fail(\"Live nodes not updated!\");\n        }\n      } while (true);\n      counter = 0;\n      lostNode.start();\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", \"true\");\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n      String lostNodeName = cluster.getJettySolrRunner(1).getNodeName();\n      cluster.stopJettySolrRunner(1);\n\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeLostTrigger.NodeLostEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Lost node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = eventRef.get();\n      assertNotNull(nodeLostEvent);\n      assertEquals(\"\", lostNodeName, nodeLostEvent.getNodeName());\n\n    }\n\n    // remove a node but add it back before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner lostNode = cluster.getJettySolrRunner(1);\n      lostNode.stop();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      int counter = 0;\n      do {\n        if (container.getZkController().getZkStateReader().getClusterState().getLiveNodes().size() == 3) {\n          break;\n        }\n        Thread.sleep(100);\n        if (counter++ > 20) {\n          fail(\"Live nodes not updated!\");\n        }\n      } while (true);\n      counter = 0;\n      lostNode.start();\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","date":1493894873,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeLostTriggerTest#test().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n      String lostNodeName = cluster.getJettySolrRunner(1).getNodeName();\n      cluster.stopJettySolrRunner(1);\n\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeLostTrigger.NodeLostEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Lost node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = eventRef.get();\n      assertNotNull(nodeLostEvent);\n      assertEquals(\"\", lostNodeName, nodeLostEvent.getNodeName());\n\n    }\n\n    // remove a node but add it back before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner lostNode = cluster.getJettySolrRunner(1);\n      lostNode.stop();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the lost node\n      int counter = 0;\n      do {\n        if (container.getZkController().getZkStateReader().getClusterState().getLiveNodes().size() == 3) {\n          break;\n        }\n        Thread.sleep(100);\n        if (counter++ > 20) {\n          fail(\"Live nodes not updated!\");\n        }\n      } while (true);\n      counter = 0;\n      lostNode.start();\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", true);\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n      String lostNodeName = cluster.getJettySolrRunner(1).getNodeName();\n      cluster.stopJettySolrRunner(1);\n\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeLostTrigger.NodeLostEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Lost node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeLostTrigger.NodeLostEvent nodeLostEvent = eventRef.get();\n      assertNotNull(nodeLostEvent);\n      assertEquals(\"\", lostNodeName, nodeLostEvent.getNodeName());\n\n    }\n\n    // remove a node but add it back before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeLostTrigger trigger = new NodeLostTrigger(\"node_lost_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner lostNode = cluster.getJettySolrRunner(1);\n      lostNode.stop();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeLostListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeLostListener was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      int counter = 0;\n      do {\n        if (container.getZkController().getZkStateReader().getClusterState().getLiveNodes().size() == 3) {\n          break;\n        }\n        Thread.sleep(100);\n        if (counter++ > 20) {\n          fail(\"Live nodes not updated!\");\n        }\n      } while (true);\n      counter = 0;\n      lostNode.start();\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["e5a648360be52f2b0cc9971af641fe1e68778dab"],"6992a29fa6d0e1a619094e6d7b025fd851f63af6":["67f215f0e4d5c92f5d96ab7675170115b0983501"],"e5a648360be52f2b0cc9971af641fe1e68778dab":["6992a29fa6d0e1a619094e6d7b025fd851f63af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"67f215f0e4d5c92f5d96ab7675170115b0983501":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":[],"6992a29fa6d0e1a619094e6d7b025fd851f63af6":["e5a648360be52f2b0cc9971af641fe1e68778dab"],"e5a648360be52f2b0cc9971af641fe1e68778dab":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67f215f0e4d5c92f5d96ab7675170115b0983501","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"67f215f0e4d5c92f5d96ab7675170115b0983501":["6992a29fa6d0e1a619094e6d7b025fd851f63af6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}