{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openIndexWriter(Directory,IndexWriterConfig).mjava","commits":[{"id":"9faeb5fb9565674fd02b39d8fc365311961f1938","date":1322463944,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openIndexWriter(Directory,IndexWriterConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Open internal index writer, which contains the taxonomy data.\n   * <p>\n   * Extensions may provide their own {@link IndexWriter} implementation or instance. \n   * <br><b>NOTE:</b> the instance this method returns will be closed upon calling\n   * to {@link #close()}.\n   * <br><b>NOTE:</b> the merge policy in effect must not merge none adjacent segments. See\n   * comment in {@link #createIndexWriterConfig(IndexWriterConfig.OpenMode)} for the logic behind this.\n   *  \n   * @see #createIndexWriterConfig(IndexWriterConfig.OpenMode)\n   * \n   * @param directory\n   *          the {@link Directory} on top of which an {@link IndexWriter}\n   *          should be opened.\n   * @param config\n   *          configuration for the internal index writer.\n   */\n  protected IndexWriter openIndexWriter(Directory directory, IndexWriterConfig config)\n      throws IOException {\n    return new IndexWriter(directory, config);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openIndexWriter(Directory,IndexWriterConfig).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openIndexWriter(Directory,IndexWriterConfig).mjava","sourceNew":"  /**\n   * Open internal index writer, which contains the taxonomy data.\n   * <p>\n   * Extensions may provide their own {@link IndexWriter} implementation or instance. \n   * <br><b>NOTE:</b> the instance this method returns will be closed upon calling\n   * to {@link #close()}.\n   * <br><b>NOTE:</b> the merge policy in effect must not merge none adjacent segments. See\n   * comment in {@link #createIndexWriterConfig(IndexWriterConfig.OpenMode)} for the logic behind this.\n   *  \n   * @see #createIndexWriterConfig(IndexWriterConfig.OpenMode)\n   * \n   * @param directory\n   *          the {@link Directory} on top of which an {@link IndexWriter}\n   *          should be opened.\n   * @param config\n   *          configuration for the internal index writer.\n   */\n  protected IndexWriter openIndexWriter(Directory directory, IndexWriterConfig config)\n      throws IOException {\n    return new IndexWriter(directory, config);\n  }\n\n","sourceOld":"  /**\n   * Open internal index writer, which contains the taxonomy data.\n   * <p>\n   * Extensions may provide their own {@link IndexWriter} implementation or instance. \n   * <br><b>NOTE:</b> the instance this method returns will be closed upon calling\n   * to {@link #close()}.\n   * <br><b>NOTE:</b> the merge policy in effect must not merge none adjacent segments. See\n   * comment in {@link #createIndexWriterConfig(IndexWriterConfig.OpenMode)} for the logic behind this.\n   *  \n   * @see #createIndexWriterConfig(IndexWriterConfig.OpenMode)\n   * \n   * @param directory\n   *          the {@link Directory} on top of which an {@link IndexWriter}\n   *          should be opened.\n   * @param config\n   *          configuration for the internal index writer.\n   */\n  protected IndexWriter openIndexWriter(Directory directory, IndexWriterConfig config)\n      throws IOException {\n    return new IndexWriter(directory, config);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9faeb5fb9565674fd02b39d8fc365311961f1938"],"9faeb5fb9565674fd02b39d8fc365311961f1938":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9faeb5fb9565674fd02b39d8fc365311961f1938":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9faeb5fb9565674fd02b39d8fc365311961f1938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}