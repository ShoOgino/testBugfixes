{"path":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(ReaderContext).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(ReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link ReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or  {@link IndexReader#getDeletedDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  // TODO make this context an AtomicContext\n  public abstract DocIdSet getDocIdSet(ReaderContext context) throws IOException;\n\n","sourceOld":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param reader a {@link IndexReader} instance opened on the index currently\n   *         searched on. The provided reader is always an\n   *         atomic reader, so you can call reader.fields()\n   *         or reader.getDeletedDocs(), for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(IndexReader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(ReaderContext).mjava","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or  {@link IndexReader#getDeletedDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException;\n\n","sourceOld":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link ReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or  {@link IndexReader#getDeletedDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  // TODO make this context an AtomicContext\n  public abstract DocIdSet getDocIdSet(ReaderContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"]},"commit2Childs":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}