{"path":"solr/core/src/test/org/apache/solr/search/TestDocSet#getDocSlice(FixedBitSet).mjava","commits":[{"id":"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1","date":1392536197,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#getDocSlice(FixedBitSet).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#getDocSlice(OpenBitSet).mjava","sourceNew":"  public DocSet getDocSlice(FixedBitSet bs) {\n    int len = bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    FixedBitSetIterator iter = new FixedBitSetIterator(bs);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f);\n  }\n\n","sourceOld":"  public DocSet getDocSlice(OpenBitSet bs) {\n    int len = (int)bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    OpenBitSetIterator iter = new OpenBitSetIterator(bs);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#getDocSlice(FixedBitSet).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#getDocSlice(FixedBitSet).mjava","sourceNew":"  public DocSet getDocSlice(FixedBitSet bs) {\n    int len = bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    FixedBitSetIterator iter = new FixedBitSetIterator(bs, 0);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f);\n  }\n\n","sourceOld":"  public DocSet getDocSlice(FixedBitSet bs) {\n    int len = bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    FixedBitSetIterator iter = new FixedBitSetIterator(bs);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#getDocSlice(FixedBitSet).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#getDocSlice(FixedBitSet).mjava","sourceNew":"  public DocSet getDocSlice(FixedBitSet bs) {\n    int len = bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    BitSetIterator iter = new BitSetIterator(bs, 0);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f);\n  }\n\n","sourceOld":"  public DocSet getDocSlice(FixedBitSet bs) {\n    int len = bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    FixedBitSetIterator iter = new FixedBitSetIterator(bs, 0);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92548f4520f4cb11beb9e9620b389d0b840c410f","date":1582641583,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#getDocSlice(FixedBitSet).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#getDocSlice(FixedBitSet).mjava","sourceNew":"  public DocSlice getDocSlice(FixedBitSet bs) {\n    int len = bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    BitSetIterator iter = new BitSetIterator(bs, 0);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f);\n  }\n\n","sourceOld":"  public DocSet getDocSlice(FixedBitSet bs) {\n    int len = bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    BitSetIterator iter = new BitSetIterator(bs, 0);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#getDocSlice(FixedBitSet).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#getDocSlice(FixedBitSet).mjava","sourceNew":"  public DocSlice getDocSlice(FixedBitSet bs) {\n    int len = bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    BitSetIterator iter = new BitSetIterator(bs, 0);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f, TotalHits.Relation.EQUAL_TO);\n  }\n\n","sourceOld":"  public DocSlice getDocSlice(FixedBitSet bs) {\n    int len = bs.cardinality();\n    int[] arr = new int[len+5];\n    arr[0]=10; arr[1]=20; arr[2]=30; arr[arr.length-1]=1; arr[arr.length-2]=2;\n    int offset = 3;\n    int end = offset + len;\n\n    BitSetIterator iter = new BitSetIterator(bs, 0);\n    // put in opposite order... DocLists are not ordered.\n    for (int i=end-1; i>=offset; i--) {\n      arr[i] = iter.nextDoc();\n    }\n\n    return new DocSlice(offset, len, arr, null, len*2, 100.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["92548f4520f4cb11beb9e9620b389d0b840c410f"],"92548f4520f4cb11beb9e9620b389d0b840c410f":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"92548f4520f4cb11beb9e9620b389d0b840c410f":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"a69cf7f1b4cac5d5b1363402b565cd535f13e6a1":["80c55596a764e2d397e982828e75fcac5ce430a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a69cf7f1b4cac5d5b1363402b565cd535f13e6a1"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["92548f4520f4cb11beb9e9620b389d0b840c410f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}