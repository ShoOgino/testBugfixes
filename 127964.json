{"path":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","commits":[{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.contains(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n    int pseudoSize = pseudoFields != null ? pseudoFields.size() : 0;\n\n    for (String fname : doc.getFieldNames()) {\n      if(returnFields != null && !returnFields.contains(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null && sf.multiValued()) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size() + pseudoSize);\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n\n    if (pseudoSize > 0) {\n      writeMap(null,pseudoFields,true, false);\n    }\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.contains(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.wantsField(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["6aedf81f068e430dec27d94310415cc6ff52731c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"c26f00b574427b55127e869b935845554afde1fa":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"6aedf81f068e430dec27d94310415cc6ff52731c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","6aedf81f068e430dec27d94310415cc6ff52731c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6aedf81f068e430dec27d94310415cc6ff52731c":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}