{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","commits":[{"id":"a8ad56fe9e068c425e8ac38f2263714e167490c2","date":1462704115,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    w.addDocument(new Document());\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    Bits docsWithField = leaf.getDocsWithField(\"foo\");\n    assertEquals(0, values.get(0));\n    assertFalse(docsWithField.get(0));\n    assertEquals(7, values.get(1));\n    assertEquals(18, values.get(2));\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    w.addDocument(new Document());\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    Bits docsWithField = leaf.getDocsWithField(\"foo\");\n    assertEquals(0, values.get(0));\n    assertFalse(docsWithField.get(0));\n    assertEquals(7, values.get(1));\n    assertEquals(18, values.get(2));\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    w.addDocument(new Document());\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    Bits docsWithField = leaf.getDocsWithField(\"foo\");\n    assertEquals(0, values.get(0));\n    assertFalse(docsWithField.get(0));\n    assertEquals(7, values.get(1));\n    assertEquals(18, values.get(2));\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    w.addDocument(new Document());\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    Bits docsWithField = leaf.getDocsWithField(\"foo\");\n    assertEquals(0, values.get(0));\n    assertFalse(docsWithField.get(0));\n    assertEquals(7, values.get(1));\n    assertEquals(18, values.get(2));\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","sourceNew":"  public void testMissingLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    w.addDocument(new Document());\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    // docID 0 has no value\n    assertEquals(1, values.nextDoc());\n    assertEquals(7, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(18, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMissingLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    w.addDocument(new Document());\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    Bits docsWithField = leaf.getDocsWithField(\"foo\");\n    assertEquals(0, values.get(0));\n    assertFalse(docsWithField.get(0));\n    assertEquals(7, values.get(1));\n    assertEquals(18, values.get(2));\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","sourceNew":"  public void testMissingLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    w.addDocument(new Document());\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    // docID 0 has no value\n    assertEquals(1, values.nextDoc());\n    assertEquals(7, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(18, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMissingLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    w.addDocument(new Document());\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    Bits docsWithField = leaf.getDocsWithField(\"foo\");\n    assertEquals(0, values.get(0));\n    assertFalse(docsWithField.get(0));\n    assertEquals(7, values.get(1));\n    assertEquals(18, values.get(2));\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    w.addDocument(new Document());\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    // docID 0 has no value\n    assertEquals(1, values.nextDoc());\n    assertEquals(7, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(18, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67d866889b0c200f91ef946ae758a42d324216da","date":1544206319,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","sourceNew":"  public void testMissingLongFirst() throws Exception {\n    for (boolean reverse : new boolean[] {true, false}) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      SortField sortField = new SortField(\"foo\", SortField.Type.LONG, reverse);\n      sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n      Sort indexSort = new Sort(sortField);\n      iwc.setIndexSort(indexSort);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", 18));\n      w.addDocument(doc);\n      // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n      w.commit();\n\n      // missing\n      w.addDocument(new Document());\n      w.commit();\n\n      doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", 7));\n      w.addDocument(doc);\n      w.forceMerge(1);\n\n      DirectoryReader r = DirectoryReader.open(w);\n      LeafReader leaf = getOnlyLeafReader(r);\n      assertEquals(3, leaf.maxDoc());\n      NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n      if (reverse) {\n        assertEquals(0, values.nextDoc());\n        assertEquals(18, values.longValue());\n        assertEquals(1, values.nextDoc());\n        assertEquals(7, values.longValue());\n      } else {\n        // docID 0 has no value\n        assertEquals(1, values.nextDoc());\n        assertEquals(7, values.longValue());\n        assertEquals(2, values.nextDoc());\n        assertEquals(18, values.longValue());\n      }\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testMissingLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    w.addDocument(new Document());\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    // docID 0 has no value\n    assertEquals(1, values.nextDoc());\n    assertEquals(7, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(18, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66dc286cff642f0c485052d838cfba579b3f84d3","date":1544206544,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","sourceNew":"  public void testMissingLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    w.addDocument(new Document());\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    // docID 0 has no value\n    assertEquals(1, values.nextDoc());\n    assertEquals(7, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(18, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMissingLongFirst() throws Exception {\n    for (boolean reverse : new boolean[] {true, false}) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      SortField sortField = new SortField(\"foo\", SortField.Type.LONG, reverse);\n      sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n      Sort indexSort = new Sort(sortField);\n      iwc.setIndexSort(indexSort);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", 18));\n      w.addDocument(doc);\n      // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n      w.commit();\n\n      // missing\n      w.addDocument(new Document());\n      w.commit();\n\n      doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", 7));\n      w.addDocument(doc);\n      w.forceMerge(1);\n\n      DirectoryReader r = DirectoryReader.open(w);\n      LeafReader leaf = getOnlyLeafReader(r);\n      assertEquals(3, leaf.maxDoc());\n      NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n      if (reverse) {\n        assertEquals(0, values.nextDoc());\n        assertEquals(18, values.longValue());\n        assertEquals(1, values.nextDoc());\n        assertEquals(7, values.longValue());\n      } else {\n        // docID 0 has no value\n        assertEquals(1, values.nextDoc());\n        assertEquals(7, values.longValue());\n        assertEquals(2, values.nextDoc());\n        assertEquals(18, values.longValue());\n      }\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76b2395079a51ec9c99b4d38c3967f035ab47cdb","date":1544206602,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingLongFirst().mjava","sourceNew":"  public void testMissingLongFirst() throws Exception {\n    for (boolean reverse : new boolean[] {true, false}) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      SortField sortField = new SortField(\"foo\", SortField.Type.LONG, reverse);\n      sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n      Sort indexSort = new Sort(sortField);\n      iwc.setIndexSort(indexSort);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", 18));\n      w.addDocument(doc);\n      // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n      w.commit();\n\n      // missing\n      w.addDocument(new Document());\n      w.commit();\n\n      doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", 7));\n      w.addDocument(doc);\n      w.forceMerge(1);\n\n      DirectoryReader r = DirectoryReader.open(w);\n      LeafReader leaf = getOnlyLeafReader(r);\n      assertEquals(3, leaf.maxDoc());\n      NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n      if (reverse) {\n        assertEquals(0, values.nextDoc());\n        assertEquals(18, values.longValue());\n        assertEquals(1, values.nextDoc());\n        assertEquals(7, values.longValue());\n      } else {\n        // docID 0 has no value\n        assertEquals(1, values.nextDoc());\n        assertEquals(7, values.longValue());\n        assertEquals(2, values.nextDoc());\n        assertEquals(18, values.longValue());\n      }\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testMissingLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 18));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    w.addDocument(new Document());\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"foo\", 7));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n    // docID 0 has no value\n    assertEquals(1, values.nextDoc());\n    assertEquals(7, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(18, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66dc286cff642f0c485052d838cfba579b3f84d3":["67d866889b0c200f91ef946ae758a42d324216da"],"67d866889b0c200f91ef946ae758a42d324216da":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"76b2395079a51ec9c99b4d38c3967f035ab47cdb":["66dc286cff642f0c485052d838cfba579b3f84d3"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a8ad56fe9e068c425e8ac38f2263714e167490c2"],"a8ad56fe9e068c425e8ac38f2263714e167490c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76b2395079a51ec9c99b4d38c3967f035ab47cdb"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"66dc286cff642f0c485052d838cfba579b3f84d3":["76b2395079a51ec9c99b4d38c3967f035ab47cdb"],"67d866889b0c200f91ef946ae758a42d324216da":["66dc286cff642f0c485052d838cfba579b3f84d3"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["67d866889b0c200f91ef946ae758a42d324216da","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","a8ad56fe9e068c425e8ac38f2263714e167490c2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"76b2395079a51ec9c99b4d38c3967f035ab47cdb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"a8ad56fe9e068c425e8ac38f2263714e167490c2":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}