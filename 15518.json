{"path":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#getTotalCounts(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#getTotalCounts(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#getTotalCounts(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  /**\n   * Get the total facet counts for a reader/taxonomy pair and facet indexing\n   * parameters. If not in cache, computed here and added to the cache for later\n   * use.\n   * \n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          facet indexing parameters\n   * @return the total facet counts.\n   */\n  public TotalFacetCounts getTotalCounts(IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    // create the key\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    // it is important that this call is not synchronized, so that available TFC \n    // would not wait for one that needs to be computed.  \n    TotalFacetCounts tfc = cache.get(key);\n    if (tfc != null) {\n      markRecentlyUsed(key); \n      return tfc;\n    }\n    return computeAndCache(key);\n  }\n\n","sourceOld":"  /**\n   * Get the total facet counts for a reader/taxonomy pair and facet indexing\n   * parameters. If not in cache, computed here and added to the cache for later\n   * use.\n   * \n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          facet indexing parameters\n   * @return the total facet counts.\n   */\n  public TotalFacetCounts getTotalCounts(IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    // create the key\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    // it is important that this call is not synchronized, so that available TFC \n    // would not wait for one that needs to be computed.  \n    TotalFacetCounts tfc = cache.get(key);\n    if (tfc != null) {\n      markRecentlyUsed(key); \n      return tfc;\n    }\n    return computeAndCache(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#getTotalCounts(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the total facet counts for a reader/taxonomy pair and facet indexing\n   * parameters. If not in cache, computed here and added to the cache for later\n   * use.\n   * \n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          facet indexing parameters\n   * @return the total facet counts.\n   */\n  public TotalFacetCounts getTotalCounts(IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    // create the key\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    // it is important that this call is not synchronized, so that available TFC \n    // would not wait for one that needs to be computed.  \n    TotalFacetCounts tfc = cache.get(key);\n    if (tfc != null) {\n      markRecentlyUsed(key); \n      return tfc;\n    }\n    return computeAndCache(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#getTotalCounts(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the total facet counts for a reader/taxonomy pair and facet indexing\n   * parameters. If not in cache, computed here and added to the cache for later\n   * use.\n   * \n   * @param indexReader\n   *          the documents index\n   * @param taxonomy\n   *          the taxonomy index\n   * @param facetIndexingParams\n   *          facet indexing parameters\n   * @return the total facet counts.\n   */\n  public TotalFacetCounts getTotalCounts(IndexReader indexReader, TaxonomyReader taxonomy,\n      FacetIndexingParams facetIndexingParams) throws IOException {\n    // create the key\n    TFCKey key = new TFCKey(indexReader, taxonomy, facetIndexingParams);\n    // it is important that this call is not synchronized, so that available TFC \n    // would not wait for one that needs to be computed.  \n    TotalFacetCounts tfc = cache.get(key);\n    if (tfc != null) {\n      markRecentlyUsed(key); \n      return tfc;\n    }\n    return computeAndCache(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}