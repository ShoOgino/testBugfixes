{"path":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","pathOld":"/dev/null","sourceNew":"    /* \n     * Test method for \n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)' \n     */ \n    public void testInsertEntry() throws IOException, InterruptedException, FeedNotFoundException, ParseException, StorageException { \n        \n        Thread a = getRunnerThread(this.count); \n        a.start(); \n         \n        Thread b = getRunnerThread((this.count+=10)); \n        b.start(); \n        a.join(); \n        for (int i = 1; i < this.count ; i++) { \n            ReferenceCounter<StorageQuery> innerQuery = StorageCoreController.getStorageCoreController().getStorageQuery(); \n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\"+i,feedId,this.profile); \n            assertEquals(\"get entry for id\"+i,\"\"+i,e.getId()); \n             \n             \n        } \n        b.join(); \n        ReferenceCounter<StorageQuery> query = StorageCoreController.getStorageCoreController().getStorageQuery(); \n         \n        this.count+=10; \n        for (int i = 1; i < this.count ; i++) { \n            BaseEntry e = query.get().singleEntryQuery(\"\"+i,feedId,this.profile); \n            assertEquals(\"get entry for id\"+i,\"\"+i,e.getId()); \n        } \n        \n        BaseEntry e = query.get().singleEntryQuery(\"\"+this.count,feedId,this.profile); \n        assertNull(\"not entry for ID\",e); \n        query.decrementRef(); \n         \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)'\n     */\n    public void testInsertEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n\n        Thread a = getRunnerThread(this.count);\n        a.start();\n\n        Thread b = getRunnerThread((this.count += 10));\n        b.start();\n        a.join();\n        for (int i = 1; i < this.count; i++) {\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n\n        }\n        b.join();\n        ReferenceCounter<StorageQuery> query = this.controller\n                .getStorageQuery();\n\n        this.count += 10;\n        for (int i = 1; i < this.count; i++) {\n            BaseEntry e = query.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n        }\n\n        BaseEntry e = query.get().singleEntryQuery(\"\" + this.count, feedId,\n                this.configurator);\n        assertNull(\"not entry for ID\", e);\n        query.decrementRef();\n\n    }\n\n","sourceOld":"    /* \n     * Test method for \n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)' \n     */ \n    public void testInsertEntry() throws IOException, InterruptedException, FeedNotFoundException, ParseException, StorageException { \n        \n        Thread a = getRunnerThread(this.count); \n        a.start(); \n         \n        Thread b = getRunnerThread((this.count+=10)); \n        b.start(); \n        a.join(); \n        for (int i = 1; i < this.count ; i++) { \n            ReferenceCounter<StorageQuery> innerQuery = StorageCoreController.getStorageCoreController().getStorageQuery(); \n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\"+i,feedId,this.profile); \n            assertEquals(\"get entry for id\"+i,\"\"+i,e.getId()); \n             \n             \n        } \n        b.join(); \n        ReferenceCounter<StorageQuery> query = StorageCoreController.getStorageCoreController().getStorageQuery(); \n         \n        this.count+=10; \n        for (int i = 1; i < this.count ; i++) { \n            BaseEntry e = query.get().singleEntryQuery(\"\"+i,feedId,this.profile); \n            assertEquals(\"get entry for id\"+i,\"\"+i,e.getId()); \n        } \n        \n        BaseEntry e = query.get().singleEntryQuery(\"\"+this.count,feedId,this.profile); \n        assertNull(\"not entry for ID\",e); \n        query.decrementRef(); \n         \n    } \n\n","bugFix":null,"bugIntro":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02a7f04a7293ea604e17892ba0bded7341adf3af","date":1151695892,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)'\n     */\n    public void testInsertEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n\n        Thread a = getRunnerThread(this.count);\n        a.start();\n\n        Thread b = getRunnerThread((this.count += 10));\n        b.start();\n        // wait for the first thread to check for the inserted entries\n        a.join();  \n        try{\n        for (int i = 1; i < this.count; i++) {\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertNotNull(e);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n\n        }\n        }finally{\n        \t/*\n        \t * if an exception occures the tread can at least finnish running before the\n        \t * controller will be closed in the tearDown method\n        \t */\n        \t b.join();\t\n        }\n      \n       \n        ReferenceCounter<StorageQuery> query = this.controller\n                .getStorageQuery();\n\n        this.count += 10;\n        for (int i = 1; i < this.count; i++) {\n            BaseEntry e = query.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n        }\n\n        BaseEntry e = query.get().singleEntryQuery(\"\" + this.count, feedId,\n                this.configurator);\n        assertNull(\"not entry for ID\", e);\n        query.decrementRef();\n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)'\n     */\n    public void testInsertEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n\n        Thread a = getRunnerThread(this.count);\n        a.start();\n\n        Thread b = getRunnerThread((this.count += 10));\n        b.start();\n        a.join();\n        for (int i = 1; i < this.count; i++) {\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n\n        }\n        b.join();\n        ReferenceCounter<StorageQuery> query = this.controller\n                .getStorageQuery();\n\n        this.count += 10;\n        for (int i = 1; i < this.count; i++) {\n            BaseEntry e = query.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n        }\n\n        BaseEntry e = query.get().singleEntryQuery(\"\" + this.count, feedId,\n                this.configurator);\n        assertNull(\"not entry for ID\", e);\n        query.decrementRef();\n\n    }\n\n","bugFix":["52754a40a1550056d5637c8992b4076b5ed77328"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)'\n     */\n    public void testInsertEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n\n        Thread a = getRunnerThread(this.count);\n        \n\n        Thread b = getRunnerThread((this.count += 10));\n        b.start();\n        a.start();\n//         wait for the first thread to check for the inserted entries\n        a.join();  \n        try{\n        for (int i = 1; i < this.count; i++) {\n           \n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertNotNull(e);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n\n        }\n        }finally{\n        \t/*\n        \t * if an exception occures the tread can at least finnish running before the\n        \t * controller will be closed in the tearDown method\n        \t */\n        \t b.join();\t\n        }\n      \n       \n        ReferenceCounter<StorageQuery> query = this.controller\n                .getStorageQuery();\n\n        this.count += 10;\n        for (int i = 1; i < this.count; i++) {\n            BaseEntry e = query.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n        }\n\n        BaseEntry e = query.get().singleEntryQuery(\"\" + this.count, feedId,\n                this.configurator);\n        assertNull(\"not entry for ID\", e);\n        query.decrementRef();\n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)'\n     */\n    public void testInsertEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n\n        Thread a = getRunnerThread(this.count);\n        a.start();\n\n        Thread b = getRunnerThread((this.count += 10));\n        b.start();\n        // wait for the first thread to check for the inserted entries\n        a.join();  \n        try{\n        for (int i = 1; i < this.count; i++) {\n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertNotNull(e);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n\n        }\n        }finally{\n        \t/*\n        \t * if an exception occures the tread can at least finnish running before the\n        \t * controller will be closed in the tearDown method\n        \t */\n        \t b.join();\t\n        }\n      \n       \n        ReferenceCounter<StorageQuery> query = this.controller\n                .getStorageQuery();\n\n        this.count += 10;\n        for (int i = 1; i < this.count; i++) {\n            BaseEntry e = query.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n        }\n\n        BaseEntry e = query.get().singleEntryQuery(\"\" + this.count, feedId,\n                this.configurator);\n        assertNull(\"not entry for ID\", e);\n        query.decrementRef();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testInsertEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)'\n     */\n    public void testInsertEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n\n        Thread a = getRunnerThread(this.count);\n        \n\n        Thread b = getRunnerThread((this.count += 10));\n        b.start();\n        a.start();\n//         wait for the first thread to check for the inserted entries\n        a.join();  \n        try{\n        for (int i = 1; i < this.count; i++) {\n           \n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertNotNull(e);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n\n        }\n        }finally{\n        \t/*\n        \t * if an exception occures the tread can at least finnish running before the\n        \t * controller will be closed in the tearDown method\n        \t */\n        \t b.join();\t\n        }\n      \n       \n        ReferenceCounter<StorageQuery> query = this.controller\n                .getStorageQuery();\n\n        this.count += 10;\n        for (int i = 1; i < this.count; i++) {\n            BaseEntry e = query.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n        }\n\n        BaseEntry e = query.get().singleEntryQuery(\"\" + this.count, feedId,\n                this.configurator);\n        assertNull(\"not entry for ID\", e);\n        query.decrementRef();\n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)'\n     */\n    public void testInsertEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n\n        Thread a = getRunnerThread(this.count);\n        \n\n        Thread b = getRunnerThread((this.count += 10));\n        b.start();\n        a.start();\n//         wait for the first thread to check for the inserted entries\n        a.join();  \n        try{\n        for (int i = 1; i < this.count; i++) {\n           \n            ReferenceCounter<StorageQuery> innerQuery = this.controller\n                    .getStorageQuery();\n            BaseEntry e = innerQuery.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertNotNull(e);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n\n        }\n        }finally{\n        \t/*\n        \t * if an exception occures the tread can at least finnish running before the\n        \t * controller will be closed in the tearDown method\n        \t */\n        \t b.join();\t\n        }\n      \n       \n        ReferenceCounter<StorageQuery> query = this.controller\n                .getStorageQuery();\n\n        this.count += 10;\n        for (int i = 1; i < this.count; i++) {\n            BaseEntry e = query.get().singleEntryQuery(\"\" + i, feedId,\n                    this.configurator);\n            assertEquals(\"get entry for id\" + i, \"\" + i, e.getId());\n        }\n\n        BaseEntry e = query.get().singleEntryQuery(\"\" + this.count, feedId,\n                this.configurator);\n        assertNull(\"not entry for ID\", e);\n        query.decrementRef();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["52754a40a1550056d5637c8992b4076b5ed77328"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}