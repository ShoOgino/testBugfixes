{"path":"lucene/backwards/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testSingleBinaryRoundTrip().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testSingleBinaryRoundTrip().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testSingleBinaryRoundTrip().mjava","sourceNew":"  public void testSingleBinaryRoundTrip() {\n    byte[] binary = new byte[] \n      { (byte)0x23, (byte)0x98, (byte)0x13, (byte)0xE4, (byte)0x76, (byte)0x41,\n        (byte)0xB2, (byte)0xC9, (byte)0x7F, (byte)0x0A, (byte)0xA6, (byte)0xD8 };\n\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    CharBuffer encoded = IndexableBinaryStringTools.encode(binaryBuf);\n    ByteBuffer decoded = IndexableBinaryStringTools.decode(encoded);\n    assertEquals(\"Round trip decode/decode returned different results:\"\n                 + System.getProperty(\"line.separator\")\n                 + \"original: \" + binaryDump(binaryBuf)\n                 + System.getProperty(\"line.separator\")\n                 + \" encoded: \" + charArrayDump(encoded)\n                 + System.getProperty(\"line.separator\")\n                 + \" decoded: \" + binaryDump(decoded),\n                 binaryBuf, decoded);\n  }\n\n","sourceOld":"  public void testSingleBinaryRoundTrip() {\n    byte[] binary = new byte[] \n      { (byte)0x23, (byte)0x98, (byte)0x13, (byte)0xE4, (byte)0x76, (byte)0x41,\n        (byte)0xB2, (byte)0xC9, (byte)0x7F, (byte)0x0A, (byte)0xA6, (byte)0xD8 };\n\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    CharBuffer encoded = IndexableBinaryStringTools.encode(binaryBuf);\n    ByteBuffer decoded = IndexableBinaryStringTools.decode(encoded);\n    assertEquals(\"Round trip decode/decode returned different results:\"\n                 + System.getProperty(\"line.separator\")\n                 + \"original: \" + binaryDump(binaryBuf)\n                 + System.getProperty(\"line.separator\")\n                 + \" encoded: \" + charArrayDump(encoded)\n                 + System.getProperty(\"line.separator\")\n                 + \" decoded: \" + binaryDump(decoded),\n                 binaryBuf, decoded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testSingleBinaryRoundTrip().mjava","sourceNew":null,"sourceOld":"  public void testSingleBinaryRoundTrip() {\n    byte[] binary = new byte[] \n      { (byte)0x23, (byte)0x98, (byte)0x13, (byte)0xE4, (byte)0x76, (byte)0x41,\n        (byte)0xB2, (byte)0xC9, (byte)0x7F, (byte)0x0A, (byte)0xA6, (byte)0xD8 };\n\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    CharBuffer encoded = IndexableBinaryStringTools.encode(binaryBuf);\n    ByteBuffer decoded = IndexableBinaryStringTools.decode(encoded);\n    assertEquals(\"Round trip decode/decode returned different results:\"\n                 + System.getProperty(\"line.separator\")\n                 + \"original: \" + binaryDump(binaryBuf)\n                 + System.getProperty(\"line.separator\")\n                 + \" encoded: \" + charArrayDump(encoded)\n                 + System.getProperty(\"line.separator\")\n                 + \" decoded: \" + binaryDump(decoded),\n                 binaryBuf, decoded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}