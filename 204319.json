{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int,float).mjava","commits":[{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","sourceNew":"    public Explanation explain(int doc, float queryNorm) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(queryNorm, \"boost\"),\n          Explanation.match(weight.queryNorm = 1f, \"queryNorm\"));\n    }\n\n","sourceOld":"    public Explanation explain(int doc) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(getBoost(), \"boost\"),\n          Explanation.match(weight.queryNorm, \"queryNorm\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f","date":1461156732,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int,float).mjava","sourceNew":"    public Explanation explain(int doc) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(weight.boost, \"boost\"),\n          Explanation.match(weight.queryNorm, \"queryNorm\"));\n    }\n\n","sourceOld":"    public Explanation explain(int doc, float queryNorm) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(queryNorm, \"boost\"),\n          Explanation.match(weight.queryNorm = 1f, \"queryNorm\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#explain(int,float).mjava","sourceNew":"    public Explanation explain(int doc) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(weight.boost, \"boost\"),\n          Explanation.match(weight.queryNorm, \"queryNorm\"));\n    }\n\n","sourceOld":"    public Explanation explain(int doc, float queryNorm) throws IOException {\n      float sc = qWeight * vals.floatVal(doc);\n\n      return Explanation.match(sc, \"FunctionQuery(\" + func + \"), product of:\",\n          vals.explain(doc),\n          Explanation.match(queryNorm, \"boost\"),\n          Explanation.match(weight.queryNorm = 1f, \"queryNorm\"));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b701e0fcef214f86bab1daf107adce0b0131212":["2dfdf766e55e943d942055d7de53c7ad6bc45283","4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b701e0fcef214f86bab1daf107adce0b0131212"]},"commit2Childs":{"9b701e0fcef214f86bab1daf107adce0b0131212":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["9b701e0fcef214f86bab1daf107adce0b0131212","4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f"],"4f4c133ebd4c49a6798dc8a8b1d827aeeedbbc2f":["9b701e0fcef214f86bab1daf107adce0b0131212"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}