{"path":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#MultiSpansWrapper(List[AtomicReaderContext],SpanQuery,Map[Term,TermContext]).mjava","commits":[{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#MultiSpansWrapper(List[AtomicReaderContext],SpanQuery,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#MultiSpansWrapper(AtomicReaderContext[],SpanQuery,Map[Term,TermContext]).mjava","sourceNew":"  private MultiSpansWrapper(List<AtomicReaderContext> leaves, SpanQuery query, Map<Term,TermContext> termContexts) {\n    this.query = query;\n    this.leaves = leaves;\n    this.numLeaves = leaves.size();\n    this.termContexts = termContexts;\n\n  }\n\n","sourceOld":"  private MultiSpansWrapper(AtomicReaderContext[] leaves, SpanQuery query, Map<Term,TermContext> termContexts) {\n    this.query = query;\n    this.leaves = leaves;\n    this.termContexts = termContexts;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c6861cb029cd251d930aa4c4578c8ca21aa957","date":1364984125,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#MultiSpansWrapper(List[AtomicReaderContext],SpanQuery,Map[Term,TermContext]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#MultiSpansWrapper(List[AtomicReaderContext],SpanQuery,Map[Term,TermContext]).mjava","sourceNew":"  private MultiSpansWrapper(List<AtomicReaderContext> leaves, SpanQuery query, Map<Term,TermContext> termContexts) {\n    this.query = query;\n    this.leaves = leaves;\n    this.numLeaves = leaves.size();\n    this.termContexts = termContexts;\n  }\n\n","sourceOld":"  private MultiSpansWrapper(List<AtomicReaderContext> leaves, SpanQuery query, Map<Term,TermContext> termContexts) {\n    this.query = query;\n    this.leaves = leaves;\n    this.numLeaves = leaves.size();\n    this.termContexts = termContexts;\n\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#MultiSpansWrapper(List[AtomicReaderContext],SpanQuery,Map[Term,TermContext]).mjava","sourceNew":null,"sourceOld":"  private MultiSpansWrapper(List<AtomicReaderContext> leaves, SpanQuery query, Map<Term,TermContext> termContexts) {\n    this.query = query;\n    this.leaves = leaves;\n    this.numLeaves = leaves.size();\n    this.termContexts = termContexts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07c6861cb029cd251d930aa4c4578c8ca21aa957":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["07c6861cb029cd251d930aa4c4578c8ca21aa957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["07c6861cb029cd251d930aa4c4578c8ca21aa957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"07c6861cb029cd251d930aa4c4578c8ca21aa957":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}