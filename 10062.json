{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#mergePartitions(List[File],File).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#mergePartitions(List[File],File).mjava","pathOld":"/dev/null","sourceNew":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return a.current.compareTo(b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current);\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#mergePartitions(List[File],File).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#mergePartitions(List[File],File).mjava","sourceNew":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current);\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return a.current.compareTo(b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current);\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#mergePartitions(List[File],File).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#mergePartitions(List[File],File).mjava","sourceNew":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current);\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return a.current.compareTo(b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current);\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#mergePartitions(List[File],File).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/Sort#mergePartitions(List[File],File).mjava","sourceNew":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current);\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current);\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7bf07f4ebadc7539de83a531e64678350d78ca26","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}