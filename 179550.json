{"path":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/shape/TestShapesGeo#testGeoCircle().mjava","commits":[{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/shape/TestShapesGeo#testGeoCircle().mjava","pathOld":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/base/shape/TestShapesGeo#testGeoCircle().mjava","sourceNew":"  @Test\n  public void testGeoCircle() {\n    //--Start with some static tests that once failed:\n\n    //Bug: numeric edge at pole, fails to init\n    ctx.makeCircle(\n        110,-12,ctx.getDistCalc().degreesToDistance(90 + 12));\n\n    //Bug: horizXAxis not in enclosing rectangle, assertion\n    ctx.makeCircle(-44,16,degToDist(106));\n    ctx.makeCircle(-36,-76,degToDist(14));\n    ctx.makeCircle(107,82,degToDist(172));\n\n// TODO need to update this test to be valid\n//    {\n//      //Bug in which distance was being confused as being in the same coordinate system as x,y.\n//      double distDeltaToPole = 0.001;//1m\n//      double distDeltaToPoleDEG = ctx.getDistCalc().distanceToDegrees(distDeltaToPole);\n//      double dist = 1;//1km\n//      double distDEG = ctx.getDistCalc().distanceToDegrees(dist);\n//      Circle c = ctx.makeCircle(0,90-distDeltaToPoleDEG-distDEG,dist);\n//      Rectangle cBBox = c.getBoundingBox();\n//      Rectangle r = ctx.makeRect(cBBox.getMaxX()*0.99,cBBox.getMaxX()+1,c.getCenter().getY(),c.getCenter().getY());\n//      assertEquals(INTERSECTS,c.getBoundingBox().relate(r, ctx));\n//      assertEquals(\"dist != xy space\",INTERSECTS,c.relate(r,ctx));//once failed here\n//    }\n\n    assertEquals(\"wrong estimate\", DISJOINT,ctx.makeCircle(-166,59,5226.2).relate(ctx.makeRect(36, 66, 23, 23), ctx));\n\n    assertEquals(\"bad CONTAINS (dateline)\",INTERSECTS,ctx.makeCircle(56,-50,12231.5).relate(ctx.makeRect(108, 26, 39, 48), ctx));\n\n    assertEquals(\"bad CONTAINS (backwrap2)\",INTERSECTS,\n        ctx.makeCircle(112,-3,degToDist(91)).relate(ctx.makeRect(-163, 29, -38, 10), ctx));\n\n    assertEquals(\"bad CONTAINS (r x-wrap)\",INTERSECTS,\n        ctx.makeCircle(-139,47,degToDist(80)).relate(ctx.makeRect(-180, 180, -3, 12), ctx));\n\n    assertEquals(\"bad CONTAINS (pwrap)\",INTERSECTS,\n        ctx.makeCircle(-139,47,degToDist(80)).relate(ctx.makeRect(-180, 179, -3, 12), ctx));\n\n    assertEquals(\"no-dist 1\",WITHIN,\n        ctx.makeCircle(135,21,0).relate(ctx.makeRect(-103, -154, -47, 52), ctx));\n\n    assertEquals(\"bbox <= >= -90 bug\",CONTAINS,\n        ctx.makeCircle(-64,-84,degToDist(124)).relate(ctx.makeRect(-96, 96, -10, -10), ctx));\n\n    //The horizontal axis line of a geo circle doesn't necessarily pass through c's ctr.\n    assertEquals(\"c's horiz axis doesn't pass through ctr\",INTERSECTS,\n        ctx.makeCircle(71,-44,degToDist(40)).relate(ctx.makeRect(15, 27, -62, -34), ctx));\n\n    assertEquals(\"pole boundary\",INTERSECTS,\n        ctx.makeCircle(-100,-12,degToDist(102)).relate(ctx.makeRect(143, 175, 4, 32), ctx));\n\n    assertEquals(\"full circle assert\",CONTAINS,\n        ctx.makeCircle(-64,32,degToDist(180)).relate(ctx.makeRect(47, 47, -14, 90), ctx));\n\n    //--Now proceed with systematic testing:\n\n    double distToOpposeSide = ctx.getUnits().earthRadius()*Math.PI;\n    assertEquals(ctx.getWorldBounds(),ctx.makeCircle(0,0,distToOpposeSide).getBoundingBox());\n    //assertEquals(ctx.makeCircle(0,0,distToOpposeSide/2 - 500).getBoundingBox());\n\n    double[] theXs = new double[]{-180,-45,90};\n    for (double x : theXs) {\n      double[] theYs = new double[]{-90,-45,0,45,90};\n      for (double y : theYs) {\n        testCircle(x, y, 0);\n        testCircle(x, y, 500);\n        testCircle(x, y, degToDist(90));\n        testCircle(x, y, ctx.getUnits().earthRadius()*6);\n      }\n    }\n\n    testCircleIntersect();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoCircle() {\n    //--Start with some static tests that once failed:\n\n    //Bug: numeric edge at pole, fails to init\n    ctx.makeCircle(\n        110,-12,ctx.getDistCalc().degreesToDistance(90 + 12));\n\n    //Bug: horizXAxis not in enclosing rectangle, assertion\n    ctx.makeCircle(-44,16,degToDist(106));\n    ctx.makeCircle(-36,-76,degToDist(14));\n    ctx.makeCircle(107,82,degToDist(172));\n\n// TODO need to update this test to be valid\n//    {\n//      //Bug in which distance was being confused as being in the same coordinate system as x,y.\n//      double distDeltaToPole = 0.001;//1m\n//      double distDeltaToPoleDEG = ctx.getDistCalc().distanceToDegrees(distDeltaToPole);\n//      double dist = 1;//1km\n//      double distDEG = ctx.getDistCalc().distanceToDegrees(dist);\n//      Circle c = ctx.makeCircle(0,90-distDeltaToPoleDEG-distDEG,dist);\n//      Rectangle cBBox = c.getBoundingBox();\n//      Rectangle r = ctx.makeRect(cBBox.getMaxX()*0.99,cBBox.getMaxX()+1,c.getCenter().getY(),c.getCenter().getY());\n//      assertEquals(INTERSECTS,c.getBoundingBox().relate(r, ctx));\n//      assertEquals(\"dist != xy space\",INTERSECTS,c.relate(r,ctx));//once failed here\n//    }\n\n    assertEquals(\"wrong estimate\", DISJOINT,ctx.makeCircle(-166,59,5226.2).relate(ctx.makeRect(36, 66, 23, 23), ctx));\n\n    assertEquals(\"bad CONTAINS (dateline)\",INTERSECTS,ctx.makeCircle(56,-50,12231.5).relate(ctx.makeRect(108, 26, 39, 48), ctx));\n\n    assertEquals(\"bad CONTAINS (backwrap2)\",INTERSECTS,\n        ctx.makeCircle(112,-3,degToDist(91)).relate(ctx.makeRect(-163, 29, -38, 10), ctx));\n\n    assertEquals(\"bad CONTAINS (r x-wrap)\",INTERSECTS,\n        ctx.makeCircle(-139,47,degToDist(80)).relate(ctx.makeRect(-180, 180, -3, 12), ctx));\n\n    assertEquals(\"bad CONTAINS (pwrap)\",INTERSECTS,\n        ctx.makeCircle(-139,47,degToDist(80)).relate(ctx.makeRect(-180, 179, -3, 12), ctx));\n\n    assertEquals(\"no-dist 1\",WITHIN,\n        ctx.makeCircle(135,21,0).relate(ctx.makeRect(-103, -154, -47, 52), ctx));\n\n    assertEquals(\"bbox <= >= -90 bug\",CONTAINS,\n        ctx.makeCircle(-64,-84,degToDist(124)).relate(ctx.makeRect(-96, 96, -10, -10), ctx));\n\n    //The horizontal axis line of a geo circle doesn't necessarily pass through c's ctr.\n    assertEquals(\"c's horiz axis doesn't pass through ctr\",INTERSECTS,\n        ctx.makeCircle(71,-44,degToDist(40)).relate(ctx.makeRect(15, 27, -62, -34), ctx));\n\n    assertEquals(\"pole boundary\",INTERSECTS,\n        ctx.makeCircle(-100,-12,degToDist(102)).relate(ctx.makeRect(143, 175, 4, 32), ctx));\n\n    assertEquals(\"full circle assert\",CONTAINS,\n        ctx.makeCircle(-64,32,degToDist(180)).relate(ctx.makeRect(47, 47, -14, 90), ctx));\n\n    //--Now proceed with systematic testing:\n\n    double distToOpposeSide = ctx.getUnits().earthRadius()*Math.PI;\n    assertEquals(ctx.getWorldBounds(),ctx.makeCircle(0,0,distToOpposeSide).getBoundingBox());\n    //assertEquals(ctx.makeCircle(0,0,distToOpposeSide/2 - 500).getBoundingBox());\n\n    double[] theXs = new double[]{-180,-45,90};\n    for (double x : theXs) {\n      double[] theYs = new double[]{-90,-45,0,45,90};\n      for (double y : theYs) {\n        testCircle(x, y, 0);\n        testCircle(x, y, 500);\n        testCircle(x, y, degToDist(90));\n        testCircle(x, y, ctx.getUnits().earthRadius()*6);\n      }\n    }\n\n    testCircleIntersect();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/org/apache/lucene/spatial/base/shape/TestShapesGeo#testGeoCircle().mjava","pathOld":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/shape/TestShapesGeo#testGeoCircle().mjava","sourceNew":"  @Test\n  public void testGeoCircle() {\n    //--Start with some static tests that once failed:\n\n    //Bug: numeric edge at pole, fails to init\n    ctx.makeCircle(\n        110,-12,ctx.getDistCalc().degreesToDistance(90 + 12));\n\n    //Bug: horizXAxis not in enclosing rectangle, assertion\n    ctx.makeCircle(-44,16,degToDist(106));\n    ctx.makeCircle(-36,-76,degToDist(14));\n    ctx.makeCircle(107,82,degToDist(172));\n\n// TODO need to update this test to be valid\n//    {\n//      //Bug in which distance was being confused as being in the same coordinate system as x,y.\n//      double distDeltaToPole = 0.001;//1m\n//      double distDeltaToPoleDEG = ctx.getDistCalc().distanceToDegrees(distDeltaToPole);\n//      double dist = 1;//1km\n//      double distDEG = ctx.getDistCalc().distanceToDegrees(dist);\n//      Circle c = ctx.makeCircle(0,90-distDeltaToPoleDEG-distDEG,dist);\n//      Rectangle cBBox = c.getBoundingBox();\n//      Rectangle r = ctx.makeRect(cBBox.getMaxX()*0.99,cBBox.getMaxX()+1,c.getCenter().getY(),c.getCenter().getY());\n//      assertEquals(INTERSECTS,c.getBoundingBox().relate(r, ctx));\n//      assertEquals(\"dist != xy space\",INTERSECTS,c.relate(r,ctx));//once failed here\n//    }\n\n    assertEquals(\"wrong estimate\", DISJOINT,ctx.makeCircle(-166,59,5226.2).relate(ctx.makeRect(36, 66, 23, 23), ctx));\n\n    assertEquals(\"bad CONTAINS (dateline)\",INTERSECTS,ctx.makeCircle(56,-50,12231.5).relate(ctx.makeRect(108, 26, 39, 48), ctx));\n\n    assertEquals(\"bad CONTAINS (backwrap2)\",INTERSECTS,\n        ctx.makeCircle(112,-3,degToDist(91)).relate(ctx.makeRect(-163, 29, -38, 10), ctx));\n\n    assertEquals(\"bad CONTAINS (r x-wrap)\",INTERSECTS,\n        ctx.makeCircle(-139,47,degToDist(80)).relate(ctx.makeRect(-180, 180, -3, 12), ctx));\n\n    assertEquals(\"bad CONTAINS (pwrap)\",INTERSECTS,\n        ctx.makeCircle(-139,47,degToDist(80)).relate(ctx.makeRect(-180, 179, -3, 12), ctx));\n\n    assertEquals(\"no-dist 1\",WITHIN,\n        ctx.makeCircle(135,21,0).relate(ctx.makeRect(-103, -154, -47, 52), ctx));\n\n    assertEquals(\"bbox <= >= -90 bug\",CONTAINS,\n        ctx.makeCircle(-64,-84,degToDist(124)).relate(ctx.makeRect(-96, 96, -10, -10), ctx));\n\n    //The horizontal axis line of a geo circle doesn't necessarily pass through c's ctr.\n    assertEquals(\"c's horiz axis doesn't pass through ctr\",INTERSECTS,\n        ctx.makeCircle(71,-44,degToDist(40)).relate(ctx.makeRect(15, 27, -62, -34), ctx));\n\n    assertEquals(\"pole boundary\",INTERSECTS,\n        ctx.makeCircle(-100,-12,degToDist(102)).relate(ctx.makeRect(143, 175, 4, 32), ctx));\n\n    assertEquals(\"full circle assert\",CONTAINS,\n        ctx.makeCircle(-64,32,degToDist(180)).relate(ctx.makeRect(47, 47, -14, 90), ctx));\n\n    //--Now proceed with systematic testing:\n\n    double distToOpposeSide = ctx.getUnits().earthRadius()*Math.PI;\n    assertEquals(ctx.getWorldBounds(),ctx.makeCircle(0,0,distToOpposeSide).getBoundingBox());\n    //assertEquals(ctx.makeCircle(0,0,distToOpposeSide/2 - 500).getBoundingBox());\n\n    double[] theXs = new double[]{-180,-45,90};\n    for (double x : theXs) {\n      double[] theYs = new double[]{-90,-45,0,45,90};\n      for (double y : theYs) {\n        testCircle(x, y, 0);\n        testCircle(x, y, 500);\n        testCircle(x, y, degToDist(90));\n        testCircle(x, y, ctx.getUnits().earthRadius()*6);\n      }\n    }\n\n    testCircleIntersect();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoCircle() {\n    //--Start with some static tests that once failed:\n\n    //Bug: numeric edge at pole, fails to init\n    ctx.makeCircle(\n        110,-12,ctx.getDistCalc().degreesToDistance(90 + 12));\n\n    //Bug: horizXAxis not in enclosing rectangle, assertion\n    ctx.makeCircle(-44,16,degToDist(106));\n    ctx.makeCircle(-36,-76,degToDist(14));\n    ctx.makeCircle(107,82,degToDist(172));\n\n// TODO need to update this test to be valid\n//    {\n//      //Bug in which distance was being confused as being in the same coordinate system as x,y.\n//      double distDeltaToPole = 0.001;//1m\n//      double distDeltaToPoleDEG = ctx.getDistCalc().distanceToDegrees(distDeltaToPole);\n//      double dist = 1;//1km\n//      double distDEG = ctx.getDistCalc().distanceToDegrees(dist);\n//      Circle c = ctx.makeCircle(0,90-distDeltaToPoleDEG-distDEG,dist);\n//      Rectangle cBBox = c.getBoundingBox();\n//      Rectangle r = ctx.makeRect(cBBox.getMaxX()*0.99,cBBox.getMaxX()+1,c.getCenter().getY(),c.getCenter().getY());\n//      assertEquals(INTERSECTS,c.getBoundingBox().relate(r, ctx));\n//      assertEquals(\"dist != xy space\",INTERSECTS,c.relate(r,ctx));//once failed here\n//    }\n\n    assertEquals(\"wrong estimate\", DISJOINT,ctx.makeCircle(-166,59,5226.2).relate(ctx.makeRect(36, 66, 23, 23), ctx));\n\n    assertEquals(\"bad CONTAINS (dateline)\",INTERSECTS,ctx.makeCircle(56,-50,12231.5).relate(ctx.makeRect(108, 26, 39, 48), ctx));\n\n    assertEquals(\"bad CONTAINS (backwrap2)\",INTERSECTS,\n        ctx.makeCircle(112,-3,degToDist(91)).relate(ctx.makeRect(-163, 29, -38, 10), ctx));\n\n    assertEquals(\"bad CONTAINS (r x-wrap)\",INTERSECTS,\n        ctx.makeCircle(-139,47,degToDist(80)).relate(ctx.makeRect(-180, 180, -3, 12), ctx));\n\n    assertEquals(\"bad CONTAINS (pwrap)\",INTERSECTS,\n        ctx.makeCircle(-139,47,degToDist(80)).relate(ctx.makeRect(-180, 179, -3, 12), ctx));\n\n    assertEquals(\"no-dist 1\",WITHIN,\n        ctx.makeCircle(135,21,0).relate(ctx.makeRect(-103, -154, -47, 52), ctx));\n\n    assertEquals(\"bbox <= >= -90 bug\",CONTAINS,\n        ctx.makeCircle(-64,-84,degToDist(124)).relate(ctx.makeRect(-96, 96, -10, -10), ctx));\n\n    //The horizontal axis line of a geo circle doesn't necessarily pass through c's ctr.\n    assertEquals(\"c's horiz axis doesn't pass through ctr\",INTERSECTS,\n        ctx.makeCircle(71,-44,degToDist(40)).relate(ctx.makeRect(15, 27, -62, -34), ctx));\n\n    assertEquals(\"pole boundary\",INTERSECTS,\n        ctx.makeCircle(-100,-12,degToDist(102)).relate(ctx.makeRect(143, 175, 4, 32), ctx));\n\n    assertEquals(\"full circle assert\",CONTAINS,\n        ctx.makeCircle(-64,32,degToDist(180)).relate(ctx.makeRect(47, 47, -14, 90), ctx));\n\n    //--Now proceed with systematic testing:\n\n    double distToOpposeSide = ctx.getUnits().earthRadius()*Math.PI;\n    assertEquals(ctx.getWorldBounds(),ctx.makeCircle(0,0,distToOpposeSide).getBoundingBox());\n    //assertEquals(ctx.makeCircle(0,0,distToOpposeSide/2 - 500).getBoundingBox());\n\n    double[] theXs = new double[]{-180,-45,90};\n    for (double x : theXs) {\n      double[] theYs = new double[]{-90,-45,0,45,90};\n      for (double y : theYs) {\n        testCircle(x, y, 0);\n        testCircle(x, y, 500);\n        testCircle(x, y, degToDist(90));\n        testCircle(x, y, ctx.getUnits().earthRadius()*6);\n      }\n    }\n\n    testCircleIntersect();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}