{"path":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","commits":[{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","sourceOld":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","sourceOld":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  @Override\n  public void setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n  }\n\n","sourceOld":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","sourceOld":"  @Override\n  public void setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  @Override\n  public void setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n  }\n\n","sourceOld":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","4d637064d608752565d4f9f41b2497dfdfdde50e"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}