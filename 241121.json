{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#insertEntry(StorageEntryWrapper).mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#insertEntry(StorageEntryWrapper).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#insertEntry(StorageEntryWrapper).mjava","sourceNew":"    /**\n     * Inserts a new Entry to the Lucene index storage\n     * \n     * @param wrapper -\n     *            the wrapper containing the entry\n     * @throws StorageException -\n     *             if the entry can not be stored\n     */\n    public void insertEntry(StorageEntryWrapper wrapper)\n            throws StorageException {\n        if(wrapper.getOperation() != StorageOperation.INSERT)\n            throw new StorageException(\"Illegal method call -- insertEntry does not accept other storage operations than insert\");\n        this.lock.lock();\n        try {\n            this.documentMap.put(wrapper.getEntryId(), wrapper\n                    .getLuceneDocument());\n            storageModified();\n            /*\n             * If storage not written write entry to recoverfile\n             * and make the entry available via the buffer\n             */\n            if(this.modifiedCounter != 0)\n                try{\n                    this.controller.writeRecoverEntry(wrapper);\n                    this.buffer.addEntry(wrapper);\n                }catch (Exception e) {\n                    /*\n                     * remove from all resources\n                     */\n                    this.documentMap.remove(wrapper.getEntryId());\n                }\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * Inserts a new Entry to the Lucene index storage\n     * \n     * @param wrapper -\n     *            the wrapper containing the entry\n     * @throws StorageException -\n     *             if the entry can not be stored\n     */\n    public void insertEntry(StorageEntryWrapper wrapper)\n            throws StorageException {\n        if(wrapper.getOperation() != StorageOperation.INSERT)\n            throw new StorageException(\"Illegal method call -- insertEntry does not accept other storage operations than insert\");\n        this.lock.lock();\n        try {\n            this.documentMap.put(wrapper.getEntryId(), wrapper\n                    .getLuceneDocument());\n            storageModified();\n            /*\n             * If storage not written write entry to recoverfile\n             * and make the entry available via the buffer\n             */\n            if(this.modifiedCounter != 0)\n                try{\n                    this.controller.writeRecoverEntry(wrapper);\n                    this.buffer.addEntry(wrapper);\n                }catch (Exception e) {\n                    /*\n                     * remove from all resources\n                     */\n                    this.documentMap.remove(wrapper.getEntryId());\n                }\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#insertEntry(StorageEntryWrapper).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#insertEntry(StorageEntryWrapper).mjava","sourceNew":"    /**\n     * Inserts a new Entry to the Lucene index storage\n     * \n     * @param wrapper -\n     *            the wrapper containing the entry\n     * @throws StorageException -\n     *             if the entry can not be stored\n     */\n    public void insertEntry(StorageEntryWrapper wrapper)\n            throws StorageException {\n        if(wrapper.getOperation() != StorageOperation.INSERT)\n            throw new StorageException(\"Illegal method call -- insertEntry does not accept other storage operations than insert\");\n        this.lock.lock();\n        try {\n            this.documentMap.put(wrapper.getEntryId(), wrapper\n                    .getLuceneDocument());\n            storageModified();\n            /*\n             * If storage not written write entry to recoverfile\n             * and make the entry available via the buffer\n             */\n            if(this.modifiedCounter != 0)\n                try{\n                    this.controller.writeRecoverEntry(wrapper);\n                    this.buffer.addEntry(wrapper);\n                }catch (Exception e) {\n                    /*\n                     * remove from all resources\n                     */\n                    this.documentMap.remove(wrapper.getEntryId());\n                }\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","sourceOld":"    /**\n     * Inserts a new Entry to the Lucene index storage\n     * \n     * @param wrapper -\n     *            the wrapper containing the entry\n     * @throws StorageException -\n     *             if the entry can not be stored\n     */\n    public void insertEntry(StorageEntryWrapper wrapper)\n            throws StorageException {\n        if(wrapper.getOperation() != StorageOperation.INSERT)\n            throw new StorageException(\"Illegal method call -- insertEntry does not accept other storage operations than insert\");\n        this.lock.lock();\n        try {\n            this.documentMap.put(wrapper.getEntryId(), wrapper\n                    .getLuceneDocument());\n            storageModified();\n            /*\n             * If storage not written write entry to recoverfile\n             * and make the entry available via the buffer\n             */\n            if(this.modifiedCounter != 0)\n                try{\n                    this.controller.writeRecoverEntry(wrapper);\n                    this.buffer.addEntry(wrapper);\n                }catch (Exception e) {\n                    /*\n                     * remove from all resources\n                     */\n                    this.documentMap.remove(wrapper.getEntryId());\n                }\n        } finally {\n            this.lock.unlock();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}