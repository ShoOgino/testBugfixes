{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","commits":[{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","pathOld":"/dev/null","sourceNew":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.put(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, CollectionAdminParams.SYSTEM_COLL) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_NODES_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      }\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_REPLICAS_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n      }\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, METRICS_HISTORY_PATH);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","pathOld":"/dev/null","sourceNew":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.put(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, CollectionAdminParams.SYSTEM_COLL) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_NODES_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      }\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_REPLICAS_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n      }\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, METRICS_HISTORY_PATH);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","pathOld":"/dev/null","sourceNew":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.put(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, CollectionAdminParams.SYSTEM_COLL) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_NODES_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      }\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_REPLICAS_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n      }\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, METRICS_HISTORY_PATH);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","sourceNew":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.put(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withSocketTimeout(30000).withConnectionTimeout(15000)\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, CollectionAdminParams.SYSTEM_COLL) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_NODES_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      }\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_REPLICAS_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n      }\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, METRICS_HISTORY_PATH);\n  }\n\n","sourceOld":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.put(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, CollectionAdminParams.SYSTEM_COLL) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_NODES_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      }\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_REPLICAS_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n      }\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, METRICS_HISTORY_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d470946953c3ba2bd69d984efbfdc9017ddbb85","date":1569425608,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","sourceNew":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.put(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withSocketTimeout(30000).withConnectionTimeout(15000)\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, null) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_NODES_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      }\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_REPLICAS_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n      }\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, METRICS_HISTORY_PATH);\n  }\n\n","sourceOld":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.put(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withSocketTimeout(30000).withConnectionTimeout(15000)\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, CollectionAdminParams.SYSTEM_COLL) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_NODES_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      }\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_REPLICAS_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n      }\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, METRICS_HISTORY_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","sourceNew":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.put(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withSocketTimeout(30000).withConnectionTimeout(15000)\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, null) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_NODES_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      }\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_REPLICAS_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n      }\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(solrMetricsContext, METRICS_HISTORY_PATH);\n  }\n\n","sourceOld":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.put(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withSocketTimeout(30000).withConnectionTimeout(15000)\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, null) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_NODES_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      }\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_REPLICAS_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n      }\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, METRICS_HISTORY_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","sourceNew":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  @SuppressWarnings({\"unchecked\"})\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.put(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withSocketTimeout(30000).withConnectionTimeout(15000)\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, null) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_NODES_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      }\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_REPLICAS_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n      }\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(solrMetricsContext, METRICS_HISTORY_PATH);\n  }\n\n","sourceOld":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.put(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withSocketTimeout(30000).withConnectionTimeout(15000)\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, null) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_NODES_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      }\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_REPLICAS_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n      }\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(solrMetricsContext, METRICS_HISTORY_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb87985079ab034ce215661202801376f614a8c","date":1595969187,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#createMetricsHistoryHandler().mjava","sourceNew":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  @SuppressWarnings({\"unchecked\"})\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.putIfAbsent(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withSocketTimeout(30000).withConnectionTimeout(15000)\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, null) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      initArgs.putIfAbsent(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      initArgs.putIfAbsent(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(solrMetricsContext, METRICS_HISTORY_PATH);\n  }\n\n","sourceOld":"  // MetricsHistoryHandler supports both cloud and standalone configs\n  @SuppressWarnings({\"unchecked\"})\n  private void createMetricsHistoryHandler() {\n    PluginInfo plugin = cfg.getMetricsConfig().getHistoryHandler();\n    Map<String, Object> initArgs;\n    if (plugin != null && plugin.initArgs != null) {\n      initArgs = plugin.initArgs.asMap(5);\n      initArgs.put(MetricsHistoryHandler.ENABLE_PROP, plugin.isEnabled());\n    } else {\n      initArgs = new HashMap<>();\n    }\n    String name;\n    SolrCloudManager cloudManager;\n    SolrClient client;\n    if (isZooKeeperAware()) {\n      name = getZkController().getNodeName();\n      cloudManager = getZkController().getSolrCloudManager();\n      client = new CloudSolrClient.Builder(Collections.singletonList(getZkController().getZkServerAddress()), Optional.empty())\n          .withSocketTimeout(30000).withConnectionTimeout(15000)\n          .withHttpClient(updateShardHandler.getDefaultHttpClient()).build();\n    } else {\n      name = getNodeConfig().getNodeName();\n      if (name == null || name.isEmpty()) {\n        name = \"localhost\";\n      }\n      cloudManager = null;\n      client = new EmbeddedSolrServer(this, null) {\n        @Override\n        public void close() throws IOException {\n          // do nothing - we close the container ourselves\n        }\n      };\n      // enable local metrics unless specifically set otherwise\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_NODES_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_NODES_PROP, true);\n      }\n      if (!initArgs.containsKey(MetricsHistoryHandler.ENABLE_REPLICAS_PROP)) {\n        initArgs.put(MetricsHistoryHandler.ENABLE_REPLICAS_PROP, true);\n      }\n    }\n    metricsHistoryHandler = new MetricsHistoryHandler(name, metricsHandler,\n        client, cloudManager, initArgs);\n    containerHandlers.put(METRICS_HISTORY_PATH, metricsHistoryHandler);\n    metricsHistoryHandler.initializeMetrics(solrMetricsContext, METRICS_HISTORY_PATH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["2d470946953c3ba2bd69d984efbfdc9017ddbb85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"2bb87985079ab034ce215661202801376f614a8c":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d470946953c3ba2bd69d984efbfdc9017ddbb85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bb87985079ab034ce215661202801376f614a8c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8f0f2472d437d44ec2144932e1d13fb494e82a3"]},"commit2Childs":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["2bb87985079ab034ce215661202801376f614a8c"],"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["2d470946953c3ba2bd69d984efbfdc9017ddbb85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2bb87985079ab034ce215661202801376f614a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2d470946953c3ba2bd69d984efbfdc9017ddbb85":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}