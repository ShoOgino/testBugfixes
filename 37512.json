{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrRecordWriter#close(TaskAttemptContext).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrRecordWriter#close(TaskAttemptContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close(TaskAttemptContext context) throws IOException, InterruptedException {\n    if (context != null) {\n      heartBeater.setProgress(context);\n    }\n    try {\n      heartBeater.needHeartBeat();\n      if (batch.size() > 0) {\n        batchWriter.queueBatch(batch);\n        numDocsWritten += batch.size();\n        batch.clear();\n      }\n      LOG.info(\"docsWritten: {}\", numDocsWritten);\n      batchWriter.close(context);\n//      if (outputZipFile) {\n//        context.setStatus(\"Writing Zip\");\n//        packZipFile(); // Written to the perm location\n//      } else {\n//        context.setStatus(\"Copying Index\");\n//        fs.completeLocalOutput(perm, temp); // copy to dfs\n//      }\n    } catch (Exception e) {\n      if (e instanceof IOException) {\n        throw (IOException) e;\n      }\n      throw new IOException(e);\n    } finally {\n      heartBeater.cancelHeartBeat();\n      heartBeater.close();\n//      File tempFile = new File(temp.toString());\n//      if (tempFile.exists()) {\n//        FileUtils.forceDelete(new File(temp.toString()));\n//      }\n    }\n\n    context.setStatus(\"Done\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter#close(TaskAttemptContext).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrRecordWriter#close(TaskAttemptContext).mjava","sourceNew":"  @Override\n  public void close(TaskAttemptContext context) throws IOException, InterruptedException {\n    if (context != null) {\n      heartBeater.setProgress(context);\n    }\n    try {\n      heartBeater.needHeartBeat();\n      if (batch.size() > 0) {\n        batchWriter.queueBatch(batch);\n        numDocsWritten += batch.size();\n        batch.clear();\n      }\n      LOG.info(\"docsWritten: {}\", numDocsWritten);\n      batchWriter.close(context);\n//      if (outputZipFile) {\n//        context.setStatus(\"Writing Zip\");\n//        packZipFile(); // Written to the perm location\n//      } else {\n//        context.setStatus(\"Copying Index\");\n//        fs.completeLocalOutput(perm, temp); // copy to dfs\n//      }\n    } catch (Exception e) {\n      if (e instanceof IOException) {\n        throw (IOException) e;\n      }\n      throw new IOException(e);\n    } finally {\n      heartBeater.cancelHeartBeat();\n      heartBeater.close();\n//      File tempFile = new File(temp.toString());\n//      if (tempFile.exists()) {\n//        FileUtils.forceDelete(new File(temp.toString()));\n//      }\n    }\n\n    context.setStatus(\"Done\");\n  }\n\n","sourceOld":"  @Override\n  public void close(TaskAttemptContext context) throws IOException, InterruptedException {\n    if (context != null) {\n      heartBeater.setProgress(context);\n    }\n    try {\n      heartBeater.needHeartBeat();\n      if (batch.size() > 0) {\n        batchWriter.queueBatch(batch);\n        numDocsWritten += batch.size();\n        batch.clear();\n      }\n      LOG.info(\"docsWritten: {}\", numDocsWritten);\n      batchWriter.close(context);\n//      if (outputZipFile) {\n//        context.setStatus(\"Writing Zip\");\n//        packZipFile(); // Written to the perm location\n//      } else {\n//        context.setStatus(\"Copying Index\");\n//        fs.completeLocalOutput(perm, temp); // copy to dfs\n//      }\n    } catch (Exception e) {\n      if (e instanceof IOException) {\n        throw (IOException) e;\n      }\n      throw new IOException(e);\n    } finally {\n      heartBeater.cancelHeartBeat();\n      heartBeater.close();\n//      File tempFile = new File(temp.toString());\n//      if (tempFile.exists()) {\n//        FileUtils.forceDelete(new File(temp.toString()));\n//      }\n    }\n\n    context.setStatus(\"Done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}