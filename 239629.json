{"path":"solr/core/src/java/org/apache/solr/spelling/SuggestQueryConverter#convert(String).mjava","commits":[{"id":"dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e","date":1329752918,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SuggestQueryConverter#convert(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<Token> convert(String original) {\n    if (original == null) { // this can happen with q.alt = and no query\n      return Collections.emptyList();\n    }\n\n    Collection<Token> result = new ArrayList<Token>();\n    try {\n      analyze(result, new StringReader(original), 0);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SuggestQueryConverter#convert(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SuggestQueryConverter#convert(String).mjava","sourceNew":"  @Override\n  public Collection<Token> convert(String original) {\n    if (original == null) { // this can happen with q.alt = and no query\n      return Collections.emptyList();\n    }\n\n    Collection<Token> result = new ArrayList<Token>();\n    try {\n      analyze(result, new StringReader(original), 0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Token> convert(String original) {\n    if (original == null) { // this can happen with q.alt = and no query\n      return Collections.emptyList();\n    }\n\n    Collection<Token> result = new ArrayList<Token>();\n    try {\n      analyze(result, new StringReader(original), 0);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SuggestQueryConverter#convert(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SuggestQueryConverter#convert(String).mjava","sourceNew":"  @Override\n  public Collection<Token> convert(String original) {\n    if (original == null) { // this can happen with q.alt = and no query\n      return Collections.emptyList();\n    }\n\n    Collection<Token> result = new ArrayList<Token>();\n    try {\n      analyze(result, original, 0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Token> convert(String original) {\n    if (original == null) { // this can happen with q.alt = and no query\n      return Collections.emptyList();\n    }\n\n    Collection<Token> result = new ArrayList<Token>();\n    try {\n      analyze(result, new StringReader(original), 0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","bugFix":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SuggestQueryConverter#convert(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SuggestQueryConverter#convert(String).mjava","sourceNew":"  @Override\n  public Collection<Token> convert(String original) {\n    if (original == null) { // this can happen with q.alt = and no query\n      return Collections.emptyList();\n    }\n\n    Collection<Token> result = new ArrayList<Token>();\n    try {\n      analyze(result, original, 0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Token> convert(String original) {\n    if (original == null) { // this can happen with q.alt = and no query\n      return Collections.emptyList();\n    }\n\n    Collection<Token> result = new ArrayList<Token>();\n    try {\n      analyze(result, new StringReader(original), 0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SuggestQueryConverter#convert(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SuggestQueryConverter#convert(String).mjava","sourceNew":"  @Override\n  public Collection<Token> convert(String original) {\n    if (original == null) { // this can happen with q.alt = and no query\n      return Collections.emptyList();\n    }\n\n    Collection<Token> result = new ArrayList<>();\n    try {\n      analyze(result, original, 0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Collection<Token> convert(String original) {\n    if (original == null) { // this can happen with q.alt = and no query\n      return Collections.emptyList();\n    }\n\n    Collection<Token> result = new ArrayList<Token>();\n    try {\n      analyze(result, original, 0, 0);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e"],"dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["0ad9ec888e587ca9a3279368245cdf00aabdc108","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad9ec888e587ca9a3279368245cdf00aabdc108":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dfe519e9d72e08fa9d4ffdec80b908a20c8c2b5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}