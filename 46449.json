{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForLastReplicaGone(String,Replica,String).mjava","commits":[{"id":"de84935d1fc860da45274e111051890ba7504337","date":1407915714,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForLastReplicaGone(String,Replica,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void removeAndWaitForLastReplicaGone(String COLL_NAME, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA, \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    this.client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      // In case of a custom sharded collection, the last replica deletion would also lead to\n      // the deletion of the slice.\n      success = testcoll.getSlice(shard) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForLastReplicaGone(String,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForLastReplicaGone(String,Replica,String).mjava","sourceNew":"  protected void removeAndWaitForLastReplicaGone(String COLL_NAME, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    this.client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      // In case of a custom sharded collection, the last replica deletion would also lead to\n      // the deletion of the slice.\n      success = testcoll.getSlice(shard) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  protected void removeAndWaitForLastReplicaGone(String COLL_NAME, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA, \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    this.client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      // In case of a custom sharded collection, the last replica deletion would also lead to\n      // the deletion of the slice.\n      success = testcoll.getSlice(shard) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForLastReplicaGone(String,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForLastReplicaGone(String,Replica,String).mjava","sourceNew":"  protected void removeAndWaitForLastReplicaGone(String COLL_NAME, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    this.client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrClient().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      // In case of a custom sharded collection, the last replica deletion would also lead to\n      // the deletion of the slice.\n      success = testcoll.getSlice(shard) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  protected void removeAndWaitForLastReplicaGone(String COLL_NAME, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    this.client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrServer().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      // In case of a custom sharded collection, the last replica deletion would also lead to\n      // the deletion of the slice.\n      success = testcoll.getSlice(shard) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b","date":1432801743,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForLastReplicaGone(CloudSolrClient,String,Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#removeAndWaitForLastReplicaGone(String,Replica,String).mjava","sourceNew":"  protected void removeAndWaitForLastReplicaGone(CloudSolrClient client, String COLL_NAME, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrClient().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      // In case of a custom sharded collection, the last replica deletion would also lead to\n      // the deletion of the slice.\n      success = testcoll.getSlice(shard) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","sourceOld":"  protected void removeAndWaitForLastReplicaGone(String COLL_NAME, Replica replica, String shard)\n      throws SolrServerException, IOException, InterruptedException {\n    Map m = makeMap(\"collection\", COLL_NAME, \"action\", DELETEREPLICA.toLower(), \"shard\",\n        shard, \"replica\", replica.getName());\n    SolrParams params = new MapSolrParams(m);\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    this.client.request(request);\n    long endAt = System.currentTimeMillis() + 3000;\n    boolean success = false;\n    DocCollection testcoll = null;\n    while (System.currentTimeMillis() < endAt) {\n      testcoll = getCommonCloudSolrClient().getZkStateReader()\n          .getClusterState().getCollection(COLL_NAME);\n      // In case of a custom sharded collection, the last replica deletion would also lead to\n      // the deletion of the slice.\n      success = testcoll.getSlice(shard) == null;\n      if (success) {\n        log.info(\"replica cleaned up {}/{} core {}\",\n            shard + \"/\" + replica.getName(), replica.getStr(\"core\"));\n        log.info(\"current state {}\", testcoll);\n        break;\n      }\n      Thread.sleep(100);\n    }\n    assertTrue(\"Replica not cleaned up\", success);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["de84935d1fc860da45274e111051890ba7504337"],"de84935d1fc860da45274e111051890ba7504337":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"]},"commit2Childs":{"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de84935d1fc860da45274e111051890ba7504337"],"bafca15d8e408346a67f4282ad1143b88023893b":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["bafca15d8e408346a67f4282ad1143b88023893b"],"de84935d1fc860da45274e111051890ba7504337":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}