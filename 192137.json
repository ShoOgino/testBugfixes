{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    final SegmentDocsEnum docsEnum;\n    if (reuse == null) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else if (!(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.freqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    final SegmentDocsEnum docsEnum;\n    if (reuse == null) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8186dd9a8d60adbe16d2b80b898af3c89c43a478","date":1276813910,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else if (!(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.freqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    final SegmentDocsEnum docsEnum;\n    if (reuse == null) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#docs(FieldInfo,TermState,Bits,DocsEnum).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsEnum reuse) throws IOException {\n    SegmentDocsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsEnum)) {\n      docsEnum = new SegmentDocsEnum(freqIn);\n    } else {\n      docsEnum = (SegmentDocsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsEnum(freqIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8186dd9a8d60adbe16d2b80b898af3c89c43a478":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8186dd9a8d60adbe16d2b80b898af3c89c43a478"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["8186dd9a8d60adbe16d2b80b898af3c89c43a478"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["8186dd9a8d60adbe16d2b80b898af3c89c43a478"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"8186dd9a8d60adbe16d2b80b898af3c89c43a478":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}