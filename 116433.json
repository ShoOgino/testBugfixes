{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting replica locations\", e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting replica locations\", e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting replica locations\", e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting replica locations\", e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042da0877b8e28fd372a8ed80d11c4506a466ad7","date":1534516670,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting replica locations : \" + e.getMessage(), e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting replica locations\", e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf8a7ced1e96b646081915c332618d854944666e","date":1535687605,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException, AssignmentException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new AssignmentException(\"Error getting replica locations : \" + e.getMessage(), e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting replica locations : \" + e.getMessage(), e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException, AssignmentException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new AssignmentException(\"Error getting replica locations : \" + e.getMessage(), e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null) {\n          if (log.isTraceEnabled()) {\n            log.trace(\"REPLICA_POSITIONS: {}\", Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n          }\n        }\n        if (log.isTraceEnabled()) {\n          log.trace(\"AUTOSCALING_CONF: {}\", Utils.toJSONString(autoScalingConfig));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException, AssignmentException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new AssignmentException(\"Error getting replica locations : \" + e.getMessage(), e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null)\n          log.trace(\"REPLICA_POSITIONS: \" + Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n        log.trace(\"AUTOSCALING_CONF: \" + Utils.toJSONString(autoScalingConfig));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,SolrCloudManager,List[String]).mjava","sourceNew":null,"sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, SolrCloudManager cloudManager,\n                                                              List<String> nodesList) throws IOException, InterruptedException, AssignmentException {\n    log.debug(\"shardnames {} NRT {} TLOG {} PULL {} , policy {}, nodeList {}\", shardNames, nrtReplicas, tlogReplicas, pullReplicas, policyName, nodesList);\n    List<ReplicaPosition> replicaPositions = null;\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    try {\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      replicaPositions = PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingConfig,\n          cloudManager,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n      return replicaPositions;\n    } catch (Exception e) {\n      throw new AssignmentException(\"Error getting replica locations : \" + e.getMessage(), e);\n    } finally {\n      if (log.isTraceEnabled()) {\n        if (replicaPositions != null) {\n          if (log.isTraceEnabled()) {\n            log.trace(\"REPLICA_POSITIONS: {}\", Utils.toJSONString(Utils.getDeepCopy(replicaPositions, 7, true)));\n          }\n        }\n        if (log.isTraceEnabled()) {\n          log.trace(\"AUTOSCALING_CONF: {}\", Utils.toJSONString(autoScalingConfig));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"4abf821a41a2fdca2a1dea148999931d22e20529":["bf8a7ced1e96b646081915c332618d854944666e"],"3f504512a03d978990cbff30db0522b354e846db":["4abf821a41a2fdca2a1dea148999931d22e20529"],"bf8a7ced1e96b646081915c332618d854944666e":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"4abf821a41a2fdca2a1dea148999931d22e20529":["3f504512a03d978990cbff30db0522b354e846db"],"bf8a7ced1e96b646081915c332618d854944666e":["4abf821a41a2fdca2a1dea148999931d22e20529"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["bf8a7ced1e96b646081915c332618d854944666e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}