{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#offer(byte[]).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#offer(byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws Exception {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          if (maxQueueSize > 0) {\n            if (offerPermits.get() <= 0 || offerPermits.getAndDecrement() <= 0) {\n              // If a max queue size is set, check it before creating a new queue item.\n              if (!stateManager.hasData(dir)) {\n                // jump to the code below, which tries to create dir if it doesn't exist\n                throw new NoSuchElementException();\n              }\n              List<String> children = stateManager.listData(dir);\n              int remainingCapacity = maxQueueSize - children.size();\n              if (remainingCapacity <= 0) {\n                throw new IllegalStateException(\"queue is full\");\n              }\n\n              // Allow this client to push up to 1% of the remaining queue capacity without rechecking.\n              offerPermits.set(remainingCapacity / 100);\n            }\n          }\n\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          stateManager.createData(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL);\n          isDirty = true;\n          return;\n        } catch (NoSuchElementException e) {\n          try {\n            stateManager.createData(dir, new byte[0], CreateMode.PERSISTENT);\n          } catch (NoSuchElementException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#offer(byte[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#offer(byte[]).mjava","sourceNew":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws Exception {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          if (maxQueueSize > 0) {\n            if (offerPermits.get() <= 0 || offerPermits.getAndDecrement() <= 0) {\n              // If a max queue size is set, check it before creating a new queue item.\n              if (!stateManager.hasData(dir)) {\n                // jump to the code below, which tries to create dir if it doesn't exist\n                throw new NoSuchElementException();\n              }\n              List<String> children = stateManager.listData(dir);\n              int remainingCapacity = maxQueueSize - children.size();\n              if (remainingCapacity <= 0) {\n                throw new IllegalStateException(\"queue is full\");\n              }\n\n              // Allow this client to push up to 1% of the remaining queue capacity without rechecking.\n              offerPermits.set(remainingCapacity / 100);\n            }\n          }\n\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          stateManager.createData(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL);\n          isDirty = true;\n          return;\n        } catch (NoSuchElementException e) {\n          try {\n            stateManager.createData(dir, new byte[0], CreateMode.PERSISTENT);\n          } catch (NoSuchElementException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Inserts data into queue.  If there are no other queue consumers, the offered element\n   * will be immediately visible when this method returns.\n   */\n  @Override\n  public void offer(byte[] data) throws Exception {\n    Timer.Context time = stats.time(dir + \"_offer\");\n    try {\n      while (true) {\n        try {\n          if (maxQueueSize > 0) {\n            if (offerPermits.get() <= 0 || offerPermits.getAndDecrement() <= 0) {\n              // If a max queue size is set, check it before creating a new queue item.\n              if (!stateManager.hasData(dir)) {\n                // jump to the code below, which tries to create dir if it doesn't exist\n                throw new NoSuchElementException();\n              }\n              List<String> children = stateManager.listData(dir);\n              int remainingCapacity = maxQueueSize - children.size();\n              if (remainingCapacity <= 0) {\n                throw new IllegalStateException(\"queue is full\");\n              }\n\n              // Allow this client to push up to 1% of the remaining queue capacity without rechecking.\n              offerPermits.set(remainingCapacity / 100);\n            }\n          }\n\n          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.\n          // This will get set again when the watcher actually fires, but that's ok.\n          stateManager.createData(dir + \"/\" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL);\n          isDirty = true;\n          return;\n        } catch (NoSuchElementException e) {\n          try {\n            stateManager.createData(dir, new byte[0], CreateMode.PERSISTENT);\n          } catch (NoSuchElementException ne) {\n            // someone created it\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}