{"path":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#hasConflicts(String,IvyNodeElement).mjava","commits":[{"id":"b3e4bd3aed493904d0bbb6c6e0394f619e175087","date":1401446035,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#hasConflicts(String,IvyNodeElement).mjava","pathOld":"/dev/null","sourceNew":"  private boolean hasConflicts(String conflictCoordinate, IvyNodeElement parent) {\n    // the element itself will never be in conflict, since its coordinate is different\n    for (IvyNodeElement child : parent.getDependencies()) {\n      String indirectCoordinate = \"/\" + child.getOrganization() + \"/\" + child.getName();\n      if (conflictCoordinate.equals(indirectCoordinate)) {\n        if (isConflict(conflictCoordinate, directDependencies.get(conflictCoordinate).direct, child.getRevision())) {\n          return true;\n        }\n      } else if (hasConflicts(conflictCoordinate, child)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151d28379beec3adbc4c091c633cb33e496a2de3","date":1401909314,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#hasConflicts(String,IvyNodeElement).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#hasConflicts(String,IvyNodeElement).mjava","sourceNew":"  private boolean hasConflicts(String conflictCoordinate, IvyNodeElement parent) {\n    // the element itself will never be in conflict, since its coordinate is different\n    for (IvyNodeElement child : parent.getDependencies()) {\n      String indirectCoordinate = \"/\" + child.getOrganization() + \"/\" + child.getName();\n      if (conflictCoordinate.equals(indirectCoordinate)) {\n        Dependency dependency = directDependencies.get(conflictCoordinate);\n        if (isConflict(conflictCoordinate, dependency.directVersion, child.getRevision())) {\n          return true;\n        }\n      } else if (hasConflicts(conflictCoordinate, child)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean hasConflicts(String conflictCoordinate, IvyNodeElement parent) {\n    // the element itself will never be in conflict, since its coordinate is different\n    for (IvyNodeElement child : parent.getDependencies()) {\n      String indirectCoordinate = \"/\" + child.getOrganization() + \"/\" + child.getName();\n      if (conflictCoordinate.equals(indirectCoordinate)) {\n        if (isConflict(conflictCoordinate, directDependencies.get(conflictCoordinate).direct, child.getRevision())) {\n          return true;\n        }\n      } else if (hasConflicts(conflictCoordinate, child)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#hasConflicts(String,IvyNodeElement).mjava","sourceNew":null,"sourceOld":"  private boolean hasConflicts(String conflictCoordinate, IvyNodeElement parent) {\n    // the element itself will never be in conflict, since its coordinate is different\n    for (IvyNodeElement child : parent.getDependencies()) {\n      String indirectCoordinate = \"/\" + child.getOrganization() + \"/\" + child.getName();\n      if (conflictCoordinate.equals(indirectCoordinate)) {\n        Dependency dependency = directDependencies.get(conflictCoordinate);\n        if (isConflict(conflictCoordinate, dependency.directVersion, child.getRevision())) {\n          return true;\n        }\n      } else if (hasConflicts(conflictCoordinate, child)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"151d28379beec3adbc4c091c633cb33e496a2de3":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["151d28379beec3adbc4c091c633cb33e496a2de3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"]},"commit2Childs":{"151d28379beec3adbc4c091c633cb33e496a2de3":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["151d28379beec3adbc4c091c633cb33e496a2de3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}