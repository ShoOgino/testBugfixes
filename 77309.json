{"path":"solr/core/src/test/org/apache/solr/handler/component/PhrasesIdentificationComponentTest#testSimpleSearchRequests().mjava","commits":[{"id":"0d1411e62d30c460b09c6f3643df82daa10a27cc","date":1536256256,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/PhrasesIdentificationComponentTest#testSimpleSearchRequests().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleSearchRequests() throws Exception {\n    final String input = \"\\\"brown fox\\\"\";\n    \n    assertQ(req(\"q\", input)\n            // basic search should have worked...\n            , \"//result[@numFound='2']\"\n            , \"//result/doc/str[@name='id'][.='42']\"\n            , \"//result/doc/str[@name='id'][.='43']\"\n            // and phrases should not be returned since they weren't requested...\n            , \"0=count(//lst[@name='phrases'])\"\n            );\n    \n    assertQ(req(\"phrases\", \"false\", \"q\", input)\n            // basic search should have worked...\n            , \"//result[@numFound='2']\"\n            , \"//result/doc/str[@name='id'][.='42']\"\n            , \"//result/doc/str[@name='id'][.='43']\"\n            // and phrases should not be returned since they were explicitly disabled...\n            , \"0=count(//lst[@name='phrases'])\"\n            );\n\n    // with input this short, all of these permutations of requests should produce the same output...\n    for (SolrQueryRequest req : Arrays.asList\n           ( // simple, using 3/7 defaults\n             req(\"phrases\",\"true\", \"q\", input),\n             \n             // simple, using just the 3/3 'short' fields\n             req(\"phrases\",\"true\", \"q\", input,\n                 \"phrases.fields\", \"multigrams_body_short multigrams_title_short^2\"),\n             \n             // diff analysers, but explicit override using 3/3 \"short\" field...\n             req(\"phrases\",\"true\", \"q\", input,\n                 \"phrases.fields\", \"multigrams_body multigrams_title_short^2\",\n                 \"phrases.analysis.field\", \"multigrams_title_short\"))) {\n      assertQ(req\n              // basic search should have worked...\n              , \"//result[@numFound='2']\"\n              , \"//result/doc/str[@name='id'][.='42']\"\n              , \"//result/doc/str[@name='id'][.='43']\"\n              \n              // and we should have gotten phrase info...\n              , \"//lst[@name='phrases']/str[@name='input'][.='\"+input+\"']\"\n              , \"//lst[@name='phrases']/str[@name='summary'][.='\\\"{brown fox}\\\"']\"\n              , \"count(//lst[@name='phrases']/arr[@name='details']/lst)=1\"\n              , \"//lst[@name='phrases']/arr[@name='details']/lst/str[@name='text'][.='brown fox']\"\n              , \"//lst[@name='phrases']/arr[@name='details']/lst/int[@name='offset_start'][.='1']\"\n              , \"//lst[@name='phrases']/arr[@name='details']/lst/int[@name='offset_end'][.='10']\"\n              , \"//lst[@name='phrases']/arr[@name='details']/lst/double[@name='score'][number(.) > 0]\"\n              );\n    }\n\n    // override the query string to get different phrases\n    assertQ(req(\"phrases\",\"true\", \"q\", \"*:*\", \"phrases.q\",  input)\n            // basic search should have found all docs...\n            , \"//result[@numFound='4']\"\n            // and we should have gotten phrase info for our alternative q string...\n            , \"//lst[@name='phrases']/str[@name='input'][.='\"+input+\"']\"\n            , \"//lst[@name='phrases']/str[@name='summary'][.='\\\"{brown fox}\\\"']\"\n            , \"count(//lst[@name='phrases']/arr[@name='details']/lst)=1\"\n            , \"//lst[@name='phrases']/arr[@name='details']/lst/str[@name='text'][.='brown fox']\"\n            , \"//lst[@name='phrases']/arr[@name='details']/lst/int[@name='offset_start'][.='1']\"\n            , \"//lst[@name='phrases']/arr[@name='details']/lst/int[@name='offset_end'][.='10']\"\n            , \"//lst[@name='phrases']/arr[@name='details']/lst/double[@name='score'][number(.) > 0]\"\n            );\n    \n    // empty input, empty phrases (but no error)\n    assertQ(req(\"phrases\",\"true\", \"q\", \"*:*\", \"phrases.q\", \"\")\n            // basic search should have found all docs...\n            , \"//result[@numFound='4']\"\n            // and we should have gotten (empty) phrase info for our alternative q string...\n            , \"//lst[@name='phrases']/str[@name='input'][.='']\"\n            , \"//lst[@name='phrases']/str[@name='summary'][.='']\"\n            , \"count(//lst[@name='phrases']/arr[@name='details'])     = 1\"\n            , \"count(//lst[@name='phrases']/arr[@name='details']/lst) = 0\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d1411e62d30c460b09c6f3643df82daa10a27cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d1411e62d30c460b09c6f3643df82daa10a27cc"],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}