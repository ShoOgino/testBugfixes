{"path":"solr/core/src/test/org/apache/solr/search/TestCaffeineCache#testMaxIdleTime().mjava","commits":[{"id":"87f0484c38f986062889ed50f3bf3bd462848c26","date":1570108628,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCaffeineCache#testMaxIdleTime().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMaxIdleTime() throws Exception {\n    int IDLE_TIME_SEC = 5;\n    CountDownLatch removed = new CountDownLatch(1);\n    AtomicReference<RemovalCause> removalCause = new AtomicReference<>();\n    CaffeineCache<String, String> cache = new CaffeineCache<>() {\n      @Override\n      public void onRemoval(String key, String value, RemovalCause cause) {\n        super.onRemoval(key, value, cause);\n        removalCause.set(cause);\n        removed.countDown();\n      }\n    };\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxIdleTime\", \"\" + IDLE_TIME_SEC);\n    cache.init(params, null, new NoOpRegenerator());\n\n    cache.put(\"foo\", \"bar\");\n    assertEquals(\"bar\", cache.get(\"foo\"));\n    // sleep for at least the idle time before inserting other entries\n    // the eviction is piggy-backed on put()\n    Thread.sleep(TimeUnit.SECONDS.toMillis(IDLE_TIME_SEC * 2));\n    cache.put(\"abc\", \"xyz\");\n    boolean await = removed.await(30, TimeUnit.SECONDS);\n    assertTrue(\"did not expire entry in in time\", await);\n    assertEquals(RemovalCause.EXPIRED, removalCause.get());\n    assertNull(cache.get(\"foo\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCaffeineCache#testMaxIdleTime().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMaxIdleTime() throws Exception {\n    int IDLE_TIME_SEC = 5;\n    CountDownLatch removed = new CountDownLatch(1);\n    AtomicReference<RemovalCause> removalCause = new AtomicReference<>();\n    CaffeineCache<String, String> cache = new CaffeineCache<>() {\n      @Override\n      public void onRemoval(String key, String value, RemovalCause cause) {\n        super.onRemoval(key, value, cause);\n        removalCause.set(cause);\n        removed.countDown();\n      }\n    };\n    Map<String, String> params = new HashMap<>();\n    params.put(\"size\", \"6\");\n    params.put(\"maxIdleTime\", \"\" + IDLE_TIME_SEC);\n    cache.init(params, null, new NoOpRegenerator());\n\n    cache.put(\"foo\", \"bar\");\n    assertEquals(\"bar\", cache.get(\"foo\"));\n    // sleep for at least the idle time before inserting other entries\n    // the eviction is piggy-backed on put()\n    Thread.sleep(TimeUnit.SECONDS.toMillis(IDLE_TIME_SEC * 2));\n    cache.put(\"abc\", \"xyz\");\n    boolean await = removed.await(30, TimeUnit.SECONDS);\n    assertTrue(\"did not expire entry in in time\", await);\n    assertEquals(RemovalCause.EXPIRED, removalCause.get());\n    assertNull(cache.get(\"foo\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87f0484c38f986062889ed50f3bf3bd462848c26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87f0484c38f986062889ed50f3bf3bd462848c26"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87f0484c38f986062889ed50f3bf3bd462848c26"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87f0484c38f986062889ed50f3bf3bd462848c26","b0b597c65628ca9e73913a07e81691f8229bae35"],"87f0484c38f986062889ed50f3bf3bd462848c26":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}