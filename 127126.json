{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer.WrappedPositionArray#get(int).mjava","commits":[{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer.WrappedPositionArray#get(int).mjava","pathOld":"/dev/null","sourceNew":"    /** Get Position instance for this absolute position;\n     *  this is allowed to be arbitrarily far \"in the\n     *  future\" but cannot be before the last freeBefore. */\n    public Position get(int pos) {\n      while(pos >= nextPos) {\n        //System.out.println(\"count=\" + count + \" vs len=\" + positions.length);\n        if (count == positions.length) {\n          Position[] newPositions = new Position[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          //System.out.println(\"grow positions \" + newPositions.length);\n          System.arraycopy(positions, nextWrite, newPositions, 0, positions.length-nextWrite);\n          System.arraycopy(positions, 0, newPositions, positions.length-nextWrite, nextWrite);\n          for(int i=positions.length;i<newPositions.length;i++) {\n            newPositions[i] = new Position();\n          }\n          nextWrite = positions.length;\n          positions = newPositions;\n        }\n        if (nextWrite == positions.length) {\n          nextWrite = 0;\n        }\n        // Should have already been reset:\n        assert positions[nextWrite].count == 0;\n        positions[nextWrite++].pos = nextPos++;\n        count++;\n      }\n      assert inBounds(pos);\n      final int index = getIndex(pos);\n      assert positions[index].pos == pos;\n      return positions[index];\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer.WrappedPositionArray#get(int).mjava","pathOld":"/dev/null","sourceNew":"    /** Get Position instance for this absolute position;\n     *  this is allowed to be arbitrarily far \"in the\n     *  future\" but cannot be before the last freeBefore. */\n    public Position get(int pos) {\n      while(pos >= nextPos) {\n        //System.out.println(\"count=\" + count + \" vs len=\" + positions.length);\n        if (count == positions.length) {\n          Position[] newPositions = new Position[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          //System.out.println(\"grow positions \" + newPositions.length);\n          System.arraycopy(positions, nextWrite, newPositions, 0, positions.length-nextWrite);\n          System.arraycopy(positions, 0, newPositions, positions.length-nextWrite, nextWrite);\n          for(int i=positions.length;i<newPositions.length;i++) {\n            newPositions[i] = new Position();\n          }\n          nextWrite = positions.length;\n          positions = newPositions;\n        }\n        if (nextWrite == positions.length) {\n          nextWrite = 0;\n        }\n        // Should have already been reset:\n        assert positions[nextWrite].count == 0;\n        positions[nextWrite++].pos = nextPos++;\n        count++;\n      }\n      assert inBounds(pos);\n      final int index = getIndex(pos);\n      assert positions[index].pos == pos;\n      return positions[index];\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.WrappedPositionArray#get(int).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer.WrappedPositionArray#get(int).mjava","sourceNew":"    /** Get Position instance for this absolute position;\n     *  this is allowed to be arbitrarily far \"in the\n     *  future\" but cannot be before the last freeBefore. */\n    public Position get(int pos) {\n      while(pos >= nextPos) {\n        //System.out.println(\"count=\" + count + \" vs len=\" + positions.length);\n        if (count == positions.length) {\n          Position[] newPositions = new Position[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          //System.out.println(\"grow positions \" + newPositions.length);\n          System.arraycopy(positions, nextWrite, newPositions, 0, positions.length-nextWrite);\n          System.arraycopy(positions, 0, newPositions, positions.length-nextWrite, nextWrite);\n          for(int i=positions.length;i<newPositions.length;i++) {\n            newPositions[i] = new Position();\n          }\n          nextWrite = positions.length;\n          positions = newPositions;\n        }\n        if (nextWrite == positions.length) {\n          nextWrite = 0;\n        }\n        // Should have already been reset:\n        assert positions[nextWrite].count == 0;\n        positions[nextWrite++].pos = nextPos++;\n        count++;\n      }\n      assert inBounds(pos);\n      final int index = getIndex(pos);\n      assert positions[index].pos == pos;\n      return positions[index];\n    }\n\n","sourceOld":"    /** Get Position instance for this absolute position;\n     *  this is allowed to be arbitrarily far \"in the\n     *  future\" but cannot be before the last freeBefore. */\n    public Position get(int pos) {\n      while(pos >= nextPos) {\n        //System.out.println(\"count=\" + count + \" vs len=\" + positions.length);\n        if (count == positions.length) {\n          Position[] newPositions = new Position[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          //System.out.println(\"grow positions \" + newPositions.length);\n          System.arraycopy(positions, nextWrite, newPositions, 0, positions.length-nextWrite);\n          System.arraycopy(positions, 0, newPositions, positions.length-nextWrite, nextWrite);\n          for(int i=positions.length;i<newPositions.length;i++) {\n            newPositions[i] = new Position();\n          }\n          nextWrite = positions.length;\n          positions = newPositions;\n        }\n        if (nextWrite == positions.length) {\n          nextWrite = 0;\n        }\n        // Should have already been reset:\n        assert positions[nextWrite].count == 0;\n        positions[nextWrite++].pos = nextPos++;\n        count++;\n      }\n      assert inBounds(pos);\n      final int index = getIndex(pos);\n      assert positions[index].pos == pos;\n      return positions[index];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0984ad47974c2d5d354519ddb2aa8358973a6271"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}