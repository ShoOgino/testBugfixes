{"path":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageSelector#pickDefaultPassage(CharSequence,int,List[OffsetRange]).mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageSelector#pickDefaultPassage(CharSequence,int,List[OffsetRange]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Invoked when no passages could be selected (due to constraints or lack of highlight markers).\n   */\n  protected Passage[] pickDefaultPassage(\n      CharSequence value, int maxCharacterWindow, List<OffsetRange> permittedPassageRanges) {\n    // Search for the first range that is not empty.\n    for (OffsetRange o : permittedPassageRanges) {\n      int to = Math.min(value.length(), o.to);\n      if (o.from < to) {\n        return new Passage[] {\n          new Passage(\n              o.from, o.from + Math.min(maxCharacterWindow, o.length()), Collections.emptyList())\n        };\n      }\n    }\n\n    return new Passage[] {};\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"060cad2e7ae19bfe202be419234328acf680716c","date":1599747351,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageSelector#pickDefaultPassage(CharSequence,int,int,List[OffsetRange]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/PassageSelector#pickDefaultPassage(CharSequence,int,List[OffsetRange]).mjava","sourceNew":"  /**\n   * Invoked when no passages could be selected (due to constraints or lack of highlight markers).\n   */\n  protected Passage[] pickDefaultPassage(\n      CharSequence value, int maxCharacterWindow, int maxPassages, List<OffsetRange> permittedPassageRanges) {\n    // Search for the first range that is not empty.\n    ArrayList<Passage> defaultPassages = new ArrayList<>();\n    for (OffsetRange o : permittedPassageRanges) {\n      if (defaultPassages.size() >= maxPassages) {\n        break;\n      }\n\n      int to = Math.min(value.length(), o.to);\n      if (o.from < to) {\n        defaultPassages.add(new Passage(o.from, o.from + Math.min(maxCharacterWindow, o.length()), Collections.emptyList()));\n      }\n    }\n\n    return defaultPassages.toArray(Passage[]::new);\n  }\n\n","sourceOld":"  /**\n   * Invoked when no passages could be selected (due to constraints or lack of highlight markers).\n   */\n  protected Passage[] pickDefaultPassage(\n      CharSequence value, int maxCharacterWindow, List<OffsetRange> permittedPassageRanges) {\n    // Search for the first range that is not empty.\n    for (OffsetRange o : permittedPassageRanges) {\n      int to = Math.min(value.length(), o.to);\n      if (o.from < to) {\n        return new Passage[] {\n          new Passage(\n              o.from, o.from + Math.min(maxCharacterWindow, o.length()), Collections.emptyList())\n        };\n      }\n    }\n\n    return new Passage[] {};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"060cad2e7ae19bfe202be419234328acf680716c":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["060cad2e7ae19bfe202be419234328acf680716c"]},"commit2Childs":{"060cad2e7ae19bfe202be419234328acf680716c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["060cad2e7ae19bfe202be419234328acf680716c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}