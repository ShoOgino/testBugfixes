{"path":"lucene/src/test/org/apache/lucene/index/TestParallelAtomicReader#queryTest(Query).mjava","commits":[{"id":"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b","date":1328624680,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelAtomicReader#queryTest(Query).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#queryTest(Query).mjava","sourceNew":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, null, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      Document docParallel = parallel.doc(parallelHits[i].doc);\n      Document docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","sourceOld":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, null, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      Document docParallel = parallel.doc(parallelHits[i].doc);\n      Document docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b385e33541f6749e71618c9ab36fad908a7ed0","date":1328629771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#queryTest(Query).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelAtomicReader#queryTest(Query).mjava","sourceNew":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, null, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      Document docParallel = parallel.doc(parallelHits[i].doc);\n      Document docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","sourceOld":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, null, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      Document docParallel = parallel.doc(parallelHits[i].doc);\n      Document docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08b385e33541f6749e71618c9ab36fad908a7ed0"]},"commit2Childs":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}