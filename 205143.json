{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#assertEquals(SegmentInfo,SegmentInfo).mjava","commits":[{"id":"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051","date":1412632911,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#assertEquals(SegmentInfo,SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  protected final void assertEquals(SegmentInfo expected, SegmentInfo actual) {\n    assertSame(expected.dir, actual.dir);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.files(), actual.files());\n    // we don't assert this, because SI format has nothing to do with it... set by SIS\n    // assertSame(expected.getCodec(), actual.getCodec());\n    assertEquals(expected.getDiagnostics(), actual.getDiagnostics());\n    assertEquals(expected.getDocCount(), actual.getDocCount());\n    assertIDEquals(expected.getId(), actual.getId());\n    assertEquals(expected.getUseCompoundFile(), actual.getUseCompoundFile());\n    assertEquals(expected.getVersion(), actual.getVersion());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#assertEquals(SegmentInfo,SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  protected final void assertEquals(SegmentInfo expected, SegmentInfo actual) {\n    assertSame(expected.dir, actual.dir);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.files(), actual.files());\n    // we don't assert this, because SI format has nothing to do with it... set by SIS\n    // assertSame(expected.getCodec(), actual.getCodec());\n    assertEquals(expected.getDiagnostics(), actual.getDiagnostics());\n    assertEquals(expected.getDocCount(), actual.getDocCount());\n    assertIDEquals(expected.getId(), actual.getId());\n    assertEquals(expected.getUseCompoundFile(), actual.getUseCompoundFile());\n    assertEquals(expected.getVersion(), actual.getVersion());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8521d944f9dfb45692ec28235dbf116d47ef69ba","date":1417535150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#assertEquals(SegmentInfo,SegmentInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#assertEquals(SegmentInfo,SegmentInfo).mjava","sourceNew":"  protected final void assertEquals(SegmentInfo expected, SegmentInfo actual) {\n    assertSame(expected.dir, actual.dir);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.files(), actual.files());\n    // we don't assert this, because SI format has nothing to do with it... set by SIS\n    // assertSame(expected.getCodec(), actual.getCodec());\n    assertEquals(expected.getDiagnostics(), actual.getDiagnostics());\n    assertEquals(expected.getDocCount(), actual.getDocCount());\n    assertIDEquals(expected.getId(), actual.getId());\n    assertEquals(expected.getUseCompoundFile(), actual.getUseCompoundFile());\n    assertEquals(expected.getVersion(), actual.getVersion());\n    assertEquals(expected.getAttributes(), actual.getAttributes());\n  }\n\n","sourceOld":"  protected final void assertEquals(SegmentInfo expected, SegmentInfo actual) {\n    assertSame(expected.dir, actual.dir);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.files(), actual.files());\n    // we don't assert this, because SI format has nothing to do with it... set by SIS\n    // assertSame(expected.getCodec(), actual.getCodec());\n    assertEquals(expected.getDiagnostics(), actual.getDiagnostics());\n    assertEquals(expected.getDocCount(), actual.getDocCount());\n    assertIDEquals(expected.getId(), actual.getId());\n    assertEquals(expected.getUseCompoundFile(), actual.getUseCompoundFile());\n    assertEquals(expected.getVersion(), actual.getVersion());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#assertEquals(SegmentInfo,SegmentInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#assertEquals(SegmentInfo,SegmentInfo).mjava","sourceNew":"  protected final void assertEquals(SegmentInfo expected, SegmentInfo actual) {\n    assertSame(expected.dir, actual.dir);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.files(), actual.files());\n    // we don't assert this, because SI format has nothing to do with it... set by SIS\n    // assertSame(expected.getCodec(), actual.getCodec());\n    assertEquals(expected.getDiagnostics(), actual.getDiagnostics());\n    assertEquals(expected.maxDoc(), actual.maxDoc());\n    assertIDEquals(expected.getId(), actual.getId());\n    assertEquals(expected.getUseCompoundFile(), actual.getUseCompoundFile());\n    assertEquals(expected.getVersion(), actual.getVersion());\n    assertEquals(expected.getAttributes(), actual.getAttributes());\n  }\n\n","sourceOld":"  protected final void assertEquals(SegmentInfo expected, SegmentInfo actual) {\n    assertSame(expected.dir, actual.dir);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.files(), actual.files());\n    // we don't assert this, because SI format has nothing to do with it... set by SIS\n    // assertSame(expected.getCodec(), actual.getCodec());\n    assertEquals(expected.getDiagnostics(), actual.getDiagnostics());\n    assertEquals(expected.getDocCount(), actual.getDocCount());\n    assertIDEquals(expected.getId(), actual.getId());\n    assertEquals(expected.getUseCompoundFile(), actual.getUseCompoundFile());\n    assertEquals(expected.getVersion(), actual.getVersion());\n    assertEquals(expected.getAttributes(), actual.getAttributes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#assertEquals(SegmentInfo,SegmentInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#assertEquals(SegmentInfo,SegmentInfo).mjava","sourceNew":"  protected final void assertEquals(SegmentInfo expected, SegmentInfo actual) {\n    assertSame(expected.dir, actual.dir);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.files(), actual.files());\n    // we don't assert this, because SI format has nothing to do with it... set by SIS\n    // assertSame(expected.getCodec(), actual.getCodec());\n    assertEquals(expected.getDiagnostics(), actual.getDiagnostics());\n    assertEquals(expected.maxDoc(), actual.maxDoc());\n    assertIDEquals(expected.getId(), actual.getId());\n    assertEquals(expected.getUseCompoundFile(), actual.getUseCompoundFile());\n    assertEquals(expected.getVersion(), actual.getVersion());\n    assertEquals(expected.getAttributes(), actual.getAttributes());\n  }\n\n","sourceOld":"  protected final void assertEquals(SegmentInfo expected, SegmentInfo actual) {\n    assertSame(expected.dir, actual.dir);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.files(), actual.files());\n    // we don't assert this, because SI format has nothing to do with it... set by SIS\n    // assertSame(expected.getCodec(), actual.getCodec());\n    assertEquals(expected.getDiagnostics(), actual.getDiagnostics());\n    assertEquals(expected.getDocCount(), actual.getDocCount());\n    assertIDEquals(expected.getId(), actual.getId());\n    assertEquals(expected.getUseCompoundFile(), actual.getUseCompoundFile());\n    assertEquals(expected.getVersion(), actual.getVersion());\n    assertEquals(expected.getAttributes(), actual.getAttributes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#assertEquals(SegmentInfo,SegmentInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#assertEquals(SegmentInfo,SegmentInfo).mjava","sourceNew":"  protected final void assertEquals(SegmentInfo expected, SegmentInfo actual) {\n    assertSame(expected.dir, actual.dir);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.files(), actual.files());\n    // we don't assert this, because SI format has nothing to do with it... set by SIS\n    // assertSame(expected.getCodec(), actual.getCodec());\n    assertEquals(expected.getDiagnostics(), actual.getDiagnostics());\n    assertEquals(expected.maxDoc(), actual.maxDoc());\n    assertIDEquals(expected.getId(), actual.getId());\n    assertEquals(expected.getUseCompoundFile(), actual.getUseCompoundFile());\n    assertEquals(expected.getVersion(), actual.getVersion());\n    assertEquals(expected.getAttributes(), actual.getAttributes());\n  }\n\n","sourceOld":"  protected final void assertEquals(SegmentInfo expected, SegmentInfo actual) {\n    assertSame(expected.dir, actual.dir);\n    assertEquals(expected.name, actual.name);\n    assertEquals(expected.files(), actual.files());\n    // we don't assert this, because SI format has nothing to do with it... set by SIS\n    // assertSame(expected.getCodec(), actual.getCodec());\n    assertEquals(expected.getDiagnostics(), actual.getDiagnostics());\n    assertEquals(expected.getDocCount(), actual.getDocCount());\n    assertIDEquals(expected.getId(), actual.getId());\n    assertEquals(expected.getUseCompoundFile(), actual.getUseCompoundFile());\n    assertEquals(expected.getVersion(), actual.getVersion());\n    assertEquals(expected.getAttributes(), actual.getAttributes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8521d944f9dfb45692ec28235dbf116d47ef69ba":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8521d944f9dfb45692ec28235dbf116d47ef69ba","b0267c69e2456a3477a1ad785723f2135da3117e"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b06445ae1731e049327712db0454e5643ca9b7fe":["8521d944f9dfb45692ec28235dbf116d47ef69ba","b0267c69e2456a3477a1ad785723f2135da3117e"],"b0267c69e2456a3477a1ad785723f2135da3117e":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0267c69e2456a3477a1ad785723f2135da3117e"]},"commit2Childs":{"8521d944f9dfb45692ec28235dbf116d47ef69ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"55980207f1977bd1463465de1659b821347e2fa8":[],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["8521d944f9dfb45692ec28235dbf116d47ef69ba","55980207f1977bd1463465de1659b821347e2fa8"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","55980207f1977bd1463465de1659b821347e2fa8","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}