{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getListener(SolrCore,ZkSolrResourceLoader).mjava","commits":[{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = (zkSolrResourceLoader).getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = (zkSolrResourceLoader).getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    return new Runnable() {\n          @Override\n          public void run() {\n            log.info(\"config update_listener called\");\n            SolrZkClient zkClient = cc.getZkController().getZkClient();\n            int solrConfigversion,overlayVersion;\n            try (SolrCore core = cc.getCore(coreName))  {\n              if (core.isClosed()) return;\n               solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n               overlayVersion = core.getSolrConfig().getZnodeVersion();\n            }\n\n            if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n                checkStale(zkClient, solrConfigPath, overlayVersion)) {\n              log.info(\"core reload\");\n              cc.reload(coreName);\n            }\n          }\n        };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = (zkSolrResourceLoader).getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = (zkSolrResourceLoader).getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    return new Runnable() {\n          @Override\n          public void run() {\n            log.info(\"config update listener called for core {}\", coreName);\n            SolrZkClient zkClient = cc.getZkController().getZkClient();\n            int solrConfigversion,overlayVersion;\n            try (SolrCore core = cc.getCore(coreName))  {\n              if (core.isClosed()) return;\n               solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n               overlayVersion = core.getSolrConfig().getZnodeVersion();\n            }\n\n            if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n                checkStale(zkClient, solrConfigPath, overlayVersion)) {\n              log.info(\"core reload {}\",coreName);\n              cc.reload(coreName);\n            }\n          }\n        };\n  }\n\n","sourceOld":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = (zkSolrResourceLoader).getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = (zkSolrResourceLoader).getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    return new Runnable() {\n          @Override\n          public void run() {\n            log.info(\"config update_listener called\");\n            SolrZkClient zkClient = cc.getZkController().getZkClient();\n            int solrConfigversion,overlayVersion;\n            try (SolrCore core = cc.getCore(coreName))  {\n              if (core.isClosed()) return;\n               solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n               overlayVersion = core.getSolrConfig().getZnodeVersion();\n            }\n\n            if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n                checkStale(zkClient, solrConfigPath, overlayVersion)) {\n              log.info(\"core reload\");\n              cc.reload(coreName);\n            }\n          }\n        };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d72e80cee24be385c713864a9f1f90be3744482","date":1417420925,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if(core.getLatestSchema().isMutable()  && core.getLatestSchema() instanceof ManagedIndexSchema){\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes ==null ? null: zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n          @Override\n          public void run() {\n            log.info(\"config update listener called for core {}\", coreName);\n            SolrZkClient zkClient = cc.getZkController().getZkClient();\n            int solrConfigversion,overlayVersion, managedSchemaVersion=0;\n            try (SolrCore core = cc.getCore(coreName))  {\n              if (core.isClosed()) return;\n               solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n               overlayVersion = core.getSolrConfig().getZnodeVersion();\n              if(managedSchmaResourcePath != null){\n                managedSchemaVersion = ((ManagedIndexSchema)core.getLatestSchema()).getSchemaZkVersion();\n              }\n\n            }\n\n            if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n                checkStale(zkClient, solrConfigPath, overlayVersion) ||\n                checkStale(zkClient, managedSchmaResourcePath,managedSchemaVersion)) {\n              log.info(\"core reload {}\",coreName);\n              cc.reload(coreName);\n            }\n          }\n        };\n  }\n\n","sourceOld":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = (zkSolrResourceLoader).getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = (zkSolrResourceLoader).getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    return new Runnable() {\n          @Override\n          public void run() {\n            log.info(\"config update listener called for core {}\", coreName);\n            SolrZkClient zkClient = cc.getZkController().getZkClient();\n            int solrConfigversion,overlayVersion;\n            try (SolrCore core = cc.getCore(coreName))  {\n              if (core.isClosed()) return;\n               solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n               overlayVersion = core.getSolrConfig().getZnodeVersion();\n            }\n\n            if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n                checkStale(zkClient, solrConfigPath, overlayVersion)) {\n              log.info(\"core reload {}\",coreName);\n              cc.reload(coreName);\n            }\n          }\n        };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if(core.getLatestSchema().isMutable()  && core.getLatestSchema() instanceof ManagedIndexSchema){\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes ==null ? null: zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n          @Override\n          public void run() {\n            log.info(\"config update listener called for core {}\", coreName);\n            SolrZkClient zkClient = cc.getZkController().getZkClient();\n            int solrConfigversion,overlayVersion, managedSchemaVersion=0;\n            try (SolrCore core = cc.getCore(coreName))  {\n              if (core.isClosed()) return;\n              core.getSolrConfig().refreshRequestParams();\n              solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n               overlayVersion = core.getSolrConfig().getZnodeVersion();\n              if(managedSchmaResourcePath != null){\n                managedSchemaVersion = ((ManagedIndexSchema)core.getLatestSchema()).getSchemaZkVersion();\n              }\n\n            }\n\n            if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n                checkStale(zkClient, solrConfigPath, overlayVersion) ||\n                checkStale(zkClient, managedSchmaResourcePath,managedSchemaVersion)) {\n              log.info(\"core reload {}\",coreName);\n              cc.reload(coreName);\n            }\n          }\n        };\n  }\n\n","sourceOld":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if(core.getLatestSchema().isMutable()  && core.getLatestSchema() instanceof ManagedIndexSchema){\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes ==null ? null: zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n          @Override\n          public void run() {\n            log.info(\"config update listener called for core {}\", coreName);\n            SolrZkClient zkClient = cc.getZkController().getZkClient();\n            int solrConfigversion,overlayVersion, managedSchemaVersion=0;\n            try (SolrCore core = cc.getCore(coreName))  {\n              if (core.isClosed()) return;\n               solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n               overlayVersion = core.getSolrConfig().getZnodeVersion();\n              if(managedSchmaResourcePath != null){\n                managedSchemaVersion = ((ManagedIndexSchema)core.getLatestSchema()).getSchemaZkVersion();\n              }\n\n            }\n\n            if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n                checkStale(zkClient, solrConfigPath, overlayVersion) ||\n                checkStale(zkClient, managedSchmaResourcePath,managedSchemaVersion)) {\n              log.info(\"core reload {}\",coreName);\n              cc.reload(coreName);\n            }\n          }\n        };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320","date":1419447031,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getListener(SolrCore,ZkSolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if(core.getLatestSchema().isMutable()  && core.getLatestSchema() instanceof ManagedIndexSchema){\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes ==null ? null: zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n          @Override\n          public void run() {\n            log.info(\"config update listener called for core {}\", coreName);\n            SolrZkClient zkClient = cc.getZkController().getZkClient();\n            int solrConfigversion,overlayVersion, managedSchemaVersion=0;\n            SolrConfig cfg = null;\n            try (SolrCore core = cc.getCore(coreName))  {\n              if (core.isClosed()) return;\n              cfg = core.getSolrConfig();\n              solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n               overlayVersion = core.getSolrConfig().getZnodeVersion();\n              if(managedSchmaResourcePath != null){\n                managedSchemaVersion = ((ManagedIndexSchema)core.getLatestSchema()).getSchemaZkVersion();\n              }\n\n            }\n            if(cfg != null){\n              cfg.refreshRequestParams();\n            }\n\n            if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n                checkStale(zkClient, solrConfigPath, overlayVersion) ||\n                checkStale(zkClient, managedSchmaResourcePath,managedSchemaVersion)) {\n              log.info(\"core reload {}\",coreName);\n              cc.reload(coreName);\n            }\n          }\n        };\n  }\n\n","sourceOld":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if(core.getLatestSchema().isMutable()  && core.getLatestSchema() instanceof ManagedIndexSchema){\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes ==null ? null: zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n          @Override\n          public void run() {\n            log.info(\"config update listener called for core {}\", coreName);\n            SolrZkClient zkClient = cc.getZkController().getZkClient();\n            int solrConfigversion,overlayVersion, managedSchemaVersion=0;\n            try (SolrCore core = cc.getCore(coreName))  {\n              if (core.isClosed()) return;\n              core.getSolrConfig().refreshRequestParams();\n              solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n               overlayVersion = core.getSolrConfig().getZnodeVersion();\n              if(managedSchmaResourcePath != null){\n                managedSchemaVersion = ((ManagedIndexSchema)core.getLatestSchema()).getSchemaZkVersion();\n              }\n\n            }\n\n            if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n                checkStale(zkClient, solrConfigPath, overlayVersion) ||\n                checkStale(zkClient, managedSchmaResourcePath,managedSchemaVersion)) {\n              log.info(\"core reload {}\",coreName);\n              cc.reload(coreName);\n            }\n          }\n        };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9","date":1420028708,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#getListener(SolrCore,ZkSolrResourceLoader).mjava","sourceNew":null,"sourceOld":"  private static Runnable getListener(SolrCore core, ZkSolrResourceLoader zkSolrResourceLoader) {\n    final String coreName = core.getName();\n    final CoreContainer cc = core.getCoreDescriptor().getCoreContainer();\n    final String overlayPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME;\n    final String solrConfigPath = zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + core.getSolrConfig().getName();\n    String schemaRes = null;\n    if(core.getLatestSchema().isMutable()  && core.getLatestSchema() instanceof ManagedIndexSchema){\n      ManagedIndexSchema mis = (ManagedIndexSchema) core.getLatestSchema();\n      schemaRes = mis.getResourceName();\n    }\n    final String managedSchmaResourcePath = schemaRes ==null ? null: zkSolrResourceLoader.getConfigSetZkPath() + \"/\" + schemaRes;\n    return new Runnable() {\n          @Override\n          public void run() {\n            log.info(\"config update listener called for core {}\", coreName);\n            SolrZkClient zkClient = cc.getZkController().getZkClient();\n            int solrConfigversion,overlayVersion, managedSchemaVersion=0;\n            SolrConfig cfg = null;\n            try (SolrCore core = cc.getCore(coreName))  {\n              if (core.isClosed()) return;\n              cfg = core.getSolrConfig();\n              solrConfigversion = core.getSolrConfig().getOverlay().getZnodeVersion();\n               overlayVersion = core.getSolrConfig().getZnodeVersion();\n              if(managedSchmaResourcePath != null){\n                managedSchemaVersion = ((ManagedIndexSchema)core.getLatestSchema()).getSchemaZkVersion();\n              }\n\n            }\n            if(cfg != null){\n              cfg.refreshRequestParams();\n            }\n\n            if (checkStale(zkClient, overlayPath, solrConfigversion) ||\n                checkStale(zkClient, solrConfigPath, overlayVersion) ||\n                checkStale(zkClient, managedSchmaResourcePath,managedSchemaVersion)) {\n              log.info(\"core reload {}\",coreName);\n              cc.reload(coreName);\n            }\n          }\n        };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d72e80cee24be385c713864a9f1f90be3744482":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320"],"32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["7d72e80cee24be385c713864a9f1f90be3744482"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"]},"commit2Childs":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"7d72e80cee24be385c713864a9f1f90be3744482":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["7d72e80cee24be385c713864a9f1f90be3744482"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["32c9c18cfc3e7e9def0f70c28af0d6b5bfd02320"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}