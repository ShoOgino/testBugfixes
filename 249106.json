{"path":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#clearLock(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#clearLock(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NativeFSLockFactory#clearLock(String).mjava","sourceNew":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    // Note that this isn't strictly required anymore\n    // because the existence of these files does not mean\n    // they are locked, but, still do this in case people\n    // really want to see the files go away:\n    if (lockDir.exists()) {\n      \n      // Try to release the lock first - if it's held by another process, this\n      // method should not silently fail.\n      // NOTE: makeLock fixes the lock name by prefixing it w/ lockPrefix.\n      // Therefore it should be called before the code block next which prefixes\n      // the given name.\n      makeLock(lockName).release();\n\n      if (lockPrefix != null) {\n        lockName = lockPrefix + \"-\" + lockName;\n      }\n      \n      // As mentioned above, we don't care if the deletion of the file failed.\n      new File(lockDir, lockName).delete();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    // Note that this isn't strictly required anymore\n    // because the existence of these files does not mean\n    // they are locked, but, still do this in case people\n    // really want to see the files go away:\n    if (lockDir.exists()) {\n      \n      // Try to release the lock first - if it's held by another process, this\n      // method should not silently fail.\n      // NOTE: makeLock fixes the lock name by prefixing it w/ lockPrefix.\n      // Therefore it should be called before the code block next which prefixes\n      // the given name.\n      makeLock(lockName).release();\n\n      if (lockPrefix != null) {\n        lockName = lockPrefix + \"-\" + lockName;\n      }\n      \n      // As mentioned above, we don't care if the deletion of the file failed.\n      new File(lockDir, lockName).delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#clearLock(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#clearLock(String).mjava","sourceNew":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    // Note that this isn't strictly required anymore\n    // because the existence of these files does not mean\n    // they are locked, but, still do this in case people\n    // really want to see the files go away:\n    if (lockDir.exists()) {\n      \n      // Try to release the lock first - if it's held by another process, this\n      // method should not silently fail.\n      // NOTE: makeLock fixes the lock name by prefixing it w/ lockPrefix.\n      // Therefore it should be called before the code block next which prefixes\n      // the given name.\n      makeLock(lockName).release();\n\n      if (lockPrefix != null) {\n        lockName = lockPrefix + \"-\" + lockName;\n      }\n      \n      // As mentioned above, we don't care if the deletion of the file failed.\n      new File(lockDir, lockName).delete();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    // Note that this isn't strictly required anymore\n    // because the existence of these files does not mean\n    // they are locked, but, still do this in case people\n    // really want to see the files go away:\n    if (lockDir.exists()) {\n      \n      // Try to release the lock first - if it's held by another process, this\n      // method should not silently fail.\n      // NOTE: makeLock fixes the lock name by prefixing it w/ lockPrefix.\n      // Therefore it should be called before the code block next which prefixes\n      // the given name.\n      makeLock(lockName).release();\n\n      if (lockPrefix != null) {\n        lockName = lockPrefix + \"-\" + lockName;\n      }\n      \n      // As mentioned above, we don't care if the deletion of the file failed.\n      new File(lockDir, lockName).delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#clearLock(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#clearLock(String).mjava","sourceNew":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    // Note that this isn't strictly required anymore\n    // because the existence of these files does not mean\n    // they are locked, but, still do this in case people\n    // really want to see the files go away:\n    if (lockDir.exists()) {\n      \n      // Try to release the lock first - if it's held by another process, this\n      // method should not silently fail.\n      // NOTE: makeLock fixes the lock name by prefixing it w/ lockPrefix.\n      // Therefore it should be called before the code block next which prefixes\n      // the given name.\n      makeLock(lockName).release();\n\n      if (lockPrefix != null) {\n        lockName = lockPrefix + \"-\" + lockName;\n      }\n      \n      // As mentioned above, we don't care if the deletion of the file failed.\n      new File(lockDir, lockName).delete();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    // Note that this isn't strictly required anymore\n    // because the existence of these files does not mean\n    // they are locked, but, still do this in case people\n    // really want to see the files go away:\n    if (lockDir.exists()) {\n      \n      // Try to release the lock first - if it's held by another process, this\n      // method should not silently fail.\n      // NOTE: makeLock fixes the lock name by prefixing it w/ lockPrefix.\n      // Therefore it should be called before the code block next which prefixes\n      // the given name.\n      makeLock(lockName).release();\n\n      if (lockPrefix != null) {\n        lockName = lockPrefix + \"-\" + lockName;\n      }\n      \n      // As mentioned above, we don't care if the deletion of the file failed.\n      new File(lockDir, lockName).delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fcdcf196523675146a4df3193e91413533857ab","date":1390686560,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#clearLock(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#clearLock(String).mjava","sourceNew":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    // Note that this isn't strictly required anymore\n    // because the existence of these files does not mean\n    // they are locked, but, still do this in case people\n    // really want to see the files go away:\n    if (lockDir.exists()) {\n      \n      // Try to release the lock first - if it's held by another process, this\n      // method should not silently fail.\n      // NOTE: makeLock fixes the lock name by prefixing it w/ lockPrefix.\n      // Therefore it should be called before the code block next which prefixes\n      // the given name.\n      makeLock(lockName).close();\n\n      if (lockPrefix != null) {\n        lockName = lockPrefix + \"-\" + lockName;\n      }\n      \n      // As mentioned above, we don't care if the deletion of the file failed.\n      new File(lockDir, lockName).delete();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    // Note that this isn't strictly required anymore\n    // because the existence of these files does not mean\n    // they are locked, but, still do this in case people\n    // really want to see the files go away:\n    if (lockDir.exists()) {\n      \n      // Try to release the lock first - if it's held by another process, this\n      // method should not silently fail.\n      // NOTE: makeLock fixes the lock name by prefixing it w/ lockPrefix.\n      // Therefore it should be called before the code block next which prefixes\n      // the given name.\n      makeLock(lockName).release();\n\n      if (lockPrefix != null) {\n        lockName = lockPrefix + \"-\" + lockName;\n      }\n      \n      // As mentioned above, we don't care if the deletion of the file failed.\n      new File(lockDir, lockName).delete();\n    }\n  }\n\n","bugFix":["e7849f94423cf8c4a8124357b8d5e97a7d22c1af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50805be75df24f05d29a4d2a496c7ec825cde9eb","date":1398078566,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#clearLock(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#clearLock(String).mjava","sourceNew":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    makeLock(lockName).close();\n  }\n\n","sourceOld":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    // Note that this isn't strictly required anymore\n    // because the existence of these files does not mean\n    // they are locked, but, still do this in case people\n    // really want to see the files go away:\n    if (lockDir.exists()) {\n      \n      // Try to release the lock first - if it's held by another process, this\n      // method should not silently fail.\n      // NOTE: makeLock fixes the lock name by prefixing it w/ lockPrefix.\n      // Therefore it should be called before the code block next which prefixes\n      // the given name.\n      makeLock(lockName).close();\n\n      if (lockPrefix != null) {\n        lockName = lockPrefix + \"-\" + lockName;\n      }\n      \n      // As mentioned above, we don't care if the deletion of the file failed.\n      new File(lockDir, lockName).delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory#clearLock(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    makeLock(lockName).close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285cdc737de75b7cc7c284a156b20214deb67bca":["50805be75df24f05d29a4d2a496c7ec825cde9eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"50805be75df24f05d29a4d2a496c7ec825cde9eb":["0fcdcf196523675146a4df3193e91413533857ab"],"0fcdcf196523675146a4df3193e91413533857ab":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"285cdc737de75b7cc7c284a156b20214deb67bca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"50805be75df24f05d29a4d2a496c7ec825cde9eb":["285cdc737de75b7cc7c284a156b20214deb67bca"],"0fcdcf196523675146a4df3193e91413533857ab":["50805be75df24f05d29a4d2a496c7ec825cde9eb"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["0fcdcf196523675146a4df3193e91413533857ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}