{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilter#read().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilter#read().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilter#read().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    while(true) {\n      if (replacement != null && charPointer < replacement.length()) {\n        return replacement.charAt(charPointer++);\n      }\n\n      int firstChar = nextChar();\n      if (firstChar == -1) return -1;\n      NormalizeCharMap nm = normMap.submap != null ?\n        normMap.submap.get(Character.valueOf((char) firstChar)) : null;\n      if (nm == null) return firstChar;\n      NormalizeCharMap result = match(nm);\n      if (result == null) return firstChar;\n      replacement = result.normStr;\n      charPointer = 0;\n      if (result.diff != 0) {\n        int prevCumulativeDiff = getLastCumulativeDiff();\n        if (result.diff < 0) {\n          for(int i = 0; i < -result.diff ; i++)\n            addOffCorrectMap(nextCharCounter + i - prevCumulativeDiff, prevCumulativeDiff - 1 - i);\n        } else {\n          addOffCorrectMap(nextCharCounter - result.diff - prevCumulativeDiff, prevCumulativeDiff + result.diff);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}