{"path":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(a, outputs.get(17));\n    builder.add(b, outputs.get(42));\n    builder.add(c, outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(a, outputs.get(17));\n    builder.add(b, outputs.get(42));\n    builder.add(c, outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(a, outputs.get(17));\n    builder.add(b, outputs.get(42));\n    builder.add(c, outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(a, outputs.get(17));\n    builder.add(b, outputs.get(42));\n    builder.add(c, outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(a, outputs.get(17));\n    builder.add(b, outputs.get(42));\n    builder.add(c, outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(a, outputs.get(17));\n    builder.add(b, outputs.get(42));\n    builder.add(c, outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2bf10c11daad40c1e46fabd0d414c19a3e605b","date":1310410393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(a, outputs.get(17));\n    builder.add(b, outputs.get(42));\n    builder.add(c, outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(a, outputs.get(17));\n    builder.add(b, outputs.get(42));\n    builder.add(c, outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ec890fad2ea96317f4429e0aa0085bb25673641","date":1326669938,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), outputs.get(17));\n    builder.add(Util.toIntsRef(b, new IntsRef()), outputs.get(42));\n    builder.add(Util.toIntsRef(c, new IntsRef()), outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(a, outputs.get(17));\n    builder.add(b, outputs.get(42));\n    builder.add(c, outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n  }\n\n","bugFix":["56da903869515527852ee21ea7ef7bfe414cd40d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4708e7bf7695781d702d204d178627b4faddc03f","date":1326982060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), outputs.get(17));\n    builder.add(Util.toIntsRef(b, new IntsRef()), outputs.get(42));\n    builder.add(Util.toIntsRef(c, new IntsRef()), outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), outputs.get(17));\n    builder.add(Util.toIntsRef(b, new IntsRef()), outputs.get(42));\n    builder.add(Util.toIntsRef(c, new IntsRef()), outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRef()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRef()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), outputs.get(17));\n    builder.add(Util.toIntsRef(b, new IntsRef()), outputs.get(42));\n    builder.add(Util.toIntsRef(c, new IntsRef()), outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRef()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRef()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), outputs.get(17));\n    builder.add(Util.toIntsRef(b, new IntsRef()), outputs.get(42));\n    builder.add(Util.toIntsRef(c, new IntsRef()), outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRef()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRef()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), outputs.get(17));\n    builder.add(Util.toIntsRef(b, new IntsRef()), outputs.get(42));\n    builder.add(Util.toIntsRef(c, new IntsRef()), outputs.get(13824324872317238L));\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRef()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRef()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n\n    // Get outputs -- passing true means FST will share\n    // (delta code) the outputs.  This should result in\n    // smaller FST if the outputs grow monotonically.  But\n    // if numbers are \"random\", false should give smaller\n    // final size:\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n\n    // Build an FST mapping BytesRef -> Long\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final BytesRef a = new BytesRef(\"a\");\n    final BytesRef b = new BytesRef(\"b\");\n    final BytesRef c = new BytesRef(\"c\");\n\n    builder.add(Util.toIntsRef(a, new IntsRef()), 17L);\n    builder.add(Util.toIntsRef(b, new IntsRef()), 42L);\n    builder.add(Util.toIntsRef(c, new IntsRef()), 13824324872317238L);\n\n    final FST<Long> fst = builder.finish();\n\n    assertEquals(13824324872317238L, (long) Util.get(fst, c));\n    assertEquals(42, (long) Util.get(fst, b));\n    assertEquals(17, (long) Util.get(fst, a));\n\n    BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n    BytesRefFSTEnum.InputOutput<Long> seekResult;\n    seekResult = fstEnum.seekFloor(a);\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to a\n    seekResult = fstEnum.seekFloor(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(17, (long) seekResult.output);\n\n    // goes to b\n    seekResult = fstEnum.seekCeil(new BytesRef(\"aa\"));\n    assertNotNull(seekResult);\n    assertEquals(b, seekResult.input);\n    assertEquals(42, (long) seekResult.output);\n\n    assertEquals(Util.toIntsRef(new BytesRef(\"c\"), new IntsRef()),\n                 Util.getByOutput(fst, 13824324872317238L));\n    assertNull(Util.getByOutput(fst, 47));\n    assertEquals(Util.toIntsRef(new BytesRef(\"b\"), new IntsRef()),\n                 Util.getByOutput(fst, 42));\n    assertEquals(Util.toIntsRef(new BytesRef(\"a\"), new IntsRef()),\n                 Util.getByOutput(fst, 17));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["4708e7bf7695781d702d204d178627b4faddc03f"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4708e7bf7695781d702d204d178627b4faddc03f":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","4f2bf10c11daad40c1e46fabd0d414c19a3e605b","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"4708e7bf7695781d702d204d178627b4faddc03f":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1ec890fad2ea96317f4429e0aa0085bb25673641":["4708e7bf7695781d702d204d178627b4faddc03f"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}