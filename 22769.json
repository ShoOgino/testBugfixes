{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#sortedFacetLabels(List[List[FacetLabel]]).mjava","commits":[{"id":"2b0ae449d456c3d95466275e466ca402ce36f52b","date":1601304937,"type":0,"author":"goankur","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#sortedFacetLabels(List[List[FacetLabel]]).mjava","pathOld":"/dev/null","sourceNew":"  private static List<List<FacetLabel>> sortedFacetLabels(List<List<FacetLabel>> allFacetLabels) {\n    // sort each inner list since there is no guaranteed order in which FacetLabels\n    // are expected to be retrieved for each document\n    for (List<FacetLabel> facetLabels : allFacetLabels) {\n      Collections.sort(facetLabels);\n    }\n\n    Collections.sort(allFacetLabels, (o1, o2) -> {\n      int diff = o1.size() - o2.size();\n      if (diff != 0) {\n        return diff;\n      }\n\n      // the lists are equal in size and sorted\n      for (int i = 0; i < o1.size(); i++) {\n        int comp = o1.get(i).compareTo(o2.get(i));\n        if (comp != 0) {\n          return comp;\n        }\n      }\n      // all elements are equal\n      return 0;\n    });\n\n    return allFacetLabels;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0530170c04ef91ee4e20f01089697adb70a98d","date":1601486478,"type":3,"author":"goankur","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#sortedFacetLabels(List[List[FacetLabel]]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#sortedFacetLabels(List[List[FacetLabel]]).mjava","sourceNew":"  private static List<List<FacetLabel>> sortedFacetLabels(List<List<FacetLabel>> allFacetLabels) {\n    // Sort each inner list since there is no guaranteed order in which\n    // FacetLabels are expected to be retrieved for each document.\n    for (List<FacetLabel> facetLabels : allFacetLabels) {\n      Collections.sort(facetLabels);\n    }\n\n    Collections.sort(allFacetLabels, (o1, o2) -> {\n      int diff = o1.size() - o2.size();\n      if (diff != 0) {\n        return diff;\n      }\n\n      // the lists are equal in size and sorted\n      for (int i = 0; i < o1.size(); i++) {\n        int comp = o1.get(i).compareTo(o2.get(i));\n        if (comp != 0) {\n          return comp;\n        }\n      }\n      // all elements are equal\n      return 0;\n    });\n\n    return allFacetLabels;\n  }\n\n","sourceOld":"  private static List<List<FacetLabel>> sortedFacetLabels(List<List<FacetLabel>> allFacetLabels) {\n    // sort each inner list since there is no guaranteed order in which FacetLabels\n    // are expected to be retrieved for each document\n    for (List<FacetLabel> facetLabels : allFacetLabels) {\n      Collections.sort(facetLabels);\n    }\n\n    Collections.sort(allFacetLabels, (o1, o2) -> {\n      int diff = o1.size() - o2.size();\n      if (diff != 0) {\n        return diff;\n      }\n\n      // the lists are equal in size and sorted\n      for (int i = 0; i < o1.size(); i++) {\n        int comp = o1.get(i).compareTo(o2.get(i));\n        if (comp != 0) {\n          return comp;\n        }\n      }\n      // all elements are equal\n      return 0;\n    });\n\n    return allFacetLabels;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd0530170c04ef91ee4e20f01089697adb70a98d":["2b0ae449d456c3d95466275e466ca402ce36f52b"],"2b0ae449d456c3d95466275e466ca402ce36f52b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd0530170c04ef91ee4e20f01089697adb70a98d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2b0ae449d456c3d95466275e466ca402ce36f52b"],"bd0530170c04ef91ee4e20f01089697adb70a98d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2b0ae449d456c3d95466275e466ca402ce36f52b":["bd0530170c04ef91ee4e20f01089697adb70a98d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}