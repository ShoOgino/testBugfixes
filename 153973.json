{"path":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#getModified(PackageAPI.Packages,PackageAPI.Packages).mjava","commits":[{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#getModified(PackageAPI.Packages,PackageAPI.Packages).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String, List<PackageAPI.PkgVersion>> getModified(PackageAPI.Packages old, PackageAPI.Packages newPkgs) {\n    Map<String, List<PackageAPI.PkgVersion>> changed = new HashMap<>();\n    for (Map.Entry<String, List<PackageAPI.PkgVersion>> e : newPkgs.packages.entrySet()) {\n      List<PackageAPI.PkgVersion> versions = old.packages.get(e.getKey());\n      if (versions != null) {\n        if (!Objects.equals(e.getValue(), versions)) {\n          log.info(\"Package {} is modified \", e.getKey());\n          changed.put(e.getKey(), e.getValue());\n        }\n      } else {\n        log.info(\"A new package: {} introduced\", e.getKey());\n        changed.put(e.getKey(), e.getValue());\n      }\n    }\n    //some packages are deleted altogether\n    for (String s : old.packages.keySet()) {\n      if (!newPkgs.packages.keySet().contains(s)) {\n        log.info(\"Package: {} is removed althogether\", s);\n        changed.put(s, null);\n      }\n    }\n\n    return changed;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#getModified(PackageAPI.Packages,PackageAPI.Packages).mjava","pathOld":"solr/core/src/java/org/apache/solr/pkg/PackageLoader#getModified(PackageAPI.Packages,PackageAPI.Packages).mjava","sourceNew":"  public Map<String, List<PackageAPI.PkgVersion>> getModified(PackageAPI.Packages old, PackageAPI.Packages newPkgs) {\n    Map<String, List<PackageAPI.PkgVersion>> changed = new HashMap<>();\n    for (Map.Entry<String, List<PackageAPI.PkgVersion>> e : newPkgs.packages.entrySet()) {\n      List<PackageAPI.PkgVersion> versions = old.packages.get(e.getKey());\n      if (versions != null) {\n        if (!Objects.equals(e.getValue(), versions)) {\n          if (log.isInfoEnabled()) {\n            log.info(\"Package {} is modified \", e.getKey());\n          }\n          changed.put(e.getKey(), e.getValue());\n        }\n      } else {\n        if (log.isInfoEnabled()) {\n          log.info(\"A new package: {} introduced\", e.getKey());\n        }\n        changed.put(e.getKey(), e.getValue());\n      }\n    }\n    //some packages are deleted altogether\n    for (String s : old.packages.keySet()) {\n      if (!newPkgs.packages.keySet().contains(s)) {\n        log.info(\"Package: {} is removed althogether\", s);\n        changed.put(s, null);\n      }\n    }\n\n    return changed;\n\n  }\n\n","sourceOld":"  public Map<String, List<PackageAPI.PkgVersion>> getModified(PackageAPI.Packages old, PackageAPI.Packages newPkgs) {\n    Map<String, List<PackageAPI.PkgVersion>> changed = new HashMap<>();\n    for (Map.Entry<String, List<PackageAPI.PkgVersion>> e : newPkgs.packages.entrySet()) {\n      List<PackageAPI.PkgVersion> versions = old.packages.get(e.getKey());\n      if (versions != null) {\n        if (!Objects.equals(e.getValue(), versions)) {\n          log.info(\"Package {} is modified \", e.getKey());\n          changed.put(e.getKey(), e.getValue());\n        }\n      } else {\n        log.info(\"A new package: {} introduced\", e.getKey());\n        changed.put(e.getKey(), e.getValue());\n      }\n    }\n    //some packages are deleted altogether\n    for (String s : old.packages.keySet()) {\n      if (!newPkgs.packages.keySet().contains(s)) {\n        log.info(\"Package: {} is removed althogether\", s);\n        changed.put(s, null);\n      }\n    }\n\n    return changed;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}