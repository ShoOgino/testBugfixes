{"path":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","commits":[{"id":"3766097c9c41a30d67e9b548c62d017abf8e07ac","date":1228770465,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"/dev/null","sourceNew":"\t// test sorts where the type of field is specified and a custom field parser is used, that\n\t// uses a simple char encoding. The sorted string contains a character beginning from 'A' that\n\t// is mapped to a numeric value using some \"funny\" algorithm to be different for each data type.\n\tpublic void testCustomFieldParserSort() throws Exception {\n\t\tsort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.IntParser(){\n\t\t\tpublic final int parseInt(final String val) {\n\t\t\t\treturn (int) (val.charAt(0)-'A') * 123456;\n\t\t\t}\n\t\t}), SortField.FIELD_DOC });\n\t\tassertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.FloatParser(){\n\t\t\tpublic final float parseFloat(final String val) {\n\t\t\t\treturn (float) Math.sqrt( (double) val.charAt(0) );\n\t\t\t}\n\t\t}), SortField.FIELD_DOC });\n\t\tassertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"parser\", new ExtendedFieldCache.LongParser(){\n\t\t\tpublic final long parseLong(final String val) {\n\t\t\t\treturn (long) (val.charAt(0)-'A') * 1234567890L;\n\t\t\t}\n\t\t}), SortField.FIELD_DOC });\n\t\tassertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"parser\", new ExtendedFieldCache.DoubleParser(){\n\t\t\tpublic final double parseDouble(final String val) {\n\t\t\t\treturn Math.pow( (double) val.charAt(0), (double) (val.charAt(0)-'A') );\n\t\t\t}\n\t\t}), SortField.FIELD_DOC });\n\t\tassertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ByteParser(){\n\t\t\tpublic final byte parseByte(final String val) {\n\t\t\t\treturn (byte) (val.charAt(0)-'A');\n\t\t\t}\n\t\t}), SortField.FIELD_DOC });\n\t\tassertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ShortParser(){\n\t\t\tpublic final short parseShort(final String val) {\n\t\t\t\treturn (short) (val.charAt(0)-'A');\n\t\t\t}\n\t\t}), SortField.FIELD_DOC });\n\t\tassertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  // test sorts where the type of field is specified and a custom field parser is used, that\n  // uses a simple char encoding. The sorted string contains a character beginning from 'A' that\n  // is mapped to a numeric value using some \"funny\" algorithm to be different for each data type.\n  public void testCustomFieldParserSort() throws Exception {\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (int) (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( (double) val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new ExtendedFieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (long) (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new ExtendedFieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( (double) val.charAt(0), (double) (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n  }\n\n","sourceOld":"\t// test sorts where the type of field is specified and a custom field parser is used, that\n\t// uses a simple char encoding. The sorted string contains a character beginning from 'A' that\n\t// is mapped to a numeric value using some \"funny\" algorithm to be different for each data type.\n\tpublic void testCustomFieldParserSort() throws Exception {\n\t\tsort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.IntParser(){\n\t\t\tpublic final int parseInt(final String val) {\n\t\t\t\treturn (int) (val.charAt(0)-'A') * 123456;\n\t\t\t}\n\t\t}), SortField.FIELD_DOC });\n\t\tassertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.FloatParser(){\n\t\t\tpublic final float parseFloat(final String val) {\n\t\t\t\treturn (float) Math.sqrt( (double) val.charAt(0) );\n\t\t\t}\n\t\t}), SortField.FIELD_DOC });\n\t\tassertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"parser\", new ExtendedFieldCache.LongParser(){\n\t\t\tpublic final long parseLong(final String val) {\n\t\t\t\treturn (long) (val.charAt(0)-'A') * 1234567890L;\n\t\t\t}\n\t\t}), SortField.FIELD_DOC });\n\t\tassertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"parser\", new ExtendedFieldCache.DoubleParser(){\n\t\t\tpublic final double parseDouble(final String val) {\n\t\t\t\treturn Math.pow( (double) val.charAt(0), (double) (val.charAt(0)-'A') );\n\t\t\t}\n\t\t}), SortField.FIELD_DOC });\n\t\tassertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ByteParser(){\n\t\t\tpublic final byte parseByte(final String val) {\n\t\t\t\treturn (byte) (val.charAt(0)-'A');\n\t\t\t}\n\t\t}), SortField.FIELD_DOC });\n\t\tassertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ShortParser(){\n\t\t\tpublic final short parseShort(final String val) {\n\t\t\t\treturn (short) (val.charAt(0)-'A');\n\t\t\t}\n\t\t}), SortField.FIELD_DOC });\n\t\tassertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  // test sorts where the type of field is specified and a custom field parser is used, that\n  // uses a simple char encoding. The sorted string contains a character beginning from 'A' that\n  // is mapped to a numeric value using some \"funny\" algorithm to be different for each data type.\n  public void testCustomFieldParserSort() throws Exception {\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new ExtendedFieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new ExtendedFieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( val.charAt(0), (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n  }\n\n","sourceOld":"  // test sorts where the type of field is specified and a custom field parser is used, that\n  // uses a simple char encoding. The sorted string contains a character beginning from 'A' that\n  // is mapped to a numeric value using some \"funny\" algorithm to be different for each data type.\n  public void testCustomFieldParserSort() throws Exception {\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (int) (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( (double) val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new ExtendedFieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (long) (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new ExtendedFieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( (double) val.charAt(0), (double) (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65eb076d345a794256daba691a2b366657c807e8","date":1245771732,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  // test sorts where the type of field is specified and a custom field parser is used, that\n  // uses a simple char encoding. The sorted string contains a character beginning from 'A' that\n  // is mapped to a numeric value using some \"funny\" algorithm to be different for each data type.\n  public void testCustomFieldParserSort() throws Exception {\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( val.charAt(0), (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n  }\n\n","sourceOld":"  // test sorts where the type of field is specified and a custom field parser is used, that\n  // uses a simple char encoding. The sorted string contains a character beginning from 'A' that\n  // is mapped to a numeric value using some \"funny\" algorithm to be different for each data type.\n  public void testCustomFieldParserSort() throws Exception {\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new ExtendedFieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new ExtendedFieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( val.charAt(0), (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( val.charAt(0), (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  // test sorts where the type of field is specified and a custom field parser is used, that\n  // uses a simple char encoding. The sorted string contains a character beginning from 'A' that\n  // is mapped to a numeric value using some \"funny\" algorithm to be different for each data type.\n  public void testCustomFieldParserSort() throws Exception {\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( val.charAt(0), (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( val.charAt(0), (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( val.charAt(0), (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField[] { new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC });\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( val.charAt(0), (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( val.charAt(0), (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"65eb076d345a794256daba691a2b366657c807e8":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e69f59b863731d864bf3047235e718f0f88f8841":["65eb076d345a794256daba691a2b366657c807e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["e69f59b863731d864bf3047235e718f0f88f8841"],"63bc3238545c6012bd44f5d294077997f236bc4e":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["65eb076d345a794256daba691a2b366657c807e8"],"65eb076d345a794256daba691a2b366657c807e8":["e69f59b863731d864bf3047235e718f0f88f8841"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"e69f59b863731d864bf3047235e718f0f88f8841":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"63bc3238545c6012bd44f5d294077997f236bc4e":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}