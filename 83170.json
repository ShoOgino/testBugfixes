{"path":"src/test/org/apache/solr/SampleTest#testAdvanced().mjava","commits":[{"id":"f66f1826f07774581d2ec661444fc987bdd1a85d","date":1144730206,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    // or really make the xml yourself\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"standard\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ddfc890383ad49b761c95033cf08766953f805c","date":1145426420,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    // or really make the xml yourself\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"standard\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aef5adbca53f7820aa6289dda74f595ed816ac7","date":1166101420,"type":3,"author":"Bertrand Delacretaz","isMerge":false,"pathNew":"src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SampleTest#testAdvanced().mjava","pathOld":"src/test/org/apache/solr/SampleTest#testAdvanced().mjava","sourceNew":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","sourceOld":"  /**\n   * Demonstration of some of the more complex ways to use the base class\n   */\n  public void testAdvanced() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");        \n    assertU(\"less common case, a complex addition with options\",\n            add(doc(\"id\", \"4059\",\n                    \"subject\", \"Who Me?\"),\n                \"allowDups\", \"true\"));\n\n    assertU(\"or just make the raw XML yourself\",\n            \"<add allowDups=\\\"true\\\">\" +\n            doc(\"id\", \"4059\",\n                \"subject\", \"Who Me Again?\") + \"</add>\");\n\n    /* or really make the xml yourself */\n    assertU(\"<add><doc><field name=\\\"id\\\">4055</field>\"\n            +\"<field name=\\\"subject\\\">Hoss the Hoss man Hostetter</field>\"\n            +\"</doc></add>\");\n        \n    assertU(\"<commit/>\");\n    assertU(\"<optimize/>\");\n        \n    /* access the default LocalRequestFactory directly to make a request */\n    SolrQueryRequest req = lrf.makeRequest( \"subject:Hoss\" );\n    assertQ(\"couldn't find subject hoss\",\n            req\n            ,\"//result[@numFound=1]\"\n            ,\"//int[@name='id'][.='4055']\"\n            );\n\n    /* make your own LocalRequestFactory to build a request\n     *\n     * Note: the qt proves we are using our custom config...\n     */\n    TestHarness.LocalRequestFactory l = h.getRequestFactory\n      (\"crazy_custom_qt\",100,200,\"version\",\"2.1\");\n    assertQ(\"how did i find Mack Daddy? \",\n            l.makeRequest( \"Mack Daddy\" )\n            ,\"//result[@numFound=0]\"\n            );\n\n    /* you can access the harness directly as well*/\n    assertNull(\"how did i find Mack Daddy? \",\n               h.validateQuery(l.makeRequest( \"Mack Daddy\" )\n                               ,\"//result[@numFound=0]\"\n                               ));\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ddfc890383ad49b761c95033cf08766953f805c":["f66f1826f07774581d2ec661444fc987bdd1a85d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7aef5adbca53f7820aa6289dda74f595ed816ac7"],"f66f1826f07774581d2ec661444fc987bdd1a85d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7aef5adbca53f7820aa6289dda74f595ed816ac7":["8ddfc890383ad49b761c95033cf08766953f805c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ddfc890383ad49b761c95033cf08766953f805c":["7aef5adbca53f7820aa6289dda74f595ed816ac7"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f66f1826f07774581d2ec661444fc987bdd1a85d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"f66f1826f07774581d2ec661444fc987bdd1a85d":["8ddfc890383ad49b761c95033cf08766953f805c"],"7aef5adbca53f7820aa6289dda74f595ed816ac7":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}