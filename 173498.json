{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","pathOld":"/dev/null","sourceNew":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(allTerms, random());\n    FieldAndTerm fieldAndTerm = allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator(null);\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FLAG_FREQS, PostingsEnum.FLAG_ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.FLAG_ALL, PostingsEnum.FLAG_ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2af5333eca069fd35d7e0572227a82d0696ce137"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","sourceNew":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(allTerms, random());\n    FieldAndTerm fieldAndTerm = allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator(null);\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(allTerms, random());\n    FieldAndTerm fieldAndTerm = allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator(null);\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FLAG_FREQS, PostingsEnum.FLAG_ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.FLAG_ALL, PostingsEnum.FLAG_ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","sourceNew":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator(null);\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(allTerms, random());\n    FieldAndTerm fieldAndTerm = allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator(null);\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","sourceNew":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator(null);\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(allTerms, random());\n    FieldAndTerm fieldAndTerm = allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator(null);\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","sourceNew":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator(null);\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","sourceNew":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","sourceNew":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","sourceNew":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","sourceNew":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2af5333eca069fd35d7e0572227a82d0696ce137","date":1465574261,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","sourceNew":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented()) {\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n    }\n\n    fieldsProducer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n  }\n\n","bugFix":["51f5280f31484820499077f41fcdfe92d527d9dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testPostingsEnumReuse().mjava","sourceNew":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented()) {\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n    }\n\n    fieldsProducer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPostingsEnumReuse() throws Exception {\n\n    Path path = createTempDir(\"testPostingsEnumReuse\");\n    Directory dir = newFSDirectory(path);\n\n    FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, random().nextBoolean(), true);\n    Collections.shuffle(postingsTester.allTerms, random());\n    RandomPostingsTester.FieldAndTerm fieldAndTerm = postingsTester.allTerms.get(0);\n\n    Terms terms = fieldsProducer.terms(fieldAndTerm.field);\n    TermsEnum te = terms.iterator();\n\n    te.seekExact(fieldAndTerm.term);\n    checkReuse(te, PostingsEnum.FREQS, PostingsEnum.ALL, false);\n    if (isPostingsEnumReuseImplemented())\n      checkReuse(te, PostingsEnum.ALL, PostingsEnum.ALL, true);\n\n    fieldsProducer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["3e8715d826e588419327562287d5d6a8040d63d6"],"5a207d19eac354d649c3f0e2cce070017c78125e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","b470f36a9372c97283360b1304eacbde22df6c0d"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5a207d19eac354d649c3f0e2cce070017c78125e","2af5333eca069fd35d7e0572227a82d0696ce137"],"2af5333eca069fd35d7e0572227a82d0696ce137":["5a207d19eac354d649c3f0e2cce070017c78125e"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"b470f36a9372c97283360b1304eacbde22df6c0d":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","3e8715d826e588419327562287d5d6a8040d63d6"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"3e8715d826e588419327562287d5d6a8040d63d6":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2af5333eca069fd35d7e0572227a82d0696ce137"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"5a207d19eac354d649c3f0e2cce070017c78125e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2af5333eca069fd35d7e0572227a82d0696ce137"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2af5333eca069fd35d7e0572227a82d0696ce137":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"3e8715d826e588419327562287d5d6a8040d63d6":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","d2638f781be724518ff6c2263d14a48cf6e68017"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}