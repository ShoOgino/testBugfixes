{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Analyzer).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Analyzer).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Analyzer).mjava","sourceNew":"  /**\n   * A convenience method that tries a number of approaches to getting a token\n   * stream. The cost of finding there are no termVectors in the index is\n   * minimal (1000 invocations still registers 0 ms). So this \"lazy\" (flexible?)\n   * approach to coding is probably acceptable\n   * \n   * @param reader\n   * @param docId\n   * @param field\n   * @param analyzer\n   * @return null if field not stored correctly\n   * @throws IOException\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(reader, docId, field, analyzer);\n    }\n    return ts;\n  }\n\n","sourceOld":"  /**\n   * A convenience method that tries a number of approaches to getting a token\n   * stream. The cost of finding there are no termVectors in the index is\n   * minimal (1000 invocations still registers 0 ms). So this \"lazy\" (flexible?)\n   * approach to coding is probably acceptable\n   * \n   * @param reader\n   * @param docId\n   * @param field\n   * @param analyzer\n   * @return null if field not stored correctly\n   * @throws IOException\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(reader, docId, field, analyzer);\n    }\n    return ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Analyzer).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Analyzer).mjava","sourceNew":"  /**\n   * A convenience method that tries a number of approaches to getting a token\n   * stream. The cost of finding there are no termVectors in the index is\n   * minimal (1000 invocations still registers 0 ms). So this \"lazy\" (flexible?)\n   * approach to coding is probably acceptable\n   * \n   * @return null if field not stored correctly\n   * @throws IOException If there is a low-level I/O error\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(reader, docId, field, analyzer);\n    }\n    return ts;\n  }\n\n","sourceOld":"  /**\n   * A convenience method that tries a number of approaches to getting a token\n   * stream. The cost of finding there are no termVectors in the index is\n   * minimal (1000 invocations still registers 0 ms). So this \"lazy\" (flexible?)\n   * approach to coding is probably acceptable\n   * \n   * @param reader\n   * @param docId\n   * @param field\n   * @param analyzer\n   * @return null if field not stored correctly\n   * @throws IOException\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(reader, docId, field, analyzer);\n    }\n    return ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d62e4938659e263e96ae8188e11aea8a940aea5","date":1430230314,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Analyzer).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Analyzer).mjava","sourceNew":"  /**\n   * A convenience method that tries a number of approaches to getting a token\n   * stream. The cost of finding there are no termVectors in the index is\n   * minimal (1000 invocations still registers 0 ms). So this \"lazy\" (flexible?)\n   * approach to coding is probably acceptable\n   * \n   * @return null if field not stored correctly\n   * @throws IOException If there is a low-level I/O error\n   */\n  @Deprecated // maintenance reasons LUCENE-6445\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(reader, docId, field, analyzer);\n    }\n    return ts;\n  }\n\n","sourceOld":"  /**\n   * A convenience method that tries a number of approaches to getting a token\n   * stream. The cost of finding there are no termVectors in the index is\n   * minimal (1000 invocations still registers 0 ms). So this \"lazy\" (flexible?)\n   * approach to coding is probably acceptable\n   * \n   * @return null if field not stored correctly\n   * @throws IOException If there is a low-level I/O error\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    Fields vectors = reader.getTermVectors(docId);\n    if (vectors != null) {\n      Terms vector = vectors.terms(field);\n      if (vector != null) {\n        ts = getTokenStream(vector);\n      }\n    }\n\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(reader, docId, field, analyzer);\n    }\n    return ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d62e4938659e263e96ae8188e11aea8a940aea5":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d62e4938659e263e96ae8188e11aea8a940aea5"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5d62e4938659e263e96ae8188e11aea8a940aea5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}