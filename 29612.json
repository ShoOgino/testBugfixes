{"path":"src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","commits":[{"id":"c35c5c6cdce2b681af3103a391f066040c1ef6c4","date":1131786206,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\", Field.Store.NO, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"q.[aeiou]c.*\"));\n    SpanTermQuery stq = new SpanTermQuery(new Term(\"field\",\"dog\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6, true);\n    Hits hits = searcher.search(query);\n    assertEquals(1, hits.length());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8998aca947fc0f7c7b294d0c5dfcbc92d8f59b19","date":1135617763,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\", Field.Store.NO, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"q.[aeiou]c.*\"));\n    SpanTermQuery stq = new SpanTermQuery(new Term(\"field\",\"dog\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6, true);\n    Hits hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    QueryUtils.check(srq);\n    QueryUtils.checkUnequal(srq,stq);\n    QueryUtils.checkUnequal(srq,query);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\", Field.Store.NO, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"q.[aeiou]c.*\"));\n    SpanTermQuery stq = new SpanTermQuery(new Term(\"field\",\"dog\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6, true);\n    Hits hits = searcher.search(query);\n    assertEquals(1, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74be754ec3ab6906922b673bf951696c442123b2","date":1135778260,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\", Field.Store.NO, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"q.[aeiou]c.*\"));\n    SpanTermQuery stq = new SpanTermQuery(new Term(\"field\",\"dog\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6, true);\n    Hits hits = searcher.search(query);\n    assertEquals(1, hits.length());\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\", Field.Store.NO, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"q.[aeiou]c.*\"));\n    SpanTermQuery stq = new SpanTermQuery(new Term(\"field\",\"dog\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6, true);\n    Hits hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    QueryUtils.check(srq);\n    QueryUtils.checkUnequal(srq,stq);\n    QueryUtils.checkUnequal(srq,query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74be754ec3ab6906922b673bf951696c442123b2":["8998aca947fc0f7c7b294d0c5dfcbc92d8f59b19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8998aca947fc0f7c7b294d0c5dfcbc92d8f59b19":["c35c5c6cdce2b681af3103a391f066040c1ef6c4"],"c35c5c6cdce2b681af3103a391f066040c1ef6c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74be754ec3ab6906922b673bf951696c442123b2"]},"commit2Childs":{"74be754ec3ab6906922b673bf951696c442123b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c35c5c6cdce2b681af3103a391f066040c1ef6c4"],"8998aca947fc0f7c7b294d0c5dfcbc92d8f59b19":["74be754ec3ab6906922b673bf951696c442123b2"],"c35c5c6cdce2b681af3103a391f066040c1ef6c4":["8998aca947fc0f7c7b294d0c5dfcbc92d8f59b19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}