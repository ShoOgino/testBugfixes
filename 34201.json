{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","sourceNew":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = (PerfTask) tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","sourceOld":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = (PerfTask) tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","sourceNew":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = (PerfTask) tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","sourceOld":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = (PerfTask) tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","sourceNew":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = (PerfTask) tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","sourceOld":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = (PerfTask) tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","sourceNew":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","sourceOld":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = (PerfTask) tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","sourceNew":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","sourceOld":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d5903979ca52514d2bc7e3a362e1c45885c94":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","399d5903979ca52514d2bc7e3a362e1c45885c94","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}