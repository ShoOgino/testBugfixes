{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","commits":[{"id":"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","date":1493894873,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    final long waitTime = 2;\n    props.put(\"waitFor\", waitTime);\n    trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      newTrigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a19b040b009e9ccadb3fff3ae1c518e7c2f2841d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"009caa80830ac6369c42e5f6515405d686eabfee","date":1494487120,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    final long waitTime = 2;\n    props.put(\"waitFor\", waitTime);\n    trigger.setListener(noFirstRunListener);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      newTrigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    final long waitTime = 2;\n    props.put(\"waitFor\", waitTime);\n    trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      newTrigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    final long waitTime = 2;\n    props.put(\"waitFor\", waitTime);\n    trigger.setListener(noFirstRunListener);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (timeSource.getTime() - event.getEventTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    final long waitTime = 2;\n    props.put(\"waitFor\", waitTime);\n    trigger.setListener(noFirstRunListener);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      newTrigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    final long waitTime = 2;\n    props.put(\"waitFor\", waitTime);\n    trigger.setListener(noFirstRunListener);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (timeSource.getTime() - event.getEventTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    final long waitTime = 2;\n    props.put(\"waitFor\", waitTime);\n    trigger.setListener(noFirstRunListener);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      newTrigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"26c61d5a7f832d4eb353313f88198c8f6fd0dc67","date":1495985871,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    final long waitTime = 2;\n    props.put(\"waitFor\", waitTime);\n    trigger.setListener(noFirstRunListener);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS) + WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n          if (timeSource.getTime() - event.getEventTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    final long waitTime = 2;\n    props.put(\"waitFor\", waitTime);\n    trigger.setListener(noFirstRunListener);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (timeSource.getTime() - event.getEventTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":["a19b040b009e9ccadb3fff3ae1c518e7c2f2841d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12066820d4934626d46a381cddd8e03ce8910f79","date":1498447862,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    trigger.setListener(noFirstRunListener);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    final long waitTime = 2;\n    props.put(\"waitFor\", waitTime);\n    trigger.setListener(noFirstRunListener);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS) + WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n          if (timeSource.getTime() - event.getEventTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":["a19b040b009e9ccadb3fff3ae1c518e7c2f2841d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    trigger.setListener(noFirstRunListener);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","date":1503489512,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider());\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider()))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider()))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider());\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider()))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider()))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController());\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container, container.getZkController()))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController()))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController());\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container, container.getZkController()))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController()))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController());\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container, container.getZkController()))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController()))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager());\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager()))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager()))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController());\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container, container.getZkController()))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController()))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager());\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager()))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager()))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager());\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager()))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager()))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":["a19b040b009e9ccadb3fff3ae1c518e7c2f2841d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager());\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager()))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager()))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8351448ab99ebe1a8f4d25e8cee0fbe063281055","date":1527042619,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.setProcessor(null); // the processor may get called for old nodes\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAMES);\n      assertTrue(\"Newly added node was not present in event message\",\n          nodeNames.contains(newNode.getNodeName()));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":["a19b040b009e9ccadb3fff3ae1c518e7c2f2841d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a19b040b009e9ccadb3fff3ae1c518e7c2f2841d","date":1527129737,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.setProcessor(null); // the processor may get called for old nodes\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      AtomicBoolean stop = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        //the processor may get called 2 times, for newly added node and initial nodes\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n        }\n        List<String> nodeNames = (List<String>) event.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAMES);\n        if (nodeNames.contains(newNode.getNodeName())) {\n          stop.set(true);\n          eventRef.set(event);\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!stop.get());\n\n      // ensure the event was fired\n      assertTrue(stop.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.setProcessor(null); // the processor may get called for old nodes\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAMES);\n      assertTrue(\"Newly added node was not present in event message\",\n          nodeNames.contains(newNode.getNodeName()));\n    }\n  }\n\n","bugFix":["8351448ab99ebe1a8f4d25e8cee0fbe063281055","12066820d4934626d46a381cddd8e03ce8910f79","a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","d4412883c12067d8a4e2a354aa8adc58c32be1d6","26c61d5a7f832d4eb353313f88198c8f6fd0dc67"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    trigger.setProcessor(null); // the processor may get called for old nodes\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      AtomicBoolean stop = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        //the processor may get called 2 times, for newly added node and initial nodes\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n        }\n        List<String> nodeNames = (List<String>) event.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAMES);\n        if (nodeNames.contains(newNode.getNodeName())) {\n          stop.set(true);\n          eventRef.set(event);\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!stop.get());\n\n      // ensure the event was fired\n      assertTrue(stop.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    trigger.setProcessor(null); // the processor may get called for old nodes\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      AtomicBoolean stop = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        //the processor may get called 2 times, for newly added node and initial nodes\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n        }\n        List<String> nodeNames = (List<String>) event.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAMES);\n        if (nodeNames.contains(newNode.getNodeName())) {\n          stop.set(true);\n          eventRef.set(event);\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!stop.get());\n\n      // ensure the event was fired\n      assertTrue(stop.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc201e01d035a7370848d9d2451e0e27ee77df2e","date":1544724144,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    trigger.setProcessor(null); // the processor may get called for old nodes\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      newTrigger.configure(container.getResourceLoader(), cloudManager, props);\n      newTrigger.init();\n      AtomicBoolean stop = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        //the processor may get called 2 times, for newly added node and initial nodes\n        long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n        }\n        List<String> nodeNames = (List<String>) event.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAMES);\n        if (nodeNames.contains(newNode.getNodeName())) {\n          stop.set(true);\n          eventRef.set(event);\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!stop.get());\n\n      // ensure the event was fired\n      assertTrue(stop.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    trigger.setProcessor(null); // the processor may get called for old nodes\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      AtomicBoolean stop = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        //the processor may get called 2 times, for newly added node and initial nodes\n        long currentTimeNanos = timeSource.getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n        }\n        List<String> nodeNames = (List<String>) event.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAMES);\n        if (nodeNames.contains(newNode.getNodeName())) {\n          stop.set(true);\n          eventRef.set(event);\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!stop.get());\n\n      // ensure the event was fired\n      assertTrue(stop.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    trigger.setProcessor(null); // the processor may get called for old nodes\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      newTrigger.configure(container.getResourceLoader(), cloudManager, props);\n      newTrigger.init();\n      AtomicBoolean stop = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        //the processor may get called 2 times, for newly added node and initial nodes\n        long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n        }\n        @SuppressWarnings({\"unchecked\"})\n        List<String> nodeNames = (List<String>) event.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAMES);\n        if (nodeNames.contains(newNode.getNodeName())) {\n          stop.set(true);\n          eventRef.set(event);\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!stop.get());\n\n      // ensure the event was fired\n      assertTrue(stop.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    trigger.setProcessor(null); // the processor may get called for old nodes\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      newTrigger.configure(container.getResourceLoader(), cloudManager, props);\n      newTrigger.init();\n      AtomicBoolean stop = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        //the processor may get called 2 times, for newly added node and initial nodes\n        long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n        }\n        List<String> nodeNames = (List<String>) event.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAMES);\n        if (nodeNames.contains(newNode.getNodeName())) {\n          stop.set(true);\n          eventRef.set(event);\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!stop.get());\n\n      // ensure the event was fired\n      assertTrue(stop.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testRestoreState().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    trigger.setProcessor(null); // the processor may get called for old nodes\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      newTrigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      newTrigger.configure(container.getResourceLoader(), cloudManager, props);\n      newTrigger.init();\n      AtomicBoolean stop = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        //the processor may get called 2 times, for newly added node and initial nodes\n        long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n        long eventTimeNanos = event.getEventTime();\n        long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n        if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n          fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n        }\n        @SuppressWarnings({\"unchecked\"})\n        List<String> nodeNames = (List<String>) event.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAMES);\n        if (nodeNames.contains(newNode.getNodeName())) {\n          stop.set(true);\n          eventRef.set(event);\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!stop.get());\n\n      // ensure the event was fired\n      assertTrue(stop.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a19b040b009e9ccadb3fff3ae1c518e7c2f2841d"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c5fd294da67452cd8d116692194908de00eb5209"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"bc201e01d035a7370848d9d2451e0e27ee77df2e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a19b040b009e9ccadb3fff3ae1c518e7c2f2841d":["8351448ab99ebe1a8f4d25e8cee0fbe063281055"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["bc201e01d035a7370848d9d2451e0e27ee77df2e"],"26c61d5a7f832d4eb353313f88198c8f6fd0dc67":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["009caa80830ac6369c42e5f6515405d686eabfee","464244264804e3f981bf1fb4b732516d8d62dbc2"],"12066820d4934626d46a381cddd8e03ce8910f79":["26c61d5a7f832d4eb353313f88198c8f6fd0dc67"],"009caa80830ac6369c42e5f6515405d686eabfee":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e"],"c5fd294da67452cd8d116692194908de00eb5209":["12066820d4934626d46a381cddd8e03ce8910f79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["009caa80830ac6369c42e5f6515405d686eabfee"],"8351448ab99ebe1a8f4d25e8cee0fbe063281055":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["009caa80830ac6369c42e5f6515405d686eabfee"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["bc201e01d035a7370848d9d2451e0e27ee77df2e"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["5b8cffee0b9c10b78bd087c71485b482217fe84f"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["8351448ab99ebe1a8f4d25e8cee0fbe063281055"],"bc201e01d035a7370848d9d2451e0e27ee77df2e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a19b040b009e9ccadb3fff3ae1c518e7c2f2841d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"26c61d5a7f832d4eb353313f88198c8f6fd0dc67":["12066820d4934626d46a381cddd8e03ce8910f79"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["26c61d5a7f832d4eb353313f88198c8f6fd0dc67"],"009caa80830ac6369c42e5f6515405d686eabfee":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2"],"12066820d4934626d46a381cddd8e03ce8910f79":["c5fd294da67452cd8d116692194908de00eb5209"],"c5fd294da67452cd8d116692194908de00eb5209":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"8351448ab99ebe1a8f4d25e8cee0fbe063281055":["a19b040b009e9ccadb3fff3ae1c518e7c2f2841d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}