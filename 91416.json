{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerModifyCollectionTest#testModifyColl().mjava","commits":[{"id":"4425aa1103f1abe8e39d220f12e82b94c4f8272a","date":1467268836,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerModifyCollectionTest#testModifyColl().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    String collName = \"modifyColl\";\n    String newConfName = \"conf\" + random().nextInt();\n    String oldConfName = \"conf1\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collName, oldConfName, 1, 2);\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      \n      ConfigSetAdminRequest.Create createConfig = new ConfigSetAdminRequest.Create()\n        .setBaseConfigSetName(oldConfName)\n        .setConfigSetName(newConfName);\n      \n      ConfigSetAdminResponse configRsp = createConfig.process(client);\n      \n      assertEquals(0, configRsp.getStatus());\n      \n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", collName);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"collection.configName\", newConfName);\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n    \n    assertEquals(newConfName, getConfigNameFromZk(collName));    \n    \n    //Try an invalid config name\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", collName);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"collection.configName\", \"notARealConfigName\");\n      try{\n        client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n        fail(\"Exception should be thrown\");\n      } catch(RemoteSolrException e) {\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Can not find the specified config set\"));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerModifyCollectionTest#testModifyColl().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n    String collName = \"modifyColl\";\n    String newConfName = \"conf\" + random().nextInt();\n    String oldConfName = \"conf1\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collName, oldConfName, 1, 2);\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      \n      ConfigSetAdminRequest.Create createConfig = new ConfigSetAdminRequest.Create()\n        .setBaseConfigSetName(oldConfName)\n        .setConfigSetName(newConfName);\n      \n      ConfigSetAdminResponse configRsp = createConfig.process(client);\n      \n      assertEquals(0, configRsp.getStatus());\n      \n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", collName);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"collection.configName\", newConfName);\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n    \n    assertEquals(newConfName, getConfigNameFromZk(collName));    \n    \n    //Try an invalid config name\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", collName);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"collection.configName\", \"notARealConfigName\");\n      try{\n        client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n        fail(\"Exception should be thrown\");\n      } catch(RemoteSolrException e) {\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Can not find the specified config set\"));\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerModifyCollectionTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerModifyCollectionTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final String collName = \"modifyColl\";\n\n    CollectionAdminRequest.createCollection(collName, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    // TODO create a modifyCollection() method on CollectionAdminRequest\n    ModifiableSolrParams p1 = new ModifiableSolrParams();\n    p1.add(\"collection\", collName);\n    p1.add(\"action\", \"MODIFYCOLLECTION\");\n    p1.add(\"collection.configName\", \"conf2\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p1));\n\n    assertEquals(\"conf2\", getConfigNameFromZk(collName));\n    \n    //Try an invalid config name\n    ModifiableSolrParams p2 = new ModifiableSolrParams();\n    p2.add(\"collection\", collName);\n    p2.add(\"action\", \"MODIFYCOLLECTION\");\n    p2.add(\"collection.configName\", \"notARealConfigName\");\n    Exception e = expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p2));\n    });\n\n    assertTrue(e.getMessage(), e.getMessage().contains(\"Can not find the specified config set\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    String collName = \"modifyColl\";\n    String newConfName = \"conf\" + random().nextInt();\n    String oldConfName = \"conf1\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collName, oldConfName, 1, 2);\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      \n      ConfigSetAdminRequest.Create createConfig = new ConfigSetAdminRequest.Create()\n        .setBaseConfigSetName(oldConfName)\n        .setConfigSetName(newConfName);\n      \n      ConfigSetAdminResponse configRsp = createConfig.process(client);\n      \n      assertEquals(0, configRsp.getStatus());\n      \n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", collName);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"collection.configName\", newConfName);\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n    \n    assertEquals(newConfName, getConfigNameFromZk(collName));    \n    \n    //Try an invalid config name\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", collName);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"collection.configName\", \"notARealConfigName\");\n      try{\n        client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n        fail(\"Exception should be thrown\");\n      } catch(RemoteSolrException e) {\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Can not find the specified config set\"));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerModifyCollectionTest#testModifyColl().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerModifyCollectionTest#testModifyColl().mjava","sourceNew":"  @Test\n  public void testModifyColl() throws Exception {\n\n    final String collName = \"modifyColl\";\n\n    CollectionAdminRequest.createCollection(collName, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    // TODO create a modifyCollection() method on CollectionAdminRequest\n    ModifiableSolrParams p1 = new ModifiableSolrParams();\n    p1.add(\"collection\", collName);\n    p1.add(\"action\", \"MODIFYCOLLECTION\");\n    p1.add(\"collection.configName\", \"conf2\");\n    cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p1));\n\n    assertEquals(\"conf2\", getConfigNameFromZk(collName));\n    \n    //Try an invalid config name\n    ModifiableSolrParams p2 = new ModifiableSolrParams();\n    p2.add(\"collection\", collName);\n    p2.add(\"action\", \"MODIFYCOLLECTION\");\n    p2.add(\"collection.configName\", \"notARealConfigName\");\n    Exception e = expectThrows(Exception.class, () -> {\n      cluster.getSolrClient().request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p2));\n    });\n\n    assertTrue(e.getMessage(), e.getMessage().contains(\"Can not find the specified config set\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testModifyColl() throws Exception {\n    String collName = \"modifyColl\";\n    String newConfName = \"conf\" + random().nextInt();\n    String oldConfName = \"conf1\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collName, oldConfName, 1, 2);\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n      \n      ConfigSetAdminRequest.Create createConfig = new ConfigSetAdminRequest.Create()\n        .setBaseConfigSetName(oldConfName)\n        .setConfigSetName(newConfName);\n      \n      ConfigSetAdminResponse configRsp = createConfig.process(client);\n      \n      assertEquals(0, configRsp.getStatus());\n      \n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", collName);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"collection.configName\", newConfName);\n      client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n    }\n    \n    assertEquals(newConfName, getConfigNameFromZk(collName));    \n    \n    //Try an invalid config name\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      p.add(\"collection\", collName);\n      p.add(\"action\", \"MODIFYCOLLECTION\");\n      p.add(\"collection.configName\", \"notARealConfigName\");\n      try{\n        client.request(new GenericSolrRequest(POST, COLLECTIONS_HANDLER_PATH, p));\n        fail(\"Exception should be thrown\");\n      } catch(RemoteSolrException e) {\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Can not find the specified config set\"));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["4425aa1103f1abe8e39d220f12e82b94c4f8272a"],"4425aa1103f1abe8e39d220f12e82b94c4f8272a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4425aa1103f1abe8e39d220f12e82b94c4f8272a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"4425aa1103f1abe8e39d220f12e82b94c4f8272a":["636a04bc82e662bf141a55f1d10f52e1c76c727b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4425aa1103f1abe8e39d220f12e82b94c4f8272a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}