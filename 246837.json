{"path":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs(SolrResourceLoader,boolean).mjava","commits":[{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs(SolrResourceLoader,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs(boolean).mjava","sourceNew":"  private void initLibs(SolrResourceLoader loader, boolean isConfigsetTrusted) {\n    // TODO Want to remove SolrResourceLoader.getInstancePath; it can be on a Standalone subclass.\n    //  For Zk subclass, it's needed for the time being as well.  We could remove that one if we remove two things\n    //  in SolrCloud: (1) instancePath/lib  and (2) solrconfig lib directives with relative paths.  Can wait till 9.0.\n    Path instancePath = loader.getInstancePath();\n    List<URL> urls = new ArrayList<>();\n\n    Path libPath = instancePath.resolve(\"lib\");\n    if (Files.exists(libPath)) {\n      try {\n        urls.addAll(SolrResourceLoader.getURLs(libPath));\n      } catch (IOException e) {\n        log.warn(\"Couldn't add files from {} to classpath: {}\", libPath, e.getMessage());\n      }\n    }\n\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    if (!isConfigsetTrusted) {\n      throw new SolrException(ErrorCode.UNAUTHORIZED, \"The configset for this collection was uploaded without any authentication in place,\"\n          + \" and use of <lib> is not available for collections with untrusted configsets. To use this component, re-upload the configset\"\n          + \" after enabling authentication and authorization.\");\n    }\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = instancePath.resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = instancePath.resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    loader.addToClassLoader(urls);\n    loader.reloadLuceneSPI();\n  }\n\n","sourceOld":"  private void initLibs(boolean isConfigsetTrusted) {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    if (!isConfigsetTrusted) {\n      throw new SolrException(ErrorCode.UNAUTHORIZED, \"The configset for this collection was uploaded without any authentication in place,\"\n          + \" and use of <lib> is not available for collections with untrusted configsets. To use this component, re-upload the configset\"\n          + \" after enabling authentication and authorization.\");\n    }\n\n    log.debug(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs(SolrResourceLoader,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs(SolrResourceLoader,boolean).mjava","sourceNew":"  private void initLibs(SolrResourceLoader loader, boolean isConfigsetTrusted) {\n    // TODO Want to remove SolrResourceLoader.getInstancePath; it can be on a Standalone subclass.\n    //  For Zk subclass, it's needed for the time being as well.  We could remove that one if we remove two things\n    //  in SolrCloud: (1) instancePath/lib  and (2) solrconfig lib directives with relative paths.  Can wait till 9.0.\n    Path instancePath = loader.getInstancePath();\n    List<URL> urls = new ArrayList<>();\n\n    Path libPath = instancePath.resolve(\"lib\");\n    if (Files.exists(libPath)) {\n      try {\n        urls.addAll(SolrResourceLoader.getURLs(libPath));\n      } catch (IOException e) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libPath, e.getMessage());\n        }\n      }\n    }\n\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    if (!isConfigsetTrusted) {\n      throw new SolrException(ErrorCode.UNAUTHORIZED, \"The configset for this collection was uploaded without any authentication in place,\"\n          + \" and use of <lib> is not available for collections with untrusted configsets. To use this component, re-upload the configset\"\n          + \" after enabling authentication and authorization.\");\n    }\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = instancePath.resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n          }\n        }\n      } else if (null != path) {\n        final Path dir = instancePath.resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n          }\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    loader.addToClassLoader(urls);\n    loader.reloadLuceneSPI();\n  }\n\n","sourceOld":"  private void initLibs(SolrResourceLoader loader, boolean isConfigsetTrusted) {\n    // TODO Want to remove SolrResourceLoader.getInstancePath; it can be on a Standalone subclass.\n    //  For Zk subclass, it's needed for the time being as well.  We could remove that one if we remove two things\n    //  in SolrCloud: (1) instancePath/lib  and (2) solrconfig lib directives with relative paths.  Can wait till 9.0.\n    Path instancePath = loader.getInstancePath();\n    List<URL> urls = new ArrayList<>();\n\n    Path libPath = instancePath.resolve(\"lib\");\n    if (Files.exists(libPath)) {\n      try {\n        urls.addAll(SolrResourceLoader.getURLs(libPath));\n      } catch (IOException e) {\n        log.warn(\"Couldn't add files from {} to classpath: {}\", libPath, e.getMessage());\n      }\n    }\n\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    if (!isConfigsetTrusted) {\n      throw new SolrException(ErrorCode.UNAUTHORIZED, \"The configset for this collection was uploaded without any authentication in place,\"\n          + \" and use of <lib> is not available for collections with untrusted configsets. To use this component, re-upload the configset\"\n          + \" after enabling authentication and authorization.\");\n    }\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = instancePath.resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = instancePath.resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    loader.addToClassLoader(urls);\n    loader.reloadLuceneSPI();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs(SolrResourceLoader,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs(SolrResourceLoader,boolean).mjava","sourceNew":"  private void initLibs(SolrResourceLoader loader, boolean isConfigsetTrusted) {\n    // TODO Want to remove SolrResourceLoader.getInstancePath; it can be on a Standalone subclass.\n    //  For Zk subclass, it's needed for the time being as well.  We could remove that one if we remove two things\n    //  in SolrCloud: (1) instancePath/lib  and (2) solrconfig lib directives with relative paths.  Can wait till 9.0.\n    Path instancePath = loader.getInstancePath();\n    List<URL> urls = new ArrayList<>();\n\n    Path libPath = instancePath.resolve(\"lib\");\n    if (Files.exists(libPath)) {\n      try {\n        urls.addAll(SolrResourceLoader.getURLs(libPath));\n      } catch (IOException e) {\n        log.warn(\"Couldn't add files from {} to classpath: {}\", libPath, e.getMessage());\n      }\n    }\n\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    if (!isConfigsetTrusted) {\n      throw new SolrException(ErrorCode.UNAUTHORIZED, \"The configset for this collection was uploaded without any authentication in place,\"\n          + \" and use of <lib> is not available for collections with untrusted configsets. To use this component, re-upload the configset\"\n          + \" after enabling authentication and authorization.\");\n    }\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = instancePath.resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = instancePath.resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    loader.addToClassLoader(urls);\n    loader.reloadLuceneSPI();\n  }\n\n","sourceOld":"  private void initLibs(SolrResourceLoader loader, boolean isConfigsetTrusted) {\n    // TODO Want to remove SolrResourceLoader.getInstancePath; it can be on a Standalone subclass.\n    //  For Zk subclass, it's needed for the time being as well.  We could remove that one if we remove two things\n    //  in SolrCloud: (1) instancePath/lib  and (2) solrconfig lib directives with relative paths.  Can wait till 9.0.\n    Path instancePath = loader.getInstancePath();\n    List<URL> urls = new ArrayList<>();\n\n    Path libPath = instancePath.resolve(\"lib\");\n    if (Files.exists(libPath)) {\n      try {\n        urls.addAll(SolrResourceLoader.getURLs(libPath));\n      } catch (IOException e) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libPath, e.getMessage());\n        }\n      }\n    }\n\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    if (!isConfigsetTrusted) {\n      throw new SolrException(ErrorCode.UNAUTHORIZED, \"The configset for this collection was uploaded without any authentication in place,\"\n          + \" and use of <lib> is not available for collections with untrusted configsets. To use this component, re-upload the configset\"\n          + \" after enabling authentication and authorization.\");\n    }\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = instancePath.resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n          }\n        }\n      } else if (null != path) {\n        final Path dir = instancePath.resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n          }\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    loader.addToClassLoader(urls);\n    loader.reloadLuceneSPI();\n  }\n\n","bugFix":null,"bugIntro":["54a69f3add8b1c01aa1970f508d6c618d379ae73"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a69f3add8b1c01aa1970f508d6c618d379ae73","date":1590496326,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs(SolrResourceLoader,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs(SolrResourceLoader,boolean).mjava","sourceNew":"  private void initLibs(SolrResourceLoader loader, boolean isConfigsetTrusted) {\n    // TODO Want to remove SolrResourceLoader.getInstancePath; it can be on a Standalone subclass.\n    //  For Zk subclass, it's needed for the time being as well.  We could remove that one if we remove two things\n    //  in SolrCloud: (1) instancePath/lib  and (2) solrconfig lib directives with relative paths.  Can wait till 9.0.\n    Path instancePath = loader.getInstancePath();\n    List<URL> urls = new ArrayList<>();\n\n    Path libPath = instancePath.resolve(\"lib\");\n    if (Files.exists(libPath)) {\n      try {\n        urls.addAll(SolrResourceLoader.getURLs(libPath));\n      } catch (IOException e) {\n        log.warn(\"Couldn't add files from {} to classpath: {}\", libPath, e);\n      }\n    }\n\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    if (!isConfigsetTrusted) {\n      throw new SolrException(ErrorCode.UNAUTHORIZED, \"The configset for this collection was uploaded without any authentication in place,\"\n          + \" and use of <lib> is not available for collections with untrusted configsets. To use this component, re-upload the configset\"\n          + \" after enabling authentication and authorization.\");\n    }\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = instancePath.resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e);\n        }\n      } else if (null != path) {\n        final Path dir = instancePath.resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e);\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    loader.addToClassLoader(urls);\n    loader.reloadLuceneSPI();\n  }\n\n","sourceOld":"  private void initLibs(SolrResourceLoader loader, boolean isConfigsetTrusted) {\n    // TODO Want to remove SolrResourceLoader.getInstancePath; it can be on a Standalone subclass.\n    //  For Zk subclass, it's needed for the time being as well.  We could remove that one if we remove two things\n    //  in SolrCloud: (1) instancePath/lib  and (2) solrconfig lib directives with relative paths.  Can wait till 9.0.\n    Path instancePath = loader.getInstancePath();\n    List<URL> urls = new ArrayList<>();\n\n    Path libPath = instancePath.resolve(\"lib\");\n    if (Files.exists(libPath)) {\n      try {\n        urls.addAll(SolrResourceLoader.getURLs(libPath));\n      } catch (IOException e) {\n        log.warn(\"Couldn't add files from {} to classpath: {}\", libPath, e.getMessage());\n      }\n    }\n\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    if (!isConfigsetTrusted) {\n      throw new SolrException(ErrorCode.UNAUTHORIZED, \"The configset for this collection was uploaded without any authentication in place,\"\n          + \" and use of <lib> is not available for collections with untrusted configsets. To use this component, re-upload the configset\"\n          + \" after enabling authentication and authorization.\");\n    }\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = instancePath.resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = instancePath.resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    loader.addToClassLoader(urls);\n    loader.reloadLuceneSPI();\n  }\n\n","bugFix":["575e66bd4b2349209027f6801184da7fc3cba13f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"140be51d03394488536f4aacedace29f9b318347":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54a69f3add8b1c01aa1970f508d6c618d379ae73":["575e66bd4b2349209027f6801184da7fc3cba13f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["140be51d03394488536f4aacedace29f9b318347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54a69f3add8b1c01aa1970f508d6c618d379ae73"]},"commit2Childs":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["140be51d03394488536f4aacedace29f9b318347"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"140be51d03394488536f4aacedace29f9b318347":["575e66bd4b2349209027f6801184da7fc3cba13f"],"54a69f3add8b1c01aa1970f508d6c618d379ae73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"575e66bd4b2349209027f6801184da7fc3cba13f":["54a69f3add8b1c01aa1970f508d6c618d379ae73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}