{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#shouldConcatenate(int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#shouldConcatenate(int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#shouldConcatenate(int).mjava","sourceNew":"  /**\n   * Determines whether to concatenate a word or number if the current word is the given type\n   *\n   * @param wordType Type of the current word used to determine if it should be concatenated\n   * @return {@code true} if concatenation should occur, {@code false} otherwise\n   */\n  private boolean shouldConcatenate(int wordType) {\n    return (catenateWords && isAlpha(wordType)) || (catenateNumbers && isDigit(wordType));\n  }\n\n","sourceOld":"  /**\n   * Determines whether to concatenate a word or number if the current word is the given type\n   *\n   * @param wordType Type of the current word used to determine if it should be concatenated\n   * @return {@code true} if concatenation should occur, {@code false} otherwise\n   */\n  private boolean shouldConcatenate(int wordType) {\n    return (catenateWords && isAlpha(wordType)) || (catenateNumbers && isDigit(wordType));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec1acb945fb5751735f5c9482576c8760d97b6ab","date":1315370590,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#shouldConcatenate(int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#shouldConcatenate(int).mjava","sourceNew":"  /**\n   * Determines whether to concatenate a word or number if the current word is the given type\n   *\n   * @param wordType Type of the current word used to determine if it should be concatenated\n   * @return {@code true} if concatenation should occur, {@code false} otherwise\n   */\n  private boolean shouldConcatenate(int wordType) {\n    return (has(CATENATE_WORDS) && isAlpha(wordType)) || (has(CATENATE_NUMBERS) && isDigit(wordType));\n  }\n\n","sourceOld":"  /**\n   * Determines whether to concatenate a word or number if the current word is the given type\n   *\n   * @param wordType Type of the current word used to determine if it should be concatenated\n   * @return {@code true} if concatenation should occur, {@code false} otherwise\n   */\n  private boolean shouldConcatenate(int wordType) {\n    return (catenateWords && isAlpha(wordType)) || (catenateNumbers && isDigit(wordType));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#shouldConcatenate(int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#shouldConcatenate(int).mjava","sourceNew":"  /**\n   * Determines whether to concatenate a word or number if the current word is the given type\n   *\n   * @param wordType Type of the current word used to determine if it should be concatenated\n   * @return {@code true} if concatenation should occur, {@code false} otherwise\n   */\n  private boolean shouldConcatenate(int wordType) {\n    return (has(CATENATE_WORDS) && isAlpha(wordType)) || (has(CATENATE_NUMBERS) && isDigit(wordType));\n  }\n\n","sourceOld":"  /**\n   * Determines whether to concatenate a word or number if the current word is the given type\n   *\n   * @param wordType Type of the current word used to determine if it should be concatenated\n   * @return {@code true} if concatenation should occur, {@code false} otherwise\n   */\n  private boolean shouldConcatenate(int wordType) {\n    return (has(CATENATE_WORDS) && isAlpha(wordType)) || (has(CATENATE_NUMBERS) && isDigit(wordType));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ec1acb945fb5751735f5c9482576c8760d97b6ab"],"ec1acb945fb5751735f5c9482576c8760d97b6ab":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec1acb945fb5751735f5c9482576c8760d97b6ab":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["ec1acb945fb5751735f5c9482576c8760d97b6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}