{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#topoSortStates(Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#topoSortStates(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#topoSortStates(LightAutomaton).mjava","sourceNew":"  private int[] topoSortStates(Automaton a) {\n    int[] states = new int[a.getNumStates()];\n    final Set<Integer> visited = new HashSet<>();\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.add(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (!visited.contains(t.dest)) {\n          visited.add(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n    return states;\n  }\n\n","sourceOld":"  private int[] topoSortStates(LightAutomaton a) {\n    int[] states = new int[a.getNumStates()];\n    final Set<Integer> visited = new HashSet<>();\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.add(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (!visited.contains(t.dest)) {\n          visited.add(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n    return states;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#topoSortStates(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  private int[] topoSortStates(Automaton a) {\n    int[] states = new int[a.getNumStates()];\n    final Set<Integer> visited = new HashSet<>();\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.add(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (!visited.contains(t.dest)) {\n          visited.add(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n    return states;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd0901f8e04d36d825c916f46ec9a7766e2a9695","date":1411046050,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#topoSortStates(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#topoSortStates(Automaton).mjava","sourceNew":"  private int[] topoSortStates(Automaton a) {\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.set(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (!visited.get(t.dest)) {\n          visited.set(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n    return states;\n  }\n\n","sourceOld":"  private int[] topoSortStates(Automaton a) {\n    int[] states = new int[a.getNumStates()];\n    final Set<Integer> visited = new HashSet<>();\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.add(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (!visited.contains(t.dest)) {\n          visited.add(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n    return states;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"363efd5f833e8e194f8c9b8a3199eca1bc684c38","date":1435941197,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#topoSortStates(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#topoSortStates(Automaton).mjava","sourceNew":"  /** Returns the topological sort of all states.  Behavior is undefined if this\n   *  automaton has cycles.  CPU cost is O(numTransitions). */\n  public static int[] topoSortStates(Automaton a) {\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.set(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (!visited.get(t.dest)) {\n          visited.set(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n\n    return states;\n  }\n\n","sourceOld":"  private int[] topoSortStates(Automaton a) {\n    int numStates = a.getNumStates();\n    int[] states = new int[numStates];\n    final BitSet visited = new BitSet(numStates);\n    final LinkedList<Integer> worklist = new LinkedList<>();\n    worklist.add(0);\n    visited.set(0);\n    int upto = 0;\n    states[upto] = 0;\n    upto++;\n    Transition t = new Transition();\n    while (worklist.size() > 0) {\n      int s = worklist.removeFirst();\n      int count = a.initTransition(s, t);\n      for (int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (!visited.get(t.dest)) {\n          visited.set(t.dest);\n          worklist.add(t.dest);\n          states[upto++] = t.dest;\n        }\n      }\n    }\n    return states;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"363efd5f833e8e194f8c9b8a3199eca1bc684c38":["cd0901f8e04d36d825c916f46ec9a7766e2a9695"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd0901f8e04d36d825c916f46ec9a7766e2a9695":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["363efd5f833e8e194f8c9b8a3199eca1bc684c38"]},"commit2Childs":{"363efd5f833e8e194f8c9b8a3199eca1bc684c38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"cd0901f8e04d36d825c916f46ec9a7766e2a9695":["363efd5f833e8e194f8c9b8a3199eca1bc684c38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd0901f8e04d36d825c916f46ec9a7766e2a9695"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}