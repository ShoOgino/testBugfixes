{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insertWithOverflow(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insertWithOverflow(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insertWithOverflow(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      TermEnum terms = ir.terms(new Term(field,\"\"));\n      while (terms.next()) {\n        if (!field.equals(terms.term().field())) {\n          break;\n        }\n        int df = terms.docFreq();\n        if (df<threshold) {\n          String ttxt = terms.term().text();\n          pq.insertWithOverflow(new TermDf(ttxt,df));\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/QualityQueriesFinder#bestTerms(String,int).mjava","sourceNew":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","sourceOld":"  private String [] bestTerms(String field,int numTerms) throws IOException {\n    PriorityQueue<TermDf> pq = new TermsDfQueue(numTerms);\n    IndexReader ir = IndexReader.open(dir, true);\n    try {\n      int threshold = ir.maxDoc() / 10; // ignore words too common.\n      Terms terms = MultiFields.getTerms(ir, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while (termsEnum.next() != null) {\n          int df = termsEnum.docFreq();\n          if (df<threshold) {\n            String ttxt = termsEnum.term().utf8ToString();\n            pq.insertWithOverflow(new TermDf(ttxt,df));\n          }\n        }\n      }\n    } finally {\n      ir.close();\n    }\n    String res[] = new String[pq.size()];\n    int i = 0;\n    while (pq.size()>0) {\n      TermDf tdf = pq.pop(); \n      res[i++] = tdf.word;\n      System.out.println(i+\".   word:  \"+tdf.df+\"   \"+tdf.word);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["28427ef110c4c5bf5b4057731b83110bd1e13724","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","28427ef110c4c5bf5b4057731b83110bd1e13724"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["5f4e87790277826a2aea119328600dfb07761f32","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}