{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","commits":[{"id":"a3de8723cbb1ec54b48bde9aff2c38e3372db3b4","date":1375726719,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"/dev/null","sourceNew":"  /** sets system properties based on \n   * {@link #newIndexWriterConfig(org.apache.lucene.util.Version, org.apache.lucene.analysis.Analyzer)}\n   * \n   * configs can use these system properties to vary the indexwriter settings\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n    System.setProperty(\"solr.tests.mergeScheduler\", iwc.getMergeScheduler().getClass().getName());\n\n    // don't ask iwc.getMaxThreadStates(), sometimes newIWC uses \n    // RandomDocumentsWriterPerThreadPool and all hell breaks loose\n    int maxIndexingThreads = rarely(random())\n      ? _TestUtil.nextInt(random(), 5, 20) // crazy value\n      : _TestUtil.nextInt(random(), 1, 4); // reasonable value\n    System.setProperty(\"solr.tests.maxIndexingThreads\", String.valueOf(maxIndexingThreads));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"/dev/null","sourceNew":"  /** sets system properties based on \n   * {@link #newIndexWriterConfig(org.apache.lucene.util.Version, org.apache.lucene.analysis.Analyzer)}\n   * \n   * configs can use these system properties to vary the indexwriter settings\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n    System.setProperty(\"solr.tests.mergeScheduler\", iwc.getMergeScheduler().getClass().getName());\n\n    // don't ask iwc.getMaxThreadStates(), sometimes newIWC uses \n    // RandomDocumentsWriterPerThreadPool and all hell breaks loose\n    int maxIndexingThreads = rarely(random())\n      ? _TestUtil.nextInt(random(), 5, 20) // crazy value\n      : _TestUtil.nextInt(random(), 1, 4); // reasonable value\n    System.setProperty(\"solr.tests.maxIndexingThreads\", String.valueOf(maxIndexingThreads));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","sourceNew":"  /** sets system properties based on \n   * {@link #newIndexWriterConfig(org.apache.lucene.util.Version, org.apache.lucene.analysis.Analyzer)}\n   * \n   * configs can use these system properties to vary the indexwriter settings\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n    System.setProperty(\"solr.tests.mergeScheduler\", iwc.getMergeScheduler().getClass().getName());\n\n    // don't ask iwc.getMaxThreadStates(), sometimes newIWC uses \n    // RandomDocumentsWriterPerThreadPool and all hell breaks loose\n    int maxIndexingThreads = rarely(random())\n      ? TestUtil.nextInt(random(), 5, 20) // crazy value\n      : TestUtil.nextInt(random(), 1, 4); // reasonable value\n    System.setProperty(\"solr.tests.maxIndexingThreads\", String.valueOf(maxIndexingThreads));\n  }\n\n","sourceOld":"  /** sets system properties based on \n   * {@link #newIndexWriterConfig(org.apache.lucene.util.Version, org.apache.lucene.analysis.Analyzer)}\n   * \n   * configs can use these system properties to vary the indexwriter settings\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n    System.setProperty(\"solr.tests.mergeScheduler\", iwc.getMergeScheduler().getClass().getName());\n\n    // don't ask iwc.getMaxThreadStates(), sometimes newIWC uses \n    // RandomDocumentsWriterPerThreadPool and all hell breaks loose\n    int maxIndexingThreads = rarely(random())\n      ? _TestUtil.nextInt(random(), 5, 20) // crazy value\n      : _TestUtil.nextInt(random(), 1, 4); // reasonable value\n    System.setProperty(\"solr.tests.maxIndexingThreads\", String.valueOf(maxIndexingThreads));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","sourceNew":"  /** sets system properties based on \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   * \n   * configs can use these system properties to vary the indexwriter settings\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n    System.setProperty(\"solr.tests.mergeScheduler\", iwc.getMergeScheduler().getClass().getName());\n\n    // don't ask iwc.getMaxThreadStates(), sometimes newIWC uses \n    // RandomDocumentsWriterPerThreadPool and all hell breaks loose\n    int maxIndexingThreads = rarely(random())\n      ? TestUtil.nextInt(random(), 5, 20) // crazy value\n      : TestUtil.nextInt(random(), 1, 4); // reasonable value\n    System.setProperty(\"solr.tests.maxIndexingThreads\", String.valueOf(maxIndexingThreads));\n  }\n\n","sourceOld":"  /** sets system properties based on \n   * {@link #newIndexWriterConfig(org.apache.lucene.util.Version, org.apache.lucene.analysis.Analyzer)}\n   * \n   * configs can use these system properties to vary the indexwriter settings\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n    System.setProperty(\"solr.tests.mergeScheduler\", iwc.getMergeScheduler().getClass().getName());\n\n    // don't ask iwc.getMaxThreadStates(), sometimes newIWC uses \n    // RandomDocumentsWriterPerThreadPool and all hell breaks loose\n    int maxIndexingThreads = rarely(random())\n      ? TestUtil.nextInt(random(), 5, 20) // crazy value\n      : TestUtil.nextInt(random(), 1, 4); // reasonable value\n    System.setProperty(\"solr.tests.maxIndexingThreads\", String.valueOf(maxIndexingThreads));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52bb00349b39075277af6e050dbec249f429c85","date":1416477806,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","sourceNew":"  /** sets system properties based on \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   * \n   * configs can use these system properties to vary the indexwriter settings\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n\n    // don't ask iwc.getMaxThreadStates(), sometimes newIWC uses \n    // RandomDocumentsWriterPerThreadPool and all hell breaks loose\n    int maxIndexingThreads = rarely(random())\n      ? TestUtil.nextInt(random(), 5, 20) // crazy value\n      : TestUtil.nextInt(random(), 1, 4); // reasonable value\n    System.setProperty(\"solr.tests.maxIndexingThreads\", String.valueOf(maxIndexingThreads));\n  }\n\n","sourceOld":"  /** sets system properties based on \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   * \n   * configs can use these system properties to vary the indexwriter settings\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n    System.setProperty(\"solr.tests.mergeScheduler\", iwc.getMergeScheduler().getClass().getName());\n\n    // don't ask iwc.getMaxThreadStates(), sometimes newIWC uses \n    // RandomDocumentsWriterPerThreadPool and all hell breaks loose\n    int maxIndexingThreads = rarely(random())\n      ? TestUtil.nextInt(random(), 5, 20) // crazy value\n      : TestUtil.nextInt(random(), 1, 4); // reasonable value\n    System.setProperty(\"solr.tests.maxIndexingThreads\", String.valueOf(maxIndexingThreads));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","sourceNew":"  /** sets system properties based on \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   * \n   * configs can use these system properties to vary the indexwriter settings\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n  }\n\n","sourceOld":"  /** sets system properties based on \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   * \n   * configs can use these system properties to vary the indexwriter settings\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n\n    // don't ask iwc.getMaxThreadStates(), sometimes newIWC uses \n    // RandomDocumentsWriterPerThreadPool and all hell breaks loose\n    int maxIndexingThreads = rarely(random())\n      ? TestUtil.nextInt(random(), 5, 20) // crazy value\n      : TestUtil.nextInt(random(), 1, 4); // reasonable value\n    System.setProperty(\"solr.tests.maxIndexingThreads\", String.valueOf(maxIndexingThreads));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","sourceNew":"  /** \n   * Sets system properties to allow generation of random configurations of\n   * solrconfig.xml and schema.xml. \n   * Sets properties used on  \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   *  and base schema.xml (Point Fields)\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressPointFields.class)\n        || (!PREFER_POINT_FIELDS && random().nextBoolean())) {\n      log.info(\"Using TrieFields\");\n      System.setProperty(\"solr.tests.intClass\", \"int\");\n      System.setProperty(\"solr.tests.longClass\", \"long\");\n      System.setProperty(\"solr.tests.doubleClass\", \"double\");\n      System.setProperty(\"solr.tests.floatClass\", \"float\");\n    } else {\n      log.info(\"Using PointFields\");\n      System.setProperty(\"solr.tests.intClass\", \"pint\");\n      System.setProperty(\"solr.tests.longClass\", \"plong\");\n      System.setProperty(\"solr.tests.doubleClass\", \"pdouble\");\n      System.setProperty(\"solr.tests.floatClass\", \"pfloat\");\n    }\n  }\n\n","sourceOld":"  /** sets system properties based on \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   * \n   * configs can use these system properties to vary the indexwriter settings\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","sourceNew":"  /** \n   * Sets system properties to allow generation of random configurations of\n   * solrconfig.xml and schema.xml. \n   * Sets properties used on  \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   *  and base schema.xml (Point Fields)\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressPointFields.class)\n        || (!PREFER_POINT_FIELDS && random().nextBoolean())) {\n      log.info(\"Using TrieFields\");\n      System.setProperty(\"solr.tests.intClass\", \"int\");\n      System.setProperty(\"solr.tests.longClass\", \"long\");\n      System.setProperty(\"solr.tests.doubleClass\", \"double\");\n      System.setProperty(\"solr.tests.floatClass\", \"float\");\n    } else {\n      log.info(\"Using PointFields\");\n      System.setProperty(\"solr.tests.intClass\", \"pint\");\n      System.setProperty(\"solr.tests.longClass\", \"plong\");\n      System.setProperty(\"solr.tests.doubleClass\", \"pdouble\");\n      System.setProperty(\"solr.tests.floatClass\", \"pfloat\");\n    }\n  }\n\n","sourceOld":"  /** sets system properties based on \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   * \n   * configs can use these system properties to vary the indexwriter settings\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa9f76a48e97bb2d40fc67ecdaad33d166d596e","date":1488856307,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","sourceNew":"  /** \n   * Sets system properties to allow generation of random configurations of\n   * solrconfig.xml and schema.xml. \n   * Sets properties used on  \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   *  and base schema.xml (Point Fields)\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressPointFields.class)\n        || (!PREFER_POINT_FIELDS && random().nextBoolean())) {\n      log.info(\"Using TrieFields\");\n      System.setProperty(\"solr.tests.intClass\", \"int\");\n      System.setProperty(\"solr.tests.longClass\", \"long\");\n      System.setProperty(\"solr.tests.doubleClass\", \"double\");\n      System.setProperty(\"solr.tests.floatClass\", \"float\");\n      System.setProperty(\"solr.tests.dateClass\", \"date\");\n    } else {\n      log.info(\"Using PointFields\");\n      System.setProperty(\"solr.tests.intClass\", \"pint\");\n      System.setProperty(\"solr.tests.longClass\", \"plong\");\n      System.setProperty(\"solr.tests.doubleClass\", \"pdouble\");\n      System.setProperty(\"solr.tests.floatClass\", \"pfloat\");\n      System.setProperty(\"solr.tests.dateClass\", \"pdate\");\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets system properties to allow generation of random configurations of\n   * solrconfig.xml and schema.xml. \n   * Sets properties used on  \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   *  and base schema.xml (Point Fields)\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressPointFields.class)\n        || (!PREFER_POINT_FIELDS && random().nextBoolean())) {\n      log.info(\"Using TrieFields\");\n      System.setProperty(\"solr.tests.intClass\", \"int\");\n      System.setProperty(\"solr.tests.longClass\", \"long\");\n      System.setProperty(\"solr.tests.doubleClass\", \"double\");\n      System.setProperty(\"solr.tests.floatClass\", \"float\");\n    } else {\n      log.info(\"Using PointFields\");\n      System.setProperty(\"solr.tests.intClass\", \"pint\");\n      System.setProperty(\"solr.tests.longClass\", \"plong\");\n      System.setProperty(\"solr.tests.doubleClass\", \"pdouble\");\n      System.setProperty(\"solr.tests.floatClass\", \"pfloat\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","sourceNew":"  /** \n   * Sets system properties to allow generation of random configurations of\n   * solrconfig.xml and schema.xml. \n   * Sets properties used on  \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   *  and base schema.xml (Point Fields)\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n    randomizeNumericTypesProperties();\n  }\n\n","sourceOld":"  /** \n   * Sets system properties to allow generation of random configurations of\n   * solrconfig.xml and schema.xml. \n   * Sets properties used on  \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   *  and base schema.xml (Point Fields)\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressPointFields.class)\n        || (!PREFER_POINT_FIELDS && random().nextBoolean())) {\n      log.info(\"Using TrieFields\");\n      System.setProperty(\"solr.tests.intClass\", \"int\");\n      System.setProperty(\"solr.tests.longClass\", \"long\");\n      System.setProperty(\"solr.tests.doubleClass\", \"double\");\n      System.setProperty(\"solr.tests.floatClass\", \"float\");\n      System.setProperty(\"solr.tests.dateClass\", \"date\");\n    } else {\n      log.info(\"Using PointFields\");\n      System.setProperty(\"solr.tests.intClass\", \"pint\");\n      System.setProperty(\"solr.tests.longClass\", \"plong\");\n      System.setProperty(\"solr.tests.doubleClass\", \"pdouble\");\n      System.setProperty(\"solr.tests.floatClass\", \"pfloat\");\n      System.setProperty(\"solr.tests.dateClass\", \"pdate\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","sourceNew":"  /** \n   * Sets system properties to allow generation of random configurations of\n   * solrconfig.xml and schema.xml. \n   * Sets properties used on  \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   *  and base schema.xml (Point Fields)\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n    randomizeNumericTypesProperties();\n  }\n\n","sourceOld":"  /** \n   * Sets system properties to allow generation of random configurations of\n   * solrconfig.xml and schema.xml. \n   * Sets properties used on  \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   *  and base schema.xml (Point Fields)\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressPointFields.class)\n        || (!PREFER_POINT_FIELDS && random().nextBoolean())) {\n      log.info(\"Using TrieFields\");\n      System.setProperty(\"solr.tests.intClass\", \"int\");\n      System.setProperty(\"solr.tests.longClass\", \"long\");\n      System.setProperty(\"solr.tests.doubleClass\", \"double\");\n      System.setProperty(\"solr.tests.floatClass\", \"float\");\n      System.setProperty(\"solr.tests.dateClass\", \"date\");\n    } else {\n      log.info(\"Using PointFields\");\n      System.setProperty(\"solr.tests.intClass\", \"pint\");\n      System.setProperty(\"solr.tests.longClass\", \"plong\");\n      System.setProperty(\"solr.tests.doubleClass\", \"pdouble\");\n      System.setProperty(\"solr.tests.floatClass\", \"pfloat\");\n      System.setProperty(\"solr.tests.dateClass\", \"pdate\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","sourceNew":"  /** \n   * Sets system properties to allow generation of random configurations of\n   * solrconfig.xml and schema.xml. \n   * Sets properties used on  \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   *  and base schema.xml (Point Fields)\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n    randomizeNumericTypesProperties();\n  }\n\n","sourceOld":"  /** \n   * Sets system properties to allow generation of random configurations of\n   * solrconfig.xml and schema.xml. \n   * Sets properties used on  \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   *  and base schema.xml (Point Fields)\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressPointFields.class)\n        || (!PREFER_POINT_FIELDS && random().nextBoolean())) {\n      log.info(\"Using TrieFields\");\n      System.setProperty(\"solr.tests.intClass\", \"int\");\n      System.setProperty(\"solr.tests.longClass\", \"long\");\n      System.setProperty(\"solr.tests.doubleClass\", \"double\");\n      System.setProperty(\"solr.tests.floatClass\", \"float\");\n      System.setProperty(\"solr.tests.dateClass\", \"date\");\n    } else {\n      log.info(\"Using PointFields\");\n      System.setProperty(\"solr.tests.intClass\", \"pint\");\n      System.setProperty(\"solr.tests.longClass\", \"plong\");\n      System.setProperty(\"solr.tests.doubleClass\", \"pdouble\");\n      System.setProperty(\"solr.tests.floatClass\", \"pfloat\");\n      System.setProperty(\"solr.tests.dateClass\", \"pdate\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151c786e439f34edb91b77d019109463ab0a6548","date":1562001139,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#newRandomConfig().mjava","sourceNew":"  /** \n   * Sets system properties to allow generation of random configurations of\n   * solrconfig.xml and schema.xml. \n   * Sets properties used on  \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   *  and base schema.xml (Point Fields)\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramPerThreadHardLimitMB\", String.valueOf(iwc.getRAMPerThreadHardLimitMB()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n    randomizeNumericTypesProperties();\n  }\n\n","sourceOld":"  /** \n   * Sets system properties to allow generation of random configurations of\n   * solrconfig.xml and schema.xml. \n   * Sets properties used on  \n   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}\n   *  and base schema.xml (Point Fields)\n   */\n  public static void newRandomConfig() {\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n\n    System.setProperty(\"useCompoundFile\", String.valueOf(iwc.getUseCompoundFile()));\n\n    System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(iwc.getMaxBufferedDocs()));\n    System.setProperty(\"solr.tests.ramBufferSizeMB\", String.valueOf(iwc.getRAMBufferSizeMB()));\n\n    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();\n    if (mergeSchedulerClass.contains(\"$\")) {\n      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead\n      mergeSchedulerClass = \"org.apache.lucene.index.ConcurrentMergeScheduler\";\n    }\n    System.setProperty(\"solr.tests.mergeScheduler\", mergeSchedulerClass);\n    randomizeNumericTypesProperties();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"151c786e439f34edb91b77d019109463ab0a6548":["28288370235ed02234a64753cdbf0c6ec096304a"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a3de8723cbb1ec54b48bde9aff2c38e3372db3b4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"46dc9ac8b3e748407baaef82453138ff3974480c":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a3de8723cbb1ec54b48bde9aff2c38e3372db3b4"],"a3de8723cbb1ec54b48bde9aff2c38e3372db3b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52bb00349b39075277af6e050dbec249f429c85":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["c02b804ab16489b95429791a2d8fb0e0728354d4","46dc9ac8b3e748407baaef82453138ff3974480c"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["e52bb00349b39075277af6e050dbec249f429c85"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["46dc9ac8b3e748407baaef82453138ff3974480c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["151c786e439f34edb91b77d019109463ab0a6548"]},"commit2Childs":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"151c786e439f34edb91b77d019109463ab0a6548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["e52bb00349b39075277af6e050dbec249f429c85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"46dc9ac8b3e748407baaef82453138ff3974480c":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"a3de8723cbb1ec54b48bde9aff2c38e3372db3b4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","6613659748fe4411a7dcf85266e55db1f95f7315"],"e52bb00349b39075277af6e050dbec249f429c85":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["151c786e439f34edb91b77d019109463ab0a6548"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"c02b804ab16489b95429791a2d8fb0e0728354d4":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a3de8723cbb1ec54b48bde9aff2c38e3372db3b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}