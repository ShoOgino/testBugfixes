{"path":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#insertBefore(LinkedList[UpdateRequestProcessorFactory],List[UpdateRequestProcessorFactory],Class,int).mjava","commits":[{"id":"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","date":1426252395,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#insertBefore(LinkedList[UpdateRequestProcessorFactory],List[UpdateRequestProcessorFactory],Class,int).mjava","pathOld":"/dev/null","sourceNew":"  private static void insertBefore(LinkedList<UpdateRequestProcessorFactory> urps, List<UpdateRequestProcessorFactory> newFactories, Class klas, int idx) {\n    if (newFactories.isEmpty()) return;\n    for (int i = 0; i < urps.size(); i++) {\n      if (klas.isInstance(urps.get(i))) {\n        idx = i;\n        if (klas == DistributedUpdateProcessorFactory.class) {\n          if (i > 0 && urps.get(i - 1) instanceof LogUpdateProcessorFactory) {\n            idx = i - 1;\n          }\n        }\n        break;\n      }\n    }\n    for (int i = newFactories.size() - 1; 0 <= i; i--) urps.add(idx, newFactories.get(i));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#insertBefore(LinkedList[UpdateRequestProcessorFactory],List[UpdateRequestProcessorFactory],Class,int).mjava","pathOld":"/dev/null","sourceNew":"  private static void insertBefore(LinkedList<UpdateRequestProcessorFactory> urps, List<UpdateRequestProcessorFactory> newFactories, Class klas, int idx) {\n    if (newFactories.isEmpty()) return;\n    for (int i = 0; i < urps.size(); i++) {\n      if (klas.isInstance(urps.get(i))) {\n        idx = i;\n        if (klas == DistributedUpdateProcessorFactory.class) {\n          if (i > 0 && urps.get(i - 1) instanceof LogUpdateProcessorFactory) {\n            idx = i - 1;\n          }\n        }\n        break;\n      }\n    }\n    for (int i = newFactories.size() - 1; 0 <= i; i--) urps.add(idx, newFactories.get(i));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#insertBefore(LinkedList[UpdateRequestProcessorFactory],List[UpdateRequestProcessorFactory],Class,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/UpdateRequestProcessorChain#insertBefore(LinkedList[UpdateRequestProcessorFactory],List[UpdateRequestProcessorFactory],Class,int).mjava","sourceNew":"  private static void insertBefore(LinkedList<UpdateRequestProcessorFactory> urps, List<UpdateRequestProcessorFactory> newFactories,\n                                   @SuppressWarnings({\"rawtypes\"})Class klas, int idx) {\n    if (newFactories.isEmpty()) return;\n    for (int i = 0; i < urps.size(); i++) {\n      if (klas.isInstance(urps.get(i))) {\n        idx = i;\n        if (klas == DistributedUpdateProcessorFactory.class) {\n          if (i > 0 && urps.get(i - 1) instanceof LogUpdateProcessorFactory) {\n            idx = i - 1;\n          }\n        }\n        break;\n      }\n    }\n    for (int i = newFactories.size() - 1; 0 <= i; i--) urps.add(idx, newFactories.get(i));\n  }\n\n","sourceOld":"  private static void insertBefore(LinkedList<UpdateRequestProcessorFactory> urps, List<UpdateRequestProcessorFactory> newFactories, Class klas, int idx) {\n    if (newFactories.isEmpty()) return;\n    for (int i = 0; i < urps.size(); i++) {\n      if (klas.isInstance(urps.get(i))) {\n        idx = i;\n        if (klas == DistributedUpdateProcessorFactory.class) {\n          if (i > 0 && urps.get(i - 1) instanceof LogUpdateProcessorFactory) {\n            idx = i - 1;\n          }\n        }\n        break;\n      }\n    }\n    for (int i = newFactories.size() - 1; 0 <= i; i--) urps.add(idx, newFactories.get(i));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}