{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    AtomicReaderContext leaves[] = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves == null || leaves.length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","sourceOld":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    AtomicReaderContext leaves[] = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves == null || leaves.length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    List<AtomicReaderContext> leaves = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves.size() == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","sourceOld":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    AtomicReaderContext leaves[] = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves == null || leaves.length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves.size() == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","sourceOld":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    List<AtomicReaderContext> leaves = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves.size() == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves.size() == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","sourceOld":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves.size() == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dfca18b7bfce32a543487fd4b0c11595177e908","date":1435655762,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":null,"sourceOld":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n    Assume.assumeTrue(leaves.size() == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4dfca18b7bfce32a543487fd4b0c11595177e908":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4dfca18b7bfce32a543487fd4b0c11595177e908"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["4dfca18b7bfce32a543487fd4b0c11595177e908"],"4dfca18b7bfce32a543487fd4b0c11595177e908":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}