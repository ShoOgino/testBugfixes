{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","commits":[{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,ZkNodeProps,List[String],List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n    boolean usePolicyFramework = CloudUtil.usePolicyFramework(docCollection, cloudManager);\n\n    int numSlices = shardNames.size();\n    int maxShardsPerNode = checkMaxShardsPerNode(message, usePolicyFramework);\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            ZkNodeProps message,\n                                                            List<String> nodeList, List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    String policy = message.getStr(Policy.POLICY);\n    boolean usePolicyFramework = !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty() || policy != null;\n\n    Integer numSlices = shardNames.size();\n    int maxShardsPerNode = checkMaxShardsPerNode(message, usePolicyFramework);\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    nodeList.addAll(Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM));\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      replicaPositions = Assign.identifyNodes(cloudManager\n          , clusterState, nodeList, collectionName, message, shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n    int maxShardsPerNode = message.getInt(MAX_SHARDS_PER_NODE, 1);\n    if (maxShardsPerNode == -1) maxShardsPerNode = Integer.MAX_VALUE;\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n    boolean usePolicyFramework = CloudUtil.usePolicyFramework(docCollection, cloudManager);\n\n    int numSlices = shardNames.size();\n    int maxShardsPerNode = checkMaxShardsPerNode(message, usePolicyFramework);\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ccfa992b91fcebaecaa804a2bffd48542ef2e939","date":1579772993,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n    int maxShardsPerNode = message.getInt(MAX_SHARDS_PER_NODE, 1);\n    if (maxShardsPerNode == -1) maxShardsPerNode = Integer.MAX_VALUE;\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new Assign.AssignmentException(\"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n    int maxShardsPerNode = message.getInt(MAX_SHARDS_PER_NODE, 1);\n    if (maxShardsPerNode == -1) maxShardsPerNode = Integer.MAX_VALUE;\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n    int maxShardsPerNode = message.getInt(MAX_SHARDS_PER_NODE, 1);\n    if (maxShardsPerNode == -1) maxShardsPerNode = Integer.MAX_VALUE;\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new Assign.AssignmentException(\"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n    int maxShardsPerNode = message.getInt(MAX_SHARDS_PER_NODE, 1);\n    if (maxShardsPerNode == -1) maxShardsPerNode = Integer.MAX_VALUE;\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection (\"+collectionName+\") without cores.\");\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of \"\n            + totalNumReplicas\n            + \" on collection \"\n            + collectionName\n            + \" is higher than the number of Solr instances currently live or live and part of your \" + OverseerCollectionMessageHandler.CREATE_NODE_SET + \"(\"\n            + nodeList.size()\n            + \"). It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new Assign.AssignmentException(\"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n    int maxShardsPerNode = message.getInt(MAX_SHARDS_PER_NODE, 1);\n    if (maxShardsPerNode == -1) maxShardsPerNode = Integer.MAX_VALUE;\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      int maxShardsAllowedToCreate = maxShardsPerNode == Integer.MAX_VALUE ?\n          Integer.MAX_VALUE :\n          maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * totalNumReplicas;\n      if (maxShardsAllowedToCreate < requestedShardsToCreate) {\n        throw new Assign.AssignmentException(\"Cannot create collection \" + collectionName + \". Value of \"\n            + MAX_SHARDS_PER_NODE + \" is \" + maxShardsPerNode\n            + \", and the number of nodes currently live or live and part of your \"+OverseerCollectionMessageHandler.CREATE_NODE_SET+\" is \" + nodeList.size()\n            + \". This allows a maximum of \" + maxShardsAllowedToCreate\n            + \" to be created. Value of \" + OverseerCollectionMessageHandler.NUM_SLICES + \" is \" + numSlices\n            + \", value of \" + NRT_REPLICAS + \" is \" + numNrtReplicas\n            + \", value of \" + TLOG_REPLICAS + \" is \" + numTlogReplicas\n            + \" and value of \" + PULL_REPLICAS + \" is \" + numPullReplicas\n            + \". This requires \" + requestedShardsToCreate\n            + \" shards to be created (higher than the allowed number)\");\n      }\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#buildReplicaPositions(SolrCloudManager,ClusterState,DocCollection,ZkNodeProps,List[String],AtomicReference[PolicyHelper.SessionWrapper]).mjava","sourceNew":null,"sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            DocCollection docCollection,\n                                                            ZkNodeProps message,\n                                                            List<String> shardNames,\n                                                            AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException, Assign.AssignmentException {\n    final String collectionName = message.getStr(NAME);\n    // look at the replication factor and see if it matches reality\n    // if it does not, find best nodes to create more cores\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, 0);\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, numTlogReplicas>0?0:1));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, 0);\n\n    int numSlices = shardNames.size();\n\n    // we need to look at every node and see how many cores it serves\n    // add our new cores to existing nodes serving the least number of cores\n    // but (for now) require that each core goes on a distinct node.\n\n    List<ReplicaPosition> replicaPositions;\n    List<String> nodeList = Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM);\n    if (nodeList.isEmpty()) {\n      log.warn(\"It is unusual to create a collection ({}) without cores.\", collectionName);\n\n      replicaPositions = new ArrayList<>();\n    } else {\n      int totalNumReplicas = numNrtReplicas + numTlogReplicas + numPullReplicas;\n      if (totalNumReplicas > nodeList.size()) {\n        log.warn(\"Specified number of replicas of {} on collection {} is higher than the number of Solr instances currently live or live and part of your {}({}). {}\"\n            , totalNumReplicas\n            , collectionName\n            , OverseerCollectionMessageHandler.CREATE_NODE_SET\n            , nodeList.size()\n            , \"It's unusual to run two replica of the same slice on the same Solr-instance.\");\n      }\n\n      Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()\n          .forCollection(collectionName)\n          .forShard(shardNames)\n          .assignNrtReplicas(numNrtReplicas)\n          .assignTlogReplicas(numTlogReplicas)\n          .assignPullReplicas(numPullReplicas)\n          .onNodes(nodeList)\n          .build();\n      Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);\n      Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(clusterState, docCollection);\n      replicaPositions = assignStrategy.assign(cloudManager, assignRequest);\n      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n    }\n    return replicaPositions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"4abf821a41a2fdca2a1dea148999931d22e20529":["ccfa992b91fcebaecaa804a2bffd48542ef2e939"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"ccfa992b91fcebaecaa804a2bffd48542ef2e939":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["ccfa992b91fcebaecaa804a2bffd48542ef2e939"],"4abf821a41a2fdca2a1dea148999931d22e20529":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"ccfa992b91fcebaecaa804a2bffd48542ef2e939":["4abf821a41a2fdca2a1dea148999931d22e20529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}