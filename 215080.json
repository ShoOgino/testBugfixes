{"path":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/AlphaNumericComparatorTest#testBasic().mjava","commits":[{"id":"42d384b06aa87eae925b668b65f3246154f0b0fa","date":1386181725,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/AlphaNumericComparatorTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasic() {\n    Comparator c = new AlphaNumericComparator();\n    assertTrue(c.compare(\"a\", \"b\") < 0);\n    assertTrue(c.compare(\"shard1\", \"shard1\") == 0);\n    //assertTrue(c.compare(\"shard01\", \"shard1\") == 0);\n    assertTrue(c.compare(\"shard10\", \"shard10\") == 0);\n    assertTrue(c.compare(\"shard1\", \"shard2\") < 0);\n    assertTrue(c.compare(\"shard9\", \"shard10\") < 0);\n    assertTrue(c.compare(\"shard09\", \"shard10\") < 0);\n    assertTrue(c.compare(\"shard019\", \"shard10\") > 0);\n    assertTrue(c.compare(\"shard10\", \"shard11\") < 0);\n    assertTrue(c.compare(\"shard10z\", \"shard10z\") == 0);\n    assertTrue(c.compare(\"shard10z\", \"shard11z\") < 0);\n    assertTrue(c.compare(\"shard10a\", \"shard10z\") < 0);\n    assertTrue(c.compare(\"shard10z\", \"shard10a\") > 0);\n    assertTrue(c.compare(\"shard1z\", \"shard1z\") == 0);\n    assertTrue(c.compare(\"shard2\", \"shard1\") > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/AlphaNumericComparatorTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasic() {\n    Comparator c = new AlphaNumericComparator();\n    assertTrue(c.compare(\"a\", \"b\") < 0);\n    assertTrue(c.compare(\"shard1\", \"shard1\") == 0);\n    //assertTrue(c.compare(\"shard01\", \"shard1\") == 0);\n    assertTrue(c.compare(\"shard10\", \"shard10\") == 0);\n    assertTrue(c.compare(\"shard1\", \"shard2\") < 0);\n    assertTrue(c.compare(\"shard9\", \"shard10\") < 0);\n    assertTrue(c.compare(\"shard09\", \"shard10\") < 0);\n    assertTrue(c.compare(\"shard019\", \"shard10\") > 0);\n    assertTrue(c.compare(\"shard10\", \"shard11\") < 0);\n    assertTrue(c.compare(\"shard10z\", \"shard10z\") == 0);\n    assertTrue(c.compare(\"shard10z\", \"shard11z\") < 0);\n    assertTrue(c.compare(\"shard10a\", \"shard10z\") < 0);\n    assertTrue(c.compare(\"shard10z\", \"shard10a\") > 0);\n    assertTrue(c.compare(\"shard1z\", \"shard1z\") == 0);\n    assertTrue(c.compare(\"shard2\", \"shard1\") > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/AlphaNumericComparatorTest#testBasic().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testBasic() {\n    Comparator c = new AlphaNumericComparator();\n    assertTrue(c.compare(\"a\", \"b\") < 0);\n    assertTrue(c.compare(\"shard1\", \"shard1\") == 0);\n    //assertTrue(c.compare(\"shard01\", \"shard1\") == 0);\n    assertTrue(c.compare(\"shard10\", \"shard10\") == 0);\n    assertTrue(c.compare(\"shard1\", \"shard2\") < 0);\n    assertTrue(c.compare(\"shard9\", \"shard10\") < 0);\n    assertTrue(c.compare(\"shard09\", \"shard10\") < 0);\n    assertTrue(c.compare(\"shard019\", \"shard10\") > 0);\n    assertTrue(c.compare(\"shard10\", \"shard11\") < 0);\n    assertTrue(c.compare(\"shard10z\", \"shard10z\") == 0);\n    assertTrue(c.compare(\"shard10z\", \"shard11z\") < 0);\n    assertTrue(c.compare(\"shard10a\", \"shard10z\") < 0);\n    assertTrue(c.compare(\"shard10z\", \"shard10a\") > 0);\n    assertTrue(c.compare(\"shard1z\", \"shard1z\") == 0);\n    assertTrue(c.compare(\"shard2\", \"shard1\") > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/AlphaNumericComparatorTest#testBasic().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testBasic() {\n    Comparator c = new AlphaNumericComparator();\n    assertTrue(c.compare(\"a\", \"b\") < 0);\n    assertTrue(c.compare(\"shard1\", \"shard1\") == 0);\n    //assertTrue(c.compare(\"shard01\", \"shard1\") == 0);\n    assertTrue(c.compare(\"shard10\", \"shard10\") == 0);\n    assertTrue(c.compare(\"shard1\", \"shard2\") < 0);\n    assertTrue(c.compare(\"shard9\", \"shard10\") < 0);\n    assertTrue(c.compare(\"shard09\", \"shard10\") < 0);\n    assertTrue(c.compare(\"shard019\", \"shard10\") > 0);\n    assertTrue(c.compare(\"shard10\", \"shard11\") < 0);\n    assertTrue(c.compare(\"shard10z\", \"shard10z\") == 0);\n    assertTrue(c.compare(\"shard10z\", \"shard11z\") < 0);\n    assertTrue(c.compare(\"shard10a\", \"shard10z\") < 0);\n    assertTrue(c.compare(\"shard10z\", \"shard10a\") > 0);\n    assertTrue(c.compare(\"shard1z\", \"shard1z\") == 0);\n    assertTrue(c.compare(\"shard2\", \"shard1\") > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12109b652e9210b8d58fca47f6c4a725d058a58e":["42d384b06aa87eae925b668b65f3246154f0b0fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42d384b06aa87eae925b668b65f3246154f0b0fa"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["42d384b06aa87eae925b668b65f3246154f0b0fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"],"42d384b06aa87eae925b668b65f3246154f0b0fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","42d384b06aa87eae925b668b65f3246154f0b0fa"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"42d384b06aa87eae925b668b65f3246154f0b0fa":["12109b652e9210b8d58fca47f6c4a725d058a58e","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}