{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#done(boolean).mjava","commits":[{"id":"535df84251be5af3be84d750beba0021aff9132d","date":1434649368,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#done(boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#donePoints(boolean).mjava","sourceNew":"  /**\n   * Finish the polygon, by connecting the last added point with the starting point.\n   */\n  public void done(final boolean isInternalReturnEdge) {\n    if (isDone)\n      throw new IllegalStateException(\"Can't call done() more than once\");\n    // If fewer than 3 points, can't do it.\n    if (points.size() < 3)\n      throw new IllegalArgumentException(\"Polygon needs at least three points.\");\n\n    if (isInternalReturnEdge)\n      isInternalEdges.set(points.size() - 1);\n\n    isDone = true;\n    \n    // Time to construct the planes.  If the polygon is truly convex, then any adjacent point\n    // to a segment can provide an interior measurement.\n    edges = new SidedPlane[points.size()];\n    notableEdgePoints = new GeoPoint[points.size()][];\n\n    for (int i = 0; i < points.size(); i++) {\n      final GeoPoint start = points.get(i);\n      final GeoPoint end = points.get(legalIndex(i + 1));\n      final double distance = start.arcDistance(end);\n      if (distance > fullDistance)\n        fullDistance = distance;\n      final GeoPoint check = points.get(legalIndex(i + 2));\n      final SidedPlane sp = new SidedPlane(check, start, end);\n      //System.out.println(\"Created edge \"+sp+\" using start=\"+start+\" end=\"+end+\" check=\"+check);\n      edges[i] = sp;\n      notableEdgePoints[i] = new GeoPoint[]{start, end};\n    }\n    createCenterPoint();\n  }\n\n","sourceOld":"  /**\n   * Finish the polygon, by connecting the last added point with the starting point.\n   */\n  public void donePoints(final boolean isInternalReturnEdge) {\n    // If fewer than 3 points, can't do it.\n    if (points.size() < 3)\n      throw new IllegalArgumentException(\"Polygon needs at least three points.\");\n    // Time to construct the planes.  If the polygon is truly convex, then any adjacent point\n    // to a segment can provide an interior measurement.\n    edges = new SidedPlane[points.size()];\n    notableEdgePoints = new GeoPoint[points.size()][];\n    internalEdges = new boolean[points.size()];\n    for (int i = 0; i < points.size(); i++) {\n      final GeoPoint start = points.get(i);\n      final boolean isInternalEdge = (isInternalEdges != null ? (i == isInternalEdges.size() ? isInternalReturnEdge : isInternalEdges.get(i)) : false);\n      final GeoPoint end = points.get(legalIndex(i + 1));\n      final double distance = start.arcDistance(end);\n      if (distance > fullDistance)\n        fullDistance = distance;\n      final GeoPoint check = points.get(legalIndex(i + 2));\n      final SidedPlane sp = new SidedPlane(check, start, end);\n      //System.out.println(\"Created edge \"+sp+\" using start=\"+start+\" end=\"+end+\" check=\"+check);\n      edges[i] = sp;\n      notableEdgePoints[i] = new GeoPoint[]{start, end};\n      internalEdges[i] = isInternalEdge;\n    }\n    createCenterPoint();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoConvexPolygon#done(boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#done(boolean).mjava","sourceNew":"  /**\n   * Finish the polygon, by connecting the last added point with the starting point.\n   */\n  public void done(final boolean isInternalReturnEdge) {\n    if (isDone)\n      throw new IllegalStateException(\"Can't call done() more than once\");\n    // If fewer than 3 points, can't do it.\n    if (points.size() < 3)\n      throw new IllegalArgumentException(\"Polygon needs at least three points.\");\n\n    if (isInternalReturnEdge)\n      isInternalEdges.set(points.size() - 1);\n\n    isDone = true;\n    \n    // Time to construct the planes.  If the polygon is truly convex, then any adjacent point\n    // to a segment can provide an interior measurement.\n    edges = new SidedPlane[points.size()];\n    notableEdgePoints = new GeoPoint[points.size()][];\n\n    for (int i = 0; i < points.size(); i++) {\n      final GeoPoint start = points.get(i);\n      final GeoPoint end = points.get(legalIndex(i + 1));\n      final double distance = start.arcDistance(end);\n      if (distance > fullDistance)\n        fullDistance = distance;\n      final GeoPoint check = points.get(legalIndex(i + 2));\n      final SidedPlane sp = new SidedPlane(check, start, end);\n      //System.out.println(\"Created edge \"+sp+\" using start=\"+start+\" end=\"+end+\" check=\"+check);\n      edges[i] = sp;\n      notableEdgePoints[i] = new GeoPoint[]{start, end};\n    }\n    createCenterPoint();\n  }\n\n","sourceOld":"  /**\n   * Finish the polygon, by connecting the last added point with the starting point.\n   */\n  public void done(final boolean isInternalReturnEdge) {\n    if (isDone)\n      throw new IllegalStateException(\"Can't call done() more than once\");\n    // If fewer than 3 points, can't do it.\n    if (points.size() < 3)\n      throw new IllegalArgumentException(\"Polygon needs at least three points.\");\n\n    if (isInternalReturnEdge)\n      isInternalEdges.set(points.size() - 1);\n\n    isDone = true;\n    \n    // Time to construct the planes.  If the polygon is truly convex, then any adjacent point\n    // to a segment can provide an interior measurement.\n    edges = new SidedPlane[points.size()];\n    notableEdgePoints = new GeoPoint[points.size()][];\n\n    for (int i = 0; i < points.size(); i++) {\n      final GeoPoint start = points.get(i);\n      final GeoPoint end = points.get(legalIndex(i + 1));\n      final double distance = start.arcDistance(end);\n      if (distance > fullDistance)\n        fullDistance = distance;\n      final GeoPoint check = points.get(legalIndex(i + 2));\n      final SidedPlane sp = new SidedPlane(check, start, end);\n      //System.out.println(\"Created edge \"+sp+\" using start=\"+start+\" end=\"+end+\" check=\"+check);\n      edges[i] = sp;\n      notableEdgePoints[i] = new GeoPoint[]{start, end};\n    }\n    createCenterPoint();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["535df84251be5af3be84d750beba0021aff9132d"],"535df84251be5af3be84d750beba0021aff9132d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["535df84251be5af3be84d750beba0021aff9132d"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"535df84251be5af3be84d750beba0021aff9132d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}