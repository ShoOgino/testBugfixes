{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.NumericStatsValues#addTypeSpecificStats(NamedList[Object]).mjava","commits":[{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":0,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory.NumericStatsValues#addTypeSpecificStats(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Adds sum, sumOfSquares, mean, stddev, and percentiles to the given\n     * NamedList\n     *\n     * @param res\n     *          NamedList to add the type specific statistics too\n     */\n    @Override\n    protected void addTypeSpecificStats(NamedList<Object> res) {\n      if (statsField.includeInResponse(Stat.sum)) {\n        res.add(\"sum\", sum);\n      }\n      if (statsField.includeInResponse(Stat.sumOfSquares)) {\n        res.add(\"sumOfSquares\", sumOfSquares);\n      }\n      if (statsField.includeInResponse(Stat.mean)) {\n        res.add(\"mean\", sum / count);\n      }\n      if (statsField.includeInResponse(Stat.stddev)) {\n        res.add(\"stddev\", getStandardDeviation());\n      }\n      if (statsField.includeInResponse(Stat.percentiles)) {\n        if (statsField.getIsShard()) {\n          // as of current t-digest version, smallByteSize() internally does a full conversion in\n          // order to determine what the size is (can't be precomputed?) .. so rather then\n          // serialize to a ByteBuffer twice, allocate the max possible size buffer,\n          // serialize once, and then copy only the byte[] subset that we need, and free up the buffer\n          ByteBuffer buf = ByteBuffer.allocate(tdigest.byteSize()); // upper bound\n          tdigest.asSmallBytes(buf);\n          res.add(\"percentiles\", Arrays.copyOf(buf.array(), buf.position()) );\n        } else {\n          NamedList<Object> percentileNameList = new NamedList<Object>();\n          for (Double percentile : statsField.getPercentilesList()) {\n            // Empty document set case\n            if (tdigest.size() == 0) {\n              percentileNameList.add(percentile.toString(), null);\n            } else {\n              Double cutoff = tdigest.quantile(percentile / 100);\n              percentileNameList.add(percentile.toString(), cutoff);\n            }\n          }\n          res.add(\"percentiles\", percentileNameList);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"]},"commit2Childs":{"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}