{"path":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","commits":[{"id":"c813a2b1db6d91d83baed4eab53ecc22eb857a82","date":1340957276,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","pathOld":"/dev/null","sourceNew":"    @Repeat(iterations = 100)\n    public void testFailSometimes() {\n      assertFalse(random().nextInt(5) == 0);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["95cbd7fffff985b69f6445ba2782a834d50aaba7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","pathOld":"/dev/null","sourceNew":"    @Repeat(iterations = 100)\n    public void testFailSometimes() {\n      assertFalse(random().nextInt(5) == 0);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403","date":1345705030,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","sourceNew":"    @Repeat(iterations = 500)\n    public void testFailSometimes() {\n      assertFalse(random().nextInt(5) == 0);\n    }\n\n","sourceOld":"    @Repeat(iterations = 100)\n    public void testFailSometimes() {\n      assertFalse(random().nextInt(5) == 0);\n    }\n\n","bugFix":null,"bugIntro":["95cbd7fffff985b69f6445ba2782a834d50aaba7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","sourceNew":"    @Repeat(iterations = 500)\n    public void testFailSometimes() {\n      assertFalse(random().nextInt(5) == 0);\n    }\n\n","sourceOld":"    @Repeat(iterations = 100)\n    public void testFailSometimes() {\n      assertFalse(random().nextInt(5) == 0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95cbd7fffff985b69f6445ba2782a834d50aaba7","date":1355342631,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","sourceNew":"    @Repeat(iterations = TOTAL_ITERS)\n    public void testFailSometimes() {\n      numIters++;\n      boolean fail = random().nextInt(5) == 0;\n      if (fail) numFails++;\n      // some seeds are really lucky ... so cheat.\n      if (numFails < DESIRED_FAILURES && \n          DESIRED_FAILURES <= TOTAL_ITERS - numIters) {\n        fail = true;\n      }\n      assertFalse(fail);\n    }\n\n","sourceOld":"    @Repeat(iterations = 500)\n    public void testFailSometimes() {\n      assertFalse(random().nextInt(5) == 0);\n    }\n\n","bugFix":["c813a2b1db6d91d83baed4eab53ecc22eb857a82","1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","sourceNew":"    @Repeat(iterations = TOTAL_ITERS)\n    public void testFailSometimes() {\n      numIters++;\n      boolean fail = random().nextInt(5) == 0;\n      if (fail) numFails++;\n      // some seeds are really lucky ... so cheat.\n      if (numFails < DESIRED_FAILURES && \n          DESIRED_FAILURES <= TOTAL_ITERS - numIters) {\n        fail = true;\n      }\n      assertFalse(fail);\n    }\n\n","sourceOld":"    @Repeat(iterations = 500)\n    public void testFailSometimes() {\n      assertFalse(random().nextInt(5) == 0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule.Nested#testFailSometimes().mjava","sourceNew":"    @Repeat(iterations = TOTAL_ITERS)\n    public void testFailSometimes() {\n      numIters++;\n      boolean fail = random().nextInt(5) == 0;\n      if (fail) numFails++;\n      // some seeds are really lucky ... so cheat.\n      if (numFails < DESIRED_FAILURES && \n          DESIRED_FAILURES <= TOTAL_ITERS - numIters) {\n        fail = true;\n      }\n      assertFalse(fail);\n    }\n\n","sourceOld":"    @Repeat(iterations = TOTAL_ITERS)\n    public void testFailSometimes() {\n      numIters++;\n      boolean fail = random().nextInt(5) == 0;\n      if (fail) numFails++;\n      // some seeds are really lucky ... so cheat.\n      if (numFails < DESIRED_FAILURES && \n          DESIRED_FAILURES <= TOTAL_ITERS - numIters) {\n        fail = true;\n      }\n      assertFalse(fail);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403":["c813a2b1db6d91d83baed4eab53ecc22eb857a82"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403","95cbd7fffff985b69f6445ba2782a834d50aaba7"],"001b25b42373b22a52f399dbf072f1224632e8e6":["c813a2b1db6d91d83baed4eab53ecc22eb857a82","1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c813a2b1db6d91d83baed4eab53ecc22eb857a82"],"95cbd7fffff985b69f6445ba2782a834d50aaba7":["1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["95cbd7fffff985b69f6445ba2782a834d50aaba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"c813a2b1db6d91d83baed4eab53ecc22eb857a82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","001b25b42373b22a52f399dbf072f1224632e8e6","95cbd7fffff985b69f6445ba2782a834d50aaba7"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"001b25b42373b22a52f399dbf072f1224632e8e6":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"95cbd7fffff985b69f6445ba2782a834d50aaba7":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c813a2b1db6d91d83baed4eab53ecc22eb857a82"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c813a2b1db6d91d83baed4eab53ecc22eb857a82":["1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403","001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}