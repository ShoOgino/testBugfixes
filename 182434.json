{"path":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector#indexesOf(String[],int,int).mjava","commits":[{"id":"e7a005111928c661ab5d236ed6a3a079b438d2cf","date":1205411670,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector#indexesOf(String[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  public int[] indexesOf(String[] termNumbers, int start, int len) {\n    // TODO: there must be a more efficient way of doing this.\n    //       At least, we could advance the lower bound of the terms array\n    //       as we find valid indices. Also, it might be possible to leverage\n    //       this even more by starting in the middle of the termNumbers array\n    //       and thus dividing the terms array maybe in half with each found index.\n    int res[] = new int[len];\n\n    for (int i = 0; i < len; i++) {\n      res[i] = indexOf(termNumbers[start + i]);\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector#indexesOf(String[],int,int).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedTermFreqVector#indexesOf(String[],int,int).mjava","sourceNew":"  public int[] indexesOf(String[] termNumbers, int start, int len) {\n    // TODO: there must be a more efficient way of doing this.\n    //       At least, we could advance the lower bound of the terms array\n    //       as we find valid indices. Also, it might be possible to leverage\n    //       this even more by starting in the middle of the termNumbers array\n    //       and thus dividing the terms array maybe in half with each found index.\n    int res[] = new int[len];\n\n    for (int i = 0; i < len; i++) {\n      res[i] = indexOf(termNumbers[start + i]);\n    }\n    return res;\n  }\n\n","sourceOld":"  public int[] indexesOf(String[] termNumbers, int start, int len) {\n    // TODO: there must be a more efficient way of doing this.\n    //       At least, we could advance the lower bound of the terms array\n    //       as we find valid indices. Also, it might be possible to leverage\n    //       this even more by starting in the middle of the termNumbers array\n    //       and thus dividing the terms array maybe in half with each found index.\n    int res[] = new int[len];\n\n    for (int i = 0; i < len; i++) {\n      res[i] = indexOf(termNumbers[start + i]);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e7a005111928c661ab5d236ed6a3a079b438d2cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e7a005111928c661ab5d236ed6a3a079b438d2cf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"e7a005111928c661ab5d236ed6a3a079b438d2cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}