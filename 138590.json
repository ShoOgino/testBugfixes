{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","commits":[{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n      public void process(WatchedEvent event) {\n        try {\n\n          synchronized (confDirectoryListeners) {\n            // if this is not among directories to be watched then don't set the watcher anymore\n            if( !confDirectoryListeners.containsKey(zkDir)) {\n              log.info(\"Watcher on {} is removed \", zkDir);\n              return;\n            }\n            final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n            if (listeners != null && !listeners.isEmpty()) {\n              new Thread() {\n                //run these in a separate thread because this can be long running\n                public void run() {\n                  for (final Runnable listener : listeners)\n                    try {\n                      listener.run();\n                    } catch (Exception e) {\n                      log.warn(\"listener throws error\", e);\n                    }\n                }\n              }.start();\n            }\n\n          }\n\n        } finally {\n          if (Event.EventType.None.equals(event.getType())) {\n            log.info(\"A node got unwatched for {}\", zkDir);\n            return;\n          } else {\n            setConfWatcher(zkDir,this);\n          }\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","sourceNew":"    @Override\n      public void process(WatchedEvent event) {\n        try {\n\n          synchronized (confDirectoryListeners) {\n            // if this is not among directories to be watched then don't set the watcher anymore\n            if( !confDirectoryListeners.containsKey(zkDir)) {\n              log.info(\"Watcher on {} is removed \", zkDir);\n              return;\n            }\n            Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n            if (listeners != null && !listeners.isEmpty()) {\n              final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n              new Thread() {\n                //run these in a separate thread because this can be long running\n                public void run() {\n                  for (final Runnable listener : listenersCopy) {\n                    try {\n                      listener.run();\n                    } catch (Exception e) {\n                      log.warn(\"listener throws error\", e);\n                    }\n                  }\n                }\n              }.start();\n            }\n\n          }\n\n        } finally {\n          if (Event.EventType.None.equals(event.getType())) {\n            log.info(\"A node got unwatched for {}\", zkDir);\n            return;\n          } else {\n            setConfWatcher(zkDir,this);\n          }\n        }\n      }\n\n","sourceOld":"    @Override\n      public void process(WatchedEvent event) {\n        try {\n\n          synchronized (confDirectoryListeners) {\n            // if this is not among directories to be watched then don't set the watcher anymore\n            if( !confDirectoryListeners.containsKey(zkDir)) {\n              log.info(\"Watcher on {} is removed \", zkDir);\n              return;\n            }\n            final Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n            if (listeners != null && !listeners.isEmpty()) {\n              new Thread() {\n                //run these in a separate thread because this can be long running\n                public void run() {\n                  for (final Runnable listener : listeners)\n                    try {\n                      listener.run();\n                    } catch (Exception e) {\n                      log.warn(\"listener throws error\", e);\n                    }\n                }\n              }.start();\n            }\n\n          }\n\n        } finally {\n          if (Event.EventType.None.equals(event.getType())) {\n            log.info(\"A node got unwatched for {}\", zkDir);\n            return;\n          } else {\n            setConfWatcher(zkDir,this);\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98798900014e18f407b1910aa34db4d3ae76ecc6","date":1427307584,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","sourceNew":"    @Override\n      public void process(WatchedEvent event) {\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n        } finally {\n          if (Event.EventType.None.equals(event.getType())) {\n            log.info(\"A node got unwatched for {}\", zkDir);\n          } else {\n            if (resetWatcher) setConfWatcher(zkDir, this, stat);\n            else log.info(\"A node got unwatched for {}\", zkDir);\n          }\n        }\n      }\n\n","sourceOld":"    @Override\n      public void process(WatchedEvent event) {\n        try {\n\n          synchronized (confDirectoryListeners) {\n            // if this is not among directories to be watched then don't set the watcher anymore\n            if( !confDirectoryListeners.containsKey(zkDir)) {\n              log.info(\"Watcher on {} is removed \", zkDir);\n              return;\n            }\n            Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n            if (listeners != null && !listeners.isEmpty()) {\n              final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n              new Thread() {\n                //run these in a separate thread because this can be long running\n                public void run() {\n                  for (final Runnable listener : listenersCopy) {\n                    try {\n                      listener.run();\n                    } catch (Exception e) {\n                      log.warn(\"listener throws error\", e);\n                    }\n                  }\n                }\n              }.start();\n            }\n\n          }\n\n        } finally {\n          if (Event.EventType.None.equals(event.getType())) {\n            log.info(\"A node got unwatched for {}\", zkDir);\n            return;\n          } else {\n            setConfWatcher(zkDir,this);\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n      } finally {\n        if (Event.EventType.None.equals(event.getType())) {\n          log.info(\"A node got unwatched for {}\", zkDir);\n        } else {\n          if (resetWatcher) setConfWatcher(zkDir, this, stat);\n          else log.info(\"A node got unwatched for {}\", zkDir);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n      public void process(WatchedEvent event) {\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n        } finally {\n          if (Event.EventType.None.equals(event.getType())) {\n            log.info(\"A node got unwatched for {}\", zkDir);\n          } else {\n            if (resetWatcher) setConfWatcher(zkDir, this, stat);\n            else log.info(\"A node got unwatched for {}\", zkDir);\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n      } finally {\n        if (Event.EventType.None.equals(event.getType())) {\n          log.info(\"A node got unwatched for {}\", zkDir);\n        } else {\n          if (resetWatcher) setConfWatcher(zkDir, this, stat);\n          else log.info(\"A node got unwatched for {}\", zkDir);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n      public void process(WatchedEvent event) {\n        try {\n\n          synchronized (confDirectoryListeners) {\n            // if this is not among directories to be watched then don't set the watcher anymore\n            if( !confDirectoryListeners.containsKey(zkDir)) {\n              log.info(\"Watcher on {} is removed \", zkDir);\n              return;\n            }\n            Set<Runnable> listeners = confDirectoryListeners.get(zkDir);\n            if (listeners != null && !listeners.isEmpty()) {\n              final Set<Runnable> listenersCopy = new HashSet<>(listeners);\n              new Thread() {\n                //run these in a separate thread because this can be long running\n                public void run() {\n                  for (final Runnable listener : listenersCopy) {\n                    try {\n                      listener.run();\n                    } catch (Exception e) {\n                      log.warn(\"listener throws error\", e);\n                    }\n                  }\n                }\n              }.start();\n            }\n\n          }\n\n        } finally {\n          if (Event.EventType.None.equals(event.getType())) {\n            log.info(\"A node got unwatched for {}\", zkDir);\n            return;\n          } else {\n            setConfWatcher(zkDir,this);\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86421ae8db0eb4e3922d59848b7733d13e4d04b0","date":1438160188,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      if (event.getState() == Event.KeeperState.Disconnected || event.getState() == Event.KeeperState.Expired)  {\n        return;\n      }\n\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n      } finally {\n        if (Event.EventType.None.equals(event.getType())) {\n          log.info(\"A node got unwatched for {}\", zkDir);\n        } else {\n          if (resetWatcher) setConfWatcher(zkDir, this, stat);\n          else log.info(\"A node got unwatched for {}\", zkDir);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n      } finally {\n        if (Event.EventType.None.equals(event.getType())) {\n          log.info(\"A node got unwatched for {}\", zkDir);\n        } else {\n          if (resetWatcher) setConfWatcher(zkDir, this, stat);\n          else log.info(\"A node got unwatched for {}\", zkDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f616abd7d3345b373ca3f5a49a3351a7a18eb741","date":1455910613,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n      } finally {\n        if (Event.EventType.None.equals(event.getType())) {\n          log.info(\"A node got unwatched for {}\", zkDir);\n        } else {\n          if (resetWatcher) setConfWatcher(zkDir, this, stat);\n          else log.info(\"A node got unwatched for {}\", zkDir);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      if (event.getState() == Event.KeeperState.Disconnected || event.getState() == Event.KeeperState.Expired)  {\n        return;\n      }\n\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n      } finally {\n        if (Event.EventType.None.equals(event.getType())) {\n          log.info(\"A node got unwatched for {}\", zkDir);\n        } else {\n          if (resetWatcher) setConfWatcher(zkDir, this, stat);\n          else log.info(\"A node got unwatched for {}\", zkDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n      } finally {\n        if (Event.EventType.None.equals(event.getType())) {\n          log.debug(\"A node got unwatched for {}\", zkDir);\n        } else {\n          if (resetWatcher) setConfWatcher(zkDir, this, stat);\n          else log.debug(\"A node got unwatched for {}\", zkDir);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n      } finally {\n        if (Event.EventType.None.equals(event.getType())) {\n          log.info(\"A node got unwatched for {}\", zkDir);\n        } else {\n          if (resetWatcher) setConfWatcher(zkDir, this, stat);\n          else log.info(\"A node got unwatched for {}\", zkDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n      } finally {\n        if (Event.EventType.None.equals(event.getType())) {\n          log.debug(\"A node got unwatched for {}\", zkDir);\n        } else {\n          if (resetWatcher) setConfWatcher(zkDir, this, stat);\n          else log.debug(\"A node got unwatched for {}\", zkDir);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n      } finally {\n        if (Event.EventType.None.equals(event.getType())) {\n          log.info(\"A node got unwatched for {}\", zkDir);\n        } else {\n          if (resetWatcher) setConfWatcher(zkDir, this, stat);\n          else log.info(\"A node got unwatched for {}\", zkDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController.WatcherImpl#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n      } finally {\n        if (Event.EventType.None.equals(event.getType())) {\n          log.debug(\"A node got unwatched for {}\", zkDir);\n        } else {\n          if (resetWatcher) setConfWatcher(zkDir, this, stat);\n          else log.debug(\"A node got unwatched for {}\", zkDir);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(event.getType())) {\n        return;\n      }\n\n      Stat stat = null;\n      try {\n        stat = zkClient.exists(zkDir, null, true);\n      } catch (KeeperException e) {\n        //ignore , it is not a big deal\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n      boolean resetWatcher = false;\n      try {\n        resetWatcher = fireEventListeners(zkDir);\n      } finally {\n        if (Event.EventType.None.equals(event.getType())) {\n          log.info(\"A node got unwatched for {}\", zkDir);\n        } else {\n          if (resetWatcher) setConfWatcher(zkDir, this, stat);\n          else log.info(\"A node got unwatched for {}\", zkDir);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"962cd4f5e313777f35da8f521265323e84184929":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","fbcfc050b9f253136eaa5950b57248b2109eac11"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["86421ae8db0eb4e3922d59848b7733d13e4d04b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","962cd4f5e313777f35da8f521265323e84184929"],"86421ae8db0eb4e3922d59848b7733d13e4d04b0":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"98798900014e18f407b1910aa34db4d3ae76ecc6":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["98798900014e18f407b1910aa34db4d3ae76ecc6"]},"commit2Childs":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86421ae8db0eb4e3922d59848b7733d13e4d04b0":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"98798900014e18f407b1910aa34db4d3ae76ecc6":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","98798900014e18f407b1910aa34db4d3ae76ecc6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","86421ae8db0eb4e3922d59848b7733d13e4d04b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}