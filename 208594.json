{"path":"solr/core/src/test/org/apache/solr/update/processor/DistributedUpdateProcessorTest#testShouldBufferUpdateZk().mjava","commits":[{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":1,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/DistributedUpdateProcessorTest#testShouldBufferUpdateZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/DistributedUpdateProcessorTest#testShouldBufferUpdate().mjava","sourceNew":"  @Test\n  public void testShouldBufferUpdateZk() {\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new ModifiableSolrParams());\n    DistributedUpdateProcessor processor = new DistributedUpdateProcessor(\n        req, null, null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n    // applying buffer updates, isReplayOrPeerSync flag doesn't matter\n    assertFalse(processor.shouldBufferUpdate(cmd, false, UpdateLog.State.APPLYING_BUFFERED));\n    assertFalse(processor.shouldBufferUpdate(cmd, true, UpdateLog.State.APPLYING_BUFFERED));\n\n    assertTrue(processor.shouldBufferUpdate(cmd, false, UpdateLog.State.BUFFERING));\n    // this is not an buffer updates and it depend on other updates\n    cmd.prevVersion = 10;\n    assertTrue(processor.shouldBufferUpdate(cmd, false, UpdateLog.State.APPLYING_BUFFERED));\n  }\n\n","sourceOld":"  @Test\n  public void testShouldBufferUpdate() {\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new ModifiableSolrParams());\n    DistributedUpdateProcessor processor = new DistributedUpdateProcessor(\n        req, null, null, null);\n\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n    // applying buffer updates, isReplayOrPeerSync flag doesn't matter\n    assertFalse(processor.shouldBufferUpdate(cmd, false, UpdateLog.State.APPLYING_BUFFERED));\n    assertFalse(processor.shouldBufferUpdate(cmd, true, UpdateLog.State.APPLYING_BUFFERED));\n\n    assertTrue(processor.shouldBufferUpdate(cmd, false, UpdateLog.State.BUFFERING));\n    // this is not an buffer updates and it depend on other updates\n    cmd.prevVersion = 10;\n    assertTrue(processor.shouldBufferUpdate(cmd, false, UpdateLog.State.APPLYING_BUFFERED));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b3824fcbd3256db359391630ae05b3917ab369a","date":1556656304,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/DistributedUpdateProcessorTest#testShouldBufferUpdateZk().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/DistributedUpdateProcessorTest#testShouldBufferUpdateZk().mjava","sourceNew":"  @Test\n  public void testShouldBufferUpdateZk() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new ModifiableSolrParams());\n    try (DistributedUpdateProcessor processor = new DistributedUpdateProcessor(\n        req, null, null, null)) {\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      // applying buffer updates, isReplayOrPeerSync flag doesn't matter\n      assertFalse(processor.shouldBufferUpdate(cmd, false, UpdateLog.State.APPLYING_BUFFERED));\n      assertFalse(processor.shouldBufferUpdate(cmd, true, UpdateLog.State.APPLYING_BUFFERED));\n  \n      assertTrue(processor.shouldBufferUpdate(cmd, false, UpdateLog.State.BUFFERING));\n      // this is not an buffer updates and it depend on other updates\n      cmd.prevVersion = 10;\n      assertTrue(processor.shouldBufferUpdate(cmd, false, UpdateLog.State.APPLYING_BUFFERED));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShouldBufferUpdateZk() {\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), new ModifiableSolrParams());\n    DistributedUpdateProcessor processor = new DistributedUpdateProcessor(\n        req, null, null, null);\n    AddUpdateCommand cmd = new AddUpdateCommand(req);\n    // applying buffer updates, isReplayOrPeerSync flag doesn't matter\n    assertFalse(processor.shouldBufferUpdate(cmd, false, UpdateLog.State.APPLYING_BUFFERED));\n    assertFalse(processor.shouldBufferUpdate(cmd, true, UpdateLog.State.APPLYING_BUFFERED));\n\n    assertTrue(processor.shouldBufferUpdate(cmd, false, UpdateLog.State.BUFFERING));\n    // this is not an buffer updates and it depend on other updates\n    cmd.prevVersion = 10;\n    assertTrue(processor.shouldBufferUpdate(cmd, false, UpdateLog.State.APPLYING_BUFFERED));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b3824fcbd3256db359391630ae05b3917ab369a":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b3824fcbd3256db359391630ae05b3917ab369a"]},"commit2Childs":{"9b3824fcbd3256db359391630ae05b3917ab369a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["9b3824fcbd3256db359391630ae05b3917ab369a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}