{"path":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  public final void writeDocList(String name, DocList ids, Set<String> fields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    if (doIndent) indent();\n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Integer.toString(ids.matches()));\n    writeAttr(\"start\",Integer.toString(ids.offset()));\n    if (includeScore) {\n      writeAttr(\"maxScore\",Float.toString(ids.maxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id);\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a","date":1164667221,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","sourceNew":"  public final void writeDocList(String name, DocList ids, Set<String> fields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    if (doIndent) indent();\n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Integer.toString(ids.matches()));\n    writeAttr(\"start\",Integer.toString(ids.offset()));\n    if (includeScore) {\n      writeAttr(\"maxScore\",Float.toString(ids.maxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","sourceOld":"  public final void writeDocList(String name, DocList ids, Set<String> fields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    if (doIndent) indent();\n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Integer.toString(ids.matches()));\n    writeAttr(\"start\",Integer.toString(ids.offset()));\n    if (includeScore) {\n      writeAttr(\"maxScore\",Float.toString(ids.maxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id);\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb87f7aa1c87656073021ebf4269992ab26f2b51","date":1172518941,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","sourceNew":"  public final void writeDocList(String name, DocList ids, Set<String> fields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    if (doIndent) indent();\n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Integer.toString(ids.matches()));\n    writeAttr(\"start\",Integer.toString(ids.offset()));\n    if (includeScore) {\n      writeAttr(\"maxScore\",Float.toString(ids.maxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    SolrIndexSearcher searcher = request.getSearcher();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","sourceOld":"  public final void writeDocList(String name, DocList ids, Set<String> fields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    if (doIndent) indent();\n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Integer.toString(ids.matches()));\n    writeAttr(\"start\",Integer.toString(ids.offset()));\n    if (includeScore) {\n      writeAttr(\"maxScore\",Float.toString(ids.maxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c451686dba22c9c0e2b950b3d4dc9c1cde081887","date":1199826919,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","sourceNew":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public int getNumFound() {\n        return ids.matches();\n      }\n\n      public int getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","sourceOld":"  public final void writeDocList(String name, DocList ids, Set<String> fields) throws IOException {\n    boolean includeScore=false;\n    if (fields!=null) {\n      includeScore = fields.contains(\"score\");\n      if (fields.size()==0 || (fields.size()==1 && includeScore) || fields.contains(\"*\")) {\n        fields=null;  // null means return all stored fields\n      }\n    }\n\n    int sz=ids.size();\n\n    if (doIndent) indent();\n    writer.write(\"<result\");\n    writeAttr(\"name\",name);\n    writeAttr(\"numFound\",Integer.toString(ids.matches()));\n    writeAttr(\"start\",Integer.toString(ids.offset()));\n    if (includeScore) {\n      writeAttr(\"maxScore\",Float.toString(ids.maxScore()));\n    }\n    if (sz==0) {\n      writer.write(\"/>\");\n      return;\n    } else {\n      writer.write('>');\n    }\n\n    incLevel();\n    SolrIndexSearcher searcher = request.getSearcher();\n    DocIterator iterator = ids.iterator();\n    for (int i=0; i<sz; i++) {\n      int id = iterator.nextDoc();\n      Document doc = searcher.doc(id, fields);\n      writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n    }\n    decLevel();\n\n    if (doIndent) indent();\n    writer.write(\"</result>\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17a4a2e432254ad9a50a564dc8ac204f6a50fffb","date":1199891649,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","sourceNew":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","sourceOld":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public int getNumFound() {\n        return ids.matches();\n      }\n\n      public int getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","sourceNew":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","sourceOld":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1","date":1263263734,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#writeDocList(String,DocList,Set[String]).mjava","sourceNew":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","sourceOld":"  public final void writeDocList(String name, final DocList ids, Set<String> fields) throws IOException \n  {\n    this.writeDocuments( name, new DocumentListInfo() \n    {  \n      public int getCount() {\n        return ids.size();\n      }\n      \n      public Float getMaxScore() {\n        return ids.maxScore();\n      }\n\n      public long getNumFound() {\n        return ids.matches();\n      }\n\n      public long getStart() {\n        return ids.offset();\n      }\n\n      public void writeDocs(boolean includeScore, Set<String> fields) throws IOException {\n        SolrIndexSearcher searcher = request.getSearcher();\n        DocIterator iterator = ids.iterator();\n        int sz = ids.size();\n        includeScore = includeScore && ids.hasScores();\n        for (int i=0; i<sz; i++) {\n          int id = iterator.nextDoc();\n          Document doc = searcher.doc(id, fields);\n          writeDoc(null, doc, fields, (includeScore ? iterator.score() : 0.0f), includeScore);\n        }\n      }\n    }, fields );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"eb87f7aa1c87656073021ebf4269992ab26f2b51":["7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a"],"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"17a4a2e432254ad9a50a564dc8ac204f6a50fffb":["c451686dba22c9c0e2b950b3d4dc9c1cde081887"],"c451686dba22c9c0e2b950b3d4dc9c1cde081887":["eb87f7aa1c87656073021ebf4269992ab26f2b51"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["17a4a2e432254ad9a50a564dc8ac204f6a50fffb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":[],"eb87f7aa1c87656073021ebf4269992ab26f2b51":["c451686dba22c9c0e2b950b3d4dc9c1cde081887"],"7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a":["eb87f7aa1c87656073021ebf4269992ab26f2b51"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["7276fb3ba9d75a3d0099bfd9a0df6b5b067fb12a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17a4a2e432254ad9a50a564dc8ac204f6a50fffb":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"c451686dba22c9c0e2b950b3d4dc9c1cde081887":["17a4a2e432254ad9a50a564dc8ac204f6a50fffb"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}