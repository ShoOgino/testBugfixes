{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#nextPosition().mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (indexHasPos == false || needsPositions == false) {\n        return -1;\n      }\n      assert posPendingCount > 0;\n      \n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1 && payIn != null) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets && needsOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9089237f2fb93105f12a1135e60257f4cf8ed41","date":1562086738,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (indexHasPos == false || needsPositions == false) {\n        return -1;\n      }\n\n      if (isFreqsRead == false) {\n        forUtil.readBlock(docIn, encoded, freqBuffer); // read freqs for this docs block\n        isFreqsRead = true;\n      }\n      while (posDocUpTo < docUpto) { // bring posPendingCount upto the current doc\n        posPendingCount += freqBuffer[docBufferUpto - (docUpto - posDocUpTo)];\n        posDocUpTo++;\n      }\n\n      assert posPendingCount > 0;\n      \n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1 && payIn != null) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freqBuffer[docBufferUpto-1]) {\n        skipPositions();\n        posPendingCount = freqBuffer[docBufferUpto-1];\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets && needsOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (indexHasPos == false || needsPositions == false) {\n        return -1;\n      }\n      assert posPendingCount > 0;\n      \n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1 && payIn != null) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets && needsOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (indexHasPos == false || needsPositions == false) {\n        return -1;\n      }\n\n      if (isFreqsRead == false) {\n        forUtil.readBlock(docIn, encoded, freqBuffer); // read freqs for this docs block\n        isFreqsRead = true;\n      }\n      while (posDocUpTo < docUpto) { // bring posPendingCount upto the current doc\n        posPendingCount += freqBuffer[docBufferUpto - (docUpto - posDocUpTo)];\n        posDocUpTo++;\n      }\n\n      assert posPendingCount > 0;\n      \n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1 && payIn != null) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freqBuffer[docBufferUpto-1]) {\n        skipPositions();\n        posPendingCount = freqBuffer[docBufferUpto-1];\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets && needsOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (indexHasPos == false || needsPositions == false) {\n        return -1;\n      }\n\n      if (isFreqsRead == false) {\n        forUtil.readBlock(docIn, encoded, freqBuffer); // read freqs for this docs block\n        isFreqsRead = true;\n      }\n      while (posDocUpTo < docUpto) { // bring posPendingCount upto the current doc\n        posPendingCount += freqBuffer[docBufferUpto - (docUpto - posDocUpTo)];\n        posDocUpTo++;\n      }\n\n      assert posPendingCount > 0;\n      \n      if (posPendingFP != -1) {\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        if (payPendingFP != -1 && payIn != null) {\n          payIn.seek(payPendingFP);\n          payPendingFP = -1;\n        }\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freqBuffer[docBufferUpto-1]) {\n        skipPositions();\n        posPendingCount = freqBuffer[docBufferUpto-1];\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto];\n\n      if (indexHasPayloads) {\n        payloadLength = payloadLengthBuffer[posBufferUpto];\n        payload.bytes = payloadBytes;\n        payload.offset = payloadByteUpto;\n        payload.length = payloadLength;\n        payloadByteUpto += payloadLength;\n      }\n\n      if (indexHasOffsets && needsOffsets) {\n        startOffset = lastStartOffset + offsetStartDeltaBuffer[posBufferUpto];\n        endOffset = startOffset + offsetLengthBuffer[posBufferUpto];\n        lastStartOffset = startOffset;\n      }\n\n      posBufferUpto++;\n      posPendingCount--;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["622a708571e534680618b3c5e0c28ac539a47776"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}