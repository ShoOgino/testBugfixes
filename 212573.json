{"path":"src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","commits":[{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","pathOld":"src/test/org/apache/solr/util/SolrDocumentTest#testSimple().mjava","sourceNew":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","sourceOld":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebb24ab555aab7c4dd5d2264c06a4f19fb217913","date":1183353562,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","pathOld":"src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","sourceNew":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","sourceOld":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","pathOld":"src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","sourceNew":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","sourceOld":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}