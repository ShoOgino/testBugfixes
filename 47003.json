{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","commits":[{"id":"1a6b799f9d59f607df4b994cd143a0586f9cf896","date":1420614480,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","pathOld":"/dev/null","sourceNew":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap();\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if(reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers =  new LinkedHashMap<>());\n      List<PluginInfo> plugins = PluginsRegistry.getHandlers(req.getCore());\n      for (PluginInfo plugin : plugins) {\n        if(SolrRequestHandler.TYPE.equals( plugin.type)){\n          if(!reqHandlers.containsKey(plugin.name)){\n            reqHandlers.put(plugin.name,plugin.toMap());\n          }\n        }\n      }\n      return map;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be214850f18c80408bcfafd463ec155ab0515aee","date":1423651203,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","sourceNew":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap();\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = PluginsRegistry.getHandlers(req.getCore());\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin.toMap());\n          }\n        }\n      }\n      return map;\n    }\n\n","sourceOld":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap();\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if(reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers =  new LinkedHashMap<>());\n      List<PluginInfo> plugins = PluginsRegistry.getHandlers(req.getCore());\n      for (PluginInfo plugin : plugins) {\n        if(SolrRequestHandler.TYPE.equals( plugin.type)){\n          if(!reqHandlers.containsKey(plugin.name)){\n            reqHandlers.put(plugin.name,plugin.toMap());\n          }\n        }\n      }\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","sourceNew":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap();\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = ImplicitPlugins.getHandlers(req.getCore());\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin.toMap());\n          }\n        }\n      }\n      return map;\n    }\n\n","sourceOld":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap();\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = PluginsRegistry.getHandlers(req.getCore());\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin.toMap());\n          }\n        }\n      }\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","sourceNew":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap();\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = ImplicitPlugins.getHandlers(req.getCore());\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin.toMap());\n          }\n        }\n      }\n      return map;\n    }\n\n","sourceOld":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap();\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = PluginsRegistry.getHandlers(req.getCore());\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin.toMap());\n          }\n        }\n      }\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4","date":1456067995,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","sourceNew":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap();\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin.toMap());\n          }\n        }\n      }\n      return map;\n    }\n\n","sourceOld":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap();\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = ImplicitPlugins.getHandlers(req.getCore());\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin.toMap());\n          }\n        }\n      }\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","sourceNew":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin.toMap(new LinkedHashMap<>()));\n          }\n        }\n      }\n      return map;\n    }\n\n","sourceOld":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap();\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin.toMap());\n          }\n        }\n      }\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8661269ebb23269662a2826882f11611e91d5a","date":1475042403,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","sourceNew":null,"sourceOld":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin.toMap(new LinkedHashMap<>()));\n          }\n        }\n      }\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","sourceNew":null,"sourceOld":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap();\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin.toMap());\n          }\n        }\n      }\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#getConfigDetails().mjava","sourceNew":null,"sourceOld":"    private Map<String, Object> getConfigDetails() {\n      Map<String, Object> map = req.getCore().getSolrConfig().toMap();\n      Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);\n      if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());\n      List<PluginInfo> plugins = req.getCore().getImplicitHandlers();\n      for (PluginInfo plugin : plugins) {\n        if (SolrRequestHandler.TYPE.equals(plugin.type)) {\n          if (!reqHandlers.containsKey(plugin.name)) {\n            reqHandlers.put(plugin.name, plugin.toMap());\n          }\n        }\n      }\n      return map;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["be214850f18c80408bcfafd463ec155ab0515aee","9aea0485ecacb6734c17da2d02569816c23a69c1"],"7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4","5e8661269ebb23269662a2826882f11611e91d5a"],"5e8661269ebb23269662a2826882f11611e91d5a":["1f1f31880696765d6aec499d3b01fa501129af45"],"1f1f31880696765d6aec499d3b01fa501129af45":["7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4"],"1a6b799f9d59f607df4b994cd143a0586f9cf896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["be214850f18c80408bcfafd463ec155ab0515aee"],"be214850f18c80408bcfafd463ec155ab0515aee":["1a6b799f9d59f607df4b994cd143a0586f9cf896"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","1f1f31880696765d6aec499d3b01fa501129af45","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a6b799f9d59f607df4b994cd143a0586f9cf896"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e8661269ebb23269662a2826882f11611e91d5a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1f1f31880696765d6aec499d3b01fa501129af45":["5e8661269ebb23269662a2826882f11611e91d5a"],"1a6b799f9d59f607df4b994cd143a0586f9cf896":["be214850f18c80408bcfafd463ec155ab0515aee"],"be214850f18c80408bcfafd463ec155ab0515aee":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}