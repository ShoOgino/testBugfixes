{"path":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","commits":[{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","sourceNew":"  /** Returns the merges necessary to merge the index down\n   *  to a specified number of segments.\n   *  This respects the {@link #maxMergeSizeForForcedMerge} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos,\n                                             int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose(mergeContext)) {\n      message(\"findForcedMerges: maxNumSegs=\" + maxNumSegments + \" segsToMerge=\"+ segmentsToMerge, mergeContext);\n    }\n\n    // If the segments are already merged (e.g. there's only 1 segment), or\n    // there are <maxNumSegments:.\n    if (isMerged(infos, maxNumSegments, segmentsToMerge, mergeContext)) {\n      if (verbose(mergeContext)) {\n        message(\"already merged; skip\", mergeContext);\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be merged (other segments may have been flushed\n    // since merging started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentCommitInfo info = infos.info(--last);\n      if (segmentsToMerge.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose(mergeContext)) {\n        message(\"last == 0; skip\", mergeContext);\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is merged\n    if (maxNumSegments == 1 && last == 1 && isMerged(infos, infos.info(0), mergeContext)) {\n      if (verbose(mergeContext)) {\n        message(\"already 1 seg; skip\", mergeContext);\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentCommitInfo info = infos.info(i);\n      if (size(info, mergeContext) > maxMergeSizeForForcedMerge || sizeDocs(info, mergeContext) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n\n    if (anyTooLarge) {\n      return findForcedMergesSizeLimit(infos, last, mergeContext);\n    } else {\n      return findForcedMergesMaxNumSegments(infos, maxNumSegments, last, mergeContext);\n    }\n  }\n\n","sourceOld":"  /** Returns the merges necessary to merge the index down\n   *  to a specified number of segments.\n   *  This respects the {@link #maxMergeSizeForForcedMerge} setting.\n   *  By default, and assuming {@code maxNumSegments=1}, only\n   *  one segment will be left in the index, where that segment\n   *  has no deletions pending nor separate norms, and it is in\n   *  compound file format if the current useCompoundFile\n   *  setting is true.  This method returns multiple merges\n   *  (mergeFactor at a time) so the {@link MergeScheduler}\n   *  in use may make use of concurrency. */\n  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos,\n            int maxNumSegments, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer) throws IOException {\n\n    assert maxNumSegments > 0;\n    if (verbose(writer)) {\n      message(\"findForcedMerges: maxNumSegs=\" + maxNumSegments + \" segsToMerge=\"+ segmentsToMerge, writer);\n    }\n\n    // If the segments are already merged (e.g. there's only 1 segment), or\n    // there are <maxNumSegments:.\n    if (isMerged(infos, maxNumSegments, segmentsToMerge, writer)) {\n      if (verbose(writer)) {\n        message(\"already merged; skip\", writer);\n      }\n      return null;\n    }\n\n    // Find the newest (rightmost) segment that needs to\n    // be merged (other segments may have been flushed\n    // since merging started):\n    int last = infos.size();\n    while (last > 0) {\n      final SegmentCommitInfo info = infos.info(--last);\n      if (segmentsToMerge.get(info) != null) {\n        last++;\n        break;\n      }\n    }\n\n    if (last == 0) {\n      if (verbose(writer)) {\n        message(\"last == 0; skip\", writer);\n      }\n      return null;\n    }\n    \n    // There is only one segment already, and it is merged\n    if (maxNumSegments == 1 && last == 1 && isMerged(infos, infos.info(0), writer)) {\n      if (verbose(writer)) {\n        message(\"already 1 seg; skip\", writer);\n      }\n      return null;\n    }\n\n    // Check if there are any segments above the threshold\n    boolean anyTooLarge = false;\n    for (int i = 0; i < last; i++) {\n      SegmentCommitInfo info = infos.info(i);\n      if (size(info, writer) > maxMergeSizeForForcedMerge || sizeDocs(info, writer) > maxMergeDocs) {\n        anyTooLarge = true;\n        break;\n      }\n    }\n\n    if (anyTooLarge) {\n      return findForcedMergesSizeLimit(infos, maxNumSegments, last, writer);\n    } else {\n      return findForcedMergesMaxNumSegments(infos, maxNumSegments, last, writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d28f215464f76024caf026606f8ea51a5319c53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d28f215464f76024caf026606f8ea51a5319c53"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d28f215464f76024caf026606f8ea51a5319c53"],"1d28f215464f76024caf026606f8ea51a5319c53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}