{"path":"src/test/org/apache/lucene/util/cache/BaseTestLRU#testCache(Cache,int).mjava","commits":[{"id":"b3788e811fcba5db4611c3281af4d165044ad9d6","date":1259335977,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/cache/BaseTestLRU#testCache(Cache,int).mjava","pathOld":"/dev/null","sourceNew":"  protected void testCache(Cache cache, int n) throws Exception {\n    Object dummy = new Object();\n    \n    for (int i = 0; i < n; i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 2nd item in cache\n    for (int i = 0; i < n; i+=2) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n    // add n/2 elements to cache, the ones that weren't\n    // touched in the previous loop should now be thrown away\n    for (int i = n; i < n + (n / 2); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n\n    // add 3/4n elements to cache, the ones that weren't\n    // touched in the previous loops should now be thrown away\n    for (int i = n; i < n + (n * 3 / 4); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/cache/BaseTestLRU#testCache(Cache[Integer,Object],int).mjava","pathOld":"src/test/org/apache/lucene/util/cache/BaseTestLRU#testCache(Cache,int).mjava","sourceNew":"  protected void testCache(Cache<Integer,Object> cache, int n) throws Exception {\n    Object dummy = new Object();\n    \n    for (int i = 0; i < n; i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 2nd item in cache\n    for (int i = 0; i < n; i+=2) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n    // add n/2 elements to cache, the ones that weren't\n    // touched in the previous loop should now be thrown away\n    for (int i = n; i < n + (n / 2); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n\n    // add 3/4n elements to cache, the ones that weren't\n    // touched in the previous loops should now be thrown away\n    for (int i = n; i < n + (n * 3 / 4); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n  }\n\n","sourceOld":"  protected void testCache(Cache cache, int n) throws Exception {\n    Object dummy = new Object();\n    \n    for (int i = 0; i < n; i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 2nd item in cache\n    for (int i = 0; i < n; i+=2) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n    // add n/2 elements to cache, the ones that weren't\n    // touched in the previous loop should now be thrown away\n    for (int i = n; i < n + (n / 2); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n\n    // add 3/4n elements to cache, the ones that weren't\n    // touched in the previous loops should now be thrown away\n    for (int i = n; i < n + (n * 3 / 4); i++) {\n      cache.put(Integer.valueOf(i), dummy);\n    }\n    \n    // access every 4th item in cache\n    for (int i = 0; i < n; i+=4) {\n      assertNotNull(cache.get(Integer.valueOf(i)));\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3788e811fcba5db4611c3281af4d165044ad9d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"b3788e811fcba5db4611c3281af4d165044ad9d6":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}