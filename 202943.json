{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringValSorted().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringValSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testStringValSorted().mjava","sourceNew":"  /** Tests sorting on type string_val, but with a SortedDocValuesField */\n  public void testStringValSorted() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"foo\")));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"bar\")));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING_VAL));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type string_val, but with a SortedDocValuesField */\n  public void testStringValSorted() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"foo\")));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"bar\")));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING_VAL));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringValSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testStringValSorted().mjava","sourceNew":"  /** Tests sorting on type string_val, but with a SortedDocValuesField */\n  public void testStringValSorted() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"foo\")));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"bar\")));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING_VAL));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type string_val, but with a SortedDocValuesField */\n  public void testStringValSorted() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"foo\")));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"bar\")));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING_VAL));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringValSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortDocValues#testStringValSorted().mjava","sourceNew":"  /** Tests sorting on type string_val, but with a SortedDocValuesField */\n  public void testStringValSorted() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"foo\")));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"bar\")));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING_VAL));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type string_val, but with a SortedDocValuesField */\n  public void testStringValSorted() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"foo\")));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"bar\")));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING_VAL));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNoFieldCaches();\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringValSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringValSorted().mjava","sourceNew":"  /** Tests sorting on type string_val, but with a SortedDocValuesField */\n  public void testStringValSorted() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"foo\")));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"bar\")));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING_VAL));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type string_val, but with a SortedDocValuesField */\n  public void testStringValSorted() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"foo\")));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"bar\")));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING_VAL));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringValSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testStringValSorted().mjava","sourceNew":"  /** Tests sorting on type string_val, but with a SortedDocValuesField */\n  public void testStringValSorted() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"foo\")));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"bar\")));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING_VAL));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits.value);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on type string_val, but with a SortedDocValuesField */\n  public void testStringValSorted() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"foo\")));\n    doc.add(newStringField(\"value\", \"foo\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value\", new BytesRef(\"bar\")));\n    doc.add(newStringField(\"value\", \"bar\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(new SortField(\"value\", SortField.Type.STRING_VAL));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(2, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["d0ef034a4f10871667ae75181537775ddcf8ade4","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}