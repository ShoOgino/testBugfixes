{"path":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc2_Query2_All_Slops_Should_match().mjava","commits":[{"id":"3b2ceed5f2320db5cc371e0dd95622cda9a9a56a","date":1217778014,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc2_Query2_All_Slops_Should_match().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test DOC_2 and QUERY_2.\n   * QUERY_2 has an exact match to DOC_2, so all slop values should succeed.\n   * Before LUCENE-1310, 0 succeeds, 1 through 7 fail, and 8 or greater succeeds.\n   */\n  public void testDoc2_Query2_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      float score1 = checkPhraseQuery(DOC_2, QUERY_2, slop, 1);\n      float score2 = checkPhraseQuery(DOC_2_B, QUERY_2, slop, 1);\n      assertTrue(\"slop=\"+slop+\" score2=\"+score2+\" should be greater than score1 \"+score1, score2>score1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc2_Query2_All_Slops_Should_match().mjava","pathOld":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc2_Query2_All_Slops_Should_match().mjava","sourceNew":"  /**\n   * Test DOC_2 and QUERY_2.\n   * QUERY_2 has an exact match to DOC_2, so all slop values should succeed.\n   * Before LUCENE-1310, 0 succeeds, 1 through 7 fail, and 8 or greater succeeds.\n   */\n  public void testDoc2_Query2_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      float score1 = checkPhraseQuery(DOC_2, QUERY_2, slop, 1);\n      float score2 = checkPhraseQuery(DOC_2_B, QUERY_2, slop, 1);\n      assertTrue(\"slop=\"+slop+\" score2=\"+score2+\" should be greater than score1 \"+score1, score2>score1);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test DOC_2 and QUERY_2.\n   * QUERY_2 has an exact match to DOC_2, so all slop values should succeed.\n   * Before LUCENE-1310, 0 succeeds, 1 through 7 fail, and 8 or greater succeeds.\n   */\n  public void testDoc2_Query2_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      float score1 = checkPhraseQuery(DOC_2, QUERY_2, slop, 1);\n      float score2 = checkPhraseQuery(DOC_2_B, QUERY_2, slop, 1);\n      assertTrue(\"slop=\"+slop+\" score2=\"+score2+\" should be greater than score1 \"+score1, score2>score1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b2ceed5f2320db5cc371e0dd95622cda9a9a56a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3b2ceed5f2320db5cc371e0dd95622cda9a9a56a"]},"commit2Childs":{"3b2ceed5f2320db5cc371e0dd95622cda9a9a56a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b2ceed5f2320db5cc371e0dd95622cda9a9a56a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}