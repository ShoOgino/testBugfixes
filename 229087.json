{"path":"src/test/org/apache/lucene/util/TestVirtualMethod#test().mjava","commits":[{"id":"24c1288acaee3fa0fa246aa45f305b8d7fb0ac5e","date":1263329721,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestVirtualMethod#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() {\n    assertEquals(0, publicTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(3, publicTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertEquals(0, protectedTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, protectedTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertTrue(VirtualMethod.compareImplementationDistance(TestClass3.class, publicTestMethod, protectedTestMethod) > 0);\n    assertEquals(0, VirtualMethod.compareImplementationDistance(TestClass5.class, publicTestMethod, protectedTestMethod));\n    \n    try {\n      // cast to Class to remove generics:\n      @SuppressWarnings(\"unchecked\") int dist = publicTestMethod.getImplementationDistance((Class) LuceneTestCase.class);\n      fail(\"LuceneTestCase is not a subclass and can never override publicTest(String)\");\n    } catch (IllegalArgumentException arg) {\n      // pass\n    }\n    \n    try {\n      new VirtualMethod<TestVirtualMethod>(TestVirtualMethod.class, \"bogus\");\n      fail(\"Method bogus() does not exist, so IAE should be thrown\");\n    } catch (IllegalArgumentException arg) {\n      // pass\n    }\n    \n    try {\n      new VirtualMethod<TestClass2>(TestClass2.class, \"publicTest\", String.class);\n      fail(\"Method publicTest(String) is not declared in TestClass2, so IAE should be thrown\");\n    } catch (IllegalArgumentException arg) {\n      // pass\n    }\n\n    try {\n      // try to create a second instance of the same baseClass / method combination\n      new VirtualMethod<TestVirtualMethod>(TestVirtualMethod.class, \"publicTest\", String.class);\n      fail(\"Violating singleton status succeeded\");\n    } catch (UnsupportedOperationException arg) {\n      // pass\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":6,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestVirtualMethod#testExceptions().mjava","pathOld":"src/test/org/apache/lucene/util/TestVirtualMethod#test().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void testExceptions() {\n    try {\n      // cast to Class to remove generics:\n      publicTestMethod.getImplementationDistance((Class) LuceneTestCase.class);\n      fail(\"LuceneTestCase is not a subclass and can never override publicTest(String)\");\n    } catch (IllegalArgumentException arg) {\n      // pass\n    }\n    \n    try {\n      new VirtualMethod<TestVirtualMethod>(TestVirtualMethod.class, \"bogus\");\n      fail(\"Method bogus() does not exist, so IAE should be thrown\");\n    } catch (IllegalArgumentException arg) {\n      // pass\n    }\n    \n    try {\n      new VirtualMethod<TestClass2>(TestClass2.class, \"publicTest\", String.class);\n      fail(\"Method publicTest(String) is not declared in TestClass2, so IAE should be thrown\");\n    } catch (IllegalArgumentException arg) {\n      // pass\n    }\n\n    try {\n      // try to create a second instance of the same baseClass / method combination\n      new VirtualMethod<TestVirtualMethod>(TestVirtualMethod.class, \"publicTest\", String.class);\n      fail(\"Violating singleton status succeeded\");\n    } catch (UnsupportedOperationException arg) {\n      // pass\n    }\n  }\n\n","sourceOld":"  public void test() {\n    assertEquals(0, publicTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(3, publicTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertEquals(0, protectedTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, protectedTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertTrue(VirtualMethod.compareImplementationDistance(TestClass3.class, publicTestMethod, protectedTestMethod) > 0);\n    assertEquals(0, VirtualMethod.compareImplementationDistance(TestClass5.class, publicTestMethod, protectedTestMethod));\n    \n    try {\n      // cast to Class to remove generics:\n      @SuppressWarnings(\"unchecked\") int dist = publicTestMethod.getImplementationDistance((Class) LuceneTestCase.class);\n      fail(\"LuceneTestCase is not a subclass and can never override publicTest(String)\");\n    } catch (IllegalArgumentException arg) {\n      // pass\n    }\n    \n    try {\n      new VirtualMethod<TestVirtualMethod>(TestVirtualMethod.class, \"bogus\");\n      fail(\"Method bogus() does not exist, so IAE should be thrown\");\n    } catch (IllegalArgumentException arg) {\n      // pass\n    }\n    \n    try {\n      new VirtualMethod<TestClass2>(TestClass2.class, \"publicTest\", String.class);\n      fail(\"Method publicTest(String) is not declared in TestClass2, so IAE should be thrown\");\n    } catch (IllegalArgumentException arg) {\n      // pass\n    }\n\n    try {\n      // try to create a second instance of the same baseClass / method combination\n      new VirtualMethod<TestVirtualMethod>(TestVirtualMethod.class, \"publicTest\", String.class);\n      fail(\"Violating singleton status succeeded\");\n    } catch (UnsupportedOperationException arg) {\n      // pass\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestVirtualMethod#testGeneral().mjava","pathOld":"src/test/org/apache/lucene/util/TestVirtualMethod#test().mjava","sourceNew":"  public void testGeneral() {\n    assertEquals(0, publicTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(3, publicTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertEquals(0, protectedTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, protectedTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertTrue(VirtualMethod.compareImplementationDistance(TestClass3.class, publicTestMethod, protectedTestMethod) > 0);\n    assertEquals(0, VirtualMethod.compareImplementationDistance(TestClass5.class, publicTestMethod, protectedTestMethod));\n  }\n\n","sourceOld":"  public void test() {\n    assertEquals(0, publicTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(1, publicTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(3, publicTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(publicTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertEquals(0, protectedTestMethod.getImplementationDistance(this.getClass()));\n    assertEquals(1, protectedTestMethod.getImplementationDistance(TestClass1.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass2.class));\n    assertEquals(2, protectedTestMethod.getImplementationDistance(TestClass3.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass4.class));\n    assertFalse(protectedTestMethod.isOverriddenAsOf(TestClass5.class));\n    \n    assertTrue(VirtualMethod.compareImplementationDistance(TestClass3.class, publicTestMethod, protectedTestMethod) > 0);\n    assertEquals(0, VirtualMethod.compareImplementationDistance(TestClass5.class, publicTestMethod, protectedTestMethod));\n    \n    try {\n      // cast to Class to remove generics:\n      @SuppressWarnings(\"unchecked\") int dist = publicTestMethod.getImplementationDistance((Class) LuceneTestCase.class);\n      fail(\"LuceneTestCase is not a subclass and can never override publicTest(String)\");\n    } catch (IllegalArgumentException arg) {\n      // pass\n    }\n    \n    try {\n      new VirtualMethod<TestVirtualMethod>(TestVirtualMethod.class, \"bogus\");\n      fail(\"Method bogus() does not exist, so IAE should be thrown\");\n    } catch (IllegalArgumentException arg) {\n      // pass\n    }\n    \n    try {\n      new VirtualMethod<TestClass2>(TestClass2.class, \"publicTest\", String.class);\n      fail(\"Method publicTest(String) is not declared in TestClass2, so IAE should be thrown\");\n    } catch (IllegalArgumentException arg) {\n      // pass\n    }\n\n    try {\n      // try to create a second instance of the same baseClass / method combination\n      new VirtualMethod<TestVirtualMethod>(TestVirtualMethod.class, \"publicTest\", String.class);\n      fail(\"Violating singleton status succeeded\");\n    } catch (UnsupportedOperationException arg) {\n      // pass\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24c1288acaee3fa0fa246aa45f305b8d7fb0ac5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["24c1288acaee3fa0fa246aa45f305b8d7fb0ac5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"24c1288acaee3fa0fa246aa45f305b8d7fb0ac5e":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24c1288acaee3fa0fa246aa45f305b8d7fb0ac5e"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}