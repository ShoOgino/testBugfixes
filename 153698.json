{"path":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.PrefixCodedTermsIterator#next().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.PrefixCodedTermsIterator#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PrefixCodedTerms.PrefixCodedTermsIterator#next().mjava","sourceNew":"    public Term next() {\n      assert hasNext();\n      try {\n        int code = input.readVInt();\n        if ((code & 1) != 0) {\n          // new field\n          field = input.readString();\n        }\n        int prefix = code >>> 1;\n        int suffix = input.readVInt();\n        bytes.grow(prefix + suffix);\n        input.readBytes(bytes.bytes, prefix, suffix);\n        bytes.length = prefix + suffix;\n        term.set(field, bytes);\n        return term;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public Term next() {\n      assert hasNext();\n      try {\n        int code = input.readVInt();\n        if ((code & 1) != 0) {\n          // new field\n          field = input.readString();\n        }\n        int prefix = code >>> 1;\n        int suffix = input.readVInt();\n        bytes.grow(prefix + suffix);\n        input.readBytes(bytes.bytes, prefix, suffix);\n        bytes.length = prefix + suffix;\n        term.set(field, bytes);\n        return term;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.PrefixCodedTermsIterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.PrefixCodedTermsIterator#next().mjava","sourceNew":"    @Override\n    public Term next() {\n      assert hasNext();\n      try {\n        int code = input.readVInt();\n        if ((code & 1) != 0) {\n          // new field\n          field = input.readString();\n        }\n        int prefix = code >>> 1;\n        int suffix = input.readVInt();\n        bytes.grow(prefix + suffix);\n        input.readBytes(bytes.bytes, prefix, suffix);\n        bytes.length = prefix + suffix;\n        term.set(field, bytes);\n        return term;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public Term next() {\n      assert hasNext();\n      try {\n        int code = input.readVInt();\n        if ((code & 1) != 0) {\n          // new field\n          field = input.readString();\n        }\n        int prefix = code >>> 1;\n        int suffix = input.readVInt();\n        bytes.grow(prefix + suffix);\n        input.readBytes(bytes.bytes, prefix, suffix);\n        bytes.length = prefix + suffix;\n        term.set(field, bytes);\n        return term;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.PrefixCodedTermsIterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.PrefixCodedTermsIterator#next().mjava","sourceNew":"    @Override\n    public Term next() {\n      assert hasNext();\n      try {\n        int code = input.readVInt();\n        if ((code & 1) != 0) {\n          // new field\n          field = input.readString();\n        }\n        int prefix = code >>> 1;\n        int suffix = input.readVInt();\n        bytes.grow(prefix + suffix);\n        input.readBytes(bytes.bytes, prefix, suffix);\n        bytes.length = prefix + suffix;\n        term.set(field, bytes);\n        return term;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public Term next() {\n      assert hasNext();\n      try {\n        int code = input.readVInt();\n        if ((code & 1) != 0) {\n          // new field\n          field = input.readString();\n        }\n        int prefix = code >>> 1;\n        int suffix = input.readVInt();\n        bytes.grow(prefix + suffix);\n        input.readBytes(bytes.bytes, prefix, suffix);\n        bytes.length = prefix + suffix;\n        term.set(field, bytes);\n        return term;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.PrefixCodedTermsIterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.PrefixCodedTermsIterator#next().mjava","sourceNew":"    @Override\n    public Term next() {\n      assert hasNext();\n      try {\n        int code = input.readVInt();\n        if ((code & 1) != 0) {\n          // new field\n          field = input.readString();\n        }\n        int prefix = code >>> 1;\n        int suffix = input.readVInt();\n        bytes.grow(prefix + suffix);\n        input.readBytes(bytes.bytes(), prefix, suffix);\n        bytes.setLength(prefix + suffix);\n        term.set(field, bytes.get());\n        return term;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Term next() {\n      assert hasNext();\n      try {\n        int code = input.readVInt();\n        if ((code & 1) != 0) {\n          // new field\n          field = input.readString();\n        }\n        int prefix = code >>> 1;\n        int suffix = input.readVInt();\n        bytes.grow(prefix + suffix);\n        input.readBytes(bytes.bytes, prefix, suffix);\n        bytes.length = prefix + suffix;\n        term.set(field, bytes);\n        return term;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.PrefixCodedTermsIterator#next().mjava","sourceNew":null,"sourceOld":"    @Override\n    public Term next() {\n      assert hasNext();\n      try {\n        int code = input.readVInt();\n        if ((code & 1) != 0) {\n          // new field\n          field = input.readString();\n        }\n        int prefix = code >>> 1;\n        int suffix = input.readVInt();\n        bytes.grow(prefix + suffix);\n        input.readBytes(bytes.bytes(), prefix, suffix);\n        bytes.setLength(prefix + suffix);\n        term.set(field, bytes.get());\n        return term;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e4c214a1f904dde76f5611b56d4081533055b3b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e4c214a1f904dde76f5611b56d4081533055b3b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}