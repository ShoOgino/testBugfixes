{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random(), incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random(), incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random(), incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random(), incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random(), incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random(), incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random(), incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random(), incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random(), incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += TestUtil.nextInt(random(), incrMin, 5 * incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random(), incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += TestUtil.nextInt(random(), incrMin, 5 * incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.shutdown();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.shutdown();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += TestUtil.nextInt(random(), incrMin, 5 * incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += TestUtil.nextInt(random(), incrMin, 5 * incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setOpenMode(OpenMode.CREATE)\n                                                  .setMaxBufferedDocs(2)\n                                                  .setMergePolicy(ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.shutdown();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.shutdown();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += TestUtil.nextInt(random(), incrMin, 5 * incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.shutdown();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random())).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.shutdown();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += TestUtil.nextInt(random(), incrMin, 5 * incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setOpenMode(OpenMode.CREATE)\n                                                  .setMaxBufferedDocs(2)\n                                                  .setMergePolicy(ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += TestUtil.nextInt(random(), incrMin, 5 * incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setOpenMode(OpenMode.CREATE)\n                                                  .setMaxBufferedDocs(2)\n                                                  .setMergePolicy(ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.shutdown();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.shutdown();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += TestUtil.nextInt(random(), incrMin, 5 * incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setOpenMode(OpenMode.CREATE)\n                                                  .setMaxBufferedDocs(2)\n                                                  .setMergePolicy(ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = SegmentInfos.readLatestCommit(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += TestUtil.nextInt(random(), incrMin, 5 * incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setOpenMode(OpenMode.CREATE)\n                                                  .setMaxBufferedDocs(2)\n                                                  .setMergePolicy(ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += TestUtil.nextInt(random(), incrMin, 5 * incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setOpenMode(OpenMode.CREATE)\n                                                  .setMaxBufferedDocs(2)\n                                                  .setMergePolicy(ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = SegmentInfos.readLatestCommit(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testPartialMerge() throws IOException {\n\n    Directory dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newStringField(\"content\", \"aaa\", Field.Store.NO));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += TestUtil.nextInt(random(), incrMin, 5 * incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                  .setOpenMode(OpenMode.CREATE)\n                                                  .setMaxBufferedDocs(2)\n                                                  .setMergePolicy(ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["d0ef034a4f10871667ae75181537775ddcf8ade4","3384e6013a93e4d11b7d75388693f8d0388602bf"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["6613659748fe4411a7dcf85266e55db1f95f7315","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3384e6013a93e4d11b7d75388693f8d0388602bf","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}