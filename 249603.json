{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","sourceNew":"  @Override\n  public Object clone() {\n    // Shallow clone is the only thing that's possible, since parameters like\n    // analyzer, index commit etc. do not implement Cloneable.\n    try {\n      return super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object clone() {\n    // Shallow clone is the only thing that's possible, since parameters like\n    // analyzer, index commit etc. do not implement Cloneable.\n    try {\n      return super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5bf508bfc98425280b4bb708ab724f718705c9d","date":1332973345,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","sourceNew":"  @Override\n  public IndexWriterConfig clone() {\n    // Shallow clone is the only thing that's possible, since parameters like\n    // analyzer, index commit etc. do not implement Cloneable.\n    try {\n      return (IndexWriterConfig)super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object clone() {\n    // Shallow clone is the only thing that's possible, since parameters like\n    // analyzer, index commit etc. do not implement Cloneable.\n    try {\n      return super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1","date":1338332414,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","sourceNew":"  @Override\n  public IndexWriterConfig clone() {\n    IndexWriterConfig clone;\n    if (inUseByIndexWriter.get()) {\n      throw new IllegalStateException(\"cannot clone: this IndexWriterConfig is private to IndexWriter; make a new one instead\");\n    }\n    try {\n      clone = (IndexWriterConfig) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n\n    // Mostly shallow clone, but do a deepish clone of\n    // certain objects that have state that cannot be shared\n    // across IW instances:\n    clone.inUseByIndexWriter = new AtomicBoolean();\n    clone.flushPolicy = flushPolicy.clone();\n    clone.indexerThreadPool = indexerThreadPool.clone();\n    clone.mergePolicy = mergePolicy.clone();\n\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public IndexWriterConfig clone() {\n    // Shallow clone is the only thing that's possible, since parameters like\n    // analyzer, index commit etc. do not implement Cloneable.\n    try {\n      return (IndexWriterConfig)super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","f5bf508bfc98425280b4bb708ab724f718705c9d","00b21520fafb9860ce0318d7be5ea84619c185ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","sourceNew":"  @Override\n  public IndexWriterConfig clone() {\n    try {\n      IndexWriterConfig clone = (IndexWriterConfig) super.clone();\n      \n      // Mostly shallow clone, but do a deepish clone of\n      // certain objects that have state that cannot be shared\n      // across IW instances:\n      clone.flushPolicy = flushPolicy.clone();\n      clone.indexerThreadPool = indexerThreadPool.clone();\n      clone.mergePolicy = mergePolicy.clone();\n      \n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public IndexWriterConfig clone() {\n    IndexWriterConfig clone;\n    if (inUseByIndexWriter.get()) {\n      throw new IllegalStateException(\"cannot clone: this IndexWriterConfig is private to IndexWriter; make a new one instead\");\n    }\n    try {\n      clone = (IndexWriterConfig) super.clone();\n    } catch (CloneNotSupportedException e) {\n      // should not happen\n      throw new RuntimeException(e);\n    }\n\n    // Mostly shallow clone, but do a deepish clone of\n    // certain objects that have state that cannot be shared\n    // across IW instances:\n    clone.inUseByIndexWriter = new AtomicBoolean();\n    clone.flushPolicy = flushPolicy.clone();\n    clone.indexerThreadPool = indexerThreadPool.clone();\n    clone.mergePolicy = mergePolicy.clone();\n\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","sourceNew":"  @Override\n  public IndexWriterConfig clone() {\n    try {\n      IndexWriterConfig clone = (IndexWriterConfig) super.clone();\n      \n      // Mostly shallow clone, but do a deepish clone of\n      // certain objects that have state that cannot be shared\n      // across IW instances:\n      clone.delPolicy = delPolicy.clone();\n      clone.flushPolicy = flushPolicy.clone();\n      clone.indexerThreadPool = indexerThreadPool.clone();\n      // we clone the infoStream because some impls might have state variables\n      // such as line numbers, message throughput, ...\n      clone.infoStream = infoStream.clone();\n      clone.mergePolicy = mergePolicy.clone();\n      clone.mergeScheduler = mergeScheduler.clone();\n      \n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public IndexWriterConfig clone() {\n    try {\n      IndexWriterConfig clone = (IndexWriterConfig) super.clone();\n      \n      // Mostly shallow clone, but do a deepish clone of\n      // certain objects that have state that cannot be shared\n      // across IW instances:\n      clone.flushPolicy = flushPolicy.clone();\n      clone.indexerThreadPool = indexerThreadPool.clone();\n      clone.mergePolicy = mergePolicy.clone();\n      \n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ce24aa081e44190692bbebc8aead342ad7060e8","date":1374951664,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","sourceNew":"  @Override\n  public IndexWriterConfig clone() {\n    try {\n      IndexWriterConfig clone = (IndexWriterConfig) super.clone();\n      \n      clone.writer = writer.clone();\n      \n      // Mostly shallow clone, but do a deepish clone of\n      // certain objects that have state that cannot be shared\n      // across IW instances:\n      clone.delPolicy = delPolicy.clone();\n      clone.flushPolicy = flushPolicy.clone();\n      clone.indexerThreadPool = indexerThreadPool.clone();\n      // we clone the infoStream because some impls might have state variables\n      // such as line numbers, message throughput, ...\n      clone.infoStream = infoStream.clone();\n      clone.mergePolicy = mergePolicy.clone();\n      clone.mergeScheduler = mergeScheduler.clone();\n      \n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public IndexWriterConfig clone() {\n    try {\n      IndexWriterConfig clone = (IndexWriterConfig) super.clone();\n      \n      // Mostly shallow clone, but do a deepish clone of\n      // certain objects that have state that cannot be shared\n      // across IW instances:\n      clone.delPolicy = delPolicy.clone();\n      clone.flushPolicy = flushPolicy.clone();\n      clone.indexerThreadPool = indexerThreadPool.clone();\n      // we clone the infoStream because some impls might have state variables\n      // such as line numbers, message throughput, ...\n      clone.infoStream = infoStream.clone();\n      clone.mergePolicy = mergePolicy.clone();\n      clone.mergeScheduler = mergeScheduler.clone();\n      \n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","sourceNew":"  @Override\n  public IndexWriterConfig clone() {\n    try {\n      IndexWriterConfig clone = (IndexWriterConfig) super.clone();\n      \n      clone.writer = writer.clone();\n      \n      // Mostly shallow clone, but do a deepish clone of\n      // certain objects that have state that cannot be shared\n      // across IW instances:\n      clone.delPolicy = delPolicy.clone();\n      clone.flushPolicy = flushPolicy.clone();\n      clone.indexerThreadPool = indexerThreadPool.clone();\n      // we clone the infoStream because some impls might have state variables\n      // such as line numbers, message throughput, ...\n      clone.infoStream = infoStream.clone();\n      clone.mergePolicy = mergePolicy.clone();\n      clone.mergeScheduler = mergeScheduler.clone();\n      \n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public IndexWriterConfig clone() {\n    try {\n      IndexWriterConfig clone = (IndexWriterConfig) super.clone();\n      \n      // Mostly shallow clone, but do a deepish clone of\n      // certain objects that have state that cannot be shared\n      // across IW instances:\n      clone.delPolicy = delPolicy.clone();\n      clone.flushPolicy = flushPolicy.clone();\n      clone.indexerThreadPool = indexerThreadPool.clone();\n      // we clone the infoStream because some impls might have state variables\n      // such as line numbers, message throughput, ...\n      clone.infoStream = infoStream.clone();\n      clone.mergePolicy = mergePolicy.clone();\n      clone.mergeScheduler = mergeScheduler.clone();\n      \n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfc45818441587d8004ff1a119fb60ac9ecb9a14","date":1401437797,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#clone().mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexWriterConfig clone() {\n    try {\n      IndexWriterConfig clone = (IndexWriterConfig) super.clone();\n      \n      clone.writer = writer.clone();\n      \n      // Mostly shallow clone, but do a deepish clone of\n      // certain objects that have state that cannot be shared\n      // across IW instances:\n      clone.delPolicy = delPolicy.clone();\n      clone.flushPolicy = flushPolicy.clone();\n      clone.indexerThreadPool = indexerThreadPool.clone();\n      // we clone the infoStream because some impls might have state variables\n      // such as line numbers, message throughput, ...\n      clone.infoStream = infoStream.clone();\n      clone.mergePolicy = mergePolicy.clone();\n      clone.mergeScheduler = mergeScheduler.clone();\n      \n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"4ce24aa081e44190692bbebc8aead342ad7060e8":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"cfc45818441587d8004ff1a119fb60ac9ecb9a14":["4ce24aa081e44190692bbebc8aead342ad7060e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4e54ed7cef46f86888b5fb547594f62160395c":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfc45818441587d8004ff1a119fb60ac9ecb9a14"]},"commit2Childs":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["4ce24aa081e44190692bbebc8aead342ad7060e8","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"4ce24aa081e44190692bbebc8aead342ad7060e8":["cfc45818441587d8004ff1a119fb60ac9ecb9a14"],"cfc45818441587d8004ff1a119fb60ac9ecb9a14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"0791b41f65aecff2e75db0c1ebf95d745a5ab1b1":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}