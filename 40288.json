{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40SegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","commits":[{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40SegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultSegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeInt(entry.getKey());\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeString(si.getCodec().getName());\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeInt(entry.getKey());\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeString(si.getCodec().getName());\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40SegmentInfosWriter#writeInfo(IndexOutput,SegmentInfo).mjava","sourceNew":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeInt(entry.getKey());\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeString(si.getCodec().getName());\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  private void writeInfo(IndexOutput output, SegmentInfo si) throws IOException {\n    assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n    // Write the Lucene version that created this segment, since 3.1\n    output.writeString(si.getVersion());\n    output.writeString(si.name);\n    output.writeInt(si.docCount);\n    output.writeLong(si.getDelGen());\n\n    output.writeInt(si.getDocStoreOffset());\n    if (si.getDocStoreOffset() != -1) {\n      output.writeString(si.getDocStoreSegment());\n      output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n    }\n\n    Map<Integer,Long> normGen = si.getNormGen();\n    if (normGen == null) {\n      output.writeInt(SegmentInfo.NO);\n    } else {\n      output.writeInt(normGen.size());\n      for (Entry<Integer,Long> entry : normGen.entrySet()) {\n        output.writeInt(entry.getKey());\n        output.writeLong(entry.getValue());\n      }\n    }\n\n    output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n    output.writeInt(si.getDelCount());\n    output.writeByte((byte) (si.getHasProxInternal()));\n    output.writeString(si.getCodec().getName());\n    output.writeStringStringMap(si.getDiagnostics());\n    output.writeByte((byte) (si.getHasVectorsInternal()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}