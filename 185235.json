{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","sourceNew":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      segmentInfos.changed();\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","sourceOld":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      segmentInfos.changed();\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869e42fbd9c52c4728652ba51faf7266b239a6f","date":1428140988,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","sourceNew":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount.incrementAndGet();\n      segmentInfos.changed();\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","sourceOld":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      segmentInfos.changed();\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0617d2d25b13b9a49450ea49ceb06123ebd6542a","date":1508865221,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","sourceNew":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount.incrementAndGet();\n      segmentInfos.changed();\n      return \"_\" + Long.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","sourceOld":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount.incrementAndGet();\n      segmentInfos.changed();\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","sourceNew":"  private final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount.incrementAndGet();\n      segmentInfos.changed();\n      return \"_\" + Long.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","sourceOld":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount.incrementAndGet();\n      segmentInfos.changed();\n      return \"_\" + Long.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b869e42fbd9c52c4728652ba51faf7266b239a6f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["0617d2d25b13b9a49450ea49ceb06123ebd6542a"],"0617d2d25b13b9a49450ea49ceb06123ebd6542a":["b869e42fbd9c52c4728652ba51faf7266b239a6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"b869e42fbd9c52c4728652ba51faf7266b239a6f":["0617d2d25b13b9a49450ea49ceb06123ebd6542a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b869e42fbd9c52c4728652ba51faf7266b239a6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0617d2d25b13b9a49450ea49ceb06123ebd6542a":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}