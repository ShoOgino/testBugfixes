{"path":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter#randomize(Object[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter#randomize(Object[]).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter#randomize(Object[]).mjava","sourceNew":"  /**\n   * Randomize synonyms to later sample a subset. Uses constant random seed\n   * for reproducibility. Uses \"DRand\", a simple, fast, uniform pseudo-random\n   * number generator with medium statistical quality (multiplicative\n   * congruential method), producing integers in the range [Integer.MIN_VALUE,\n   * Integer.MAX_VALUE].\n   */\n  private static void randomize(Object[] arr) {\n    int seed = 1234567; // constant\n    int randomState = 4*seed + 1;\n//    Random random = new Random(seed); // unnecessary overhead\n    int len = arr.length;\n    for (int i=0; i < len-1; i++) {\n      randomState *= 0x278DDE6D; // z(i+1)=a*z(i) (mod 2**32)\n      int r = randomState % (len-i);\n      if (r < 0) r = -r; // e.g. -9 % 2 == -1\n//      int r = random.nextInt(len-i);\n      \n      // swap arr[i, i+r]\n      Object tmp = arr[i];\n      arr[i] = arr[i + r];\n      arr[i + r] = tmp;\n    }   \n  }\n\n","sourceOld":"  /**\n   * Randomize synonyms to later sample a subset. Uses constant random seed\n   * for reproducibility. Uses \"DRand\", a simple, fast, uniform pseudo-random\n   * number generator with medium statistical quality (multiplicative\n   * congruential method), producing integers in the range [Integer.MIN_VALUE,\n   * Integer.MAX_VALUE].\n   */\n  private static void randomize(Object[] arr) {\n    int seed = 1234567; // constant\n    int randomState = 4*seed + 1;\n//    Random random = new Random(seed); // unnecessary overhead\n    int len = arr.length;\n    for (int i=0; i < len-1; i++) {\n      randomState *= 0x278DDE6D; // z(i+1)=a*z(i) (mod 2**32)\n      int r = randomState % (len-i);\n      if (r < 0) r = -r; // e.g. -9 % 2 == -1\n//      int r = random.nextInt(len-i);\n      \n      // swap arr[i, i+r]\n      Object tmp = arr[i];\n      arr[i] = arr[i + r];\n      arr[i + r] = tmp;\n    }   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymTokenFilter#randomize(Object[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Randomize synonyms to later sample a subset. Uses constant random seed\n   * for reproducibility. Uses \"DRand\", a simple, fast, uniform pseudo-random\n   * number generator with medium statistical quality (multiplicative\n   * congruential method), producing integers in the range [Integer.MIN_VALUE,\n   * Integer.MAX_VALUE].\n   */\n  private static void randomize(Object[] arr) {\n    int seed = 1234567; // constant\n    int randomState = 4*seed + 1;\n//    Random random = new Random(seed); // unnecessary overhead\n    int len = arr.length;\n    for (int i=0; i < len-1; i++) {\n      randomState *= 0x278DDE6D; // z(i+1)=a*z(i) (mod 2**32)\n      int r = randomState % (len-i);\n      if (r < 0) r = -r; // e.g. -9 % 2 == -1\n//      int r = random.nextInt(len-i);\n      \n      // swap arr[i, i+r]\n      Object tmp = arr[i];\n      arr[i] = arr[i + r];\n      arr[i + r] = tmp;\n    }   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}