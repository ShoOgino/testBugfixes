{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n              makeCollectionsNodeWatches();\n              makeShardsWatches(true);\n              updateCloudState(false);\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n\n          }\n        });\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n              makeCollectionsNodeWatches();\n              makeShardsWatches(true);\n              updateCloudState(false);\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n              makeCollectionsNodeWatches();\n              makeShardsWatches(true);\n              updateCloudState(false);\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n\n          }\n        });\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n              makeCollectionsNodeWatches();\n              makeShardsWatches(true);\n              updateCloudState(false);\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n              makeCollectionsNodeWatches();\n              makeShardsWatches(true);\n              updateCloudState(false);\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n\n          }\n        });\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n              makeCollectionsNodeWatches();\n              makeShardsWatches(true);\n              updateCloudState(false);\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n            \tZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } \n\n          }\n        });\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n              makeCollectionsNodeWatches();\n              makeShardsWatches(true);\n              updateCloudState(false);\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n            \tZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } \n\n          }\n        });\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n              makeCollectionsNodeWatches();\n              makeShardsWatches(true);\n              updateCloudState(false);\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n            \tZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } \n\n          }\n        });\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n              makeCollectionsNodeWatches();\n              makeShardsWatches(true);\n              updateCloudState(false);\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } \n\n          }\n        });\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n            \tZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } \n\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } \n\n          }\n        });\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } \n\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d044a068e0d16ff314fb7f93fa75194d5360a6ff","date":1355610187,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    initZkCmdExecutor(zkClientTimeout);\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } \n\n          }\n        });\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } \n\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    initZkCmdExecutor(zkClientTimeout);\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } \n\n          }\n        });\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } \n\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n          }\n        });\n    this.cmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) throws InterruptedException, TimeoutException, IOException {\n    closeClient = true;\n    initZkCmdExecutor(zkClientTimeout);\n    zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } \n\n          }\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n          }\n        });\n    this.cmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n    this.securityNodeListener = null;\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n          }\n        });\n    this.cmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n          }\n        });\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n    this.securityNodeListener = null;\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n          }\n        });\n    this.cmdExecutor = new ZkCmdExecutor(zkClientTimeout);\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n    this.securityNodeListener = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.error(\"Interrupted\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted\", e);\n            }\n          }\n        });\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n    this.securityNodeListener = null;\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"\", e);\n            }\n          }\n        });\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n    this.securityNodeListener = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"Interrupted\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted\", e);\n            }\n          }\n        });\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n    this.securityNodeListener = null;\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.error(\"Interrupted\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted\", e);\n            }\n          }\n        });\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n    this.securityNodeListener = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"Interrupted\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted\", e);\n            }\n          }\n        });\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n    this.securityNodeListener = null;\n    \n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"Interrupted\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted\", e);\n            }\n          }\n        });\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n    this.securityNodeListener = null;\n  }\n\n","bugFix":null,"bugIntro":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e92ecc804db94989e3c224b898b8dc978ebb584f","date":1556036948,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#ZkStateReader(String,int,int).mjava","sourceNew":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"Interrupted\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted\", e);\n            }\n          }\n        });\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n    this.securityNodeListener = null;\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public ZkStateReader(String zkServerAddress, int zkClientTimeout, int zkClientConnectTimeout) {\n    this.zkClient = new SolrZkClient(zkServerAddress, zkClientTimeout, zkClientConnectTimeout,\n        // on reconnect, reload cloud info\n        new OnReconnect() {\n          @Override\n          public void command() {\n            try {\n              ZkStateReader.this.createClusterStateWatchersAndUpdate();\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"Interrupted\", e);\n              throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"Interrupted\", e);\n            }\n          }\n        });\n    this.configManager = new ZkConfigManager(zkClient);\n    this.closeClient = true;\n    this.securityNodeListener = null;\n    \n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","d044a068e0d16ff314fb7f93fa75194d5360a6ff"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["d044a068e0d16ff314fb7f93fa75194d5360a6ff"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["6bdcb86c29922edae9a14852e636303bc52df094"],"e92ecc804db94989e3c224b898b8dc978ebb584f":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d044a068e0d16ff314fb7f93fa75194d5360a6ff":["7530de27b87b961b51f01bd1299b7004d46e8823"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["6bdcb86c29922edae9a14852e636303bc52df094"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"e92ecc804db94989e3c224b898b8dc978ebb584f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d044a068e0d16ff314fb7f93fa75194d5360a6ff":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c8a2521797f14d1d697a17a0069f5619cd211a6"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d044a068e0d16ff314fb7f93fa75194d5360a6ff"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}