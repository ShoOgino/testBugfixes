{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestRemoveLastDynamicCopyField#test().mjava","commits":[{"id":"cbf48bc10d8aa7b417d61814c87fee4f942cdeca","date":1431530397,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestRemoveLastDynamicCopyField#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    List copyFields = getCopyFields();\n    assertEquals(\"There is more than one copyField directive\", 1, copyFields.size());\n    assertEquals(\"The copyField source is not '*'\", \"*\", ((Map)copyFields.get(0)).get(\"source\"));\n    assertEquals(\"The copyField dest is not 'text'\", \"text\", ((Map)copyFields.get(0)).get(\"dest\"));\n\n    String payload = \"{ 'delete-copy-field': { 'source': '*', 'dest': 'text' } }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n    \n    assertEquals(0, getCopyFields().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestRemoveLastDynamicCopyField#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws Exception {\n    List copyFields = getCopyFields();\n    assertEquals(\"There is more than one copyField directive\", 1, copyFields.size());\n    assertEquals(\"The copyField source is not '*'\", \"*\", ((Map)copyFields.get(0)).get(\"source\"));\n    assertEquals(\"The copyField dest is not 'text'\", \"text\", ((Map)copyFields.get(0)).get(\"dest\"));\n\n    String payload = \"{ 'delete-copy-field': { 'source': '*', 'dest': 'text' } }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n    \n    assertEquals(0, getCopyFields().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f494bc636a1302995e4930fdccd371eeda452f87":["cbf48bc10d8aa7b417d61814c87fee4f942cdeca"],"cbf48bc10d8aa7b417d61814c87fee4f942cdeca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"]},"commit2Childs":{"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbf48bc10d8aa7b417d61814c87fee4f942cdeca":["f494bc636a1302995e4930fdccd371eeda452f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbf48bc10d8aa7b417d61814c87fee4f942cdeca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}