{"path":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","commits":[{"id":"953de31d76c9d58f1e3f4e41ff8a48a1529226de","date":1277371072,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,DocsAndPositionsEnum[],int[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, DocsAndPositionsEnum[] postings, int[] offsets,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i], offsets[i]);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4946500259641951dbd7f8a61956bf14bef3f60","date":1283284212,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(similarity, weight);\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(similarity, weight);\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(similarity, weight);\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(similarity, weight);\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(similarity, weight);\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0852ebe96f807ea1c84a88f9aaa4985a2088594","date":1304368766,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":["953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"bugIntro":["c9ff635e6838a2facda02727dec5b77d9e64dc4c","c9ff635e6838a2facda02727dec5b77d9e64dc4c","c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppyDocScorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppyDocScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":["c9ff635e6838a2facda02727dec5b77d9e64dc4c","c9ff635e6838a2facda02727dec5b77d9e64dc4c","c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppyDocScorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppyDocScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity.SloppyDocScorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity.SloppyDocScorer docScorer) throws IOException {\n    super(weight);\n    this.docScorer = docScorer;\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      Similarity similarity, byte[] norms) {\n    super(weight);\n    this.similarity = similarity;\n    this.norms = norms;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < postings.length; i++) {\n      PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(postings.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["f0852ebe96f807ea1c84a88f9aaa4985a2088594"],"f0852ebe96f807ea1c84a88f9aaa4985a2088594":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","e4946500259641951dbd7f8a61956bf14bef3f60"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e5e679b9c5f68f1f331de920ae8366af75b44060"],"1291e4568eb7d9463d751627596ef14baf4c1603":["f0852ebe96f807ea1c84a88f9aaa4985a2088594","0f3cee3d20b0c786e6fca20539454262e29edcab"],"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a3776dccca01c11e7046323cfad46a3b4a471233","0f3cee3d20b0c786e6fca20539454262e29edcab"],"a3776dccca01c11e7046323cfad46a3b4a471233":["e5e679b9c5f68f1f331de920ae8366af75b44060","f0852ebe96f807ea1c84a88f9aaa4985a2088594"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["e4946500259641951dbd7f8a61956bf14bef3f60","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["29ef99d61cda9641b6250bf9567329a6e65f901d","f0852ebe96f807ea1c84a88f9aaa4985a2088594"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["e4946500259641951dbd7f8a61956bf14bef3f60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"e4946500259641951dbd7f8a61956bf14bef3f60":["953de31d76c9d58f1e3f4e41ff8a48a1529226de"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0852ebe96f807ea1c84a88f9aaa4985a2088594":["0f3cee3d20b0c786e6fca20539454262e29edcab","1291e4568eb7d9463d751627596ef14baf4c1603","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"953de31d76c9d58f1e3f4e41ff8a48a1529226de":["5f4e87790277826a2aea119328600dfb07761f32","e4946500259641951dbd7f8a61956bf14bef3f60"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","953de31d76c9d58f1e3f4e41ff8a48a1529226de"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"e5e679b9c5f68f1f331de920ae8366af75b44060":["f0852ebe96f807ea1c84a88f9aaa4985a2088594","e79a6d080bdd5b2a8f56342cf571b5476de04180","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d"],"e4946500259641951dbd7f8a61956bf14bef3f60":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}