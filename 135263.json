{"path":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, scoreMode, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], ScoreMode.COMPLETE_NO_SCORES);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, scoreMode, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], ScoreMode.COMPLETE_NO_SCORES);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, needsScores, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], false);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, scoreMode, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createWeight(searcher.rewrite(drillDownQueries[dim]), ScoreMode.COMPLETE_NO_SCORES, 1);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, scoreMode, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], ScoreMode.COMPLETE_NO_SCORES);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, scoreMode, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createWeight(searcher.rewrite(drillDownQueries[dim]), ScoreMode.COMPLETE_NO_SCORES, 1);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, scoreMode, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createNormalizedWeight(drillDownQueries[dim], ScoreMode.COMPLETE_NO_SCORES);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, scoreMode, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createWeight(searcher.rewrite(drillDownQueries[dim]), ScoreMode.COMPLETE_NO_SCORES, 1);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, scoreMode, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, scoreMode, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createWeight(searcher.rewrite(drillDownQueries[dim]), ScoreMode.COMPLETE_NO_SCORES, 1);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, scoreMode, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createWeight(searcher.rewrite(drillDownQueries[dim]), ScoreMode.COMPLETE_NO_SCORES, 1);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, scoreMode, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight baseWeight = baseQuery.createWeight(searcher, scoreMode, boost);\n    final Weight[] drillDowns = new Weight[drillDownQueries.length];\n    for(int dim=0;dim<drillDownQueries.length;dim++) {\n      drillDowns[dim] = searcher.createWeight(searcher.rewrite(drillDownQueries[dim]), ScoreMode.COMPLETE_NO_SCORES, 1);\n    }\n\n    return new Weight(DrillSidewaysQuery.this) {\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return baseWeight.explain(context, doc);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // We can only run as a top scorer:\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        if (baseWeight.isCacheable(ctx) == false)\n          return false;\n        for (Weight w : drillDowns) {\n          if (w.isCacheable(ctx) == false)\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n        Scorer baseScorer = baseWeight.scorer(context);\n\n        DrillSidewaysScorer.DocsAndCost[] dims = new DrillSidewaysScorer.DocsAndCost[drillDowns.length];\n        int nullCount = 0;\n        for(int dim=0;dim<dims.length;dim++) {\n          Scorer scorer = drillDowns[dim].scorer(context);\n          if (scorer == null) {\n            nullCount++;\n            scorer = new ConstantScoreScorer(drillDowns[dim], 0f, scoreMode, DocIdSetIterator.empty());\n          }\n\n          dims[dim] = new DrillSidewaysScorer.DocsAndCost(scorer, drillSidewaysCollectors[dim]);\n        }\n\n        // If more than one dim has no matches, then there\n        // are no hits nor drill-sideways counts.  Or, if we\n        // have only one dim and that dim has no matches,\n        // same thing.\n        //if (nullCount > 1 || (nullCount == 1 && dims.length == 1)) {\n        if (nullCount > 1) {\n          return null;\n        }\n\n        // Sort drill-downs by most restrictive first:\n        Arrays.sort(dims, new Comparator<DrillSidewaysScorer.DocsAndCost>() {\n          @Override\n          public int compare(DocsAndCost o1, DocsAndCost o2) {\n            return Long.compare(o1.approximation.cost(), o2.approximation.cost());\n          }\n        });\n\n        if (baseScorer == null) {\n          return null;\n        }\n\n        return new DrillSidewaysScorer(context,\n                                       baseScorer,\n                                       drillDownCollector, dims,\n                                       scoreSubDocsAtOnce);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c226b0eeb8b028f572020f459851a663a2c064e":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["9c226b0eeb8b028f572020f459851a663a2c064e"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["9c226b0eeb8b028f572020f459851a663a2c064e"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9c226b0eeb8b028f572020f459851a663a2c064e":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}