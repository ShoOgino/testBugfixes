{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","commits":[{"id":"6e02c0d6a64df9c63897458b31d88b5ec3b854a5","date":1454964111,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Method method = findSetter(clazz, setterName, key);\n        final Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) {\n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e40457c1de3323920c40a4ef9bdd3d0b8c762f2e","date":1464372426,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass());\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Method method = findSetter(clazz, setterName, key);\n        final Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass());\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Method method = findSetter(clazz, setterName, key);\n        final Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"492da3bdf5b2efd7bb71165413a8c5017d4930ba","date":1464800307,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Method method = findSetter(clazz, setterName, key);\n        final Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass());\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["985e4be82ca11f73b80fb7dc43bc2c8816a892a5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Method method = findSetter(clazz, setterName, key);\n        final Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass());\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Method method = findSetter(clazz, setterName, key);\n        final Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass());\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"985e4be82ca11f73b80fb7dc43bc2c8816a892a5","date":1465819508,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass());\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Method method = findSetter(clazz, setterName, key);\n        final Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":["492da3bdf5b2efd7bb71165413a8c5017d4930ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass());\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Method method = findSetter(clazz, setterName, key);\n        final Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass());\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Method method = findSetter(clazz, setterName, key);\n        final Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","date":1494330459,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    invokeSetters(bean, initArgs, false);\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass());\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,Iterable[Map.Entry[String,Object]]).mjava","sourceNew":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    invokeSetters(bean, initArgs, false);\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, Iterable<Map.Entry<String,Object>> initArgs) {\n    if (initArgs == null) return;\n    final Class<?> clazz = bean.getClass();\n    for (Map.Entry<String,Object> entry : initArgs) {\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      try {\n        final Object val = entry.getValue();\n        final Method method = findSetter(clazz, setterName, key, val.getClass());\n        method.invoke(bean, val);\n      } catch (InvocationTargetException | IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"492da3bdf5b2efd7bb71165413a8c5017d4930ba":["e40457c1de3323920c40a4ef9bdd3d0b8c762f2e"],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["da8a02bef7458089240404614139b53c9f875ec7","6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"da8a02bef7458089240404614139b53c9f875ec7":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5","e40457c1de3323920c40a4ef9bdd3d0b8c762f2e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"985e4be82ca11f73b80fb7dc43bc2c8816a892a5":["1f69e96b07e265f3e18957be540909b01fae36f8"],"e40457c1de3323920c40a4ef9bdd3d0b8c762f2e":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f69e96b07e265f3e18957be540909b01fae36f8":["e40457c1de3323920c40a4ef9bdd3d0b8c762f2e","492da3bdf5b2efd7bb71165413a8c5017d4930ba"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["1f69e96b07e265f3e18957be540909b01fae36f8","985e4be82ca11f73b80fb7dc43bc2c8816a892a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"]},"commit2Childs":{"492da3bdf5b2efd7bb71165413a8c5017d4930ba":["1f69e96b07e265f3e18957be540909b01fae36f8"],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","da8a02bef7458089240404614139b53c9f875ec7","e40457c1de3323920c40a4ef9bdd3d0b8c762f2e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"da8a02bef7458089240404614139b53c9f875ec7":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"985e4be82ca11f73b80fb7dc43bc2c8816a892a5":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"e40457c1de3323920c40a4ef9bdd3d0b8c762f2e":["492da3bdf5b2efd7bb71165413a8c5017d4930ba","da8a02bef7458089240404614139b53c9f875ec7","1f69e96b07e265f3e18957be540909b01fae36f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"1f69e96b07e265f3e18957be540909b01fae36f8":["985e4be82ca11f73b80fb7dc43bc2c8816a892a5","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}