{"path":"solr/core/src/java/org/apache/solr/core/RequestParams#RequestParams(Map,int).mjava","commits":[{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#RequestParams(Map,int).mjava","pathOld":"/dev/null","sourceNew":"  public RequestParams(Map data, int znodeVersion) {\n    if(data == null) data = Collections.EMPTY_MAP;\n    this.data = data;\n    Map paramsets = (Map) data.get(NAME);\n    if(paramsets != null) {\n      for (Object o : paramsets.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof Map) {\n          Map value = (Map) e.getValue();\n          Map copy = new LinkedHashMap<>(value);\n          Map meta = (Map) copy.remove(\"\");\n          this.paramsets.put((String) e.getKey(), new VersionedParams(Collections.unmodifiableMap(copy) ,meta));\n        }\n      }\n    }\n    this.znodeVersion = znodeVersion;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["01ff1eeea394f76a66d8998b861d33d8546b8ca4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01ff1eeea394f76a66d8998b861d33d8546b8ca4","date":1422517232,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#RequestParams(Map,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#RequestParams(Map,int).mjava","sourceNew":"  public RequestParams(Map data, int znodeVersion) {\n    if(data == null) data = Collections.EMPTY_MAP;\n    this.data = data;\n    Map paramsets = (Map) data.get(NAME);\n    if(paramsets != null) {\n      for (Object o : paramsets.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof Map) {\n          Map value = (Map) e.getValue();\n          Map copy = getMapCopy(value);\n          Map meta = (Map) copy.remove(\"\");\n          this.paramsets.put((String) e.getKey(), new VersionedParams(Collections.unmodifiableMap(copy) ,meta));\n        }\n      }\n    }\n    this.znodeVersion = znodeVersion;\n  }\n\n","sourceOld":"  public RequestParams(Map data, int znodeVersion) {\n    if(data == null) data = Collections.EMPTY_MAP;\n    this.data = data;\n    Map paramsets = (Map) data.get(NAME);\n    if(paramsets != null) {\n      for (Object o : paramsets.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof Map) {\n          Map value = (Map) e.getValue();\n          Map copy = new LinkedHashMap<>(value);\n          Map meta = (Map) copy.remove(\"\");\n          this.paramsets.put((String) e.getKey(), new VersionedParams(Collections.unmodifiableMap(copy) ,meta));\n        }\n      }\n    }\n    this.znodeVersion = znodeVersion;\n  }\n\n","bugFix":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#RequestParams(Map,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#RequestParams(Map,int).mjava","sourceNew":"  public RequestParams(Map data, int znodeVersion) {\n    if (data == null) data = Collections.EMPTY_MAP;\n    this.data = data;\n    Map paramsets = (Map) data.get(NAME);\n    if (paramsets != null) {\n      for (Object o : paramsets.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof Map) {\n          Map value = (Map) e.getValue();\n          Map copy = getMapCopy(value);\n          Map meta = (Map) copy.remove(\"\");\n          this.paramsets.put((String) e.getKey(), new VersionedParams(Collections.unmodifiableMap(copy), meta));\n        }\n      }\n    }\n    this.znodeVersion = znodeVersion;\n  }\n\n","sourceOld":"  public RequestParams(Map data, int znodeVersion) {\n    if(data == null) data = Collections.EMPTY_MAP;\n    this.data = data;\n    Map paramsets = (Map) data.get(NAME);\n    if(paramsets != null) {\n      for (Object o : paramsets.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof Map) {\n          Map value = (Map) e.getValue();\n          Map copy = getMapCopy(value);\n          Map meta = (Map) copy.remove(\"\");\n          this.paramsets.put((String) e.getKey(), new VersionedParams(Collections.unmodifiableMap(copy) ,meta));\n        }\n      }\n    }\n    this.znodeVersion = znodeVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#RequestParams(Map,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#RequestParams(Map,int).mjava","sourceNew":"  public RequestParams(Map data, int znodeVersion) {\n    if (data == null) data = Collections.EMPTY_MAP;\n    this.data = data;\n    Map paramsets = (Map) data.get(NAME);\n    if (paramsets != null) {\n      for (Object o : paramsets.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof Map) {\n          Map value = (Map) e.getValue();\n          this.paramsets.put((String) e.getKey(), createParamSet(value, 0l));\n        }\n      }\n    }\n    this.znodeVersion = znodeVersion;\n  }\n\n","sourceOld":"  public RequestParams(Map data, int znodeVersion) {\n    if (data == null) data = Collections.EMPTY_MAP;\n    this.data = data;\n    Map paramsets = (Map) data.get(NAME);\n    if (paramsets != null) {\n      for (Object o : paramsets.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof Map) {\n          Map value = (Map) e.getValue();\n          Map copy = getMapCopy(value);\n          Map meta = (Map) copy.remove(\"\");\n          this.paramsets.put((String) e.getKey(), new VersionedParams(Collections.unmodifiableMap(copy), meta));\n        }\n      }\n    }\n    this.znodeVersion = znodeVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#RequestParams(Map,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#RequestParams(Map,int).mjava","sourceNew":"  public RequestParams(Map data, int znodeVersion) {\n    if (data == null) data = Collections.EMPTY_MAP;\n    this.data = data;\n    Map paramsets = (Map) data.get(NAME);\n    if (paramsets != null) {\n      for (Object o : paramsets.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof Map) {\n          Map value = (Map) e.getValue();\n          this.paramsets.put((String) e.getKey(), createParamSet(value, 0l));\n        }\n      }\n    }\n    this.znodeVersion = znodeVersion;\n  }\n\n","sourceOld":"  public RequestParams(Map data, int znodeVersion) {\n    if (data == null) data = Collections.EMPTY_MAP;\n    this.data = data;\n    Map paramsets = (Map) data.get(NAME);\n    if (paramsets != null) {\n      for (Object o : paramsets.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof Map) {\n          Map value = (Map) e.getValue();\n          Map copy = getMapCopy(value);\n          Map meta = (Map) copy.remove(\"\");\n          this.paramsets.put((String) e.getKey(), new VersionedParams(Collections.unmodifiableMap(copy), meta));\n        }\n      }\n    }\n    this.znodeVersion = znodeVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestParams#RequestParams(Map,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestParams#RequestParams(Map,int).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public RequestParams(Map data, int znodeVersion) {\n    if (data == null) data = Collections.EMPTY_MAP;\n    this.data = data;\n    Map paramsets = (Map) data.get(NAME);\n    if (paramsets != null) {\n      for (Object o : paramsets.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof Map) {\n          Map value = (Map) e.getValue();\n          this.paramsets.put((String) e.getKey(), createParamSet(value, 0l));\n        }\n      }\n    }\n    this.znodeVersion = znodeVersion;\n  }\n\n","sourceOld":"  public RequestParams(Map data, int znodeVersion) {\n    if (data == null) data = Collections.EMPTY_MAP;\n    this.data = data;\n    Map paramsets = (Map) data.get(NAME);\n    if (paramsets != null) {\n      for (Object o : paramsets.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof Map) {\n          Map value = (Map) e.getValue();\n          this.paramsets.put((String) e.getKey(), createParamSet(value, 0l));\n        }\n      }\n    }\n    this.znodeVersion = znodeVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"2330174b38007b9942205a2679db9ddffe35af89":["01ff1eeea394f76a66d8998b861d33d8546b8ca4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"01ff1eeea394f76a66d8998b861d33d8546b8ca4":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"a5296efc4b319f5647b606629c093a94b23692c6":["2330174b38007b9942205a2679db9ddffe35af89","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["2330174b38007b9942205a2679db9ddffe35af89"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2330174b38007b9942205a2679db9ddffe35af89":["a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"01ff1eeea394f76a66d8998b861d33d8546b8ca4":["2330174b38007b9942205a2679db9ddffe35af89"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["75237075d8425856bf4bbf52a6be4f9162b8187d","a5296efc4b319f5647b606629c093a94b23692c6"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["01ff1eeea394f76a66d8998b861d33d8546b8ca4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}