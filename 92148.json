{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84b590669deb3d3a471cec6cb13b104b2ee94418","date":1288889547,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":null,"sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84b590669deb3d3a471cec6cb13b104b2ee94418":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["132903c28af3aa6f67284b78de91c0f0a99488c2","84b590669deb3d3a471cec6cb13b104b2ee94418"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","84b590669deb3d3a471cec6cb13b104b2ee94418"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84b590669deb3d3a471cec6cb13b104b2ee94418"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"84b590669deb3d3a471cec6cb13b104b2ee94418":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":[],"132903c28af3aa6f67284b78de91c0f0a99488c2":["84b590669deb3d3a471cec6cb13b104b2ee94418","85a883878c0af761245ab048babc63d099f835f3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["132903c28af3aa6f67284b78de91c0f0a99488c2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}