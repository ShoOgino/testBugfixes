{"path":"solr/test-framework/src/test/org/apache/solr/TestLogLevelAnnotations#checkLogLevelsBeforeClass().mjava","commits":[{"id":"86ca4dae7c5e12c39255e15568e91dd428619428","date":1576619925,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/test/org/apache/solr/TestLogLevelAnnotations#checkLogLevelsBeforeClass().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Sanity check that our <code>AfterClass</code> logic is valid, and isn't broken right from the start\n   *\n   * @see #checkLogLevelsAfterClass\n   */\n  @BeforeClass\n  public static void checkLogLevelsBeforeClass() {\n    final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    final Configuration config = ctx.getConfiguration();\n\n    // NOTE: we're checking the CONFIGURATION of the loggers, not the \"effective\" value of the Logger\n    assertEquals(DEFAULT_LOG_LEVEL, config.getRootLogger().getLevel());\n    assertEquals(\"Your Logger conf sets a level on a bogus package that breaks this test: \"\n                 + bogus_logger_prefix,\n                 config.getRootLogger(),\n                 config.getLoggerConfig(bogus_logger_prefix));\n    assertEquals(Level.ERROR, config.getLoggerConfig(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, config.getLoggerConfig(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n\n    // Now sanity check the EFFECTIVE Level of these loggers before the methods run...\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getRootLogger().getLevel());\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getLogger(bogus_logger_prefix).getLevel());\n    assertEquals(Level.ERROR, LogManager.getLogger(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, LogManager.getLogger(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6704256f38cfb3c0203bdba13cf4111c3657eaa6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/test/org/apache/solr/TestLogLevelAnnotations#checkLogLevelsBeforeClass().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Sanity check that our <code>AfterClass</code> logic is valid, and isn't broken right from the start\n   *\n   * @see #checkLogLevelsAfterClass\n   */\n  @BeforeClass\n  public static void checkLogLevelsBeforeClass() {\n    final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    final Configuration config = ctx.getConfiguration();\n\n    // NOTE: we're checking the CONFIGURATION of the loggers, not the \"effective\" value of the Logger\n    assertEquals(DEFAULT_LOG_LEVEL, config.getRootLogger().getLevel());\n    assertEquals(\"Your Logger conf sets a level on a bogus package that breaks this test: \"\n                 + bogus_logger_prefix,\n                 config.getRootLogger(),\n                 config.getLoggerConfig(bogus_logger_prefix));\n    assertEquals(Level.ERROR, config.getLoggerConfig(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, config.getLoggerConfig(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n\n    // Now sanity check the EFFECTIVE Level of these loggers before the methods run...\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getRootLogger().getLevel());\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getLogger(bogus_logger_prefix).getLevel());\n    assertEquals(Level.ERROR, LogManager.getLogger(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, LogManager.getLogger(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6704256f38cfb3c0203bdba13cf4111c3657eaa6","date":1576712194,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/test/org/apache/solr/TestLogLevelAnnotations#checkLogLevelsBeforeClass().mjava","pathOld":"solr/test-framework/src/test/org/apache/solr/TestLogLevelAnnotations#checkLogLevelsBeforeClass().mjava","sourceNew":"  /** \n   * Sanity check that our <code>AfterClass</code> logic is valid, and isn't broken right from the start\n   *\n   * @see #checkLogLevelsAfterClass\n   */\n  @BeforeClass\n  public static void checkLogLevelsBeforeClass() {\n    final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    final Configuration config = ctx.getConfiguration();\n\n    // NOTE: we're checking the CONFIGURATION of the loggers, not the \"effective\" value of the Logger\n    assertEquals(\"Somehow, the configured value of the root logger changed since this class was loaded\",\n                 DEFAULT_LOG_LEVEL, config.getRootLogger().getLevel());\n    assertEquals(\"Your Logger conf sets a level on a bogus package that breaks this test: \"\n                 + bogus_logger_prefix,\n                 config.getRootLogger(),\n                 config.getLoggerConfig(bogus_logger_prefix));\n    assertEquals(Level.ERROR, config.getLoggerConfig(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, config.getLoggerConfig(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n\n    // Now sanity check the EFFECTIVE Level of these loggers before the methods run...\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getRootLogger().getLevel());\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getLogger(bogus_logger_prefix).getLevel());\n    assertEquals(Level.ERROR, LogManager.getLogger(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, LogManager.getLogger(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n  }\n\n","sourceOld":"  /** \n   * Sanity check that our <code>AfterClass</code> logic is valid, and isn't broken right from the start\n   *\n   * @see #checkLogLevelsAfterClass\n   */\n  @BeforeClass\n  public static void checkLogLevelsBeforeClass() {\n    final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    final Configuration config = ctx.getConfiguration();\n\n    // NOTE: we're checking the CONFIGURATION of the loggers, not the \"effective\" value of the Logger\n    assertEquals(DEFAULT_LOG_LEVEL, config.getRootLogger().getLevel());\n    assertEquals(\"Your Logger conf sets a level on a bogus package that breaks this test: \"\n                 + bogus_logger_prefix,\n                 config.getRootLogger(),\n                 config.getLoggerConfig(bogus_logger_prefix));\n    assertEquals(Level.ERROR, config.getLoggerConfig(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, config.getLoggerConfig(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n\n    // Now sanity check the EFFECTIVE Level of these loggers before the methods run...\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getRootLogger().getLevel());\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getLogger(bogus_logger_prefix).getLevel());\n    assertEquals(Level.ERROR, LogManager.getLogger(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, LogManager.getLogger(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n  }\n\n","bugFix":["86ca4dae7c5e12c39255e15568e91dd428619428"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/test/org/apache/solr/TestLogLevelAnnotations#checkLogLevelsBeforeClass().mjava","pathOld":"solr/test-framework/src/test/org/apache/solr/TestLogLevelAnnotations#checkLogLevelsBeforeClass().mjava","sourceNew":"  /** \n   * Sanity check that our <code>AfterClass</code> logic is valid, and isn't broken right from the start\n   *\n   * @see #checkLogLevelsAfterClass\n   */\n  @BeforeClass\n  public static void checkLogLevelsBeforeClass() {\n    final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    final Configuration config = ctx.getConfiguration();\n\n    // NOTE: we're checking the CONFIGURATION of the loggers, not the \"effective\" value of the Logger\n    assertEquals(\"Somehow, the configured value of the root logger changed since this class was loaded\",\n                 DEFAULT_LOG_LEVEL, config.getRootLogger().getLevel());\n    assertEquals(\"Your Logger conf sets a level on a bogus package that breaks this test: \"\n                 + bogus_logger_prefix,\n                 config.getRootLogger(),\n                 config.getLoggerConfig(bogus_logger_prefix));\n    assertEquals(Level.ERROR, config.getLoggerConfig(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, config.getLoggerConfig(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n\n    // Now sanity check the EFFECTIVE Level of these loggers before the methods run...\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getRootLogger().getLevel());\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getLogger(bogus_logger_prefix).getLevel());\n    assertEquals(Level.ERROR, LogManager.getLogger(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, LogManager.getLogger(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n  }\n\n","sourceOld":"  /** \n   * Sanity check that our <code>AfterClass</code> logic is valid, and isn't broken right from the start\n   *\n   * @see #checkLogLevelsAfterClass\n   */\n  @BeforeClass\n  public static void checkLogLevelsBeforeClass() {\n    final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    final Configuration config = ctx.getConfiguration();\n\n    // NOTE: we're checking the CONFIGURATION of the loggers, not the \"effective\" value of the Logger\n    assertEquals(DEFAULT_LOG_LEVEL, config.getRootLogger().getLevel());\n    assertEquals(\"Your Logger conf sets a level on a bogus package that breaks this test: \"\n                 + bogus_logger_prefix,\n                 config.getRootLogger(),\n                 config.getLoggerConfig(bogus_logger_prefix));\n    assertEquals(Level.ERROR, config.getLoggerConfig(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, config.getLoggerConfig(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n\n    // Now sanity check the EFFECTIVE Level of these loggers before the methods run...\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getRootLogger().getLevel());\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getLogger(bogus_logger_prefix).getLevel());\n    assertEquals(Level.ERROR, LogManager.getLogger(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, LogManager.getLogger(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86ca4dae7c5e12c39255e15568e91dd428619428"],"86ca4dae7c5e12c39255e15568e91dd428619428":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["246314af59d76a47fccc31e9494eefee01ec9c00","6704256f38cfb3c0203bdba13cf4111c3657eaa6"],"6704256f38cfb3c0203bdba13cf4111c3657eaa6":["86ca4dae7c5e12c39255e15568e91dd428619428"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6704256f38cfb3c0203bdba13cf4111c3657eaa6"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":["4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"86ca4dae7c5e12c39255e15568e91dd428619428":["246314af59d76a47fccc31e9494eefee01ec9c00","6704256f38cfb3c0203bdba13cf4111c3657eaa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["246314af59d76a47fccc31e9494eefee01ec9c00","86ca4dae7c5e12c39255e15568e91dd428619428"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"6704256f38cfb3c0203bdba13cf4111c3657eaa6":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}