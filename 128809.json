{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/WordlistLoader#makeWordTable(String[],int).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/WordlistLoader#makeWordTable(String[],int).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/nl/WordlistLoader#makeWordTable(String[],int).mjava","sourceNew":"  /**\n   * Builds the wordlist table.\n   *\n   * @param words  Word that where read\n   * @param length Amount of words that where read into <tt>words</tt>\n   */\n  private static HashMap makeWordTable(String[] words, int length) {\n    HashMap table = new HashMap(length);\n    for (int i = 0; i < length; i++) {\n      table.put(words[i], words[i]);\n    }\n    return table;\n  }\n\n","sourceOld":"  /**\n   * Builds the wordlist table.\n   *\n   * @param words  Word that where read\n   * @param length Amount of words that where read into <tt>words</tt>\n   */\n  private static HashMap makeWordTable(String[] words, int length) {\n    HashMap table = new HashMap(length);\n    for (int i = 0; i < length; i++) {\n      table.put(words[i], words[i]);\n    }\n    return table;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d86ee815609df4728ec2eb39a346d428eab1f14d","date":1256929470,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/nl/WordlistLoader#makeWordTable(String[],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Builds the wordlist table.\n   *\n   * @param words  Word that where read\n   * @param length Amount of words that where read into <tt>words</tt>\n   */\n  private static HashMap makeWordTable(String[] words, int length) {\n    HashMap table = new HashMap(length);\n    for (int i = 0; i < length; i++) {\n      table.put(words[i], words[i]);\n    }\n    return table;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d86ee815609df4728ec2eb39a346d428eab1f14d":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d86ee815609df4728ec2eb39a346d428eab1f14d"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["d86ee815609df4728ec2eb39a346d428eab1f14d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"d86ee815609df4728ec2eb39a346d428eab1f14d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}