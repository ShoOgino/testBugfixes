{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","commits":[{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      @SuppressWarnings(\"unchecked\")\n      Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n      suggestionMap.put(n, s);\n      suggestions.add(s);\n    }\n    \n    Boolean correctlySpelled = (Boolean) spellInfo.get(\"correctlySpelled\");\n    if (correctlySpelled != null) {\n      this.correctlySpelled = correctlySpelled;\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> coll = (NamedList<Object>) spellInfo.get(\"collations\");\n    if (coll != null) {\n      // The 'collationInternalRank' values are ignored so we only care 'collation's.\n      List<Object> collationInfo = coll.getAll(\"collation\");\n      collations = new ArrayList<>(collationInfo.size());\n      for (Object o : collationInfo) {\n        if (o instanceof String) {\n          collations.add(new Collation()\n              .setCollationQueryString((String) o));\n        } else if (o instanceof NamedList) {\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Object> expandedCollation = (NamedList<Object>) o;\n          String collationQuery\n            = (String) expandedCollation.get(\"collationQuery\");\n          int hits = (Integer) expandedCollation.get(\"hits\");\n          @SuppressWarnings(\"unchecked\")\n          NamedList<String> misspellingsAndCorrections\n            = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n          Collation collation = new Collation();\n          collation.setCollationQueryString(collationQuery);\n          collation.setNumberOfHits(hits);\n\n          for (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n            String misspelling = misspellingsAndCorrections.getName(ii);\n            String correction = misspellingsAndCorrections.getVal(ii);\n            collation.addMisspellingsAndCorrection(new Correction(\n                misspelling, correction));\n          }\n          collations.add(collation);\n        } else {\n          throw new AssertionError(\n              \"Should get Lists of Strings or List of NamedLists here.\");\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      @SuppressWarnings(\"unchecked\")\n      Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n      suggestionMap.put(n, s);\n      suggestions.add(s);\n    }\n    \n    Boolean correctlySpelled = (Boolean) spellInfo.get(\"correctlySpelled\");\n    if (correctlySpelled != null) {\n      this.correctlySpelled = correctlySpelled;\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> coll = (NamedList<Object>) spellInfo.get(\"collations\");\n    if (coll != null) {\n      // The 'collationInternalRank' values are ignored so we only care 'collation's.\n      List<Object> collationInfo = coll.getAll(\"collation\");\n      collations = new ArrayList<>(collationInfo.size());\n      for (Object o : collationInfo) {\n        if (o instanceof String) {\n          collations.add(new Collation()\n              .setCollationQueryString((String) o));\n        } else if (o instanceof NamedList) {\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Object> expandedCollation = (NamedList<Object>) o;\n          String collationQuery\n            = (String) expandedCollation.get(\"collationQuery\");\n          long hits = ((Number) expandedCollation.get(\"hits\")).longValue();\n          @SuppressWarnings(\"unchecked\")\n          NamedList<String> misspellingsAndCorrections\n            = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n          Collation collation = new Collation();\n          collation.setCollationQueryString(collationQuery);\n          collation.setNumberOfHits(hits);\n\n          for (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n            String misspelling = misspellingsAndCorrections.getName(ii);\n            String correction = misspellingsAndCorrections.getVal(ii);\n            collation.addMisspellingsAndCorrection(new Correction(\n                misspelling, correction));\n          }\n          collations.add(collation);\n        } else {\n          throw new AssertionError(\n              \"Should get Lists of Strings or List of NamedLists here.\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      @SuppressWarnings(\"unchecked\")\n      Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n      suggestionMap.put(n, s);\n      suggestions.add(s);\n    }\n    \n    Boolean correctlySpelled = (Boolean) spellInfo.get(\"correctlySpelled\");\n    if (correctlySpelled != null) {\n      this.correctlySpelled = correctlySpelled;\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> coll = (NamedList<Object>) spellInfo.get(\"collations\");\n    if (coll != null) {\n      // The 'collationInternalRank' values are ignored so we only care 'collation's.\n      List<Object> collationInfo = coll.getAll(\"collation\");\n      collations = new ArrayList<>(collationInfo.size());\n      for (Object o : collationInfo) {\n        if (o instanceof String) {\n          collations.add(new Collation()\n              .setCollationQueryString((String) o));\n        } else if (o instanceof NamedList) {\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Object> expandedCollation = (NamedList<Object>) o;\n          String collationQuery\n            = (String) expandedCollation.get(\"collationQuery\");\n          int hits = (Integer) expandedCollation.get(\"hits\");\n          @SuppressWarnings(\"unchecked\")\n          NamedList<String> misspellingsAndCorrections\n            = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n          Collation collation = new Collation();\n          collation.setCollationQueryString(collationQuery);\n          collation.setNumberOfHits(hits);\n\n          for (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n            String misspelling = misspellingsAndCorrections.getName(ii);\n            String correction = misspellingsAndCorrections.getVal(ii);\n            collation.addMisspellingsAndCorrection(new Correction(\n                misspelling, correction));\n          }\n          collations.add(collation);\n        } else {\n          throw new AssertionError(\n              \"Should get Lists of Strings or List of NamedLists here.\");\n        }\n      }\n    }\n  }\n\n","bugFix":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      @SuppressWarnings(\"unchecked\")\n      Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n      suggestionMap.put(n, s);\n      suggestions.add(s);\n    }\n    \n    Boolean correctlySpelled = (Boolean) spellInfo.get(\"correctlySpelled\");\n    if (correctlySpelled != null) {\n      this.correctlySpelled = correctlySpelled;\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> coll = (NamedList<Object>) spellInfo.get(\"collations\");\n    if (coll != null) {\n      // The 'collationInternalRank' values are ignored so we only care 'collation's.\n      List<Object> collationInfo = coll.getAll(\"collation\");\n      collations = new ArrayList<>(collationInfo.size());\n      for (Object o : collationInfo) {\n        if (o instanceof String) {\n          collations.add(new Collation()\n              .setCollationQueryString((String) o));\n        } else if (o instanceof NamedList) {\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Object> expandedCollation = (NamedList<Object>) o;\n          String collationQuery\n            = (String) expandedCollation.get(\"collationQuery\");\n          long hits = ((Number) expandedCollation.get(\"hits\")).longValue();\n          @SuppressWarnings(\"unchecked\")\n          NamedList<String> misspellingsAndCorrections\n            = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n          Collation collation = new Collation();\n          collation.setCollationQueryString(collationQuery);\n          collation.setNumberOfHits(hits);\n\n          for (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n            String misspelling = misspellingsAndCorrections.getName(ii);\n            String correction = misspellingsAndCorrections.getVal(ii);\n            collation.addMisspellingsAndCorrection(new Correction(\n                misspelling, correction));\n          }\n          collations.add(collation);\n        } else {\n          throw new AssertionError(\n              \"Should get Lists of Strings or List of NamedLists here.\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      @SuppressWarnings(\"unchecked\")\n      Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n      suggestionMap.put(n, s);\n      suggestions.add(s);\n    }\n    \n    Boolean correctlySpelled = (Boolean) spellInfo.get(\"correctlySpelled\");\n    if (correctlySpelled != null) {\n      this.correctlySpelled = correctlySpelled;\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> coll = (NamedList<Object>) spellInfo.get(\"collations\");\n    if (coll != null) {\n      // The 'collationInternalRank' values are ignored so we only care 'collation's.\n      List<Object> collationInfo = coll.getAll(\"collation\");\n      collations = new ArrayList<>(collationInfo.size());\n      for (Object o : collationInfo) {\n        if (o instanceof String) {\n          collations.add(new Collation()\n              .setCollationQueryString((String) o));\n        } else if (o instanceof NamedList) {\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Object> expandedCollation = (NamedList<Object>) o;\n          String collationQuery\n            = (String) expandedCollation.get(\"collationQuery\");\n          int hits = (Integer) expandedCollation.get(\"hits\");\n          @SuppressWarnings(\"unchecked\")\n          NamedList<String> misspellingsAndCorrections\n            = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n          Collation collation = new Collation();\n          collation.setCollationQueryString(collationQuery);\n          collation.setNumberOfHits(hits);\n\n          for (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n            String misspelling = misspellingsAndCorrections.getName(ii);\n            String correction = misspellingsAndCorrections.getVal(ii);\n            collation.addMisspellingsAndCorrection(new Correction(\n                misspelling, correction));\n          }\n          collations.add(collation);\n        } else {\n          throw new AssertionError(\n              \"Should get Lists of Strings or List of NamedLists here.\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      @SuppressWarnings(\"unchecked\")\n      Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n      suggestionMap.put(n, s);\n      suggestions.add(s);\n    }\n    \n    Boolean correctlySpelled = (Boolean) spellInfo.get(\"correctlySpelled\");\n    if (correctlySpelled != null) {\n      this.correctlySpelled = correctlySpelled;\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> coll = (NamedList<Object>) spellInfo.get(\"collations\");\n    if (coll != null) {\n      // The 'collationInternalRank' values are ignored so we only care 'collation's.\n      List<Object> collationInfo = coll.getAll(\"collation\");\n      collations = new ArrayList<>(collationInfo.size());\n      for (Object o : collationInfo) {\n        if (o instanceof String) {\n          collations.add(new Collation()\n              .setCollationQueryString((String) o));\n        } else if (o instanceof NamedList) {\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Object> expandedCollation = (NamedList<Object>) o;\n          String collationQuery\n            = (String) expandedCollation.get(\"collationQuery\");\n          long hits = ((Number) expandedCollation.get(\"hits\")).longValue();\n          @SuppressWarnings(\"unchecked\")\n          NamedList<String> misspellingsAndCorrections\n            = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n          Collation collation = new Collation();\n          collation.setCollationQueryString(collationQuery);\n          collation.setNumberOfHits(hits);\n\n          for (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n            String misspelling = misspellingsAndCorrections.getName(ii);\n            String correction = misspellingsAndCorrections.getVal(ii);\n            collation.addMisspellingsAndCorrection(new Correction(\n                misspelling, correction));\n          }\n          collations.add(collation);\n        } else {\n          throw new AssertionError(\n              \"Should get Lists of Strings or List of NamedLists here.\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      @SuppressWarnings(\"unchecked\")\n      Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n      suggestionMap.put(n, s);\n      suggestions.add(s);\n    }\n    \n    Boolean correctlySpelled = (Boolean) spellInfo.get(\"correctlySpelled\");\n    if (correctlySpelled != null) {\n      this.correctlySpelled = correctlySpelled;\n    }\n    \n    @SuppressWarnings(\"unchecked\")\n    NamedList<Object> coll = (NamedList<Object>) spellInfo.get(\"collations\");\n    if (coll != null) {\n      // The 'collationInternalRank' values are ignored so we only care 'collation's.\n      List<Object> collationInfo = coll.getAll(\"collation\");\n      collations = new ArrayList<>(collationInfo.size());\n      for (Object o : collationInfo) {\n        if (o instanceof String) {\n          collations.add(new Collation()\n              .setCollationQueryString((String) o));\n        } else if (o instanceof NamedList) {\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Object> expandedCollation = (NamedList<Object>) o;\n          String collationQuery\n            = (String) expandedCollation.get(\"collationQuery\");\n          int hits = (Integer) expandedCollation.get(\"hits\");\n          @SuppressWarnings(\"unchecked\")\n          NamedList<String> misspellingsAndCorrections\n            = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n          Collation collation = new Collation();\n          collation.setCollationQueryString(collationQuery);\n          collation.setNumberOfHits(hits);\n\n          for (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n            String misspelling = misspellingsAndCorrections.getName(ii);\n            String correction = misspellingsAndCorrections.getVal(ii);\n            collation.addMisspellingsAndCorrection(new Correction(\n                misspelling, correction));\n          }\n          collations.add(collation);\n        } else {\n          throw new AssertionError(\n              \"Should get Lists of Strings or List of NamedLists here.\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"343d2d9477b299075fa3a19a46e654b6c3bf552b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["343d2d9477b299075fa3a19a46e654b6c3bf552b","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["343d2d9477b299075fa3a19a46e654b6c3bf552b","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"343d2d9477b299075fa3a19a46e654b6c3bf552b":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}