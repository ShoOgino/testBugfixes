{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","commits":[{"id":"13452165d8bf3d45a72f572aaed3c679735d3af2","date":1290101307,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"/dev/null","sourceNew":"    RandomCodecProvider(Random random) {\n      if (random.nextInt(5) == 0) {\n        /*\n         * We randomly swap in a exclusive PreFlexCodec to provide random test coverage\n         * for preFlex indexes. In realistic a PreFlex-Environment newer codecs don't occur.    \n         */\n        this.codecs = new Codec[] { new PreFlexRWCodec() };\n      } else {\n        this.codecs = new Codec[] { new StandardCodec(), new SimpleTextCodec(),\n            new MockSepCodec(), new PulsingCodec(1 + random.nextInt(10)),\n            new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n            new MockFixedIntBlockCodec(1 + random.nextInt(10)), };\n        register(new PreFlexCodec()); // register this for read support\n      }\n      for (int i = 0; i < codecs.length; i++) {\n        register(codecs[i]);\n      }\n\n      this.random = random;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bce89597a7c3a4535b5b7f8100c2078e520f6e57","date":1290106041,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":null,"sourceOld":"    RandomCodecProvider(Random random) {\n      if (random.nextInt(5) == 0) {\n        /*\n         * We randomly swap in a exclusive PreFlexCodec to provide random test coverage\n         * for preFlex indexes. In realistic a PreFlex-Environment newer codecs don't occur.    \n         */\n        this.codecs = new Codec[] { new PreFlexRWCodec() };\n      } else {\n        this.codecs = new Codec[] { new StandardCodec(), new SimpleTextCodec(),\n            new MockSepCodec(), new PulsingCodec(1 + random.nextInt(10)),\n            new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n            new MockFixedIntBlockCodec(1 + random.nextInt(10)), };\n        register(new PreFlexCodec()); // register this for read support\n      }\n      for (int i = 0; i < codecs.length; i++) {\n        register(codecs[i]);\n      }\n\n      this.random = random;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab53d2675ddc15e06676aa22e06ab60d13cfcc03","date":1290945467,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider().mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider() {\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"/dev/null","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"/dev/null","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","sourceOld":"    RandomCodecProvider(Random random) {\n      this.perFieldSeed = random.nextInt();\n      register(new StandardCodec());\n      register(new PreFlexCodec());\n      register(new PulsingCodec(1));\n      register(new SimpleTextCodec());\n      Collections.shuffle(knownCodecs, random);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["13452165d8bf3d45a72f572aaed3c679735d3af2"],"ab53d2675ddc15e06676aa22e06ab60d13cfcc03":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab53d2675ddc15e06676aa22e06ab60d13cfcc03"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab53d2675ddc15e06676aa22e06ab60d13cfcc03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["ab53d2675ddc15e06676aa22e06ab60d13cfcc03"]},"commit2Childs":{"bce89597a7c3a4535b5b7f8100c2078e520f6e57":["ab53d2675ddc15e06676aa22e06ab60d13cfcc03"],"13452165d8bf3d45a72f572aaed3c679735d3af2":["bce89597a7c3a4535b5b7f8100c2078e520f6e57"],"ab53d2675ddc15e06676aa22e06ab60d13cfcc03":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13452165d8bf3d45a72f572aaed3c679735d3af2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}