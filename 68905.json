{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/LongCompressor#getGCD(PackedInts.Reader,int,long).mjava","commits":[{"id":"91afec3d1be3c4538a6f92102a22573087f69d68","date":1543843480,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/LongCompressor#getGCD(PackedInts.Reader,int,long).mjava","pathOld":"/dev/null","sourceNew":"  // GCD-code takes & adjusted from Lucene70DocValuesConsumer\n  private static long getGCD(final PackedInts.Reader values, final int length, final long min) {\n    long gcd = -1;\n\n    for (int i = 0 ; i < length ; i++) {\n      long value = values.get(i)-min;\n      if (value == 0) {\n        continue;\n      }\n      if (gcd == -1) {\n        gcd = value;\n        continue;\n      }\n\n      if (value < Long.MIN_VALUE / 2 || value > Long.MAX_VALUE / 2) {\n        // in that case v - minValue might overflow and make the GCD computation return\n        // wrong results. Since these extreme values are unlikely, we just discard\n        // GCD computation for them\n        gcd = 1;\n      } else { // minValue needs to be set first\n        gcd = MathUtil.gcd(gcd, value);\n      }\n\n      if (gcd == 1) {\n        break;\n      }\n    }\n    return gcd == -1 ? 1 : gcd;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90c33633162a86e6323f4cf2b93e2bb168b1dc22","date":1544534062,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/LongCompressor#getGCD(PackedInts.Reader,int,long).mjava","sourceNew":null,"sourceOld":"  // GCD-code takes & adjusted from Lucene70DocValuesConsumer\n  private static long getGCD(final PackedInts.Reader values, final int length, final long min) {\n    long gcd = -1;\n\n    for (int i = 0 ; i < length ; i++) {\n      long value = values.get(i)-min;\n      if (value == 0) {\n        continue;\n      }\n      if (gcd == -1) {\n        gcd = value;\n        continue;\n      }\n\n      if (value < Long.MIN_VALUE / 2 || value > Long.MAX_VALUE / 2) {\n        // in that case v - minValue might overflow and make the GCD computation return\n        // wrong results. Since these extreme values are unlikely, we just discard\n        // GCD computation for them\n        gcd = 1;\n      } else { // minValue needs to be set first\n        gcd = MathUtil.gcd(gcd, value);\n      }\n\n      if (gcd == 1) {\n        break;\n      }\n    }\n    return gcd == -1 ? 1 : gcd;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/LongCompressor#getGCD(PackedInts.Reader,int,long).mjava","sourceNew":null,"sourceOld":"  // GCD-code takes & adjusted from Lucene70DocValuesConsumer\n  private static long getGCD(final PackedInts.Reader values, final int length, final long min) {\n    long gcd = -1;\n\n    for (int i = 0 ; i < length ; i++) {\n      long value = values.get(i)-min;\n      if (value == 0) {\n        continue;\n      }\n      if (gcd == -1) {\n        gcd = value;\n        continue;\n      }\n\n      if (value < Long.MIN_VALUE / 2 || value > Long.MAX_VALUE / 2) {\n        // in that case v - minValue might overflow and make the GCD computation return\n        // wrong results. Since these extreme values are unlikely, we just discard\n        // GCD computation for them\n        gcd = 1;\n      } else { // minValue needs to be set first\n        gcd = MathUtil.gcd(gcd, value);\n      }\n\n      if (gcd == 1) {\n        break;\n      }\n    }\n    return gcd == -1 ? 1 : gcd;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91afec3d1be3c4538a6f92102a22573087f69d68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["91afec3d1be3c4538a6f92102a22573087f69d68","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["91afec3d1be3c4538a6f92102a22573087f69d68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"]},"commit2Childs":{"91afec3d1be3c4538a6f92102a22573087f69d68":["cfd70c9571310639a77f0123aea0db41077d9bb6","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91afec3d1be3c4538a6f92102a22573087f69d68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}