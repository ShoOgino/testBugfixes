{"path":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae);\n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae);\n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase(Locale.ENGLISH);\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae);\n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", iae);\n    }\n    \n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LATEST as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae);\n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46ff533a28b45377dffc601931e60e19492e6384","date":1411292651,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n    \n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LATEST as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", iae);\n    }\n    \n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LATEST as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a148b42821f15791aa5f28e81af98b46b29ecd3","date":1546699862,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  //TODO belongs on SolrXmlConfig?\n  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n    \n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LATEST as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n    \n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LATEST as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#parseLuceneVersionString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  //TODO belongs on SolrXmlConfig?\n  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n    \n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LATEST as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  //TODO belongs on SolrXmlConfig?\n  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n    \n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LATEST as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["3a148b42821f15791aa5f28e81af98b46b29ecd3"],"3a148b42821f15791aa5f28e81af98b46b29ecd3":["46ff533a28b45377dffc601931e60e19492e6384"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"46ff533a28b45377dffc601931e60e19492e6384":["057a1793765d068ea9302f1a29e21734ee58d41e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["c26f00b574427b55127e869b935845554afde1fa"],"057a1793765d068ea9302f1a29e21734ee58d41e":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee622110ba6021d0390037e77574743c1e55348c"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a148b42821f15791aa5f28e81af98b46b29ecd3":["ee622110ba6021d0390037e77574743c1e55348c"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["057a1793765d068ea9302f1a29e21734ee58d41e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"46ff533a28b45377dffc601931e60e19492e6384":["3a148b42821f15791aa5f28e81af98b46b29ecd3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"057a1793765d068ea9302f1a29e21734ee58d41e":["46ff533a28b45377dffc601931e60e19492e6384"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}