{"path":"src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","commits":[{"id":"754182f2def7aee06292f7daf04ebaceb970e931","date":1229276256,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase();\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = new NamedListCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2307281f021c98102266052f57b7938614dbb30d","date":1229692925,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","pathOld":"src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase();\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new NamedListCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase();\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = new NamedListCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18a1b51b47d1035bf90ecfc7d16c739fe983647a","date":1229928361,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","pathOld":"src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase();\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase();\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new NamedListCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","pathOld":"src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase();\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase();\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["2307281f021c98102266052f57b7938614dbb30d"],"ad94625fb8d088209f46650c8097196fec67f00c":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"2307281f021c98102266052f57b7938614dbb30d":["754182f2def7aee06292f7daf04ebaceb970e931"],"754182f2def7aee06292f7daf04ebaceb970e931":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["754182f2def7aee06292f7daf04ebaceb970e931"],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2307281f021c98102266052f57b7938614dbb30d":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"754182f2def7aee06292f7daf04ebaceb970e931":["2307281f021c98102266052f57b7938614dbb30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}