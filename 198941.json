{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testOneLevelSplit().mjava","commits":[{"id":"caf7f9acfdff984e59be68054cc1e0048b8ee030","date":1407766058,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testOneLevelSplit().mjava","pathOld":"/dev/null","sourceNew":"  public void testOneLevelSplit() throws IOException {\n    String json =\"{\\n\" +\n        \" \\\"a\\\":\\\"A\\\" ,\\n\" +\n        \" \\\"b\\\":[\\n\" +\n        \"     {\\\"c\\\":\\\"C\\\",\\\"d\\\":\\\"D\\\" ,\\\"e\\\": {\\n\" +\n        \"                         \\\"s\\\":\\\"S\\\",\\n\" +\n        \"                         \\\"t\\\":3}},\\n\" +\n        \"     {\\\"c\\\":\\\"C1\\\",\\\"d\\\":\\\"D1\\\"},\\n\" +\n        \"     {\\\"c\\\":\\\"C2\\\",\\\"d\\\":\\\"D2\\\"}\\n\" +\n        \" ]\\n\" +\n        \"}\";\n//    System.out.println(json);\n//    All parameters are mapped with field name\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e_s:/b/e/s\",\n        \"e_i:/b/e/t\"\n    ));\n\n    List<Map<String, Object>> records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals( 3l, ((Map)records.get(0)).get(\"e_i\") );\n    assertEquals( \"D2\", ((Map)records.get(2)).get(\"d_s\") );\n    assertNull( ((Map)records.get(1)).get(\"e_s\") );\n    assertNull( ((Map)records.get(2)).get(\"e_s\") );\n    assertNull( ((Map)records.get(1)).get(\"e_i\") );\n    assertNull( ((Map)records.get(2)).get(\"e_i\") );\n\n    //    All parameters but /b/c is omitted\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"d:/b/d\",\n        \"s:/b/e/s\",\n        \"t:/b/e/t\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull( record.get(\"c\") );\n\n    }\n\n    //one nested /b/e/* object is completely ignored\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"c:/b/c\",\n        \"d:/b/d\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull( record.get(\"s\") );\n      assertNull( record.get(\"t\") );\n    }\n\n    //nested /b/e/* object is completely ignored even though /b/e is mapped\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e:/b/e\"\n\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull( record.get(\"s\") );\n      assertNull( record.get(\"t\") );\n      assertNull( record.get(\"e\") );\n    }\n\n\n\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"/b/e/*\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals( 3l, ((Map)records.get(0)).get(\"t\") );\n    assertEquals( \"S\", ((Map)records.get(0)).get(\"s\") );\n    assertNull( ((Map)records.get(1)).get(\"s\") );\n    assertNull( ((Map)records.get(2)).get(\"s\") );\n\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testOneLevelSplit().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testOneLevelSplit().mjava","sourceNew":"  public void testOneLevelSplit() throws IOException {\n    String json = \"{\\n\" +\n        \" \\\"a\\\":\\\"A\\\" ,\\n\" +\n        \" \\\"b\\\":[\\n\" +\n        \"     {\\\"c\\\":\\\"C\\\",\\\"d\\\":\\\"D\\\" ,\\\"e\\\": {\\n\" +\n        \"                         \\\"s\\\":\\\"S\\\",\\n\" +\n        \"                         \\\"t\\\":3}},\\n\" +\n        \"     {\\\"c\\\":\\\"C1\\\",\\\"d\\\":\\\"D1\\\"},\\n\" +\n        \"     {\\\"c\\\":\\\"C2\\\",\\\"d\\\":\\\"D2\\\"}\\n\" +\n        \" ]\\n\" +\n        \"}\";\n//    System.out.println(json);\n//    All parameters are mapped with field name\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e_s:/b/e/s\",\n        \"e_i:/b/e/t\"\n    ));\n\n    List<Map<String, Object>> records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(3l, ((Map) records.get(0)).get(\"e_i\"));\n    assertEquals(\"D2\", ((Map) records.get(2)).get(\"d_s\"));\n    assertNull(((Map) records.get(1)).get(\"e_s\"));\n    assertNull(((Map) records.get(2)).get(\"e_s\"));\n    assertNull(((Map) records.get(1)).get(\"e_i\"));\n    assertNull(((Map) records.get(2)).get(\"e_i\"));\n\n    //    All parameters but /b/c is omitted\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"d:/b/d\",\n        \"s:/b/e/s\",\n        \"t:/b/e/t\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"c\"));\n\n    }\n\n    //one nested /b/e/* object is completely ignored\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"c:/b/c\",\n        \"d:/b/d\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"s\"));\n      assertNull(record.get(\"t\"));\n    }\n\n    //nested /b/e/* object is completely ignored even though /b/e is mapped\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e:/b/e\"\n\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"s\"));\n      assertNull(record.get(\"t\"));\n      assertNull(record.get(\"e\"));\n    }\n\n\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"/b/e/*\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(3l, ((Map) records.get(0)).get(\"t\"));\n    assertEquals(\"S\", ((Map) records.get(0)).get(\"s\"));\n    assertNull(((Map) records.get(1)).get(\"s\"));\n    assertNull(((Map) records.get(2)).get(\"s\"));\n\n\n  }\n\n","sourceOld":"  public void testOneLevelSplit() throws IOException {\n    String json =\"{\\n\" +\n        \" \\\"a\\\":\\\"A\\\" ,\\n\" +\n        \" \\\"b\\\":[\\n\" +\n        \"     {\\\"c\\\":\\\"C\\\",\\\"d\\\":\\\"D\\\" ,\\\"e\\\": {\\n\" +\n        \"                         \\\"s\\\":\\\"S\\\",\\n\" +\n        \"                         \\\"t\\\":3}},\\n\" +\n        \"     {\\\"c\\\":\\\"C1\\\",\\\"d\\\":\\\"D1\\\"},\\n\" +\n        \"     {\\\"c\\\":\\\"C2\\\",\\\"d\\\":\\\"D2\\\"}\\n\" +\n        \" ]\\n\" +\n        \"}\";\n//    System.out.println(json);\n//    All parameters are mapped with field name\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e_s:/b/e/s\",\n        \"e_i:/b/e/t\"\n    ));\n\n    List<Map<String, Object>> records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals( 3l, ((Map)records.get(0)).get(\"e_i\") );\n    assertEquals( \"D2\", ((Map)records.get(2)).get(\"d_s\") );\n    assertNull( ((Map)records.get(1)).get(\"e_s\") );\n    assertNull( ((Map)records.get(2)).get(\"e_s\") );\n    assertNull( ((Map)records.get(1)).get(\"e_i\") );\n    assertNull( ((Map)records.get(2)).get(\"e_i\") );\n\n    //    All parameters but /b/c is omitted\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"d:/b/d\",\n        \"s:/b/e/s\",\n        \"t:/b/e/t\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull( record.get(\"c\") );\n\n    }\n\n    //one nested /b/e/* object is completely ignored\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"c:/b/c\",\n        \"d:/b/d\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull( record.get(\"s\") );\n      assertNull( record.get(\"t\") );\n    }\n\n    //nested /b/e/* object is completely ignored even though /b/e is mapped\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e:/b/e\"\n\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull( record.get(\"s\") );\n      assertNull( record.get(\"t\") );\n      assertNull( record.get(\"e\") );\n    }\n\n\n\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"/b/e/*\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals( 3l, ((Map)records.get(0)).get(\"t\") );\n    assertEquals( \"S\", ((Map)records.get(0)).get(\"s\") );\n    assertNull( ((Map)records.get(1)).get(\"s\") );\n    assertNull( ((Map)records.get(2)).get(\"s\") );\n\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d9512babbd72795eb013cdd392dad2e2b2313e","date":1465331500,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testOneLevelSplit().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testOneLevelSplit().mjava","sourceNew":"  public void testOneLevelSplit() throws IOException {\n    String json = \"{\\n\" +\n        \" \\\"a\\\":\\\"A\\\" ,\\n\" +\n        \" \\\"b\\\":[\\n\" +\n        \"     {\\\"c\\\":\\\"C\\\",\\\"d\\\":\\\"D\\\" ,\\\"e\\\": {\\n\" +\n        \"                         \\\"s\\\":\\\"S\\\",\\n\" +\n        \"                         \\\"t\\\":3}},\\n\" +\n        \"     {\\\"c\\\":\\\"C1\\\",\\\"d\\\":\\\"D1\\\"},\\n\" +\n        \"     {\\\"c\\\":\\\"C2\\\",\\\"d\\\":\\\"D2\\\"}\\n\" +\n        \" ]\\n\" +\n        \"}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e_s:/b/e/s\",\n        \"e_i:/b/e/t\"\n    ));\n\n    List<Map<String, Object>> records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(3l, ((Map) records.get(0)).get(\"e_i\"));\n    assertEquals(\"D2\", ((Map) records.get(2)).get(\"d_s\"));\n    assertNull(((Map) records.get(1)).get(\"e_s\"));\n    assertNull(((Map) records.get(2)).get(\"e_s\"));\n    assertNull(((Map) records.get(1)).get(\"e_i\"));\n    assertNull(((Map) records.get(2)).get(\"e_i\"));\n\n    //    All parameters but /b/c is omitted\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"d:/b/d\",\n        \"s:/b/e/s\",\n        \"t:/b/e/t\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"c\"));\n\n    }\n\n    //one nested /b/e/* object is completely ignored\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"c:/b/c\",\n        \"d:/b/d\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"s\"));\n      assertNull(record.get(\"t\"));\n    }\n\n    //nested /b/e/* object is completely ignored even though /b/e is mapped\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e:/b/e\"\n\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"s\"));\n      assertNull(record.get(\"t\"));\n      assertNull(record.get(\"e\"));\n    }\n\n\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"/b/e/*\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(3l, ((Map) records.get(0)).get(\"t\"));\n    assertEquals(\"S\", ((Map) records.get(0)).get(\"s\"));\n    assertNull(((Map) records.get(1)).get(\"s\"));\n    assertNull(((Map) records.get(2)).get(\"s\"));\n\n\n  }\n\n","sourceOld":"  public void testOneLevelSplit() throws IOException {\n    String json = \"{\\n\" +\n        \" \\\"a\\\":\\\"A\\\" ,\\n\" +\n        \" \\\"b\\\":[\\n\" +\n        \"     {\\\"c\\\":\\\"C\\\",\\\"d\\\":\\\"D\\\" ,\\\"e\\\": {\\n\" +\n        \"                         \\\"s\\\":\\\"S\\\",\\n\" +\n        \"                         \\\"t\\\":3}},\\n\" +\n        \"     {\\\"c\\\":\\\"C1\\\",\\\"d\\\":\\\"D1\\\"},\\n\" +\n        \"     {\\\"c\\\":\\\"C2\\\",\\\"d\\\":\\\"D2\\\"}\\n\" +\n        \" ]\\n\" +\n        \"}\";\n//    System.out.println(json);\n//    All parameters are mapped with field name\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e_s:/b/e/s\",\n        \"e_i:/b/e/t\"\n    ));\n\n    List<Map<String, Object>> records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(3l, ((Map) records.get(0)).get(\"e_i\"));\n    assertEquals(\"D2\", ((Map) records.get(2)).get(\"d_s\"));\n    assertNull(((Map) records.get(1)).get(\"e_s\"));\n    assertNull(((Map) records.get(2)).get(\"e_s\"));\n    assertNull(((Map) records.get(1)).get(\"e_i\"));\n    assertNull(((Map) records.get(2)).get(\"e_i\"));\n\n    //    All parameters but /b/c is omitted\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"d:/b/d\",\n        \"s:/b/e/s\",\n        \"t:/b/e/t\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"c\"));\n\n    }\n\n    //one nested /b/e/* object is completely ignored\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"c:/b/c\",\n        \"d:/b/d\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"s\"));\n      assertNull(record.get(\"t\"));\n    }\n\n    //nested /b/e/* object is completely ignored even though /b/e is mapped\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e:/b/e\"\n\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"s\"));\n      assertNull(record.get(\"t\"));\n      assertNull(record.get(\"e\"));\n    }\n\n\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"/b/e/*\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(3l, ((Map) records.get(0)).get(\"t\"));\n    assertEquals(\"S\", ((Map) records.get(0)).get(\"s\"));\n    assertNull(((Map) records.get(1)).get(\"s\"));\n    assertNull(((Map) records.get(2)).get(\"s\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testOneLevelSplit().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testOneLevelSplit().mjava","sourceNew":"  public void testOneLevelSplit() throws IOException {\n    String json = \"{\\n\" +\n        \" \\\"a\\\":\\\"A\\\" ,\\n\" +\n        \" \\\"b\\\":[\\n\" +\n        \"     {\\\"c\\\":\\\"C\\\",\\\"d\\\":\\\"D\\\" ,\\\"e\\\": {\\n\" +\n        \"                         \\\"s\\\":\\\"S\\\",\\n\" +\n        \"                         \\\"t\\\":3}},\\n\" +\n        \"     {\\\"c\\\":\\\"C1\\\",\\\"d\\\":\\\"D1\\\"},\\n\" +\n        \"     {\\\"c\\\":\\\"C2\\\",\\\"d\\\":\\\"D2\\\"}\\n\" +\n        \" ]\\n\" +\n        \"}\";\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e_s:/b/e/s\",\n        \"e_i:/b/e/t\"\n    ));\n\n    List<Map<String, Object>> records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(3l, ((Map) records.get(0)).get(\"e_i\"));\n    assertEquals(\"D2\", ((Map) records.get(2)).get(\"d_s\"));\n    assertNull(((Map) records.get(1)).get(\"e_s\"));\n    assertNull(((Map) records.get(2)).get(\"e_s\"));\n    assertNull(((Map) records.get(1)).get(\"e_i\"));\n    assertNull(((Map) records.get(2)).get(\"e_i\"));\n\n    //    All parameters but /b/c is omitted\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"d:/b/d\",\n        \"s:/b/e/s\",\n        \"t:/b/e/t\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"c\"));\n\n    }\n\n    //one nested /b/e/* object is completely ignored\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"c:/b/c\",\n        \"d:/b/d\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"s\"));\n      assertNull(record.get(\"t\"));\n    }\n\n    //nested /b/e/* object is completely ignored even though /b/e is mapped\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e:/b/e\"\n\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"s\"));\n      assertNull(record.get(\"t\"));\n      assertNull(record.get(\"e\"));\n    }\n\n\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"/b/e/*\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(3l, ((Map) records.get(0)).get(\"t\"));\n    assertEquals(\"S\", ((Map) records.get(0)).get(\"s\"));\n    assertNull(((Map) records.get(1)).get(\"s\"));\n    assertNull(((Map) records.get(2)).get(\"s\"));\n\n\n  }\n\n","sourceOld":"  public void testOneLevelSplit() throws IOException {\n    String json = \"{\\n\" +\n        \" \\\"a\\\":\\\"A\\\" ,\\n\" +\n        \" \\\"b\\\":[\\n\" +\n        \"     {\\\"c\\\":\\\"C\\\",\\\"d\\\":\\\"D\\\" ,\\\"e\\\": {\\n\" +\n        \"                         \\\"s\\\":\\\"S\\\",\\n\" +\n        \"                         \\\"t\\\":3}},\\n\" +\n        \"     {\\\"c\\\":\\\"C1\\\",\\\"d\\\":\\\"D1\\\"},\\n\" +\n        \"     {\\\"c\\\":\\\"C2\\\",\\\"d\\\":\\\"D2\\\"}\\n\" +\n        \" ]\\n\" +\n        \"}\";\n//    System.out.println(json);\n//    All parameters are mapped with field name\n    JsonRecordReader streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e_s:/b/e/s\",\n        \"e_i:/b/e/t\"\n    ));\n\n    List<Map<String, Object>> records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(3l, ((Map) records.get(0)).get(\"e_i\"));\n    assertEquals(\"D2\", ((Map) records.get(2)).get(\"d_s\"));\n    assertNull(((Map) records.get(1)).get(\"e_s\"));\n    assertNull(((Map) records.get(2)).get(\"e_s\"));\n    assertNull(((Map) records.get(1)).get(\"e_i\"));\n    assertNull(((Map) records.get(2)).get(\"e_i\"));\n\n    //    All parameters but /b/c is omitted\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"d:/b/d\",\n        \"s:/b/e/s\",\n        \"t:/b/e/t\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"c\"));\n\n    }\n\n    //one nested /b/e/* object is completely ignored\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a:/a\",\n        \"c:/b/c\",\n        \"d:/b/d\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"s\"));\n      assertNull(record.get(\"t\"));\n    }\n\n    //nested /b/e/* object is completely ignored even though /b/e is mapped\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"e:/b/e\"\n\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    for (Map<String, Object> record : records) {\n      assertNull(record.get(\"s\"));\n      assertNull(record.get(\"t\"));\n      assertNull(record.get(\"e\"));\n    }\n\n\n    streamer = JsonRecordReader.getInst(\"/b\", Arrays.asList(\n        \"a_s:/a\",\n        \"c_s:/b/c\",\n        \"d_s:/b/d\",\n        \"/b/e/*\"\n    ));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(3, records.size());\n    assertEquals(3l, ((Map) records.get(0)).get(\"t\"));\n    assertEquals(\"S\", ((Map) records.get(0)).get(\"s\"));\n    assertNull(((Map) records.get(1)).get(\"s\"));\n    assertNull(((Map) records.get(2)).get(\"s\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8d9512babbd72795eb013cdd392dad2e2b2313e":["2330174b38007b9942205a2679db9ddffe35af89"],"2330174b38007b9942205a2679db9ddffe35af89":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2330174b38007b9942205a2679db9ddffe35af89","d8d9512babbd72795eb013cdd392dad2e2b2313e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d8d9512babbd72795eb013cdd392dad2e2b2313e"]},"commit2Childs":{"d8d9512babbd72795eb013cdd392dad2e2b2313e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2330174b38007b9942205a2679db9ddffe35af89":["d8d9512babbd72795eb013cdd392dad2e2b2313e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["2330174b38007b9942205a2679db9ddffe35af89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}