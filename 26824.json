{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","commits":[{"id":"61876dc4063744e15bb670e7ac4962c5869c7317","date":1319790210,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (RuntimeException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } catch (IOException e) {\n        log.warn(\"Could not read Solr resource \" + resourceName);\n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() throws IOException {\n          return new ByteArrayInputStream(asBytes);\n        }\n        \n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f0ad5df70eeead1e2377c3b021beca02c5c53de2","f9fddef147e9702c85a51239935df11e5338bfbf","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9fddef147e9702c85a51239935df11e5338bfbf","date":1337590651,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","sourceNew":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (RuntimeException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } catch (IOException e) {\n        log.warn(\"Could not read Solr resource \" + resourceName);\n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() throws IOException {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","sourceOld":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (RuntimeException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } catch (IOException e) {\n        log.warn(\"Could not read Solr resource \" + resourceName);\n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() throws IOException {\n          return new ByteArrayInputStream(asBytes);\n        }\n        \n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","bugFix":["61876dc4063744e15bb670e7ac4962c5869c7317"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","sourceNew":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (RuntimeException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } catch (IOException e) {\n        log.warn(\"Could not read Solr resource \" + resourceName);\n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() throws IOException {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","sourceOld":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (RuntimeException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } catch (IOException e) {\n        log.warn(\"Could not read Solr resource \" + resourceName);\n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() throws IOException {\n          return new ByteArrayInputStream(asBytes);\n        }\n        \n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","sourceNew":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (RuntimeException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } catch (IOException e) {\n        log.warn(\"Could not read Solr resource \" + resourceName);\n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","sourceOld":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (RuntimeException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } catch (IOException e) {\n        log.warn(\"Could not read Solr resource \" + resourceName);\n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() throws IOException {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","bugFix":["61876dc4063744e15bb670e7ac4962c5869c7317"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","sourceNew":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (RuntimeException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } catch (IOException e) {\n        log.warn(\"Could not read Solr resource \" + resourceName);\n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","sourceOld":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (RuntimeException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } catch (IOException e) {\n        log.warn(\"Could not read Solr resource \" + resourceName);\n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() throws IOException {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0ad5df70eeead1e2377c3b021beca02c5c53de2","date":1357128409,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","sourceNew":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (IOException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","sourceOld":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (RuntimeException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } catch (IOException e) {\n        log.warn(\"Could not read Solr resource \" + resourceName);\n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","bugFix":["61876dc4063744e15bb670e7ac4962c5869c7317"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","sourceNew":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (IOException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","sourceOld":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (RuntimeException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } catch (IOException e) {\n        log.warn(\"Could not read Solr resource \" + resourceName);\n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9d760ce88b54634b37e6de1cf1ff5d6d66cd622","date":1376037561,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","sourceNew":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (IOException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) {\n          try {\n            resourceStream.close();\n          } catch (IOException e) {\n            // ignore.\n          }\n        }\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","sourceOld":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (IOException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","sourceNew":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (IOException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) {\n          try {\n            resourceStream.close();\n          } catch (IOException e) {\n            // ignore.\n          }\n        }\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","sourceOld":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (IOException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) Closeables.closeQuietly(resourceStream);\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2f15ce56e25538825682a41ccb854c1d82e0e95","date":1378972163,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine.SolrResourceLocator#getAll(String).mjava","sourceNew":null,"sourceOld":"    @Override\n    public IResource[] getAll(final String resource) {\n      final String resourceName = carrot2ResourcesDir + \"/\" + resource;\n      log.debug(\"Looking for Solr resource: \" + resourceName);\n\n      InputStream resourceStream = null;\n      final byte [] asBytes;\n      try {\n        resourceStream = resourceLoader.openResource(resourceName);\n        asBytes = IOUtils.toByteArray(resourceStream);\n      } catch (IOException e) {\n        log.debug(\"Resource not found in Solr's config: \" + resourceName\n            + \". Using the default \" + resource + \" from Carrot JAR.\");          \n        return new IResource[] {};\n      } finally {\n        if (resourceStream != null) {\n          try {\n            resourceStream.close();\n          } catch (IOException e) {\n            // ignore.\n          }\n        }\n      }\n\n      log.info(\"Loaded Solr resource: \" + resourceName);\n\n      final IResource foundResource = new IResource() {\n        @Override\n        public InputStream open() {\n          return new ByteArrayInputStream(asBytes);\n        }\n\n        @Override\n        public int hashCode() {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.hashCode();\n        }\n        \n        @Override\n        public boolean equals(Object obj) {\n          // In case multiple resources are found they will be deduped, but we don't use it in Solr,\n          // so simply rely on instance equivalence.\n          return super.equals(obj);\n        }\n\n        @Override\n        public String toString() {\n          return \"Solr config resource: \" + resourceName;\n        }\n      };\n\n      return new IResource[] { foundResource };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","f0ad5df70eeead1e2377c3b021beca02c5c53de2"],"f0ad5df70eeead1e2377c3b021beca02c5c53de2":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["f0ad5df70eeead1e2377c3b021beca02c5c53de2","b9d760ce88b54634b37e6de1cf1ff5d6d66cd622"],"c2f15ce56e25538825682a41ccb854c1d82e0e95":["b9d760ce88b54634b37e6de1cf1ff5d6d66cd622"],"f9fddef147e9702c85a51239935df11e5338bfbf":["61876dc4063744e15bb670e7ac4962c5869c7317"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["f9fddef147e9702c85a51239935df11e5338bfbf","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b9d760ce88b54634b37e6de1cf1ff5d6d66cd622":["f0ad5df70eeead1e2377c3b021beca02c5c53de2"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["f9fddef147e9702c85a51239935df11e5338bfbf"],"61876dc4063744e15bb670e7ac4962c5869c7317":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef0d8a69209261514c5739c770bba706c2308450":["61876dc4063744e15bb670e7ac4962c5869c7317","f9fddef147e9702c85a51239935df11e5338bfbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2f15ce56e25538825682a41ccb854c1d82e0e95"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"f0ad5df70eeead1e2377c3b021beca02c5c53de2":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b9d760ce88b54634b37e6de1cf1ff5d6d66cd622"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c2f15ce56e25538825682a41ccb854c1d82e0e95":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9fddef147e9702c85a51239935df11e5338bfbf":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe","ef0d8a69209261514c5739c770bba706c2308450"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61876dc4063744e15bb670e7ac4962c5869c7317"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f0ad5df70eeead1e2377c3b021beca02c5c53de2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b9d760ce88b54634b37e6de1cf1ff5d6d66cd622":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c2f15ce56e25538825682a41ccb854c1d82e0e95"],"61876dc4063744e15bb670e7ac4962c5869c7317":["f9fddef147e9702c85a51239935df11e5338bfbf","ef0d8a69209261514c5739c770bba706c2308450"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fe33227f6805edab2036cbb80645cc4e2d1fa424","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}