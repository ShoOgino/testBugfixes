{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getDepth().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getDepth().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getDepth().mjava","sourceNew":"  /**\n   * How deeply to look under the given category. If the depth is 0,\n   * only the category itself is counted. If the depth is 1, its immediate\n   * children are also counted, and so on. If the depth is Integer.MAX_VALUE,\n   * all the category's descendants are counted.<br>\n   */\n  public final int getDepth() {\n    // TODO add AUTO_EXPAND option  \n    return depth;\n  }\n\n","sourceOld":"  /**\n   * How deeply to look under the given category. If the depth is 0,\n   * only the category itself is counted. If the depth is 1, its immediate\n   * children are also counted, and so on. If the depth is Integer.MAX_VALUE,\n   * all the category's descendants are counted.<br>\n   */\n  public final int getDepth() {\n    // TODO add AUTO_EXPAND option  \n    return depth;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7e774da82c7db7701e3fb9b13910a57e7296d0f","date":1374814904,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getDepth().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getDepth().mjava","sourceNew":"  /**\n   * How deeply to look under {@link #categoryPath}. By default, only its\n   * immediate children are aggregated (depth=1). If set to\n   * {@code Integer.MAX_VALUE}, the entire sub-tree of the category will be\n   * aggregated.\n   * <p>\n   * <b>NOTE:</b> setting depth to 0 means that only the category itself should\n   * be aggregated. In that case, make sure to index the category with\n   * {@link OrdinalPolicy#ALL_PARENTS}, unless it is not the root category (the\n   * dimension), in which case {@link OrdinalPolicy#ALL_BUT_DIMENSION} is fine\n   * too.\n   */\n  public final int getDepth() {\n    // TODO an AUTO_EXPAND option could be useful  \n    return depth;\n  }\n\n","sourceOld":"  /**\n   * How deeply to look under the given category. If the depth is 0,\n   * only the category itself is counted. If the depth is 1, its immediate\n   * children are also counted, and so on. If the depth is Integer.MAX_VALUE,\n   * all the category's descendants are counted.<br>\n   */\n  public final int getDepth() {\n    // TODO add AUTO_EXPAND option  \n    return depth;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getDepth().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getDepth().mjava","sourceNew":"  /**\n   * How deeply to look under {@link #categoryPath}. By default, only its\n   * immediate children are aggregated (depth=1). If set to\n   * {@code Integer.MAX_VALUE}, the entire sub-tree of the category will be\n   * aggregated.\n   * <p>\n   * <b>NOTE:</b> setting depth to 0 means that only the category itself should\n   * be aggregated. In that case, make sure to index the category with\n   * {@link OrdinalPolicy#ALL_PARENTS}, unless it is not the root category (the\n   * dimension), in which case {@link OrdinalPolicy#ALL_BUT_DIMENSION} is fine\n   * too.\n   */\n  public final int getDepth() {\n    // TODO an AUTO_EXPAND option could be useful  \n    return depth;\n  }\n\n","sourceOld":"  /**\n   * How deeply to look under the given category. If the depth is 0,\n   * only the category itself is counted. If the depth is 1, its immediate\n   * children are also counted, and so on. If the depth is Integer.MAX_VALUE,\n   * all the category's descendants are counted.<br>\n   */\n  public final int getDepth() {\n    // TODO add AUTO_EXPAND option  \n    return depth;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getDepth().mjava","sourceNew":null,"sourceOld":"  /**\n   * How deeply to look under {@link #categoryPath}. By default, only its\n   * immediate children are aggregated (depth=1). If set to\n   * {@code Integer.MAX_VALUE}, the entire sub-tree of the category will be\n   * aggregated.\n   * <p>\n   * <b>NOTE:</b> setting depth to 0 means that only the category itself should\n   * be aggregated. In that case, make sure to index the category with\n   * {@link OrdinalPolicy#ALL_PARENTS}, unless it is not the root category (the\n   * dimension), in which case {@link OrdinalPolicy#ALL_BUT_DIMENSION} is fine\n   * too.\n   */\n  public final int getDepth() {\n    // TODO an AUTO_EXPAND option could be useful  \n    return depth;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getDepth().mjava","sourceNew":null,"sourceOld":"  /**\n   * How deeply to look under {@link #categoryPath}. By default, only its\n   * immediate children are aggregated (depth=1). If set to\n   * {@code Integer.MAX_VALUE}, the entire sub-tree of the category will be\n   * aggregated.\n   * <p>\n   * <b>NOTE:</b> setting depth to 0 means that only the category itself should\n   * be aggregated. In that case, make sure to index the category with\n   * {@link OrdinalPolicy#ALL_PARENTS}, unless it is not the root category (the\n   * dimension), in which case {@link OrdinalPolicy#ALL_BUT_DIMENSION} is fine\n   * too.\n   */\n  public final int getDepth() {\n    // TODO an AUTO_EXPAND option could be useful  \n    return depth;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["d7e774da82c7db7701e3fb9b13910a57e7296d0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d7e774da82c7db7701e3fb9b13910a57e7296d0f","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"d7e774da82c7db7701e3fb9b13910a57e7296d0f":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d7e774da82c7db7701e3fb9b13910a57e7296d0f"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d7e774da82c7db7701e3fb9b13910a57e7296d0f":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}