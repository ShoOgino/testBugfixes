{"path":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#getFieldFromHierarchy(SolrInputDocument,String).mjava","commits":[{"id":"07749612bed4eb54dd05255c1434c301133310c1","date":1554879779,"type":0,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#getFieldFromHierarchy(SolrInputDocument,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * @param completeHierarchy SolrInputDocument that represents the nested document hierarchy from its root\n   * @param fieldPath the path to fetch, seperated by a '/' e.g. /children/grandChildren\n   * @return the SolrInputField of fieldPath\n   */\n  public static SolrInputField getFieldFromHierarchy(SolrInputDocument completeHierarchy, String fieldPath) {\n    // substr to remove first '/'\n    final List<String> docPaths = StrUtils.splitSmart(fieldPath.substring(1), '/');\n    Pair<String, Integer> subPath;\n    SolrInputField sifToReplace = null;\n    SolrInputDocument currDoc = completeHierarchy;\n    for (String subPathString: docPaths) {\n      subPath = getPathAndIndexFromNestPath(subPathString);\n      sifToReplace = currDoc.getField(subPath.getLeft());\n      currDoc = (SolrInputDocument) ((List)sifToReplace.getValues()).get(subPath.getRight());\n    }\n    return sifToReplace;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5b5fa3584550267bf4209f334513a9d5850dd1e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b5fa3584550267bf4209f334513a9d5850dd1e0","date":1591795784,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#getFieldFromHierarchy(SolrInputDocument,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#getFieldFromHierarchy(SolrInputDocument,String).mjava","sourceNew":"  /**\n   *\n   * @param completeHierarchy SolrInputDocument that represents the nested document hierarchy from its root\n   * @param fieldPath the path to fetch, separated by a '/' e.g. /children/grandChildren\n   * @return the SolrInputField of fieldPath\n   */\n  public static SolrInputField getFieldFromHierarchy(SolrInputDocument completeHierarchy, String fieldPath) {\n    // substr to remove first '/'\n    final List<String> docPaths = StrUtils.splitSmart(fieldPath.substring(1), '/');\n    Pair<String, Integer> subPath;\n    SolrInputField sifToReplace = null;\n    SolrInputDocument currDoc = completeHierarchy;\n    for (String subPathString: docPaths) {\n      subPath = getPathAndIndexFromNestPath(subPathString);\n      sifToReplace = currDoc.getField(subPath.getLeft());\n      currDoc = (SolrInputDocument) ((List)sifToReplace.getValues()).get(subPath.getRight());\n    }\n    return sifToReplace;\n  }\n\n","sourceOld":"  /**\n   *\n   * @param completeHierarchy SolrInputDocument that represents the nested document hierarchy from its root\n   * @param fieldPath the path to fetch, seperated by a '/' e.g. /children/grandChildren\n   * @return the SolrInputField of fieldPath\n   */\n  public static SolrInputField getFieldFromHierarchy(SolrInputDocument completeHierarchy, String fieldPath) {\n    // substr to remove first '/'\n    final List<String> docPaths = StrUtils.splitSmart(fieldPath.substring(1), '/');\n    Pair<String, Integer> subPath;\n    SolrInputField sifToReplace = null;\n    SolrInputDocument currDoc = completeHierarchy;\n    for (String subPathString: docPaths) {\n      subPath = getPathAndIndexFromNestPath(subPathString);\n      sifToReplace = currDoc.getField(subPath.getLeft());\n      currDoc = (SolrInputDocument) ((List)sifToReplace.getValues()).get(subPath.getRight());\n    }\n    return sifToReplace;\n  }\n\n","bugFix":["07749612bed4eb54dd05255c1434c301133310c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5fa3584550267bf4209f334513a9d5850dd1e0":["07749612bed4eb54dd05255c1434c301133310c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07749612bed4eb54dd05255c1434c301133310c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b5fa3584550267bf4209f334513a9d5850dd1e0"]},"commit2Childs":{"5b5fa3584550267bf4209f334513a9d5850dd1e0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07749612bed4eb54dd05255c1434c301133310c1"],"07749612bed4eb54dd05255c1434c301133310c1":["5b5fa3584550267bf4209f334513a9d5850dd1e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}