{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#removeAnnotatedTests(Class[#-extends-Annotation],String).mjava","commits":[{"id":"be27627d0f58706cf69d633fea573aeb078dcb22","date":1322958023,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#removeAnnotatedTests(Class[#-extends-Annotation],String).mjava","pathOld":"/dev/null","sourceNew":"  private void removeAnnotatedTests(Class<? extends Annotation> annotation, String userFriendlyName) {\n    if (getTestClass().getJavaClass().isAnnotationPresent(annotation)) {\n      /* the test class is annotated with the annotation, remove all methods */\n      String className = getTestClass().getJavaClass().getSimpleName();\n      System.err.println(\"NOTE: Ignoring \" + userFriendlyName + \" test class '\" + className + \"'\");\n      testMethods.clear();\n    } else {\n      /* remove all methods with the annotation*/\n      for (int i = 0; i < testMethods.size(); i++) {\n        final FrameworkMethod m = testMethods.get(i);\n        if (m.getAnnotation(annotation) != null) {\n          System.err.println(\"NOTE: Ignoring \" + userFriendlyName + \" test method '\" + m.getName() + \"'\");\n          testMethods.remove(i--);\n        }\n      }\n    }\n    /* dodge a possible \"no-runnable methods\" exception by adding a fake ignored test */\n    if (testMethods.isEmpty()) {\n      try {\n        testMethods.add(new FrameworkMethod(LuceneTestCase.class.getMethod(\"alwaysIgnoredTestMethod\")));\n      } catch (Exception e) { throw new RuntimeException(e); }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7733816f2c0d688c0bbc68468196f1a848606f21","date":1323021691,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#removeAnnotatedTests(Class[#-extends-Annotation],String).mjava","pathOld":"/dev/null","sourceNew":"  private void removeAnnotatedTests(Class<? extends Annotation> annotation, String userFriendlyName) {\n    if (getTestClass().getJavaClass().isAnnotationPresent(annotation)) {\n      /* the test class is annotated with the annotation, remove all methods */\n      String className = getTestClass().getJavaClass().getSimpleName();\n      System.err.println(\"NOTE: Ignoring \" + userFriendlyName + \" test class '\" + className + \"'\");\n      testMethods.clear();\n    } else {\n      /* remove all methods with the annotation*/\n      for (int i = 0; i < testMethods.size(); i++) {\n        final FrameworkMethod m = testMethods.get(i);\n        if (m.getAnnotation(annotation) != null) {\n          System.err.println(\"NOTE: Ignoring \" + userFriendlyName + \" test method '\" + m.getName() + \"'\");\n          testMethods.remove(i--);\n        }\n      }\n    }\n    /* dodge a possible \"no-runnable methods\" exception by adding a fake ignored test */\n    if (testMethods.isEmpty()) {\n      try {\n        testMethods.add(new FrameworkMethod(LuceneTestCase.class.getMethod(\"alwaysIgnoredTestMethod\")));\n      } catch (Exception e) { throw new RuntimeException(e); }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCaseRunner#removeAnnotatedTests(Class[#-extends-Annotation],String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCaseRunner#removeAnnotatedTests(Class[#-extends-Annotation],String).mjava","sourceNew":"  private void removeAnnotatedTests(Class<? extends Annotation> annotation, String userFriendlyName) {\n    if (getTestClass().getJavaClass().isAnnotationPresent(annotation)) {\n      /* the test class is annotated with the annotation, remove all methods */\n      String className = getTestClass().getJavaClass().getSimpleName();\n      System.err.println(\"NOTE: Ignoring \" + userFriendlyName + \" test class '\" + className + \"'\");\n      testMethods.clear();\n    } else {\n      /* remove all methods with the annotation*/\n      for (int i = 0; i < testMethods.size(); i++) {\n        final FrameworkMethod m = testMethods.get(i);\n        if (m.getAnnotation(annotation) != null) {\n          System.err.println(\"NOTE: Ignoring \" + userFriendlyName + \" test method '\" + m.getName() + \"'\");\n          testMethods.remove(i--);\n        }\n      }\n    }\n    /* dodge a possible \"no-runnable methods\" exception by adding a fake ignored test */\n    if (testMethods.isEmpty()) {\n      try {\n        testMethods.add(new FrameworkMethod(LuceneTestCase.class.getMethod(\"alwaysIgnoredTestMethod\")));\n      } catch (Exception e) { throw new RuntimeException(e); }\n    }\n  }\n\n","sourceOld":"  private void removeAnnotatedTests(Class<? extends Annotation> annotation, String userFriendlyName) {\n    if (getTestClass().getJavaClass().isAnnotationPresent(annotation)) {\n      /* the test class is annotated with the annotation, remove all methods */\n      String className = getTestClass().getJavaClass().getSimpleName();\n      System.err.println(\"NOTE: Ignoring \" + userFriendlyName + \" test class '\" + className + \"'\");\n      testMethods.clear();\n    } else {\n      /* remove all methods with the annotation*/\n      for (int i = 0; i < testMethods.size(); i++) {\n        final FrameworkMethod m = testMethods.get(i);\n        if (m.getAnnotation(annotation) != null) {\n          System.err.println(\"NOTE: Ignoring \" + userFriendlyName + \" test method '\" + m.getName() + \"'\");\n          testMethods.remove(i--);\n        }\n      }\n    }\n    /* dodge a possible \"no-runnable methods\" exception by adding a fake ignored test */\n    if (testMethods.isEmpty()) {\n      try {\n        testMethods.add(new FrameworkMethod(LuceneTestCase.class.getMethod(\"alwaysIgnoredTestMethod\")));\n      } catch (Exception e) { throw new RuntimeException(e); }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["be27627d0f58706cf69d633fea573aeb078dcb22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be27627d0f58706cf69d633fea573aeb078dcb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7733816f2c0d688c0bbc68468196f1a848606f21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","be27627d0f58706cf69d633fea573aeb078dcb22"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be27627d0f58706cf69d633fea573aeb078dcb22","7733816f2c0d688c0bbc68468196f1a848606f21"],"be27627d0f58706cf69d633fea573aeb078dcb22":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7733816f2c0d688c0bbc68468196f1a848606f21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7733816f2c0d688c0bbc68468196f1a848606f21":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","7733816f2c0d688c0bbc68468196f1a848606f21"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}