{"path":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","commits":[{"id":"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","date":1416999434,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","pathOld":"/dev/null","sourceNew":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for(LeafReader r : parallelReaders) {\n            if (r instanceof ParallelLeafReader) {\n              try {\n                r.decRef();\n              } catch (Throwable t) {\n                if (th == null) {\n                  th = t;\n                }\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","sourceNew":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","sourceOld":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for(LeafReader r : parallelReaders) {\n            if (r instanceof ParallelLeafReader) {\n              try {\n                r.decRef();\n              } catch (Throwable t) {\n                if (th == null) {\n                  th = t;\n                }\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","sourceNew":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","sourceOld":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for(LeafReader r : parallelReaders) {\n            if (r instanceof ParallelLeafReader) {\n              try {\n                r.decRef();\n              } catch (Throwable t) {\n                if (th == null) {\n                  th = t;\n                }\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","sourceNew":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","sourceOld":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for(LeafReader r : parallelReaders) {\n            if (r instanceof ParallelLeafReader) {\n              try {\n                r.decRef();\n              } catch (Throwable t) {\n                if (th == null) {\n                  th = t;\n                }\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","sourceNew":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","sourceOld":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for(LeafReader r : parallelReaders) {\n            if (r instanceof ParallelLeafReader) {\n              try {\n                r.decRef();\n              } catch (Throwable t) {\n                if (th == null) {\n                  th = t;\n                }\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","sourceNew":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","sourceOld":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for(LeafReader r : parallelReaders) {\n            if (r instanceof ParallelLeafReader) {\n              try {\n                r.decRef();\n              } catch (Throwable t) {\n                if (th == null) {\n                  th = t;\n                }\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","sourceNew":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          if (th != null) {\n            throw IOUtils.rethrowAlways(th);\n          }\n        }\n\n","sourceOld":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","sourceNew":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          if (th != null) {\n            throw IOUtils.rethrowAlways(th);\n          }\n        }\n\n","sourceOld":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          // If any error occured, throw it.\n          IOUtils.reThrow(th);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af4f318fc7955d8e4e40cdf4a8a93931004fe7c0","date":1592426892,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ReindexingMergePolicy.ReindexingOneMerge#mergeFinished().mjava","sourceNew":"        @Override\n        public void mergeFinished(boolean success) throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          if (th != null) {\n            throw IOUtils.rethrowAlways(th);\n          }\n        }\n\n","sourceOld":"        @Override\n        public void mergeFinished() throws IOException {\n          Throwable th = null;\n          for (ParallelLeafReader r : parallelReaders) {\n            try {\n              r.decRef();\n            } catch (Throwable t) {\n              if (th == null) {\n                th = t;\n              }\n            }\n          }\n\n          if (th != null) {\n            throw IOUtils.rethrowAlways(th);\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af4f318fc7955d8e4e40cdf4a8a93931004fe7c0":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d470c8182e92b264680e34081b75e70a9f2b3c89","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af4f318fc7955d8e4e40cdf4a8a93931004fe7c0"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"af4f318fc7955d8e4e40cdf4a8a93931004fe7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["af4f318fc7955d8e4e40cdf4a8a93931004fe7c0","e9017cf144952056066919f1ebc7897ff9bd71b1"],"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}