{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(DocSet,Sort,int).mjava","sourceNew":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","sourceOld":"  protected DocList sortDocSet(DocSet set, Sort sort, int nDocs) throws IOException {\n    if (nDocs == 0) {\n      // SOLR-2923\n      return new DocSlice(0, 0, new int[0], null, 0, 0f);\n    }\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = TopFieldCollector.create(weightSort(sort), nDocs, false, false, false, inOrder);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    return new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","sourceNew":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","sourceOld":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","sourceNew":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","sourceOld":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.setNextReader(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","sourceNew":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        LeafReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","sourceOld":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        AtomicReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","sourceNew":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    LeafCollector leafCollector = null;\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        LeafReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        leafCollector = topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      leafCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","sourceOld":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        LeafReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      topCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","sourceNew":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base = 0;\n    int end = 0;\n    int readerIndex = 0;\n\n    LeafCollector leafCollector = null;\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc >= end) {\n        LeafReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        leafCollector = topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      leafCollector.collect(doc - base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i = 0; i < nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0, nDocsReturned, ids, null, topDocs.totalHits, 0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","sourceOld":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base=0;\n    int end=0;\n    int readerIndex = 0;\n\n    LeafCollector leafCollector = null;\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc>=end) {\n        LeafReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        leafCollector = topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      leafCollector.collect(doc-base);\n    }\n    \n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i=0; i<nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0,nDocsReturned,ids,null,topDocs.totalHits,0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","sourceNew":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base = 0;\n    int end = 0;\n    int readerIndex = 0;\n\n    LeafCollector leafCollector = null;\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc >= end) {\n        LeafReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        leafCollector = topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      leafCollector.collect(doc - base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i = 0; i < nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n    qr.getDocListAndSet().docList = new DocSlice(0, nDocsReturned, ids, null, topDocs.totalHits.value, 0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","sourceOld":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base = 0;\n    int end = 0;\n    int readerIndex = 0;\n\n    LeafCollector leafCollector = null;\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc >= end) {\n        LeafReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        leafCollector = topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      leafCollector.collect(doc - base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i = 0; i < nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    qr.getDocListAndSet().docList = new DocSlice(0, nDocsReturned, ids, null, topDocs.totalHits, 0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","sourceNew":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f, TotalHits.Relation.EQUAL_TO);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base = 0;\n    int end = 0;\n    int readerIndex = 0;\n\n    LeafCollector leafCollector = null;\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc >= end) {\n        LeafReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        leafCollector = topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      leafCollector.collect(doc - base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i = 0; i < nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n    qr.getDocListAndSet().docList = new DocSlice(0, nDocsReturned, ids, null, topDocs.totalHits.value, 0.0f, topDocs.totalHits.relation);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","sourceOld":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base = 0;\n    int end = 0;\n    int readerIndex = 0;\n\n    LeafCollector leafCollector = null;\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc >= end) {\n        LeafReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        leafCollector = topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      leafCollector.collect(doc - base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i = 0; i < nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n    qr.getDocListAndSet().docList = new DocSlice(0, nDocsReturned, ids, null, topDocs.totalHits.value, 0.0f);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#sortDocSet(QueryResult,QueryCommand).mjava","sourceNew":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f, TotalHits.Relation.EQUAL_TO);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    @SuppressWarnings({\"rawtypes\"})\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base = 0;\n    int end = 0;\n    int readerIndex = 0;\n\n    LeafCollector leafCollector = null;\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc >= end) {\n        LeafReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        leafCollector = topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      leafCollector.collect(doc - base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i = 0; i < nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n    qr.getDocListAndSet().docList = new DocSlice(0, nDocsReturned, ids, null, topDocs.totalHits.value, 0.0f, topDocs.totalHits.relation);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","sourceOld":"  protected void sortDocSet(QueryResult qr, QueryCommand cmd) throws IOException {\n    DocSet set = qr.getDocListAndSet().docSet;\n    int nDocs = cmd.getSupersetMaxDoc();\n    if (nDocs == 0) {\n      // SOLR-2923\n      qr.getDocListAndSet().docList = new DocSlice(0, 0, new int[0], null, set.size(), 0f, TotalHits.Relation.EQUAL_TO);\n      qr.setNextCursorMark(cmd.getCursorMark());\n      return;\n    }\n\n    // bit of a hack to tell if a set is sorted - do it better in the future.\n    boolean inOrder = set instanceof BitDocSet || set instanceof SortedIntDocSet;\n\n    TopDocsCollector topCollector = buildTopDocsCollector(nDocs, cmd);\n\n    DocIterator iter = set.iterator();\n    int base = 0;\n    int end = 0;\n    int readerIndex = 0;\n\n    LeafCollector leafCollector = null;\n    while (iter.hasNext()) {\n      int doc = iter.nextDoc();\n      while (doc >= end) {\n        LeafReaderContext leaf = leafContexts.get(readerIndex++);\n        base = leaf.docBase;\n        end = base + leaf.reader().maxDoc();\n        leafCollector = topCollector.getLeafCollector(leaf);\n        // we should never need to set the scorer given the settings for the collector\n      }\n      leafCollector.collect(doc - base);\n    }\n\n    TopDocs topDocs = topCollector.topDocs(0, nDocs);\n\n    int nDocsReturned = topDocs.scoreDocs.length;\n    int[] ids = new int[nDocsReturned];\n\n    for (int i = 0; i < nDocsReturned; i++) {\n      ScoreDoc scoreDoc = topDocs.scoreDocs[i];\n      ids[i] = scoreDoc.doc;\n    }\n\n    assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n    qr.getDocListAndSet().docList = new DocSlice(0, nDocsReturned, ids, null, topDocs.totalHits.value, 0.0f, topDocs.totalHits.relation);\n    populateNextCursorMarkFromTopDocs(qr, cmd, topDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2","ae73da626f97850c922c42736f808d0378e165f0"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"901e951cec2e6af4e503209a6721c8834db23279":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["901e951cec2e6af4e503209a6721c8834db23279"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"]},"commit2Childs":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"901e951cec2e6af4e503209a6721c8834db23279":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["901e951cec2e6af4e503209a6721c8834db23279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}