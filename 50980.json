{"path":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","date":1328775259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = topLevelReaderContext.leaves();\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    final List<AtomicReaderContext> leaves = topLevelReaderContext.leaves();\n    if(leaves.size() == 1) {\n      final AtomicReaderContext ctx = leaves.get(0);\n      return query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = topLevelReaderContext.leaves();\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term));\n    }\n    final List<AtomicReaderContext> leaves = topLevelReaderContext.leaves();\n    if(leaves.size() == 1) {\n      final AtomicReaderContext ctx = leaves.get(0);\n      return query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    final List<AtomicReaderContext> leaves = topLevelReaderContext.leaves();\n    if(leaves.size() == 1) {\n      final AtomicReaderContext ctx = leaves.get(0);\n      return query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term));\n    }\n    final List<AtomicReaderContext> leaves = topLevelReaderContext.leaves();\n    if(leaves.size() == 1) {\n      final AtomicReaderContext ctx = leaves.get(0);\n      return query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    final List<AtomicReaderContext> leaves = topLevelReaderContext.leaves();\n    if(leaves.size() == 1) {\n      final AtomicReaderContext ctx = leaves.get(0);\n      return query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term));\n    }\n    final List<AtomicReaderContext> leaves = topLevelReaderContext.leaves();\n    if(leaves.size() == 1) {\n      final AtomicReaderContext ctx = leaves.get(0);\n      return query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term));\n    }\n    final List<AtomicReaderContext> leaves = topLevelReaderContext.leaves();\n    if(leaves.size() == 1) {\n      final AtomicReaderContext ctx = leaves.get(0);\n      return query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term));\n    }\n    final List<LeafReaderContext> leaves = topLevelReaderContext.leaves();\n    if(leaves.size() == 1) {\n      final LeafReaderContext ctx = leaves.get(0);\n      return query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term));\n    }\n    final List<AtomicReaderContext> leaves = topLevelReaderContext.leaves();\n    if(leaves.size() == 1) {\n      final AtomicReaderContext ctx = leaves.get(0);\n      return query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","sourceNew":null,"sourceOld":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term));\n    }\n    final List<LeafReaderContext> leaves = topLevelReaderContext.leaves();\n    if(leaves.size() == 1) {\n      final LeafReaderContext ctx = leaves.get(0);\n      return query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","sourceNew":null,"sourceOld":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<>();\n    TreeSet<Term> terms = new TreeSet<>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term));\n    }\n    final List<LeafReaderContext> leaves = topLevelReaderContext.leaves();\n    if(leaves.size() == 1) {\n      final LeafReaderContext ctx = leaves.get(0);\n      return query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"fab172655716b96f7e42376116235017a922de3a":["c9fb5f46e264daf5ba3860defe623a89d202dd87","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fab172655716b96f7e42376116235017a922de3a":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}