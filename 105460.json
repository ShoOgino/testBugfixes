{"path":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","sourceNew":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","sourceNew":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","sourceNew":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","sourceNew":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new MockRAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","sourceNew":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","sourceNew":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","sourceNew":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","sourceNew":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testDefaultRAMDirectory().mjava","sourceNew":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: SingleInstanceLockFactory is the default lock for RAMDirectory\n    // Verify: RAMDirectory does basic locking correctly (can't create two IndexWriters)\n    public void testDefaultRAMDirectory() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        assertTrue(\"RAMDirectory did not use correct LockFactory: got \" + dir.getLockFactory(),\n                   SingleInstanceLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n        // Create a 2nd IndexWriter.  This should fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n            fail(\"Should have hit an IOException with two IndexWriters on default SingleInstanceLockFactory\");\n        } catch (IOException e) {\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a05409176bd65129d67a785ee70e881e238a9aef"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a05409176bd65129d67a785ee70e881e238a9aef","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a05409176bd65129d67a785ee70e881e238a9aef","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a05409176bd65129d67a785ee70e881e238a9aef":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["d572389229127c297dd1fa5ce4758e1cec41e799","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"a05409176bd65129d67a785ee70e881e238a9aef":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}