{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","commits":[{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","sourceNew":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //   System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<BytesRef>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //   BytesRef suffixBytes = new BytesRef(suffix);\n          //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //   suffixBytes.length = suffix;\n          //   System.out.println(\"    write term suffix=\" + suffixBytes);\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          statsWriter.writeVInt(state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + \" vs \" + state.docFreq;\n            statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n          }\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write term suffix=\" + suffixBytes);\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            statsWriter.writeVInt(state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              assert state.totalTermFreq >= state.docFreq;\n              statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n            }\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) statsWriter.getFilePointer());\n      statsWriter.writeTo(out);\n      statsWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","sourceOld":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //   System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<BytesRef>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //   BytesRef suffixBytes = new BytesRef(suffix);\n          //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //   suffixBytes.length = suffix;\n          //   System.out.println(\"    write term suffix=\" + suffixBytes);\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          statsWriter.writeVInt(state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + \" vs \" + state.docFreq;\n            statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n          }\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write term suffix=\" + suffixBytes);\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            statsWriter.writeVInt(state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              assert state.totalTermFreq >= state.docFreq;\n              statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n            }\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) statsWriter.getFilePointer());\n      statsWriter.writeTo(out);\n      statsWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","sourceNew":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //   System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<BytesRef>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //   BytesRef suffixBytes = new BytesRef(suffix);\n          //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //   suffixBytes.length = suffix;\n          //   System.out.println(\"    write term suffix=\" + suffixBytes);\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          statsWriter.writeVInt(state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + \" vs \" + state.docFreq;\n            statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n          }\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write term suffix=\" + suffixBytes);\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            statsWriter.writeVInt(state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              assert state.totalTermFreq >= state.docFreq;\n              statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n            }\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) statsWriter.getFilePointer());\n      statsWriter.writeTo(out);\n      statsWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","sourceOld":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //   System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<BytesRef>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //   BytesRef suffixBytes = new BytesRef(suffix);\n          //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //   suffixBytes.length = suffix;\n          //   System.out.println(\"    write term suffix=\" + suffixBytes);\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          statsWriter.writeVInt(state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + \" vs \" + state.docFreq;\n            statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n          }\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write term suffix=\" + suffixBytes);\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            statsWriter.writeVInt(state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              assert state.totalTermFreq >= state.docFreq;\n              statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n            }\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) statsWriter.getFilePointer());\n      statsWriter.writeTo(out);\n      statsWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f838187609fee3a1afa5f162f93c796046242c84","date":1406216791,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#writeBlock(int,boolean,int,int,int,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","sourceNew":"    /** Writes the specified slice (start is inclusive, end is exclusive)\n     *  from pending stack as a new block.  If isFloor is true, there\n     *  were too many (more than maxItemsInBlock) entries sharing the\n     *  same prefix, and so we broke it into multiple floor blocks where\n     *  we record the starting label of the suffix of each floor block. */\n    private PendingBlock writeBlock(int prefixLength, boolean isFloor, int floorLeadLabel, int start, int end, boolean hasTerms, boolean hasSubBlocks) throws IOException {\n\n      assert end > start;\n\n      long startFP = out.getFilePointer();\n\n      // if (DEBUG) System.out.println(\"    writeBlock fp=\" + startFP + \" isFloor=\" + isFloor + \" floorLeadLabel=\" + floorLeadLabel + \" start=\" + start + \" end=\" + end + \" hasTerms=\" + hasTerms + \" hasSubBlocks=\" + hasSubBlocks);\n\n      boolean hasFloorLeadLabel = isFloor && floorLeadLabel != -1;\n\n      final BytesRef prefix = new BytesRef(prefixLength + (hasFloorLeadLabel ? 1 : 0));\n      System.arraycopy(lastTerm.bytes, 0, prefix.bytes, 0, prefixLength);\n      prefix.length = prefixLength;\n\n      // Write block header:\n      int numEntries = end - start;\n      int code = numEntries << 1;\n      if (end == pending.size()) {\n        // Last block:\n        code |= 1;\n      }\n      out.writeVInt(code);\n\n      // if (DEBUG) {\n      //   System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + brToString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      // We optimize the leaf block case (block has only terms), writing a more\n      // compact format in this case:\n      boolean isLeafBlock = hasSubBlocks == false;\n\n      final List<FST<BytesRef>> subIndices;\n\n      boolean absolute = true;\n\n      if (isLeafBlock) {\n        // Only terms:\n        subIndices = null;\n        for (int i=start;i<end;i++) {\n          PendingEntry ent = pending.get(i);\n          assert ent.isTerm: \"i=\" + i;\n\n          PendingTerm term = (PendingTerm) ent;\n          assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;\n          BlockTermState state = term.state;\n          final int suffix = term.termBytes.length - prefixLength;\n          /*\n          if (DEBUG) {\n            BytesRef suffixBytes = new BytesRef(suffix);\n            System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            suffixBytes.length = suffix;\n            System.out.println(\"    write term suffix=\" + suffixBytes);\n          }\n          */\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.termBytes, prefixLength, suffix);\n          assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;\n\n          // Write term stats, to separate byte[] blob:\n          statsWriter.writeVInt(state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + \" vs \" + state.docFreq;\n            statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n          }\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n      } else {\n        // Mixed terms and sub-blocks:\n        subIndices = new ArrayList<>();\n        for (int i=start;i<end;i++) {\n          PendingEntry ent = pending.get(i);\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            assert StringHelper.startsWith(term.termBytes, prefix): \"term.term=\" + term.termBytes + \" prefix=\" + prefix;\n            BlockTermState state = term.state;\n            final int suffix = term.termBytes.length - prefixLength;\n            /*\n            if (DEBUG) {\n              BytesRef suffixBytes = new BytesRef(suffix);\n              System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n              suffixBytes.length = suffix;\n              System.out.println(\"    write term suffix=\" + suffixBytes);\n            }\n            */\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.termBytes, prefixLength, suffix);\n            assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;\n\n            // Write term stats, to separate byte[] blob:\n            statsWriter.writeVInt(state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              assert state.totalTermFreq >= state.docFreq;\n              statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n            }\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            assert StringHelper.startsWith(block.prefix, prefix);\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n\n            assert floorLeadLabel == -1 || (block.prefix.bytes[prefixLength] & 0xff) >= floorLeadLabel;\n\n            assert block.fp < startFP;\n\n            /*\n            if (DEBUG) {\n              BytesRef suffixBytes = new BytesRef(suffix);\n              System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n              suffixBytes.length = suffix;\n              System.out.println(\"    write sub-block suffix=\" + brToString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            }\n            */\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) statsWriter.getFilePointer());\n      statsWriter.writeTo(out);\n      statsWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      if (hasFloorLeadLabel) {\n        // We already allocated to length+1 above:\n        prefix.bytes[prefix.length++] = (byte) floorLeadLabel;\n      }\n\n      return new PendingBlock(prefix, startFP, hasTerms, isFloor, floorLeadLabel, subIndices);\n    }\n\n","sourceOld":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //   System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<BytesRef>> subIndices;\n\n      int termCount;\n\n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          BlockTermState state = term.state;\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //   BytesRef suffixBytes = new BytesRef(suffix);\n          //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //   suffixBytes.length = suffix;\n          //   System.out.println(\"    write term suffix=\" + suffixBytes);\n          // }\n          // For leaf block we write suffix straight\n          suffixWriter.writeVInt(suffix);\n          suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          statsWriter.writeVInt(state.docFreq);\n          if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            assert state.totalTermFreq >= state.docFreq: state.totalTermFreq + \" vs \" + state.docFreq;\n            statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n          }\n\n          // Write term meta data\n          postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n          for (int pos = 0; pos < longsSize; pos++) {\n            assert longs[pos] >= 0;\n            metaWriter.writeVLong(longs[pos]);\n          }\n          bytesWriter.writeTo(metaWriter);\n          bytesWriter.reset();\n          absolute = false;\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            BlockTermState state = term.state;\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write term suffix=\" + suffixBytes);\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt(suffix<<1);\n            suffixWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            statsWriter.writeVInt(state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              assert state.totalTermFreq >= state.docFreq;\n              statsWriter.writeVLong(state.totalTermFreq - state.docFreq);\n            }\n\n            // TODO: now that terms dict \"sees\" these longs,\n            // we can explore better column-stride encodings\n            // to encode all long[0]s for this block at\n            // once, all long[1]s, etc., e.g. using\n            // Simple64.  Alternatively, we could interleave\n            // stats + meta ... no reason to have them\n            // separate anymore:\n\n            // Write term meta data\n            postingsWriter.encodeTerm(longs, bytesWriter, fieldInfo, state, absolute);\n            for (int pos = 0; pos < longsSize; pos++) {\n              assert longs[pos] >= 0;\n              metaWriter.writeVLong(longs[pos]);\n            }\n            bytesWriter.writeTo(metaWriter);\n            bytesWriter.reset();\n            absolute = false;\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            suffixWriter.writeVInt((suffix<<1)|1);\n            suffixWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            suffixWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      suffixWriter.writeTo(out);\n      suffixWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) statsWriter.getFilePointer());\n      statsWriter.writeTo(out);\n      statsWriter.reset();\n\n      // Write term meta data byte[] blob\n      out.writeVInt((int) metaWriter.getFilePointer());\n      metaWriter.writeTo(out);\n      metaWriter.reset();\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f838187609fee3a1afa5f162f93c796046242c84":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f838187609fee3a1afa5f162f93c796046242c84"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["f838187609fee3a1afa5f162f93c796046242c84"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"f838187609fee3a1afa5f162f93c796046242c84":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}