{"path":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#testUseDocValuesAsStoredFalse().mjava","commits":[{"id":"459679dac02ecc58120b21ff31374b6ca915e88c","date":1491590182,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#testUseDocValuesAsStoredFalse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUseDocValuesAsStoredFalse() throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(\"nonstored_dv_str\");\n    assertNotNull(sf);\n    assertTrue(sf.hasDocValues());\n    assertFalse(sf.useDocValuesAsStored());\n    assertFalse(sf.stored());\n    assertU(adoc(\"id\", \"myid\", \"nonstored_dv_str\", \"dont see me\"));\n    assertU(commit());\n    \n    assertJQ(req(\"q\", \"id:myid\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid'}\"\n            + \"]\");\n    assertJQ(req(\"q\", \"id:myid\", \"fl\", \"*\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid'}\"\n            + \"]\");\n    assertJQ(req(\"q\", \"id:myid\", \"fl\", \"id,nonstored_dv_*\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid'}\"\n            + \"]\");\n    assertJQ(req(\"q\", \"id:myid\", \"fl\", \"id,nonstored_dv_str\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid','nonstored_dv_str':'dont see me'}\"\n            + \"]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#testUseDocValuesAsStoredFalse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUseDocValuesAsStoredFalse() throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(\"nonstored_dv_str\");\n    assertNotNull(sf);\n    assertTrue(sf.hasDocValues());\n    assertFalse(sf.useDocValuesAsStored());\n    assertFalse(sf.stored());\n    assertU(adoc(\"id\", \"myid\", \"nonstored_dv_str\", \"dont see me\"));\n    assertU(commit());\n    \n    assertJQ(req(\"q\", \"id:myid\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid'}\"\n            + \"]\");\n    assertJQ(req(\"q\", \"id:myid\", \"fl\", \"*\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid'}\"\n            + \"]\");\n    assertJQ(req(\"q\", \"id:myid\", \"fl\", \"id,nonstored_dv_*\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid'}\"\n            + \"]\");\n    assertJQ(req(\"q\", \"id:myid\", \"fl\", \"id,nonstored_dv_str\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid','nonstored_dv_str':'dont see me'}\"\n            + \"]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"459679dac02ecc58120b21ff31374b6ca915e88c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["459679dac02ecc58120b21ff31374b6ca915e88c"]},"commit2Childs":{"459679dac02ecc58120b21ff31374b6ca915e88c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["459679dac02ecc58120b21ff31374b6ca915e88c","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}