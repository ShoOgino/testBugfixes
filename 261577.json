{"path":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    SolrCore core = SolrCore.getSolrCore();\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core, nlst);\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(req,rsp);\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n      log.info(\"QuerySenderListener done.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38ec39b063b6150b4396eff4b228493a64ead410","date":1139426348,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    SolrCore core = SolrCore.getSolrCore();\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,nlst) {\n          public SolrIndexSearcher getSearcher() {\n            return searcher;\n          }\n          public void close() {\n          }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(req,rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n      log.info(\"QuerySenderListener done.\");\n    }\n  }\n\n","sourceOld":"  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    SolrCore core = SolrCore.getSolrCore();\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core, nlst);\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(req,rsp);\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n      log.info(\"QuerySenderListener done.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    SolrCore core = SolrCore.getSolrCore();\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,nlst) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(req,rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n      log.info(\"QuerySenderListener done.\");\n    }\n  }\n\n","sourceOld":"  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    SolrCore core = SolrCore.getSolrCore();\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,nlst) {\n          public SolrIndexSearcher getSearcher() {\n            return searcher;\n          }\n          public void close() {\n          }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(req,rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n      log.info(\"QuerySenderListener done.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7","date":1189312484,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,nlst) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(req,rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n      log.info(\"QuerySenderListener done.\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    SolrCore core = SolrCore.getSolrCore();\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,nlst) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(req,rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n      log.info(\"QuerySenderListener done.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22c05956b3884859f951eedebdf545b0eb67204c","date":1222514473,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,nlst) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(req,rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,nlst) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(req,rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n      log.info(\"QuerySenderListener done.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,nlst) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,nlst) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(req,rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8c77019d92a937be281e1f8b72bf54b3ac89420","date":1249507506,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,nlst) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"src/java/org/apache/solr/core/QuerySenderListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","sourceOld":"  @Override\n  public void newSearcher(SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher) {\n    final SolrIndexSearcher searcher = newSearcher;\n    log.info(\"QuerySenderListener sending requests to \" + newSearcher);\n    for (NamedList nlst : (List<NamedList>)args.get(\"queries\")) {\n      try {\n        // bind the request to a particular searcher (the newSearcher)\n        NamedList params = addEventParms(currentSearcher, nlst);\n        LocalSolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n          @Override public SolrIndexSearcher getSearcher() { return searcher; }\n          @Override public void close() { }\n        };\n\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);\n\n        // Retrieve the Document instances (not just the ids) to warm\n        // the OS disk cache, and any Solr document cache.  Only the top\n        // level values in the NamedList are checked for DocLists.\n        NamedList values = rsp.getValues();\n        for (int i=0; i<values.size(); i++) {\n          Object o = values.getVal(i);\n          if (o instanceof DocList) {\n            DocList docs = (DocList)o;\n            for (DocIterator iter = docs.iterator(); iter.hasNext();) {\n              newSearcher.doc(iter.nextDoc());\n            }\n          }\n        }\n\n        req.close();\n\n      } catch (Exception e) {\n        // do nothing... we want to continue with the other requests.\n        // the failure should have already been logged.\n      }\n    }\n    log.info(\"QuerySenderListener done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["22c05956b3884859f951eedebdf545b0eb67204c"],"22c05956b3884859f951eedebdf545b0eb67204c":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"6d6338c87060be5f66757a94945975f3bbd377a9":["38ec39b063b6150b4396eff4b228493a64ead410"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c8c77019d92a937be281e1f8b72bf54b3ac89420":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"ad94625fb8d088209f46650c8097196fec67f00c":["c8c77019d92a937be281e1f8b72bf54b3ac89420"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["6d6338c87060be5f66757a94945975f3bbd377a9"],"38ec39b063b6150b4396eff4b228493a64ead410":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["c8c77019d92a937be281e1f8b72bf54b3ac89420"],"22c05956b3884859f951eedebdf545b0eb67204c":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"6d6338c87060be5f66757a94945975f3bbd377a9":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["38ec39b063b6150b4396eff4b228493a64ead410"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8c77019d92a937be281e1f8b72bf54b3ac89420":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["22c05956b3884859f951eedebdf545b0eb67204c"],"38ec39b063b6150b4396eff4b228493a64ead410":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}