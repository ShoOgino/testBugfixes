{"path":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextRange().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextRange().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextRange().mjava","sourceNew":"    private void nextRange() {\n      assert rangeBounds.size() % 2 == 0;\n\n      currentLowerBound = rangeBounds.removeFirst();\n      assert currentUpperBound == null || termComp.compare(currentUpperBound, currentLowerBound) <= 0 :\n        \"The current upper bound must be <= the new lower bound\";\n      \n      currentUpperBound = rangeBounds.removeFirst();\n    }\n\n","sourceOld":"    private void nextRange() {\n      assert rangeBounds.size() % 2 == 0;\n\n      currentLowerBound = rangeBounds.removeFirst();\n      assert currentUpperBound == null || termComp.compare(currentUpperBound, currentLowerBound) <= 0 :\n        \"The current upper bound must be <= the new lower bound\";\n      \n      currentUpperBound = rangeBounds.removeFirst();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextRange().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextRange().mjava","sourceNew":"    private void nextRange() {\n      assert rangeBounds.size() % 2 == 0;\n\n      currentLowerBound = rangeBounds.removeFirst();\n      assert currentUpperBound == null || currentUpperBound.compareTo(currentLowerBound) <= 0 :\n        \"The current upper bound must be <= the new lower bound\";\n      \n      currentUpperBound = rangeBounds.removeFirst();\n    }\n\n","sourceOld":"    private void nextRange() {\n      assert rangeBounds.size() % 2 == 0;\n\n      currentLowerBound = rangeBounds.removeFirst();\n      assert currentUpperBound == null || termComp.compare(currentUpperBound, currentLowerBound) <= 0 :\n        \"The current upper bound must be <= the new lower bound\";\n      \n      currentUpperBound = rangeBounds.removeFirst();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery.NumericRangeTermsEnum#nextRange().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextRange().mjava","sourceNew":"    private void nextRange() {\n      assert rangeBounds.size() % 2 == 0;\n\n      currentLowerBound = rangeBounds.removeFirst();\n      assert currentUpperBound == null || currentUpperBound.compareTo(currentLowerBound) <= 0 :\n        \"The current upper bound must be <= the new lower bound\";\n      \n      currentUpperBound = rangeBounds.removeFirst();\n    }\n\n","sourceOld":"    private void nextRange() {\n      assert rangeBounds.size() % 2 == 0;\n\n      currentLowerBound = rangeBounds.removeFirst();\n      assert currentUpperBound == null || currentUpperBound.compareTo(currentLowerBound) <= 0 :\n        \"The current upper bound must be <= the new lower bound\";\n      \n      currentUpperBound = rangeBounds.removeFirst();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"770342641f7b505eaa8dccdc666158bff2419109":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}