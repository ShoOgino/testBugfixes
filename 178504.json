{"path":"dev-tools/missing-doclet/src/main/java/org/apache/lucene/missingdoclet/MissingDoclet#superTypeForInheritDoc(Element).mjava","commits":[{"id":"0818fc555aefcb0330785d4ad1c1487980a0b04b","date":1599049757,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"dev-tools/missing-doclet/src/main/java/org/apache/lucene/missingdoclet/MissingDoclet#superTypeForInheritDoc(Element).mjava","pathOld":"/dev/null","sourceNew":"  /* Find types from which methods in type may inherit javadoc, in the proper order.*/\n  private Stream<Element> superTypeForInheritDoc(Element type) {\n    TypeElement clazz = (TypeElement) type;\n    List<Element> interfaces = clazz.getInterfaces()\n        .stream()\n        .filter(tm -> tm.getKind() == TypeKind.DECLARED)\n        .map(tm -> ((DeclaredType) tm).asElement())\n        .collect(Collectors.toList());\n\n    Stream<Element> result = interfaces.stream();\n    result = Stream.concat(result, interfaces.stream().flatMap(this::superTypeForInheritDoc));\n\n    if (clazz.getSuperclass().getKind() == TypeKind.DECLARED) {\n      Element superClass = ((DeclaredType) clazz.getSuperclass()).asElement();\n      result = Stream.concat(result, Stream.of(superClass));\n      result = Stream.concat(result, superTypeForInheritDoc(superClass));\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0818fc555aefcb0330785d4ad1c1487980a0b04b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0818fc555aefcb0330785d4ad1c1487980a0b04b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0818fc555aefcb0330785d4ad1c1487980a0b04b"],"0818fc555aefcb0330785d4ad1c1487980a0b04b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}