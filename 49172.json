{"path":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5f7137bd9491c6596681b1f56e481e17964e581","date":1294458451,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n\n    @SuppressWarnings(\"unchecked\")\n    NamedList<List<Map<String, Object>>> nl \n      = (NamedList<List<Map<String, Object>>>) getNamedListResponse(post);\n\n    List<Map<String, Object>> f = nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n\n    @SuppressWarnings(\"unchecked\")\n    NamedList<List<Map<String, Object>>> nl \n      = (NamedList<List<Map<String, Object>>>) getNamedListResponse(post);\n\n    List<Map<String, Object>> f = nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n\n    @SuppressWarnings(\"unchecked\")\n    NamedList<List<Map<String, Object>>> nl \n      = (NamedList<List<Map<String, Object>>>) getNamedListResponse(post);\n\n    List<Map<String, Object>> f = nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n    NamedList nl = getNamedListResponse(post);\n    List<Map<String, Object>> f = (List<Map<String, Object>>) nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = (List<Map<String, Object>>) nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n\n    @SuppressWarnings(\"unchecked\")\n    NamedList<List<Map<String, Object>>> nl \n      = (NamedList<List<Map<String, Object>>>) getNamedListResponse(post);\n\n    List<Map<String, Object>> f = nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n\n    @SuppressWarnings(\"unchecked\")\n    NamedList<List<Map<String, Object>>> nl \n      = (NamedList<List<Map<String, Object>>>) getNamedListResponse(post);\n\n    List<Map<String, Object>> f = nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n\n    @SuppressWarnings(\"unchecked\")\n    NamedList<List<Map<String, Object>>> nl \n      = (NamedList<List<Map<String, Object>>>) getNamedListResponse(post);\n\n    List<Map<String, Object>> f = nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n\n    @SuppressWarnings(\"unchecked\")\n    NamedList<List<Map<String, Object>>> nl \n      = (NamedList<List<Map<String, Object>>>) getNamedListResponse(post);\n\n    List<Map<String, Object>> f = nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchFileList(long).mjava","sourceNew":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n\n    @SuppressWarnings(\"unchecked\")\n    NamedList<List<Map<String, Object>>> nl \n      = (NamedList<List<Map<String, Object>>>) getNamedListResponse(post);\n\n    List<Map<String, Object>> f = nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","sourceOld":"  /**\n   * Fetches the list of files in a given index commit point\n   */\n  void fetchFileList(long version) throws IOException {\n    PostMethod post = new PostMethod(masterUrl);\n    post.addParameter(COMMAND, CMD_GET_FILE_LIST);\n    post.addParameter(CMD_INDEX_VERSION, String.valueOf(version));\n    post.addParameter(\"wt\", \"javabin\");\n\n    @SuppressWarnings(\"unchecked\")\n    NamedList<List<Map<String, Object>>> nl \n      = (NamedList<List<Map<String, Object>>>) getNamedListResponse(post);\n\n    List<Map<String, Object>> f = nl.get(CMD_GET_FILE_LIST);\n    if (f != null)\n      filesToDownload = Collections.synchronizedList(f);\n    else {\n      filesToDownload = Collections.emptyList();\n      LOG.error(\"No files to download for indexversion: \"+ version);\n    }\n\n    f = nl.get(CONF_FILES);\n    if (f != null)\n      confFilesToDownload = Collections.synchronizedList(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5f7137bd9491c6596681b1f56e481e17964e581":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["b5f7137bd9491c6596681b1f56e481e17964e581","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b5f7137bd9491c6596681b1f56e481e17964e581"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","b5f7137bd9491c6596681b1f56e481e17964e581"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b5f7137bd9491c6596681b1f56e481e17964e581"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","b5f7137bd9491c6596681b1f56e481e17964e581"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"b5f7137bd9491c6596681b1f56e481e17964e581":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["b5f7137bd9491c6596681b1f56e481e17964e581","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}