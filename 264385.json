{"path":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffer = buffer.duplicate();\n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffer = buffer.duplicate();\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aef91b05d61248dc26575ce95a28d4efd6689263","date":1285045459,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      if (buffer == null)\n        throw new AlreadyClosedException(\"MMapIndexInput already closed\");\n      MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffer = buffer.duplicate();\n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffer = buffer.duplicate();\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      if (buffer == null)\n        throw new AlreadyClosedException(\"MMapIndexInput already closed\");\n      MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffer = buffer.duplicate();\n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffer = buffer.duplicate();\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68b4c6c95719e3020e407649a20b68538649beeb","date":1308055822,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      if (buffers == null)\n        throw new AlreadyClosedException(\"MMapIndexInput already closed\");\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffers = new ByteBuffer[buffers.length];\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, e.g. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen\", ioe);\n      }\n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      if (buffer == null)\n        throw new AlreadyClosedException(\"MMapIndexInput already closed\");\n      MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffer = buffer.duplicate();\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      if (buffers == null)\n        throw new AlreadyClosedException(\"MMapIndexInput already closed\");\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffers = new ByteBuffer[buffers.length];\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, e.g. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen\", ioe);\n      }\n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      if (buffer == null)\n        throw new AlreadyClosedException(\"MMapIndexInput already closed\");\n      MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffer = buffer.duplicate();\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efe3edca215dd9891cb42af283fed96f792ca0","date":1320428891,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffers = new ByteBuffer[buffers.length];\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, e.g. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      if (buffers == null)\n        throw new AlreadyClosedException(\"MMapIndexInput already closed\");\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffers = new ByteBuffer[buffers.length];\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, e.g. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen\", ioe);\n      }\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c0b917a986a3f3db7d1038c139eb39a43e984cb","date":1322061230,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.put(clone, Boolean.TRUE);\n      }\n      \n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffers = new ByteBuffer[buffers.length];\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, e.g. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a91f1cc16ed4800c8016352e2fa1df91faddc8","date":1323301844,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.add(clone);\n      }\n      \n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.put(clone, Boolean.TRUE);\n      }\n      \n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efc85580874d26ca9617f9ad61628d56f6859762","date":1323367273,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.add(clone);\n      }\n      \n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.put(clone, Boolean.TRUE);\n      }\n      \n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.add(clone);\n      }\n      \n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.put(clone, Boolean.TRUE);\n      }\n      \n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.add(clone);\n      }\n      \n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      if (buffers == null) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n      final MMapIndexInput clone = (MMapIndexInput)super.clone();\n      clone.isClone = true;\n      // we keep clone.clones, so it shares the same map with original and we have no additional cost on clones\n      assert clone.clones == this.clones;\n      clone.buffers = new ByteBuffer[buffers.length];\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(\"Should never happen: \" + this, ioe);\n      }\n      \n      // register the new clone in our clone list to clean it up on closing:\n      synchronized(this.clones) {\n        this.clones.add(clone);\n      }\n      \n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c0b917a986a3f3db7d1038c139eb39a43e984cb":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"68b4c6c95719e3020e407649a20b68538649beeb":["aef91b05d61248dc26575ce95a28d4efd6689263"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0c0b917a986a3f3db7d1038c139eb39a43e984cb","11a91f1cc16ed4800c8016352e2fa1df91faddc8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["11a91f1cc16ed4800c8016352e2fa1df91faddc8"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["68b4c6c95719e3020e407649a20b68538649beeb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","aef91b05d61248dc26575ce95a28d4efd6689263"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["aef91b05d61248dc26575ce95a28d4efd6689263","68b4c6c95719e3020e407649a20b68538649beeb"],"aef91b05d61248dc26575ce95a28d4efd6689263":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"11a91f1cc16ed4800c8016352e2fa1df91faddc8":["0c0b917a986a3f3db7d1038c139eb39a43e984cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"efc85580874d26ca9617f9ad61628d56f6859762":["0c0b917a986a3f3db7d1038c139eb39a43e984cb","11a91f1cc16ed4800c8016352e2fa1df91faddc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c0b917a986a3f3db7d1038c139eb39a43e984cb":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","11a91f1cc16ed4800c8016352e2fa1df91faddc8","efc85580874d26ca9617f9ad61628d56f6859762"],"68b4c6c95719e3020e407649a20b68538649beeb":["f1efe3edca215dd9891cb42af283fed96f792ca0","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"f1efe3edca215dd9891cb42af283fed96f792ca0":["0c0b917a986a3f3db7d1038c139eb39a43e984cb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9ed208afa1e7aa98899ddb1dedfddedddf898253":[],"aef91b05d61248dc26575ce95a28d4efd6689263":["68b4c6c95719e3020e407649a20b68538649beeb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"11a91f1cc16ed4800c8016352e2fa1df91faddc8":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e","efc85580874d26ca9617f9ad61628d56f6859762"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"efc85580874d26ca9617f9ad61628d56f6859762":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","aef91b05d61248dc26575ce95a28d4efd6689263"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9ed208afa1e7aa98899ddb1dedfddedddf898253","efc85580874d26ca9617f9ad61628d56f6859762","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}