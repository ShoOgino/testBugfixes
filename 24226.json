{"path":"src/test/org/apache/lucene/search/TestTimeLimitedCollector.MyHitCollector#collect(int,float).mjava","commits":[{"id":"ea73f58403a6c26bcb09b4933832348d80deb45b","date":1202849732,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector.MyHitCollector#collect(int,float).mjava","pathOld":"/dev/null","sourceNew":"    public void collect( final int doc, final float score ) {\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        }\n        catch(InterruptedException x) {\n          System.out.println(\"caught \" + x);\n        }\n      }\n      bits.set( doc );\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7f18e513f9984ff8d5c94dbdf877c5e21922c92","date":1205874488,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector.MyHitCollector#collect(int,float).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector.MyHitCollector#collect(int,float).mjava","sourceNew":"    public void collect( final int doc, final float score ) {\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        }\n        catch(InterruptedException x) {\n          System.out.println(\"caught \" + x);\n        }\n      }\n      bits.set( doc );\n      lastDocCollected = doc;\n    }\n\n","sourceOld":"    public void collect( final int doc, final float score ) {\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        }\n        catch(InterruptedException x) {\n          System.out.println(\"caught \" + x);\n        }\n      }\n      bits.set( doc );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector.MyHitCollector#collect(int,float).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector.MyHitCollector#collect(int,float).mjava","sourceNew":"    public void collect( final int doc, final float score ) {\n      int docId = doc + docBase;\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        }\n        catch(InterruptedException x) {\n          System.out.println(\"caught \" + x);\n        }\n      }\n      assert docId >= 0: \" base=\" + docBase + \" doc=\" + doc;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","sourceOld":"    public void collect( final int doc, final float score ) {\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        }\n        catch(InterruptedException x) {\n          System.out.println(\"caught \" + x);\n        }\n      }\n      bits.set( doc );\n      lastDocCollected = doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector.MyHitCollector#collect(int,float).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector.MyHitCollector#collect(int,float).mjava","sourceNew":"    public void collect( final int doc, final float score ) {\n      int docId = doc + docBase;\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n      assert docId >= 0: \" base=\" + docBase + \" doc=\" + doc;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","sourceOld":"    public void collect( final int doc, final float score ) {\n      int docId = doc + docBase;\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        }\n        catch(InterruptedException x) {\n          System.out.println(\"caught \" + x);\n        }\n      }\n      assert docId >= 0: \" base=\" + docBase + \" doc=\" + doc;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector.MyHitCollector#collect(int,float).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector.MyHitCollector#collect(int,float).mjava","sourceNew":"    public void collect( final int docId, final float score ) {\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n      assert docId >= 0: \" doc=\" + docId;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","sourceOld":"    public void collect( final int doc, final float score ) {\n      int docId = doc + docBase;\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n      assert docId >= 0: \" base=\" + docBase + \" doc=\" + doc;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector.MyHitCollector#collect(int,float).mjava","sourceNew":null,"sourceOld":"    public void collect( final int docId, final float score ) {\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n      assert docId >= 0: \" doc=\" + docId;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector.MyHitCollector#collect(int,float).mjava","sourceNew":null,"sourceOld":"    public void collect( final int docId, final float score ) {\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n      assert docId >= 0: \" doc=\" + docId;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7f18e513f9984ff8d5c94dbdf877c5e21922c92":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"ea73f58403a6c26bcb09b4933832348d80deb45b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["64714133cf5ec732e3bbceee63351bb9af0117dc","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["63bc3238545c6012bd44f5d294077997f236bc4e"],"63bc3238545c6012bd44f5d294077997f236bc4e":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"e7f18e513f9984ff8d5c94dbdf877c5e21922c92":["63bc3238545c6012bd44f5d294077997f236bc4e"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"ea73f58403a6c26bcb09b4933832348d80deb45b":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}