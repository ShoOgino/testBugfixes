{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","commits":[{"id":"5f5dc35fbd7ac2608de542ac2947ff8ab7b20b5a","date":1359818469,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","pathOld":"/dev/null","sourceNew":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      if (exception.get() != null) {\n        throw new AssertionError(\"One thread threw an exception\", exception.get());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1c75200cde1b16f984530a6a593727f26c16517","date":1359819129,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","sourceNew":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      if (exception.get() != null) {\n        throw new RuntimeException(\"One thread threw an exception\", exception.get());\n      }\n    }\n  }\n\n","sourceOld":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      if (exception.get() != null) {\n        throw new AssertionError(\"One thread threw an exception\", exception.get());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb97a913498e2387924cb19fb8be9a95daf6f38a","date":1359823388,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","pathOld":"/dev/null","sourceNew":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      if (exception.get() != null) {\n        throw new RuntimeException(\"One thread threw an exception\", exception.get());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0a43d007127c8f41c2d1957098872d9b5532d7e","date":1359847238,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","sourceNew":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","sourceOld":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      if (exception.get() != null) {\n        throw new RuntimeException(\"One thread threw an exception\", exception.get());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","sourceNew":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","sourceOld":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      if (exception.get() != null) {\n        throw new RuntimeException(\"One thread threw an exception\", exception.get());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86658da8ce1e761bc0f5a05cf8795d1f78c388e2","date":1365796110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","sourceNew":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","sourceOld":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 1000);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","sourceNew":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","sourceOld":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","sourceNew":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","sourceOld":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","sourceNew":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.shutdown();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","sourceOld":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","sourceNew":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","sourceOld":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.shutdown();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testClone().mjava","sourceNew":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(50);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","sourceOld":"  // run random tests from different threads to make sure the per-thread clones\n  // don't share mutable data\n  public void testClone() throws IOException, InterruptedException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n      }\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        final int docID = docID(reader, \"\"+i);\n        assertEquals(docs[i], reader.getTermVectors(docID));\n      }\n\n      final AtomicReference<Throwable> exception = new AtomicReference<>();\n      final Thread[] threads = new Thread[2];\n      for (int i = 0; i < threads.length; ++i) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for (int i = 0; i < atLeast(100); ++i) {\n                final int idx = random().nextInt(numDocs);\n                final int docID = docID(reader, \"\"+idx);\n                assertEquals(docs[idx], reader.getTermVectors(docID));\n              }\n            } catch (Throwable t) {\n              exception.set(t);\n            }\n          }\n        };\n      }\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      for (Thread thread : threads) {\n        thread.join();\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n      assertNull(\"One thread threw an exception\", exception.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0a43d007127c8f41c2d1957098872d9b5532d7e":["b1c75200cde1b16f984530a6a593727f26c16517"],"6613659748fe4411a7dcf85266e55db1f95f7315":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"5f5dc35fbd7ac2608de542ac2947ff8ab7b20b5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["eb97a913498e2387924cb19fb8be9a95daf6f38a","a0a43d007127c8f41c2d1957098872d9b5532d7e"],"b1c75200cde1b16f984530a6a593727f26c16517":["5f5dc35fbd7ac2608de542ac2947ff8ab7b20b5a"],"eb97a913498e2387924cb19fb8be9a95daf6f38a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1c75200cde1b16f984530a6a593727f26c16517"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["a0a43d007127c8f41c2d1957098872d9b5532d7e"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0a43d007127c8f41c2d1957098872d9b5532d7e":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5f5dc35fbd7ac2608de542ac2947ff8ab7b20b5a":["b1c75200cde1b16f984530a6a593727f26c16517"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"b1c75200cde1b16f984530a6a593727f26c16517":["a0a43d007127c8f41c2d1957098872d9b5532d7e","eb97a913498e2387924cb19fb8be9a95daf6f38a"],"eb97a913498e2387924cb19fb8be9a95daf6f38a":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f5dc35fbd7ac2608de542ac2947ff8ab7b20b5a","eb97a913498e2387924cb19fb8be9a95daf6f38a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}