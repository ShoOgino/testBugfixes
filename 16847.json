{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testChild().mjava","commits":[{"id":"ef9659be74f43b907ff558f1bafe80488bb9f4b7","date":1423940662,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testChild().mjava","pathOld":"/dev/null","sourceNew":"  public void testChild() throws Exception {\n    SingleValueChild in = new SingleValueChild();\n    in.id = \"1\";\n    in.child = new Child();\n    in.child.id = \"1.0\";\n    in.child.name = \"Name One\";\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument(in);\n    assertEquals(1, doc.getChildDocuments().size());\n    assertEquals(1, ClientUtils.toSolrDocument(doc).getChildDocuments().size());\n    SingleValueChild out = binder.getBean(SingleValueChild.class, ClientUtils.toSolrDocument(doc));\n    assertEquals(in.id, out.id);\n    assertEquals(in.child.id, out.child.id);\n    assertEquals(in.child.name, out.child.name);\n\n    ListChild listIn = new ListChild();\n    listIn.id = \"2\";\n    Child child = new Child();\n    child.id = \"1.1\";\n    child.name = \"Name Two\";\n    listIn.child = Arrays.asList(in.child, child);\n    doc = binder.toSolrInputDocument(listIn);\n    assertEquals(2, doc.getChildDocuments().size());\n    assertEquals(2, ClientUtils.toSolrDocument(doc).getChildDocuments().size());\n    ListChild listOut = binder.getBean(ListChild.class, ClientUtils.toSolrDocument(doc));\n    assertEquals(listIn.id, listOut.id);\n    assertEquals(listIn.child.get(0).id, listOut.child.get(0).id);\n    assertEquals(listIn.child.get(0).name, listOut.child.get(0).name);\n    assertEquals(listIn.child.get(1).id, listOut.child.get(1).id);\n    assertEquals(listIn.child.get(1).name, listOut.child.get(1).name);\n\n    ArrayChild arrIn = new ArrayChild();\n    arrIn.id = \"3\";\n    arrIn.child = new Child[]{in.child, child};\n    doc = binder.toSolrInputDocument(arrIn);\n    assertEquals(2, doc.getChildDocuments().size());\n    assertEquals(2, ClientUtils.toSolrDocument(doc).getChildDocuments().size());\n    ArrayChild arrOut = binder.getBean(ArrayChild.class, ClientUtils.toSolrDocument(doc));\n    assertEquals(arrIn.id, arrOut.id);\n    assertEquals(arrIn.child[0].id, arrOut.child[0].id);\n    assertEquals(arrIn.child[0].name, arrOut.child[0].name);\n    assertEquals(arrIn.child[1].id, arrOut.child[1].id);\n    assertEquals(arrIn.child[1].name, arrOut.child[1].name);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testChild().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testChild().mjava","sourceNew":"  public void testChild() throws Exception {\n    SingleValueChild in = new SingleValueChild();\n    in.id = \"1\";\n    in.child = new Child();\n    in.child.id = \"1.0\";\n    in.child.name = \"Name One\";\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument solrInputDoc = binder.toSolrInputDocument(in);\n    SolrDocument solrDoc = toSolrDocument(solrInputDoc);\n    assertEquals(1, solrInputDoc.getChildDocuments().size());\n    assertEquals(1, solrDoc.getChildDocuments().size());\n    SingleValueChild out = binder.getBean(SingleValueChild.class, solrDoc);\n    assertEquals(in.id, out.id);\n    assertEquals(in.child.id, out.child.id);\n    assertEquals(in.child.name, out.child.name);\n\n    ListChild listIn = new ListChild();\n    listIn.id = \"2\";\n    Child child = new Child();\n    child.id = \"1.1\";\n    child.name = \"Name Two\";\n    listIn.child = Arrays.asList(in.child, child);\n    solrInputDoc = binder.toSolrInputDocument(listIn);\n    solrDoc = toSolrDocument(solrInputDoc);\n    assertEquals(2, solrInputDoc.getChildDocuments().size());\n    assertEquals(2, solrDoc.getChildDocuments().size());\n    ListChild listOut = binder.getBean(ListChild.class, solrDoc);\n    assertEquals(listIn.id, listOut.id);\n    assertEquals(listIn.child.get(0).id, listOut.child.get(0).id);\n    assertEquals(listIn.child.get(0).name, listOut.child.get(0).name);\n    assertEquals(listIn.child.get(1).id, listOut.child.get(1).id);\n    assertEquals(listIn.child.get(1).name, listOut.child.get(1).name);\n\n    ArrayChild arrIn = new ArrayChild();\n    arrIn.id = \"3\";\n    arrIn.child = new Child[]{in.child, child};\n    solrInputDoc = binder.toSolrInputDocument(arrIn);\n    solrDoc = toSolrDocument(solrInputDoc);\n    assertEquals(2, solrInputDoc.getChildDocuments().size());\n    assertEquals(2, solrDoc.getChildDocuments().size());\n    ArrayChild arrOut = binder.getBean(ArrayChild.class, solrDoc);\n    assertEquals(arrIn.id, arrOut.id);\n    assertEquals(arrIn.child[0].id, arrOut.child[0].id);\n    assertEquals(arrIn.child[0].name, arrOut.child[0].name);\n    assertEquals(arrIn.child[1].id, arrOut.child[1].id);\n    assertEquals(arrIn.child[1].name, arrOut.child[1].name);\n\n  }\n\n","sourceOld":"  public void testChild() throws Exception {\n    SingleValueChild in = new SingleValueChild();\n    in.id = \"1\";\n    in.child = new Child();\n    in.child.id = \"1.0\";\n    in.child.name = \"Name One\";\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument(in);\n    assertEquals(1, doc.getChildDocuments().size());\n    assertEquals(1, ClientUtils.toSolrDocument(doc).getChildDocuments().size());\n    SingleValueChild out = binder.getBean(SingleValueChild.class, ClientUtils.toSolrDocument(doc));\n    assertEquals(in.id, out.id);\n    assertEquals(in.child.id, out.child.id);\n    assertEquals(in.child.name, out.child.name);\n\n    ListChild listIn = new ListChild();\n    listIn.id = \"2\";\n    Child child = new Child();\n    child.id = \"1.1\";\n    child.name = \"Name Two\";\n    listIn.child = Arrays.asList(in.child, child);\n    doc = binder.toSolrInputDocument(listIn);\n    assertEquals(2, doc.getChildDocuments().size());\n    assertEquals(2, ClientUtils.toSolrDocument(doc).getChildDocuments().size());\n    ListChild listOut = binder.getBean(ListChild.class, ClientUtils.toSolrDocument(doc));\n    assertEquals(listIn.id, listOut.id);\n    assertEquals(listIn.child.get(0).id, listOut.child.get(0).id);\n    assertEquals(listIn.child.get(0).name, listOut.child.get(0).name);\n    assertEquals(listIn.child.get(1).id, listOut.child.get(1).id);\n    assertEquals(listIn.child.get(1).name, listOut.child.get(1).name);\n\n    ArrayChild arrIn = new ArrayChild();\n    arrIn.id = \"3\";\n    arrIn.child = new Child[]{in.child, child};\n    doc = binder.toSolrInputDocument(arrIn);\n    assertEquals(2, doc.getChildDocuments().size());\n    assertEquals(2, ClientUtils.toSolrDocument(doc).getChildDocuments().size());\n    ArrayChild arrOut = binder.getBean(ArrayChild.class, ClientUtils.toSolrDocument(doc));\n    assertEquals(arrIn.id, arrOut.id);\n    assertEquals(arrIn.child[0].id, arrOut.child[0].id);\n    assertEquals(arrIn.child[0].name, arrOut.child[0].name);\n    assertEquals(arrIn.child[1].id, arrOut.child[1].id);\n    assertEquals(arrIn.child[1].name, arrOut.child[1].name);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testChild().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testChild().mjava","sourceNew":"  public void testChild() throws Exception {\n    SingleValueChild in = new SingleValueChild();\n    in.id = \"1\";\n    in.child = new Child();\n    in.child.id = \"1.0\";\n    in.child.name = \"Name One\";\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument solrInputDoc = binder.toSolrInputDocument(in);\n    SolrDocument solrDoc = toSolrDocument(solrInputDoc);\n    assertEquals(1, solrInputDoc.getChildDocuments().size());\n    assertEquals(1, solrDoc.getChildDocuments().size());\n    SingleValueChild out = binder.getBean(SingleValueChild.class, solrDoc);\n    assertEquals(in.id, out.id);\n    assertEquals(in.child.id, out.child.id);\n    assertEquals(in.child.name, out.child.name);\n\n    ListChild listIn = new ListChild();\n    listIn.id = \"2\";\n    Child child = new Child();\n    child.id = \"1.1\";\n    child.name = \"Name Two\";\n    listIn.child = Arrays.asList(in.child, child);\n    solrInputDoc = binder.toSolrInputDocument(listIn);\n    solrDoc = toSolrDocument(solrInputDoc);\n    assertEquals(2, solrInputDoc.getChildDocuments().size());\n    assertEquals(2, solrDoc.getChildDocuments().size());\n    ListChild listOut = binder.getBean(ListChild.class, solrDoc);\n    assertEquals(listIn.id, listOut.id);\n    assertEquals(listIn.child.get(0).id, listOut.child.get(0).id);\n    assertEquals(listIn.child.get(0).name, listOut.child.get(0).name);\n    assertEquals(listIn.child.get(1).id, listOut.child.get(1).id);\n    assertEquals(listIn.child.get(1).name, listOut.child.get(1).name);\n\n    ArrayChild arrIn = new ArrayChild();\n    arrIn.id = \"3\";\n    arrIn.child = new Child[]{in.child, child};\n    solrInputDoc = binder.toSolrInputDocument(arrIn);\n    solrDoc = toSolrDocument(solrInputDoc);\n    assertEquals(2, solrInputDoc.getChildDocuments().size());\n    assertEquals(2, solrDoc.getChildDocuments().size());\n    ArrayChild arrOut = binder.getBean(ArrayChild.class, solrDoc);\n    assertEquals(arrIn.id, arrOut.id);\n    assertEquals(arrIn.child[0].id, arrOut.child[0].id);\n    assertEquals(arrIn.child[0].name, arrOut.child[0].name);\n    assertEquals(arrIn.child[1].id, arrOut.child[1].id);\n    assertEquals(arrIn.child[1].name, arrOut.child[1].name);\n\n  }\n\n","sourceOld":"  public void testChild() throws Exception {\n    SingleValueChild in = new SingleValueChild();\n    in.id = \"1\";\n    in.child = new Child();\n    in.child.id = \"1.0\";\n    in.child.name = \"Name One\";\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    SolrInputDocument doc = binder.toSolrInputDocument(in);\n    assertEquals(1, doc.getChildDocuments().size());\n    assertEquals(1, ClientUtils.toSolrDocument(doc).getChildDocuments().size());\n    SingleValueChild out = binder.getBean(SingleValueChild.class, ClientUtils.toSolrDocument(doc));\n    assertEquals(in.id, out.id);\n    assertEquals(in.child.id, out.child.id);\n    assertEquals(in.child.name, out.child.name);\n\n    ListChild listIn = new ListChild();\n    listIn.id = \"2\";\n    Child child = new Child();\n    child.id = \"1.1\";\n    child.name = \"Name Two\";\n    listIn.child = Arrays.asList(in.child, child);\n    doc = binder.toSolrInputDocument(listIn);\n    assertEquals(2, doc.getChildDocuments().size());\n    assertEquals(2, ClientUtils.toSolrDocument(doc).getChildDocuments().size());\n    ListChild listOut = binder.getBean(ListChild.class, ClientUtils.toSolrDocument(doc));\n    assertEquals(listIn.id, listOut.id);\n    assertEquals(listIn.child.get(0).id, listOut.child.get(0).id);\n    assertEquals(listIn.child.get(0).name, listOut.child.get(0).name);\n    assertEquals(listIn.child.get(1).id, listOut.child.get(1).id);\n    assertEquals(listIn.child.get(1).name, listOut.child.get(1).name);\n\n    ArrayChild arrIn = new ArrayChild();\n    arrIn.id = \"3\";\n    arrIn.child = new Child[]{in.child, child};\n    doc = binder.toSolrInputDocument(arrIn);\n    assertEquals(2, doc.getChildDocuments().size());\n    assertEquals(2, ClientUtils.toSolrDocument(doc).getChildDocuments().size());\n    ArrayChild arrOut = binder.getBean(ArrayChild.class, ClientUtils.toSolrDocument(doc));\n    assertEquals(arrIn.id, arrOut.id);\n    assertEquals(arrIn.child[0].id, arrOut.child[0].id);\n    assertEquals(arrIn.child[0].name, arrOut.child[0].name);\n    assertEquals(arrIn.child[1].id, arrOut.child[1].id);\n    assertEquals(arrIn.child[1].name, arrOut.child[1].name);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["ef9659be74f43b907ff558f1bafe80488bb9f4b7","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}