{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean,FacetSearchParams).mjava","commits":[{"id":"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd","date":1361836936,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean,FacetSearchParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore, FacetSearchParams fsp) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(filter, query);\n    }\n    if (sort != null) {\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      Math.min(topN, searcher.getIndexReader().maxDoc()),\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = new DrillSideways(searcher, taxoReader).search(query, hitCollector, fsp);\n      r.hits = hitCollector.topDocs();\n      return r;\n    } else {\n      return search(after, query, topN, fsp);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["effc44093d40aab545a74b18efa490ba95cc12f5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb8457dd0880f5547d70dbf40ea4f1c5e7787798","date":1363378339,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean,FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean,FacetSearchParams).mjava","sourceNew":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore, FacetSearchParams fsp) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(filter, query);\n    }\n    if (sort != null) {\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      Math.min(topN, searcher.getIndexReader().maxDoc()),\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = search(query, hitCollector, fsp);\n      r.hits = hitCollector.topDocs();\n      return r;\n    } else {\n      return search(after, query, topN, fsp);\n    }\n  }\n\n","sourceOld":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore, FacetSearchParams fsp) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(filter, query);\n    }\n    if (sort != null) {\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      Math.min(topN, searcher.getIndexReader().maxDoc()),\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = new DrillSideways(searcher, taxoReader).search(query, hitCollector, fsp);\n      r.hits = hitCollector.topDocs();\n      return r;\n    } else {\n      return search(after, query, topN, fsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"008af1fd0d39fe2222dcbcb2f45538a0ce61c51c","date":1369740185,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean,FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean,FacetSearchParams).mjava","sourceNew":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore, FacetSearchParams fsp) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(filter, query);\n    }\n    if (sort != null) {\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      Math.min(topN, searcher.getIndexReader().maxDoc()),\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = search(query, hitCollector, fsp);\n      return new DrillSidewaysResult(r.facetResults, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN, fsp);\n    }\n  }\n\n","sourceOld":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore, FacetSearchParams fsp) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(filter, query);\n    }\n    if (sort != null) {\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      Math.min(topN, searcher.getIndexReader().maxDoc()),\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = search(query, hitCollector, fsp);\n      r.hits = hitCollector.topDocs();\n      return r;\n    } else {\n      return search(after, query, topN, fsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"effc44093d40aab545a74b18efa490ba95cc12f5","date":1370781223,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean,FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean,FacetSearchParams).mjava","sourceNew":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore, FacetSearchParams fsp) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(filter, query);\n    }\n    if (sort != null) {\n      int limit = searcher.getIndexReader().maxDoc();\n      if (limit == 0) {\n        limit = 1; // the collector does not alow numHits = 0\n      }\n      topN = Math.min(topN, limit);\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      topN,\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = search(query, hitCollector, fsp);\n      return new DrillSidewaysResult(r.facetResults, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN, fsp);\n    }\n  }\n\n","sourceOld":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore, FacetSearchParams fsp) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(filter, query);\n    }\n    if (sort != null) {\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      Math.min(topN, searcher.getIndexReader().maxDoc()),\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = search(query, hitCollector, fsp);\n      return new DrillSidewaysResult(r.facetResults, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN, fsp);\n    }\n  }\n\n","bugFix":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8428426152984b387a961487efefbe9cf62acf","date":1385332540,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean,FacetSearchParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore, FacetSearchParams fsp) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(filter, query);\n    }\n    if (sort != null) {\n      int limit = searcher.getIndexReader().maxDoc();\n      if (limit == 0) {\n        limit = 1; // the collector does not alow numHits = 0\n      }\n      topN = Math.min(topN, limit);\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      topN,\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = search(query, hitCollector, fsp);\n      return new DrillSidewaysResult(r.facetResults, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN, fsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#search(DrillDownQuery,Filter,FieldDoc,int,Sort,boolean,boolean,FacetSearchParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Search, sorting by {@link Sort}, and computing\n   * drill down and sideways counts.\n   */\n  public DrillSidewaysResult search(DrillDownQuery query,\n                                    Filter filter, FieldDoc after, int topN, Sort sort, boolean doDocScores,\n                                    boolean doMaxScore, FacetSearchParams fsp) throws IOException {\n    if (filter != null) {\n      query = new DrillDownQuery(filter, query);\n    }\n    if (sort != null) {\n      int limit = searcher.getIndexReader().maxDoc();\n      if (limit == 0) {\n        limit = 1; // the collector does not alow numHits = 0\n      }\n      topN = Math.min(topN, limit);\n      final TopFieldCollector hitCollector = TopFieldCollector.create(sort,\n                                                                      topN,\n                                                                      after,\n                                                                      true,\n                                                                      doDocScores,\n                                                                      doMaxScore,\n                                                                      true);\n      DrillSidewaysResult r = search(query, hitCollector, fsp);\n      return new DrillSidewaysResult(r.facetResults, hitCollector.topDocs());\n    } else {\n      return search(after, query, topN, fsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"008af1fd0d39fe2222dcbcb2f45538a0ce61c51c":["fb8457dd0880f5547d70dbf40ea4f1c5e7787798"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["effc44093d40aab545a74b18efa490ba95cc12f5","2e8428426152984b387a961487efefbe9cf62acf"],"effc44093d40aab545a74b18efa490ba95cc12f5":["008af1fd0d39fe2222dcbcb2f45538a0ce61c51c"],"2e8428426152984b387a961487efefbe9cf62acf":["effc44093d40aab545a74b18efa490ba95cc12f5"],"fb8457dd0880f5547d70dbf40ea4f1c5e7787798":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["fb8457dd0880f5547d70dbf40ea4f1c5e7787798"],"008af1fd0d39fe2222dcbcb2f45538a0ce61c51c":["effc44093d40aab545a74b18efa490ba95cc12f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"effc44093d40aab545a74b18efa490ba95cc12f5":["3cc728b07df73b197e6d940d27f9b08b63918f13","2e8428426152984b387a961487efefbe9cf62acf"],"2e8428426152984b387a961487efefbe9cf62acf":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"fb8457dd0880f5547d70dbf40ea4f1c5e7787798":["008af1fd0d39fe2222dcbcb2f45538a0ce61c51c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}