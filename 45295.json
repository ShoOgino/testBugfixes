{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#applyAffix(char[],int,int,int,int,boolean).mjava","commits":[{"id":"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7","date":1393724838,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#applyAffix(char[],int,int,int,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#applyAffix(char[],int,int,int).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param length valid length of stripped word\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param prefixFlag when we already stripped a prefix, we cant simply recurse and check the suffix, unless both are compatible\n   *                   so we must check dictionary form against both to add it as a stem!\n   * @param recursionDepth current recursion depth\n   * @param prefix true if we are removing a prefix (false if its a suffix)\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  List<CharsRef> applyAffix(char strippedWord[], int length, int affix, int prefixFlag, int recursionDepth, boolean prefix) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    // TODO: just pass this in from before, no need to decode it twice\n    affixReader.setPosition(8 * affix);\n    char flag = (char) (affixReader.readShort() & 0xffff);\n    affixReader.skipBytes(2); // strip\n    int condition = (char) (affixReader.readShort() & 0xffff);\n    boolean crossProduct = (condition & 1) == 1;\n    condition >>>= 1;\n    char append = (char) (affixReader.readShort() & 0xffff);\n    \n    Pattern pattern = dictionary.patterns.get(condition);\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    IntsRef forms = dictionary.lookupWord(strippedWord, 0, length);\n    if (forms != null) {\n      for (int i = 0; i < forms.length; i++) {\n        dictionary.flagLookup.get(forms.ints[forms.offset+i], scratch);\n        char wordFlags[] = Dictionary.decodeFlags(scratch);\n        if (Dictionary.hasFlag(wordFlags, flag)) {\n          // confusing: in this one exception, we already chained the first prefix against the second,\n          // so it doesnt need to be checked against the word\n          boolean chainedPrefix = dictionary.complexPrefixes && recursionDepth == 1 && prefix;\n          if (chainedPrefix == false && prefixFlag >= 0 && !Dictionary.hasFlag(wordFlags, (char)prefixFlag)) {\n            // see if we can chain prefix thru the suffix continuation class (only if it has any!)\n            dictionary.flagLookup.get(append, scratch);\n            char appendFlags[] = Dictionary.decodeFlags(scratch);\n            if (!hasCrossCheckedFlag((char)prefixFlag, appendFlags, false)) {\n              continue;\n            }\n          }\n          stems.add(new CharsRef(strippedWord, 0, length));\n        }\n      }\n    }\n\n    if (crossProduct) {\n      if (recursionDepth == 0) {\n        if (prefix) {\n          // we took away the first prefix.\n          // COMPLEXPREFIXES = true:  combine with a second prefix and another suffix \n          // COMPLEXPREFIXES = false: combine with another suffix\n          stems.addAll(stem(strippedWord, length, affix, flag, flag, ++recursionDepth, dictionary.complexPrefixes, true, true));\n        } else if (!dictionary.complexPrefixes) {\n          // we took away a suffix.\n          // COMPLEXPREFIXES = true: we don't recurse! only one suffix allowed\n          // COMPLEXPREFIXES = false: combine with another suffix\n          stems.addAll(stem(strippedWord, length, affix, flag, prefixFlag, ++recursionDepth, false, true, false));\n        }\n      } else if (recursionDepth == 1) {\n        if (prefix && dictionary.complexPrefixes) {\n          // we took away the second prefix: go look for another suffix\n          stems.addAll(stem(strippedWord, length, affix, flag, flag, ++recursionDepth, false, true, true));\n        } else if (prefix == false && dictionary.complexPrefixes == false) {\n          // we took away a prefix, then a suffix: go look for another suffix\n          stems.addAll(stem(strippedWord, length, affix, flag, prefixFlag, ++recursionDepth, false, true, false));\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  List<CharsRef> applyAffix(char strippedWord[], int length, int affix, int recursionDepth) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    affixReader.setPosition(8 * affix);\n    char flag = (char) (affixReader.readShort() & 0xffff);\n    affixReader.skipBytes(2); // strip\n    int condition = (char) (affixReader.readShort() & 0xffff);\n    boolean crossProduct = (condition & 1) == 1;\n    condition >>>= 1;\n    char append = (char) (affixReader.readShort() & 0xffff);\n    \n    Pattern pattern = dictionary.patterns.get(condition);\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    IntsRef forms = dictionary.lookupWord(strippedWord, 0, length);\n    if (forms != null) {\n      for (int i = 0; i < forms.length; i++) {\n        dictionary.flagLookup.get(forms.ints[forms.offset+i], scratch);\n        char wordFlags[] = Dictionary.decodeFlags(scratch);\n        if (wordFlags != null && Dictionary.hasFlag(wordFlags, flag)) {\n          stems.add(new CharsRef(strippedWord, 0, length));\n        }\n      }\n    }\n\n    if (crossProduct && recursionDepth < recursionCap) {\n      dictionary.flagLookup.get(append, scratch);\n      char appendFlags[] = Dictionary.decodeFlags(scratch);\n      stems.addAll(stem(strippedWord, length, appendFlags, ++recursionDepth));\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e7d0aeceab994177a0a6b52f475611b52f09bf","date":1393856424,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#applyAffix(char[],int,int,int,int,boolean,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#applyAffix(char[],int,int,int,int,boolean).mjava","sourceNew":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param length valid length of stripped word\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param prefixFlag when we already stripped a prefix, we cant simply recurse and check the suffix, unless both are compatible\n   *                   so we must check dictionary form against both to add it as a stem!\n   * @param recursionDepth current recursion depth\n   * @param prefix true if we are removing a prefix (false if its a suffix)\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  List<CharsRef> applyAffix(char strippedWord[], int length, int affix, int prefixFlag, int recursionDepth, boolean prefix, boolean circumfix) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    // TODO: just pass this in from before, no need to decode it twice\n    affixReader.setPosition(8 * affix);\n    char flag = (char) (affixReader.readShort() & 0xffff);\n    affixReader.skipBytes(2); // strip\n    int condition = (char) (affixReader.readShort() & 0xffff);\n    boolean crossProduct = (condition & 1) == 1;\n    condition >>>= 1;\n    char append = (char) (affixReader.readShort() & 0xffff);\n    \n    Pattern pattern = dictionary.patterns.get(condition);\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    IntsRef forms = dictionary.lookupWord(strippedWord, 0, length);\n    if (forms != null) {\n      for (int i = 0; i < forms.length; i++) {\n        dictionary.flagLookup.get(forms.ints[forms.offset+i], scratch);\n        char wordFlags[] = Dictionary.decodeFlags(scratch);\n        if (Dictionary.hasFlag(wordFlags, flag)) {\n          // confusing: in this one exception, we already chained the first prefix against the second,\n          // so it doesnt need to be checked against the word\n          boolean chainedPrefix = dictionary.complexPrefixes && recursionDepth == 1 && prefix;\n          if (chainedPrefix == false && prefixFlag >= 0 && !Dictionary.hasFlag(wordFlags, (char)prefixFlag)) {\n            // see if we can chain prefix thru the suffix continuation class (only if it has any!)\n            dictionary.flagLookup.get(append, scratch);\n            char appendFlags[] = Dictionary.decodeFlags(scratch);\n            if (!hasCrossCheckedFlag((char)prefixFlag, appendFlags, false)) {\n              continue;\n            }\n          }\n          \n          // if circumfix was previously set by a prefix, we must check this suffix,\n          // to ensure it has it, and vice versa\n          if (dictionary.circumfix != -1) {\n            dictionary.flagLookup.get(append, scratch);\n            char appendFlags[] = Dictionary.decodeFlags(scratch);\n            boolean suffixCircumfix = Dictionary.hasFlag(appendFlags, (char)dictionary.circumfix);\n            if (circumfix != suffixCircumfix) {\n              continue;\n            }\n          }\n          stems.add(new CharsRef(strippedWord, 0, length));\n        }\n      }\n    }\n    \n    // if a circumfix flag is defined in the dictionary, and we are a prefix, we need to check if we have that flag\n    if (dictionary.circumfix != -1 && !circumfix && prefix) {\n      dictionary.flagLookup.get(append, scratch);\n      char appendFlags[] = Dictionary.decodeFlags(scratch);\n      circumfix = Dictionary.hasFlag(appendFlags, (char)dictionary.circumfix);\n    }\n\n    if (crossProduct) {\n      if (recursionDepth == 0) {\n        if (prefix) {\n          // we took away the first prefix.\n          // COMPLEXPREFIXES = true:  combine with a second prefix and another suffix \n          // COMPLEXPREFIXES = false: combine with another suffix\n          stems.addAll(stem(strippedWord, length, affix, flag, flag, ++recursionDepth, dictionary.complexPrefixes, true, true, circumfix));\n        } else if (!dictionary.complexPrefixes) {\n          // we took away a suffix.\n          // COMPLEXPREFIXES = true: we don't recurse! only one suffix allowed\n          // COMPLEXPREFIXES = false: combine with another suffix\n          stems.addAll(stem(strippedWord, length, affix, flag, prefixFlag, ++recursionDepth, false, true, false, circumfix));\n        }\n      } else if (recursionDepth == 1) {\n        if (prefix && dictionary.complexPrefixes) {\n          // we took away the second prefix: go look for another suffix\n          stems.addAll(stem(strippedWord, length, affix, flag, flag, ++recursionDepth, false, true, true, circumfix));\n        } else if (prefix == false && dictionary.complexPrefixes == false) {\n          // we took away a prefix, then a suffix: go look for another suffix\n          stems.addAll(stem(strippedWord, length, affix, flag, prefixFlag, ++recursionDepth, false, true, false, circumfix));\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Applies the affix rule to the given word, producing a list of stems if any are found\n   *\n   * @param strippedWord Word the affix has been removed and the strip added\n   * @param length valid length of stripped word\n   * @param affix HunspellAffix representing the affix rule itself\n   * @param prefixFlag when we already stripped a prefix, we cant simply recurse and check the suffix, unless both are compatible\n   *                   so we must check dictionary form against both to add it as a stem!\n   * @param recursionDepth current recursion depth\n   * @param prefix true if we are removing a prefix (false if its a suffix)\n   * @return List of stems for the word, or an empty list if none are found\n   */\n  List<CharsRef> applyAffix(char strippedWord[], int length, int affix, int prefixFlag, int recursionDepth, boolean prefix) {\n    segment.setLength(0);\n    segment.append(strippedWord, 0, length);\n    \n    // TODO: just pass this in from before, no need to decode it twice\n    affixReader.setPosition(8 * affix);\n    char flag = (char) (affixReader.readShort() & 0xffff);\n    affixReader.skipBytes(2); // strip\n    int condition = (char) (affixReader.readShort() & 0xffff);\n    boolean crossProduct = (condition & 1) == 1;\n    condition >>>= 1;\n    char append = (char) (affixReader.readShort() & 0xffff);\n    \n    Pattern pattern = dictionary.patterns.get(condition);\n    if (!pattern.matcher(segment).matches()) {\n      return Collections.emptyList();\n    }\n\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n\n    IntsRef forms = dictionary.lookupWord(strippedWord, 0, length);\n    if (forms != null) {\n      for (int i = 0; i < forms.length; i++) {\n        dictionary.flagLookup.get(forms.ints[forms.offset+i], scratch);\n        char wordFlags[] = Dictionary.decodeFlags(scratch);\n        if (Dictionary.hasFlag(wordFlags, flag)) {\n          // confusing: in this one exception, we already chained the first prefix against the second,\n          // so it doesnt need to be checked against the word\n          boolean chainedPrefix = dictionary.complexPrefixes && recursionDepth == 1 && prefix;\n          if (chainedPrefix == false && prefixFlag >= 0 && !Dictionary.hasFlag(wordFlags, (char)prefixFlag)) {\n            // see if we can chain prefix thru the suffix continuation class (only if it has any!)\n            dictionary.flagLookup.get(append, scratch);\n            char appendFlags[] = Dictionary.decodeFlags(scratch);\n            if (!hasCrossCheckedFlag((char)prefixFlag, appendFlags, false)) {\n              continue;\n            }\n          }\n          stems.add(new CharsRef(strippedWord, 0, length));\n        }\n      }\n    }\n\n    if (crossProduct) {\n      if (recursionDepth == 0) {\n        if (prefix) {\n          // we took away the first prefix.\n          // COMPLEXPREFIXES = true:  combine with a second prefix and another suffix \n          // COMPLEXPREFIXES = false: combine with another suffix\n          stems.addAll(stem(strippedWord, length, affix, flag, flag, ++recursionDepth, dictionary.complexPrefixes, true, true));\n        } else if (!dictionary.complexPrefixes) {\n          // we took away a suffix.\n          // COMPLEXPREFIXES = true: we don't recurse! only one suffix allowed\n          // COMPLEXPREFIXES = false: combine with another suffix\n          stems.addAll(stem(strippedWord, length, affix, flag, prefixFlag, ++recursionDepth, false, true, false));\n        }\n      } else if (recursionDepth == 1) {\n        if (prefix && dictionary.complexPrefixes) {\n          // we took away the second prefix: go look for another suffix\n          stems.addAll(stem(strippedWord, length, affix, flag, flag, ++recursionDepth, false, true, true));\n        } else if (prefix == false && dictionary.complexPrefixes == false) {\n          // we took away a prefix, then a suffix: go look for another suffix\n          stems.addAll(stem(strippedWord, length, affix, flag, prefixFlag, ++recursionDepth, false, true, false));\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e7d0aeceab994177a0a6b52f475611b52f09bf":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38e7d0aeceab994177a0a6b52f475611b52f09bf"]},"commit2Childs":{"38e7d0aeceab994177a0a6b52f475611b52f09bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["38e7d0aeceab994177a0a6b52f475611b52f09bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}