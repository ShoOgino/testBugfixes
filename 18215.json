{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readBinaryEntry(FieldInfo,IndexInput).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readBinaryEntry(FieldInfo,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryEntry readBinaryEntry(FieldInfo info, IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        final int blockShift = meta.readVInt();\n        entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.count + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.addressesMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.addressesMeta);\n        entry.addressesEndOffset = meta.readLong();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readBinaryEntry(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readBinaryEntry(FieldInfo,IndexInput).mjava","sourceNew":"  private BinaryEntry readBinaryEntry(FieldInfo info, IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        final int blockShift = meta.readVInt();\n        entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.count + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.addressesMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.addressesMeta);\n        entry.addressesEndOffset = meta.readLong();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  private BinaryEntry readBinaryEntry(FieldInfo info, IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        final int blockShift = meta.readVInt();\n        entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.count + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.addressesMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.addressesMeta);\n        entry.addressesEndOffset = meta.readLong();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readBinaryEntry(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#readBinaryEntry(FieldInfo,IndexInput).mjava","sourceNew":"  private BinaryEntry readBinaryEntry(FieldInfo info, IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        final int blockShift = meta.readVInt();\n        entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.count + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.addressesMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.addressesMeta);\n        entry.addressesEndOffset = meta.readLong();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  private BinaryEntry readBinaryEntry(FieldInfo info, IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        final int blockShift = meta.readVInt();\n        entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.count + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.addressesMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.addressesMeta);\n        entry.addressesEndOffset = meta.readLong();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a870f9917149dc600c4ad4417d615c1795de5864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}