{"path":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus(String,String).mjava","commits":[{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus().mjava","sourceNew":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean fetchRestoreStatus() throws IOException {\n    String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus(String,String).mjava","sourceNew":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","sourceOld":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus(String,String).mjava","sourceNew":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","sourceOld":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus(String,String).mjava","sourceNew":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","sourceOld":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestRestoreCore#fetchRestoreStatus(String,String).mjava","sourceNew":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String leaderUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(leaderUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","sourceOld":"  public static boolean fetchRestoreStatus (String baseUrl, String coreName) throws IOException {\n    String masterUrl = baseUrl + \"/\" + coreName +\n        ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_RESTORE_STATUS;\n    final Pattern pException = Pattern.compile(\"<str name=\\\"exception\\\">(.*?)</str>\");\n\n    InputStream stream = null;\n    try {\n      URL url = new URL(masterUrl);\n      stream = url.openStream();\n      String response = IOUtils.toString(stream, \"UTF-8\");\n      Matcher matcher = pException.matcher(response);\n      if(matcher.find()) {\n        fail(\"Failed to complete restore action with exception \" + matcher.group(1));\n      }\n      if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n        return true;\n      } else if (response.contains(\"<str name=\\\"status\\\">failed</str>\")){\n        fail(\"Restore Failed\");\n      }\n      stream.close();\n    } finally {\n      IOUtils.closeQuietly(stream);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a52341299179de5479672f7cf518bf4b173f34b3":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}