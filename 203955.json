{"path":"backwards/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), true, \n                                         IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (Iterator iterator = spans.iterator(); iterator.hasNext();) {\n       SpanFilterResult.PositionInfo info = (SpanFilterResult.PositionInfo) iterator.next();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}