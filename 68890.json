{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/OrdinalsCache.CachedOrds#CachedOrds(BinaryDocValues,int,CategoryListParams).mjava","commits":[{"id":"136bf9d69957766255ca222d35e715158cd0aa9c","date":1360686043,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/OrdinalsCache.CachedOrds#CachedOrds(BinaryDocValues,int,CategoryListParams).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Creates a new {@link CachedOrds} from the {@link BinaryDocValues}.\n     * Assumes that the {@link BinaryDocValues} is not {@code null}.\n     */\n    public CachedOrds(BinaryDocValues dv, int maxDoc, CategoryListParams clp) {\n      final BytesRef buf = new BytesRef();\n\n      offsets = new int[maxDoc + 1];\n      int[] ords = new int[maxDoc]; // let's assume one ordinal per-document as an initial size\n\n      // this aggregator is limited to Integer.MAX_VALUE total ordinals.\n      int totOrds = 0;\n      final IntDecoder decoder = clp.createEncoder().createMatchingDecoder();\n      final IntsRef values = new IntsRef(32);\n      for (int docID = 0; docID < maxDoc; docID++) {\n        offsets[docID] = totOrds;\n        dv.get(docID, buf);\n        if (buf.length > 0) {\n          // this document has facets\n          decoder.decode(buf, values);\n          if (totOrds + values.length >= ords.length) {\n            ords = ArrayUtil.grow(ords, totOrds + values.length + 1);\n          }\n          for (int i = 0; i < values.length; i++) {\n            ords[totOrds++] = values.ints[i];\n          }\n        }\n      }\n      offsets[maxDoc] = totOrds;\n      \n      // if ords array is bigger by more than 10% of what we really need, shrink it\n      if ((double) totOrds / ords.length < 0.9) { \n        this.ordinals = new int[totOrds];\n        System.arraycopy(ords, 0, this.ordinals, 0, totOrds);\n      } else {\n        this.ordinals = ords;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/OrdinalsCache.CachedOrds#CachedOrds(BinaryDocValues,int,CategoryListParams).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Creates a new {@link CachedOrds} from the {@link BinaryDocValues}.\n     * Assumes that the {@link BinaryDocValues} is not {@code null}.\n     */\n    public CachedOrds(BinaryDocValues dv, int maxDoc, CategoryListParams clp) {\n      final BytesRef buf = new BytesRef();\n\n      offsets = new int[maxDoc + 1];\n      int[] ords = new int[maxDoc]; // let's assume one ordinal per-document as an initial size\n\n      // this aggregator is limited to Integer.MAX_VALUE total ordinals.\n      int totOrds = 0;\n      final IntDecoder decoder = clp.createEncoder().createMatchingDecoder();\n      final IntsRef values = new IntsRef(32);\n      for (int docID = 0; docID < maxDoc; docID++) {\n        offsets[docID] = totOrds;\n        dv.get(docID, buf);\n        if (buf.length > 0) {\n          // this document has facets\n          decoder.decode(buf, values);\n          if (totOrds + values.length >= ords.length) {\n            ords = ArrayUtil.grow(ords, totOrds + values.length + 1);\n          }\n          for (int i = 0; i < values.length; i++) {\n            ords[totOrds++] = values.ints[i];\n          }\n        }\n      }\n      offsets[maxDoc] = totOrds;\n      \n      // if ords array is bigger by more than 10% of what we really need, shrink it\n      if ((double) totOrds / ords.length < 0.9) { \n        this.ordinals = new int[totOrds];\n        System.arraycopy(ords, 0, this.ordinals, 0, totOrds);\n      } else {\n        this.ordinals = ords;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/OrdinalsCache.CachedOrds#CachedOrds(BinaryDocValues,int,CategoryListParams).mjava","sourceNew":null,"sourceOld":"    /**\n     * Creates a new {@link CachedOrds} from the {@link BinaryDocValues}.\n     * Assumes that the {@link BinaryDocValues} is not {@code null}.\n     */\n    public CachedOrds(BinaryDocValues dv, int maxDoc, CategoryListParams clp) {\n      final BytesRef buf = new BytesRef();\n\n      offsets = new int[maxDoc + 1];\n      int[] ords = new int[maxDoc]; // let's assume one ordinal per-document as an initial size\n\n      // this aggregator is limited to Integer.MAX_VALUE total ordinals.\n      int totOrds = 0;\n      final IntDecoder decoder = clp.createEncoder().createMatchingDecoder();\n      final IntsRef values = new IntsRef(32);\n      for (int docID = 0; docID < maxDoc; docID++) {\n        offsets[docID] = totOrds;\n        dv.get(docID, buf);\n        if (buf.length > 0) {\n          // this document has facets\n          decoder.decode(buf, values);\n          if (totOrds + values.length >= ords.length) {\n            ords = ArrayUtil.grow(ords, totOrds + values.length + 1);\n          }\n          for (int i = 0; i < values.length; i++) {\n            ords[totOrds++] = values.ints[i];\n          }\n        }\n      }\n      offsets[maxDoc] = totOrds;\n      \n      // if ords array is bigger by more than 10% of what we really need, shrink it\n      if ((double) totOrds / ords.length < 0.9) { \n        this.ordinals = new int[totOrds];\n        System.arraycopy(ords, 0, this.ordinals, 0, totOrds);\n      } else {\n        this.ordinals = ords;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/OrdinalsCache.CachedOrds#CachedOrds(BinaryDocValues,int,CategoryListParams).mjava","sourceNew":null,"sourceOld":"    /**\n     * Creates a new {@link CachedOrds} from the {@link BinaryDocValues}.\n     * Assumes that the {@link BinaryDocValues} is not {@code null}.\n     */\n    public CachedOrds(BinaryDocValues dv, int maxDoc, CategoryListParams clp) {\n      final BytesRef buf = new BytesRef();\n\n      offsets = new int[maxDoc + 1];\n      int[] ords = new int[maxDoc]; // let's assume one ordinal per-document as an initial size\n\n      // this aggregator is limited to Integer.MAX_VALUE total ordinals.\n      int totOrds = 0;\n      final IntDecoder decoder = clp.createEncoder().createMatchingDecoder();\n      final IntsRef values = new IntsRef(32);\n      for (int docID = 0; docID < maxDoc; docID++) {\n        offsets[docID] = totOrds;\n        dv.get(docID, buf);\n        if (buf.length > 0) {\n          // this document has facets\n          decoder.decode(buf, values);\n          if (totOrds + values.length >= ords.length) {\n            ords = ArrayUtil.grow(ords, totOrds + values.length + 1);\n          }\n          for (int i = 0; i < values.length; i++) {\n            ords[totOrds++] = values.ints[i];\n          }\n        }\n      }\n      offsets[maxDoc] = totOrds;\n      \n      // if ords array is bigger by more than 10% of what we really need, shrink it\n      if ((double) totOrds / ords.length < 0.9) { \n        this.ordinals = new int[totOrds];\n        System.arraycopy(ords, 0, this.ordinals, 0, totOrds);\n      } else {\n        this.ordinals = ords;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["136bf9d69957766255ca222d35e715158cd0aa9c"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","136bf9d69957766255ca222d35e715158cd0aa9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["136bf9d69957766255ca222d35e715158cd0aa9c","d33e19a97046248623a7591aeaa6547233fd15e2"],"136bf9d69957766255ca222d35e715158cd0aa9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","136bf9d69957766255ca222d35e715158cd0aa9c"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"136bf9d69957766255ca222d35e715158cd0aa9c":["d33e19a97046248623a7591aeaa6547233fd15e2","6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}