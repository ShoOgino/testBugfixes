{"path":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","commits":[{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      for(int iter=0;iter<100*_TestUtil.getRandomMultiplier();iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      for(int iter=0;iter<100*_TestUtil.getRandomMultiplier();iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = 100 * RANDOM_MULTIPLIER;\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      for(int iter=0;iter<100*_TestUtil.getRandomMultiplier();iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = 100 * RANDOM_MULTIPLIER;\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = 100 * RANDOM_MULTIPLIER;\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = 100 * RANDOM_MULTIPLIER;\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = 100 * RANDOM_MULTIPLIER;\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || !fieldTerms.get(spot).field().equals(field)) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (!term.field().equals(field)) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || !fieldTerms.get(spot).field().equals(field)) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seekCeil(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (!term.field().equals(field)) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || !fieldTerms.get(spot).field().equals(field)) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (!term.field().equals(field)) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || !fieldTerms.get(spot).field().equals(field)) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seekCeil(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (!term.field().equals(field)) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || !fieldTerms.get(spot).field().equals(field)) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seekCeil(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (!term.field().equals(field)) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || fieldTerms.get(spot).field() != field) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seek(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seek(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (term.field() != field) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekDoesNotExist(Random,int,List[Term],Term[],IndexReader).mjava","sourceNew":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || !fieldTerms.get(spot).field().equals(field)) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seekCeil(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (!term.field().equals(field)) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestSeekDoesNotExist(Random r, int numField, List<Term> fieldTerms, Term[] fieldTermsArray, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: top random seeks\");\n    }\n\n    {\n      int num = atLeast(100);\n      for (int iter = 0; iter < num; iter++) {\n      \n        // seek to random spot\n        String field = (\"f\" + r.nextInt(numField)).intern();\n        Term tx = new Term(field, getRandomString(r));\n\n        int spot = Arrays.binarySearch(fieldTermsArray, tx);\n\n        if (spot < 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: non-exist seek to \" + field + \":\" + UnicodeUtil.toHexString(tx.text()));\n          }\n\n          // term does not exist:\n          TermsEnum te = tes.get(field);\n          if (te == null) {\n            te = MultiFields.getTerms(reader, field).iterator();\n            tes.put(field, te);\n          }\n\n          if (VERBOSE) {\n            System.out.println(\"  got enum\");\n          }\n\n          spot = -spot - 1;\n\n          if (spot == fieldTerms.size() || !fieldTerms.get(spot).field().equals(field)) {\n            assertEquals(TermsEnum.SeekStatus.END, te.seekCeil(tx.bytes()));\n          } else {\n            assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(tx.bytes()));\n\n            if (VERBOSE) {\n              System.out.println(\"  got term=\" + UnicodeUtil.toHexString(te.term().utf8ToString()));\n              System.out.println(\"  exp term=\" + UnicodeUtil.toHexString(fieldTerms.get(spot).text()));\n            }\n\n            assertEquals(fieldTerms.get(spot).bytes(),\n                         te.term());\n\n            // now .next() this many times:\n            int ct = _TestUtil.nextInt(r, 5, 100);\n            for(int i=0;i<ct;i++) {\n              if (VERBOSE) {\n                System.out.println(\"TEST: now next()\");\n              }\n              if (1+spot+i >= fieldTerms.size()) {\n                break;\n              }\n              Term term = fieldTerms.get(1+spot+i);\n              if (!term.field().equals(field)) {\n                assertNull(te.next());\n                break;\n              } else {\n                BytesRef t = te.next();\n\n                if (VERBOSE) {\n                  System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n                  System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n                }\n\n                assertEquals(term.bytes(), t);\n              }\n            }\n\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","fd9cc9d77712aba3662f24632df7539ab75e3667"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f83af14a2a8131b14d7aee6274c740334e0363d3","fd9cc9d77712aba3662f24632df7539ab75e3667"],"7b91922b55d15444d554721b352861d028eb8278":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","f83af14a2a8131b14d7aee6274c740334e0363d3"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","3242a09f703274d3b9283f2064a1a33064b53a1b","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","d083e83f225b11e5fdd900e83d26ddb385b6955c","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}