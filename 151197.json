{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query,int).mjava","commits":[{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query,boolean).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query, int postingsFlags) throws IOException {\n    final Weight w = super.createNormalizedWeight(query, postingsFlags);\n    return new AssertingWeight(random, w) {\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    final Weight w = super.createNormalizedWeight(query, needsScores);\n    return new AssertingWeight(random, w) {\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query,int).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    final Weight w = super.createNormalizedWeight(query, needsScores);\n    return new AssertingWeight(random, w) {\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query, int postingsFlags) throws IOException {\n    final Weight w = super.createNormalizedWeight(query, postingsFlags);\n    return new AssertingWeight(random, w) {\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"954e59be3da8dc1b046646ad7af4b466852009d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a47d642ab24da1a811adce4bda9cc52c520ca13"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954e59be3da8dc1b046646ad7af4b466852009d3"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}