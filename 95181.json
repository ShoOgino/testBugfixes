{"path":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toLightAutomaton(Term).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toLightAutomaton(Term).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static LightAutomaton toLightAutomaton(Term wildcardquery) {\n    List<LightAutomaton> automata = new ArrayList<>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyStringLight());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyCharLight());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeCharLight(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeCharLight(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenateLight(automata);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/WildcardQuery#toLightAutomaton(Term).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convert Lucene wildcard syntax into an automaton.\n   * @lucene.internal\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static LightAutomaton toLightAutomaton(Term wildcardquery) {\n    List<LightAutomaton> automata = new ArrayList<>();\n    \n    String wildcardText = wildcardquery.text();\n    \n    for (int i = 0; i < wildcardText.length();) {\n      final int c = wildcardText.codePointAt(i);\n      int length = Character.charCount(c);\n      switch(c) {\n        case WILDCARD_STRING: \n          automata.add(BasicAutomata.makeAnyStringLight());\n          break;\n        case WILDCARD_CHAR:\n          automata.add(BasicAutomata.makeAnyCharLight());\n          break;\n        case WILDCARD_ESCAPE:\n          // add the next codepoint instead, if it exists\n          if (i + length < wildcardText.length()) {\n            final int nextChar = wildcardText.codePointAt(i + length);\n            length += Character.charCount(nextChar);\n            automata.add(BasicAutomata.makeCharLight(nextChar));\n            break;\n          } // else fallthru, lenient parsing with a trailing \\\n        default:\n          automata.add(BasicAutomata.makeCharLight(c));\n      }\n      i += length;\n    }\n    \n    return BasicOperations.concatenateLight(automata);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a2de8b489026711e8edde133418a7cacfd2ce4d3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a2de8b489026711e8edde133418a7cacfd2ce4d3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}