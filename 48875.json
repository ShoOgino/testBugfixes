{"path":"lucene/backwards/src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher,boolean).mjava","sourceNew":"  private static void check(Query q1, Searcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        if (s instanceof IndexSearcher) {\n          IndexSearcher is = (IndexSearcher)s;\n          checkFirstSkipTo(q1,is);\n          checkSkipTo(q1,is);\n          if (wrap) {\n            check(q1, wrapUnderlyingReader(is, -1), false);\n            check(q1, wrapUnderlyingReader(is,  0), false);\n            check(q1, wrapUnderlyingReader(is, +1), false);\n          }\n        }\n        if (wrap) {\n          check(q1, wrapSearcher(s, -1), false);\n          check(q1, wrapSearcher(s,  0), false);\n          check(q1, wrapSearcher(s, +1), false);\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  private static void check(Query q1, Searcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        if (s instanceof IndexSearcher) {\n          IndexSearcher is = (IndexSearcher)s;\n          checkFirstSkipTo(q1,is);\n          checkSkipTo(q1,is);\n          if (wrap) {\n            check(q1, wrapUnderlyingReader(is, -1), false);\n            check(q1, wrapUnderlyingReader(is,  0), false);\n            check(q1, wrapUnderlyingReader(is, +1), false);\n          }\n        }\n        if (wrap) {\n          check(q1, wrapSearcher(s, -1), false);\n          check(q1, wrapSearcher(s,  0), false);\n          check(q1, wrapSearcher(s, +1), false);\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher,boolean).mjava","sourceNew":null,"sourceOld":"  private static void check(Query q1, Searcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        if (s instanceof IndexSearcher) {\n          IndexSearcher is = (IndexSearcher)s;\n          checkFirstSkipTo(q1,is);\n          checkSkipTo(q1,is);\n          if (wrap) {\n            check(q1, wrapUnderlyingReader(is, -1), false);\n            check(q1, wrapUnderlyingReader(is,  0), false);\n            check(q1, wrapUnderlyingReader(is, +1), false);\n          }\n        }\n        if (wrap) {\n          check(q1, wrapSearcher(s, -1), false);\n          check(q1, wrapSearcher(s,  0), false);\n          check(q1, wrapSearcher(s, +1), false);\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}