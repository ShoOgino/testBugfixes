{"path":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteEntry().mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteEntry().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.deleteEntry(String)'\n     */\n    public void testDeleteEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            if (i % 2 == 0 || i < 10) {\n                ServerBaseEntry entry = new ServerBaseEntry();\n                entry.setId(\"\" + i);\n                entry.setFeedId(feedId);\n                this.modifier.deleteEntry(new StorageEntryWrapper(entry,StorageOperation.DELETE));\n            }\n            ReferenceCounter<StorageQuery> query = this.controller\n                    .getStorageQuery();\n            if (i % 2 == 0 || i < 10) {\n                assertNull(query.get().singleEntryQuery(\"\" + i, feedId,\n                        this.configurator));\n            } else\n                assertEquals(\"\" + i, query.get().singleEntryQuery(\"\" + i,\n                        feedId, this.configurator).getId());\n            query.decrementRef();\n        }\n\n        this.controller.forceWrite();\n        IndexSearcher searcher = new IndexSearcher(this.dir);\n\n        for (int i = 1; i < this.count; i++) {\n            Query luceneQuery = new TermQuery(new Term(\n                    StorageEntryWrapper.FIELD_ENTRY_ID, \"\" + i));\n            Hits hits = searcher.search(luceneQuery);\n            if (i % 2 == 0 || i < 10) {\n\n                assertEquals(0, hits.length());\n            } else\n                assertEquals(1, hits.length());\n        }\n        searcher.close();\n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.deleteEntry(String)'\n     */\n    public void testDeleteEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            if (i % 2 == 0 || i < 10) {\n                ServerBaseEntry entry = new ServerBaseEntry();\n                entry.setId(\"\" + i);\n                entry.setFeedId(feedId);\n                this.modifier.deleteEntry(new StorageEntryWrapper(entry,StorageOperation.DELETE));\n            }\n            ReferenceCounter<StorageQuery> query = this.controller\n                    .getStorageQuery();\n            if (i % 2 == 0 || i < 10) {\n                assertNull(query.get().singleEntryQuery(\"\" + i, feedId,\n                        this.configurator));\n            } else\n                assertEquals(\"\" + i, query.get().singleEntryQuery(\"\" + i,\n                        feedId, this.configurator).getId());\n            query.decrementRef();\n        }\n\n        this.controller.forceWrite();\n        IndexSearcher searcher = new IndexSearcher(this.dir);\n\n        for (int i = 1; i < this.count; i++) {\n            Query luceneQuery = new TermQuery(new Term(\n                    StorageEntryWrapper.FIELD_ENTRY_ID, \"\" + i));\n            Hits hits = searcher.search(luceneQuery);\n            if (i % 2 == 0 || i < 10) {\n\n                assertEquals(0, hits.length());\n            } else\n                assertEquals(1, hits.length());\n        }\n        searcher.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testDeleteEntry().mjava","sourceNew":null,"sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.storage.lucenestorage.StorageModifier.deleteEntry(String)'\n     */\n    public void testDeleteEntry() throws IOException, InterruptedException,\n            ParseException, StorageException {\n        testInsertEntry();\n        for (int i = 1; i < this.count; i++) {\n            if (i % 2 == 0 || i < 10) {\n                ServerBaseEntry entry = new ServerBaseEntry();\n                entry.setId(\"\" + i);\n                entry.setFeedId(feedId);\n                this.modifier.deleteEntry(new StorageEntryWrapper(entry,StorageOperation.DELETE));\n            }\n            ReferenceCounter<StorageQuery> query = this.controller\n                    .getStorageQuery();\n            if (i % 2 == 0 || i < 10) {\n                assertNull(query.get().singleEntryQuery(\"\" + i, feedId,\n                        this.configurator));\n            } else\n                assertEquals(\"\" + i, query.get().singleEntryQuery(\"\" + i,\n                        feedId, this.configurator).getId());\n            query.decrementRef();\n        }\n\n        this.controller.forceWrite();\n        IndexSearcher searcher = new IndexSearcher(this.dir);\n\n        for (int i = 1; i < this.count; i++) {\n            Query luceneQuery = new TermQuery(new Term(\n                    StorageEntryWrapper.FIELD_ENTRY_ID, \"\" + i));\n            Hits hits = searcher.search(luceneQuery);\n            if (i % 2 == 0 || i < 10) {\n\n                assertEquals(0, hits.length());\n            } else\n                assertEquals(1, hits.length());\n        }\n        searcher.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}