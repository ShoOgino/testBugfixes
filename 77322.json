{"path":"lucene/sandbox/src/java/org/apache/lucene/document/RangeFieldQuery.RangeFieldComparator#RangeFieldComparator().mjava","commits":[{"id":"9dec1cfab325d955644ed528eb211dd09d093086","date":1487270763,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/RangeFieldQuery.RangeFieldComparator#RangeFieldComparator().mjava","pathOld":"/dev/null","sourceNew":"    /** constructs the comparator based on the query type */\n    RangeFieldComparator() {\n      switch (queryType) {\n        case INTERSECTS:\n          predicate = this::intersects;\n          break;\n        case WITHIN:\n          predicate = this::contains;\n          break;\n        case CONTAINS:\n          predicate = this::within;\n          break;\n        case CROSSES:\n          // crosses first checks intersection (disjoint automatic fails),\n          // then ensures the query doesn't wholly contain the leaf:\n          predicate = (byte[] leaf) -> this.intersects(leaf)\n              && this.contains(leaf) == false;\n          break;\n        default:\n          throw new IllegalArgumentException(\"invalid queryType [\" + queryType + \"] found.\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.RangeFieldComparator#RangeFieldComparator().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/RangeFieldQuery.RangeFieldComparator#RangeFieldComparator().mjava","sourceNew":"    /** constructs the comparator based on the query type */\n    RangeFieldComparator() {\n      switch (queryType) {\n        case INTERSECTS:\n          predicate = this::intersects;\n          break;\n        case WITHIN:\n          predicate = this::contains;\n          break;\n        case CONTAINS:\n          predicate = this::within;\n          break;\n        case CROSSES:\n          // crosses first checks intersection (disjoint automatic fails),\n          // then ensures the query doesn't wholly contain the leaf:\n          predicate = (byte[] leaf) -> this.intersects(leaf)\n              && this.contains(leaf) == false;\n          break;\n        default:\n          throw new IllegalArgumentException(\"invalid queryType [\" + queryType + \"] found.\");\n      }\n    }\n\n","sourceOld":"    /** constructs the comparator based on the query type */\n    RangeFieldComparator() {\n      switch (queryType) {\n        case INTERSECTS:\n          predicate = this::intersects;\n          break;\n        case WITHIN:\n          predicate = this::contains;\n          break;\n        case CONTAINS:\n          predicate = this::within;\n          break;\n        case CROSSES:\n          // crosses first checks intersection (disjoint automatic fails),\n          // then ensures the query doesn't wholly contain the leaf:\n          predicate = (byte[] leaf) -> this.intersects(leaf)\n              && this.contains(leaf) == false;\n          break;\n        default:\n          throw new IllegalArgumentException(\"invalid queryType [\" + queryType + \"] found.\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9dec1cfab325d955644ed528eb211dd09d093086":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["9dec1cfab325d955644ed528eb211dd09d093086"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"9dec1cfab325d955644ed528eb211dd09d093086":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dec1cfab325d955644ed528eb211dd09d093086"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}