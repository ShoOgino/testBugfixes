{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoPathRect().mjava","commits":[{"id":"173639a6794ea2c67915700c0b4b5ecb4b69a0fb","date":1429717236,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoPathRect().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5079b556f19f6e82e97b91cc3e617bec55c4d9c","date":1430717212,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoPathRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoPathRect().mjava","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            int i = 0;\n            while (i < pointCount) {\n              final Point nextPoint = randomPoint();\n              if (ctx.getDistCalc().distance(nextPoint,centerPoint) > maxDistance)\n                continue;\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n              i++;\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so only 10% of the usual figure\n        return laps/10000;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPathRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoPathRect().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            int i = 0;\n            while (i < pointCount) {\n              final Point nextPoint = randomPoint();\n              if (ctx.getDistCalc().distance(nextPoint,centerPoint) > maxDistance)\n                continue;\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n              i++;\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so only 10% of the usual figure\n        return laps/10000;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoPathRect().mjava","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            int i = 0;\n            while (i < pointCount) {\n              final Point nextPoint = randomPoint();\n              if (ctx.getDistCalc().distance(nextPoint,centerPoint) > maxDistance)\n                continue;\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n              i++;\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so only 10% of the usual figure\n        return laps/10000;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPathRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            int i = 0;\n            while (i < pointCount) {\n              final Point nextPoint = randomPoint();\n              if (ctx.getDistCalc().distance(nextPoint,centerPoint) > maxDistance)\n                continue;\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n              i++;\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so only 10% of the usual figure\n        return laps/10000;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":5,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoPathRect().mjava","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            int i = 0;\n            while (i < pointCount) {\n              final Point nextPoint = randomPoint();\n              if (ctx.getDistCalc().distance(nextPoint,centerPoint) > maxDistance)\n                continue;\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n              i++;\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so only 10% of the usual figure\n        return laps/10000;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPathRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            int i = 0;\n            while (i < pointCount) {\n              final Point nextPoint = randomPoint();\n              if (ctx.getDistCalc().distance(nextPoint,centerPoint) > maxDistance)\n                continue;\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n              i++;\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so only 10% of the usual figure\n        return laps/10000;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5079b556f19f6e82e97b91cc3e617bec55c4d9c":["173639a6794ea2c67915700c0b4b5ecb4b69a0fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5079b556f19f6e82e97b91cc3e617bec55c4d9c"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"173639a6794ea2c67915700c0b4b5ecb4b69a0fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fec06d6753751ae302c7d35866763e6cb414112d"]},"commit2Childs":{"a5079b556f19f6e82e97b91cc3e617bec55c4d9c":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","173639a6794ea2c67915700c0b4b5ecb4b69a0fb"],"fec06d6753751ae302c7d35866763e6cb414112d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"173639a6794ea2c67915700c0b4b5ecb4b69a0fb":["a5079b556f19f6e82e97b91cc3e617bec55c4d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}