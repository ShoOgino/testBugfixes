{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readBang(boolean).mjava","commits":[{"id":"9b31138e7b06f84b96de212b2102103cb629ee68","date":1272962032,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readBang(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readBang(boolean).mjava","sourceNew":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readBang(boolean).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readBang(boolean).mjava","sourceNew":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b31138e7b06f84b96de212b2102103cb629ee68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9b31138e7b06f84b96de212b2102103cb629ee68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"9b31138e7b06f84b96de212b2102103cb629ee68":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b31138e7b06f84b96de212b2102103cb629ee68"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}