{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","commits":[{"id":"5687aaac49dac0091f9d42a734eb5ec955377aad","date":1472269082,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERYHANDLER\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERYHANDLER\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERYHANDLER\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERYHANDLER\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERYHANDLER\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERYHANDLER\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERY\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERY\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERYHANDLER\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERYHANDLER\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"143852b07469259803b6e863304a561039adf37a","date":1484234378,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERY\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERY\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERY\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERY\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERYHANDLER\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERYHANDLER\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38895f8af1d6ce9ee981a08078dac150f46545bc","date":1484336153,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERY\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"QUERY\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        cluster.waitForActiveCollection(\"foo\", 1, NODE_COUNT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"foo\", client.getZkStateReader(), true, true, TIMEOUT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","bugFix":["5687aaac49dac0091f9d42a734eb5ec955377aad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testNonRetryableRequests().mjava","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        cluster.waitForActiveCollection(\"foo\", 1, NODE_COUNT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsBefore += numRequests;\n            if (log.isInfoEnabled()) {\n              log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n            }\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsAfter += numRequests;\n            if (log.isInfoEnabled()) {\n              log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n            }\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        cluster.waitForActiveCollection(\"foo\", 1, NODE_COUNT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["143852b07469259803b6e863304a561039adf37a"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"38895f8af1d6ce9ee981a08078dac150f46545bc":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","143852b07469259803b6e863304a561039adf37a"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["816521ebaad5add9cb96bb88c577394e2938c40b"],"143852b07469259803b6e863304a561039adf37a":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"816521ebaad5add9cb96bb88c577394e2938c40b":["143852b07469259803b6e863304a561039adf37a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5687aaac49dac0091f9d42a734eb5ec955377aad"],"5687aaac49dac0091f9d42a734eb5ec955377aad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38895f8af1d6ce9ee981a08078dac150f46545bc":[],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["143852b07469259803b6e863304a561039adf37a","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"143852b07469259803b6e863304a561039adf37a":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","38895f8af1d6ce9ee981a08078dac150f46545bc","816521ebaad5add9cb96bb88c577394e2938c40b"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["38895f8af1d6ce9ee981a08078dac150f46545bc"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5687aaac49dac0091f9d42a734eb5ec955377aad"],"5687aaac49dac0091f9d42a734eb5ec955377aad":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","38895f8af1d6ce9ee981a08078dac150f46545bc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}