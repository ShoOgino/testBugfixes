{"path":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#docFreq(String,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#docFreq(String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AtomicReader#docFreq(String,BytesRef).mjava","sourceNew":"  @Override\n  public final int docFreq(String field, BytesRef term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term, true)) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public final int docFreq(String field, BytesRef term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term, true)) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#docFreq(String,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#docFreq(String,BytesRef).mjava","sourceNew":"  @Override\n  public final int docFreq(String field, BytesRef term) throws IOException {\n    final InvertedFields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term, true)) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public final int docFreq(String field, BytesRef term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term, true)) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#docFreq(String,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#docFreq(String,BytesRef).mjava","sourceNew":"  @Override\n  public final int docFreq(String field, BytesRef term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term, true)) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public final int docFreq(String field, BytesRef term) throws IOException {\n    final InvertedFields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term, true)) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#docFreq(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#docFreq(String,BytesRef).mjava","sourceNew":"  @Override\n  public final int docFreq(Term term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(term.field());\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term.bytes(), true)) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public final int docFreq(String field, BytesRef term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term, true)) {\n      return termsEnum.docFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0e3c1c21aac8ecf75706605133012833585c7":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0e3c1c21aac8ecf75706605133012833585c7"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}