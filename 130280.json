{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#intersect(DocRouter.Range,DocRouter.Range).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#intersect(DocRouter.Range,DocRouter.Range).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#intersect(DocRouter.Range,DocRouter.Range).mjava","sourceNew":"  DocRouter.Range intersect(DocRouter.Range a, DocRouter.Range b) {\n    if (a == null || b == null || !a.overlaps(b)) {\n      return null;\n    } else if (a.isSubsetOf(b))\n      return a;\n    else if (b.isSubsetOf(a))\n      return b;\n    else if (b.includes(a.max)) {\n      return new DocRouter.Range(b.min, a.max);\n    } else  {\n      return new DocRouter.Range(a.min, b.max);\n    }\n  }\n\n","sourceOld":"  DocRouter.Range intersect(DocRouter.Range a, DocRouter.Range b) {\n    if (a == null || b == null || !a.overlaps(b)) {\n      return null;\n    } else if (a.isSubsetOf(b))\n      return a;\n    else if (b.isSubsetOf(a))\n      return b;\n    else if (b.includes(a.max)) {\n      return new DocRouter.Range(b.min, a.max);\n    } else  {\n      return new DocRouter.Range(a.min, b.max);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#intersect(DocRouter.Range,DocRouter.Range).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#intersect(DocRouter.Range,DocRouter.Range).mjava","sourceNew":"  DocRouter.Range intersect(DocRouter.Range a, DocRouter.Range b) {\n    if (a == null || b == null || !a.overlaps(b)) {\n      return null;\n    } else if (a.isSubsetOf(b))\n      return a;\n    else if (b.isSubsetOf(a))\n      return b;\n    else if (b.includes(a.max)) {\n      return new DocRouter.Range(b.min, a.max);\n    } else  {\n      return new DocRouter.Range(a.min, b.max);\n    }\n  }\n\n","sourceOld":"  DocRouter.Range intersect(DocRouter.Range a, DocRouter.Range b) {\n    if (a == null || b == null || !a.overlaps(b)) {\n      return null;\n    } else if (a.isSubsetOf(b))\n      return a;\n    else if (b.isSubsetOf(a))\n      return b;\n    else if (b.includes(a.max)) {\n      return new DocRouter.Range(b.min, a.max);\n    } else  {\n      return new DocRouter.Range(a.min, b.max);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}