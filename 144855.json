{"path":"src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","commits":[{"id":"861fa37cce2d9d3f8978bbb767e87a91d41ed4a8","date":1252682465,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"/dev/null","sourceNew":"  //function to keep track of facet counts for term number\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = termNum[docID];\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      String key = ft.indexedToReadable(terms[term]);\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5e62bfc99fea332bfdcdca0f73a821428d533279"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e62bfc99fea332bfdcdca0f73a821428d533279","date":1254838400,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = termNum[docID];\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      String key = ft.indexedToReadable(terms[term]);\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  //function to keep track of facet counts for term number\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = termNum[docID];\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      String key = ft.indexedToReadable(terms[term]);\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":["861fa37cce2d9d3f8978bbb767e87a91d41ed4a8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = termNum[docID];\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      String key = ft.indexedToReadable(terms[term]);\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = termNum[docID];\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      String key = ft.indexedToReadable(terms[term]);\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5e62bfc99fea332bfdcdca0f73a821428d533279":["861fa37cce2d9d3f8978bbb767e87a91d41ed4a8"],"ad94625fb8d088209f46650c8097196fec67f00c":["5e62bfc99fea332bfdcdca0f73a821428d533279"],"861fa37cce2d9d3f8978bbb767e87a91d41ed4a8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["861fa37cce2d9d3f8978bbb767e87a91d41ed4a8"],"5e62bfc99fea332bfdcdca0f73a821428d533279":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"861fa37cce2d9d3f8978bbb767e87a91d41ed4a8":["5e62bfc99fea332bfdcdca0f73a821428d533279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}