{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","commits":[{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingDocsAndPositionsEnum(SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n      }\n      final IndexOutput out = new RAMOutputStream(file);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      new DocOffsetSorterTemplate(docs, offsets).timSort(0, upto - 1);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676","date":1398736164,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingLeafReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsAndPositionsEnum#SortingDocsAndPositionsEnum(int,SortingDocsAndPositionsEnum,DocsAndPositionsEnum,Sorter.DocMap,boolean).mjava","sourceNew":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","sourceOld":"    SortingDocsAndPositionsEnum(int maxDoc, SortingDocsAndPositionsEnum reuse, final DocsAndPositionsEnum in, Sorter.DocMap docMap, boolean storeOffsets) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.storeOffsets = storeOffsets;\n      if (reuse != null) {\n        docs = reuse.docs;\n        offsets = reuse.offsets;\n        payload = reuse.payload;\n        file = reuse.file;\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocOffsetSorter(maxDoc);\n        }\n      } else {\n        docs = new int[32];\n        offsets = new long[32];\n        payload = new BytesRef(32);\n        file = new RAMFile();\n        sorter = new DocOffsetSorter(maxDoc);\n      }\n      final IndexOutput out = new RAMOutputStream(file, false);\n      int doc;\n      int i = 0;\n      while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        if (i == docs.length) {\n          final int newLength = ArrayUtil.oversize(i + 1, 4);\n          docs = Arrays.copyOf(docs, newLength);\n          offsets = Arrays.copyOf(offsets, newLength);\n        }\n        docs[i] = docMap.oldToNew(doc);\n        offsets[i] = out.getFilePointer();\n        addPositions(in, out);\n        i++;\n      }\n      upto = i;\n      sorter.reset(docs, offsets);\n      sorter.sort(0, upto);\n      out.close();\n      this.postingInput = new RAMInputStream(\"\", file);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f","3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f","3394716f52b34ab259ad5247e7595d9f9db6e935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676"],"3f8e9abba2d7f518e6f4f2eac3c8c96b2a312676":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}