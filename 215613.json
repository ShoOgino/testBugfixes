{"path":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","commits":[{"id":"143d45d6fe43d56d1f541059577c929fc0ad27a1","date":1323026648,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriter#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    if (!state.fieldInfos.hasNorms()) {\n      return;\n    }\n\n    NormsWriter normsOut = null;\n    boolean success = false;\n    try {\n      normsOut = normsFormat.normsWriter(state);\n\n      for (FieldInfo fi : state.fieldInfos) {\n        final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n        int upto = 0;\n        if (!fi.omitNorms && toWrite != null && toWrite.upto > 0) {\n          normsOut.startField(fi);\n          int docID = 0;\n          for (; docID < state.numDocs; docID++) {\n            if (upto < toWrite.upto && toWrite.docIDs[upto] == docID) {\n              normsOut.writeNorm(toWrite.norms[upto]);\n              upto++;\n            } else {\n              normsOut.writeNorm((byte) 0);\n            }\n          }\n\n          // we should have consumed every norm\n          assert upto == toWrite.upto;\n\n          toWrite.reset();\n        } else if (fi.isIndexed && !fi.omitNorms) {\n          // Fill entire field with default norm:\n          normsOut.startField(fi);\n          for(;upto<state.numDocs;upto++)\n            normsOut.writeNorm((byte) 0);\n        }\n      }\n      normsOut.finish(state.numDocs);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsOut);\n      } else {\n        IOUtils.closeWhileHandlingException(normsOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    if (!state.fieldInfos.hasNorms()) {\n      return;\n    }\n\n    final String normsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.NORMS_EXTENSION);\n    IndexOutput normsOut = state.directory.createOutput(normsFileName, state.context);\n    boolean success = false;\n    try {\n      normsOut.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n\n      int normCount = 0;\n\n      for (FieldInfo fi : state.fieldInfos) {\n        final NormsWriterPerField toWrite = (NormsWriterPerField) fieldsToFlush.get(fi);\n        int upto = 0;\n        if (toWrite != null && toWrite.upto > 0) {\n          normCount++;\n\n          int docID = 0;\n          for (; docID < state.numDocs; docID++) {\n            if (upto < toWrite.upto && toWrite.docIDs[upto] == docID) {\n              normsOut.writeByte(toWrite.norms[upto]);\n              upto++;\n            } else {\n              normsOut.writeByte((byte) 0);\n            }\n          }\n\n          // we should have consumed every norm\n          assert upto == toWrite.upto;\n\n          toWrite.reset();\n        } else if (fi.isIndexed && !fi.omitNorms) {\n          normCount++;\n          // Fill entire field with default norm:\n          for(;upto<state.numDocs;upto++)\n            normsOut.writeByte((byte) 0);\n        }\n\n        assert 4+normCount*state.numDocs == normsOut.getFilePointer() : \".nrm file size mismatch: expected=\" + (4+normCount*state.numDocs) + \" actual=\" + normsOut.getFilePointer();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsOut);\n      } else {\n        IOUtils.closeWhileHandlingException(normsOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11f75174865a8734695cd60a4093339a4e63fcbb","date":1323039567,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    if (!state.fieldInfos.hasNorms()) {\n      return;\n    }\n\n    NormsWriter normsOut = null;\n    boolean success = false;\n    try {\n      normsOut = normsFormat.normsWriter(state);\n\n      for (FieldInfo fi : state.fieldInfos) {\n        final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n        int upto = 0;\n        // we must check the final value of omitNorms for the fieldinfo, it could have \n        // changed for this field since the first time we added it.\n        if (!fi.omitNorms && toWrite != null && toWrite.upto > 0) {\n          normsOut.startField(fi);\n          int docID = 0;\n          for (; docID < state.numDocs; docID++) {\n            if (upto < toWrite.upto && toWrite.docIDs[upto] == docID) {\n              normsOut.writeNorm(toWrite.norms[upto]);\n              upto++;\n            } else {\n              normsOut.writeNorm((byte) 0);\n            }\n          }\n\n          // we should have consumed every norm\n          assert upto == toWrite.upto;\n\n          toWrite.reset();\n        } else if (fi.isIndexed && !fi.omitNorms) {\n          // Fill entire field with default norm:\n          normsOut.startField(fi);\n          for(;upto<state.numDocs;upto++)\n            normsOut.writeNorm((byte) 0);\n        }\n      }\n      normsOut.finish(state.numDocs);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsOut);\n      } else {\n        IOUtils.closeWhileHandlingException(normsOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    if (!state.fieldInfos.hasNorms()) {\n      return;\n    }\n\n    NormsWriter normsOut = null;\n    boolean success = false;\n    try {\n      normsOut = normsFormat.normsWriter(state);\n\n      for (FieldInfo fi : state.fieldInfos) {\n        final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n        int upto = 0;\n        if (!fi.omitNorms && toWrite != null && toWrite.upto > 0) {\n          normsOut.startField(fi);\n          int docID = 0;\n          for (; docID < state.numDocs; docID++) {\n            if (upto < toWrite.upto && toWrite.docIDs[upto] == docID) {\n              normsOut.writeNorm(toWrite.norms[upto]);\n              upto++;\n            } else {\n              normsOut.writeNorm((byte) 0);\n            }\n          }\n\n          // we should have consumed every norm\n          assert upto == toWrite.upto;\n\n          toWrite.reset();\n        } else if (fi.isIndexed && !fi.omitNorms) {\n          // Fill entire field with default norm:\n          normsOut.startField(fi);\n          for(;upto<state.numDocs;upto++)\n            normsOut.writeNorm((byte) 0);\n        }\n      }\n      normsOut.finish(state.numDocs);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsOut);\n      } else {\n        IOUtils.closeWhileHandlingException(normsOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriter#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    if (!state.fieldInfos.hasNorms()) {\n      return;\n    }\n\n    NormsWriter normsOut = null;\n    boolean success = false;\n    try {\n      normsOut = normsFormat.normsWriter(state);\n\n      for (FieldInfo fi : state.fieldInfos) {\n        final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n        int upto = 0;\n        // we must check the final value of omitNorms for the fieldinfo, it could have \n        // changed for this field since the first time we added it.\n        if (!fi.omitNorms && toWrite != null && toWrite.upto > 0) {\n          normsOut.startField(fi);\n          int docID = 0;\n          for (; docID < state.numDocs; docID++) {\n            if (upto < toWrite.upto && toWrite.docIDs[upto] == docID) {\n              normsOut.writeNorm(toWrite.norms[upto]);\n              upto++;\n            } else {\n              normsOut.writeNorm((byte) 0);\n            }\n          }\n\n          // we should have consumed every norm\n          assert upto == toWrite.upto;\n\n          toWrite.reset();\n        } else if (fi.isIndexed && !fi.omitNorms) {\n          // Fill entire field with default norm:\n          normsOut.startField(fi);\n          for(;upto<state.numDocs;upto++)\n            normsOut.writeNorm((byte) 0);\n        }\n      }\n      normsOut.finish(state.numDocs);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsOut);\n      } else {\n        IOUtils.closeWhileHandlingException(normsOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    if (!state.fieldInfos.hasNorms()) {\n      return;\n    }\n\n    final String normsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.NORMS_EXTENSION);\n    IndexOutput normsOut = state.directory.createOutput(normsFileName, state.context);\n    boolean success = false;\n    try {\n      normsOut.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n\n      int normCount = 0;\n\n      for (FieldInfo fi : state.fieldInfos) {\n        final NormsWriterPerField toWrite = (NormsWriterPerField) fieldsToFlush.get(fi);\n        int upto = 0;\n        // we must check the final value of omitNorms for the fieldinfo, it could have \n        // changed for this field since the first time we added it.\n        if (!fi.omitNorms && toWrite != null && toWrite.upto > 0) {\n          normCount++;\n\n          int docID = 0;\n          for (; docID < state.numDocs; docID++) {\n            if (upto < toWrite.upto && toWrite.docIDs[upto] == docID) {\n              normsOut.writeByte(toWrite.norms[upto]);\n              upto++;\n            } else {\n              normsOut.writeByte((byte) 0);\n            }\n          }\n\n          // we should have consumed every norm\n          assert upto == toWrite.upto;\n\n          toWrite.reset();\n        } else if (fi.isIndexed && !fi.omitNorms) {\n          normCount++;\n          // Fill entire field with default norm:\n          for(;upto<state.numDocs;upto++)\n            normsOut.writeByte((byte) 0);\n        }\n\n        assert 4+normCount*(long)state.numDocs == normsOut.getFilePointer() : \".nrm file size mismatch: expected=\" + (4+normCount*(long)state.numDocs) + \" actual=\" + normsOut.getFilePointer();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsOut);\n      } else {\n        IOUtils.closeWhileHandlingException(normsOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsWriter#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    if (!state.fieldInfos.hasNorms()) {\n      return;\n    }\n\n    NormsWriter normsOut = null;\n    boolean success = false;\n    try {\n      normsOut = normsFormat.normsWriter(state);\n\n      for (FieldInfo fi : state.fieldInfos) {\n        final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n        int upto = 0;\n        // we must check the final value of omitNorms for the fieldinfo, it could have \n        // changed for this field since the first time we added it.\n        if (!fi.omitNorms && toWrite != null && toWrite.upto > 0) {\n          normsOut.startField(fi);\n          int docID = 0;\n          for (; docID < state.numDocs; docID++) {\n            if (upto < toWrite.upto && toWrite.docIDs[upto] == docID) {\n              normsOut.writeNorm(toWrite.norms[upto]);\n              upto++;\n            } else {\n              normsOut.writeNorm((byte) 0);\n            }\n          }\n\n          // we should have consumed every norm\n          assert upto == toWrite.upto;\n\n          toWrite.reset();\n        } else if (fi.isIndexed && !fi.omitNorms) {\n          // Fill entire field with default norm:\n          normsOut.startField(fi);\n          for(;upto<state.numDocs;upto++)\n            normsOut.writeNorm((byte) 0);\n        }\n      }\n      normsOut.finish(state.numDocs);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsOut);\n      } else {\n        IOUtils.closeWhileHandlingException(normsOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    if (!state.fieldInfos.hasNorms()) {\n      return;\n    }\n\n    final String normsFileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.NORMS_EXTENSION);\n    IndexOutput normsOut = state.directory.createOutput(normsFileName, state.context);\n    boolean success = false;\n    try {\n      normsOut.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n\n      int normCount = 0;\n\n      for (FieldInfo fi : state.fieldInfos) {\n        final NormsWriterPerField toWrite = (NormsWriterPerField) fieldsToFlush.get(fi);\n        int upto = 0;\n        // we must check the final value of omitNorms for the fieldinfo, it could have \n        // changed for this field since the first time we added it.\n        if (!fi.omitNorms && toWrite != null && toWrite.upto > 0) {\n          normCount++;\n\n          int docID = 0;\n          for (; docID < state.numDocs; docID++) {\n            if (upto < toWrite.upto && toWrite.docIDs[upto] == docID) {\n              normsOut.writeByte(toWrite.norms[upto]);\n              upto++;\n            } else {\n              normsOut.writeByte((byte) 0);\n            }\n          }\n\n          // we should have consumed every norm\n          assert upto == toWrite.upto;\n\n          toWrite.reset();\n        } else if (fi.isIndexed && !fi.omitNorms) {\n          normCount++;\n          // Fill entire field with default norm:\n          for(;upto<state.numDocs;upto++)\n            normsOut.writeByte((byte) 0);\n        }\n\n        assert 4+normCount*(long)state.numDocs == normsOut.getFilePointer() : \".nrm file size mismatch: expected=\" + (4+normCount*(long)state.numDocs) + \" actual=\" + normsOut.getFilePointer();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsOut);\n      } else {\n        IOUtils.closeWhileHandlingException(normsOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          if (!fi.omitNorms) {\n            if (toWrite != null) {\n              anythingFlushed = true;\n              toWrite.flush(state.numDocs);\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              // we must check the final value of omitNorms for the fieldinfo, it could have \n              // changed for this field since the first time we added it.\n              final DocValuesConsumer valuesConsumer = newConsumer(new PerDocWriteState(state), fi);\n              final DocValuesField value = new DocValuesField(\"\");\n              value.setBytes(new BytesRef(new byte[] {0x00}), Type.BYTES_FIXED_STRAIGHT);\n              valuesConsumer.add(state.numDocs-1, value);\n              valuesConsumer.finish(state.numDocs);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    if (!state.fieldInfos.hasNorms()) {\n      return;\n    }\n\n    NormsWriter normsOut = null;\n    boolean success = false;\n    try {\n      normsOut = normsFormat.normsWriter(state);\n\n      for (FieldInfo fi : state.fieldInfos) {\n        final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n        int upto = 0;\n        // we must check the final value of omitNorms for the fieldinfo, it could have \n        // changed for this field since the first time we added it.\n        if (!fi.omitNorms && toWrite != null && toWrite.upto > 0) {\n          normsOut.startField(fi);\n          int docID = 0;\n          for (; docID < state.numDocs; docID++) {\n            if (upto < toWrite.upto && toWrite.docIDs[upto] == docID) {\n              normsOut.writeNorm(toWrite.norms[upto]);\n              upto++;\n            } else {\n              normsOut.writeNorm((byte) 0);\n            }\n          }\n\n          // we should have consumed every norm\n          assert upto == toWrite.upto;\n\n          toWrite.reset();\n        } else if (fi.isIndexed && !fi.omitNorms) {\n          // Fill entire field with default norm:\n          normsOut.startField(fi);\n          for(;upto<state.numDocs;upto++)\n            normsOut.writeNorm((byte) 0);\n        }\n      }\n      normsOut.finish(state.numDocs);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(normsOut);\n      } else {\n        IOUtils.closeWhileHandlingException(normsOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bbe822fc2a6ca4ade8768d6b9a38cd8662e2775d","date":1325797085,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitNorms) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              toWrite.flush(state.numDocs);\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              final DocValuesConsumer valuesConsumer = newConsumer(new PerDocWriteState(state), fi);\n              final DocValuesField value = new DocValuesField(\"\");\n              value.setBytes(new BytesRef(new byte[] {0x00}), Type.BYTES_FIXED_STRAIGHT);\n              valuesConsumer.add(state.numDocs-1, value);\n              valuesConsumer.finish(state.numDocs);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          if (!fi.omitNorms) {\n            if (toWrite != null) {\n              anythingFlushed = true;\n              toWrite.flush(state.numDocs);\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              // we must check the final value of omitNorms for the fieldinfo, it could have \n              // changed for this field since the first time we added it.\n              final DocValuesConsumer valuesConsumer = newConsumer(new PerDocWriteState(state), fi);\n              final DocValuesField value = new DocValuesField(\"\");\n              value.setBytes(new BytesRef(new byte[] {0x00}), Type.BYTES_FIXED_STRAIGHT);\n              valuesConsumer.add(state.numDocs-1, value);\n              valuesConsumer.finish(state.numDocs);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitNorms) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              toWrite.flush(state.numDocs);\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              final DocValuesConsumer valuesConsumer = newConsumer(new PerDocWriteState(state), fi);\n              final DocValuesField value = new DocValuesField(\"\", new BytesRef(new byte[] {0x0}), Type.BYTES_FIXED_STRAIGHT);\n              valuesConsumer.add(state.numDocs-1, value);\n              valuesConsumer.finish(state.numDocs);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitNorms) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              toWrite.flush(state.numDocs);\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              final DocValuesConsumer valuesConsumer = newConsumer(new PerDocWriteState(state), fi);\n              final DocValuesField value = new DocValuesField(\"\");\n              value.setBytes(new BytesRef(new byte[] {0x00}), Type.BYTES_FIXED_STRAIGHT);\n              valuesConsumer.add(state.numDocs-1, value);\n              valuesConsumer.finish(state.numDocs);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","bugFix":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitNorms) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.numDocs);\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null;\n              fi.setNormValueType(null, false);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitNorms) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              toWrite.flush(state.numDocs);\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              final DocValuesConsumer valuesConsumer = newConsumer(new PerDocWriteState(state), fi);\n              final DocValuesField value = new DocValuesField(\"\", new BytesRef(new byte[] {0x0}), Type.BYTES_FIXED_STRAIGHT);\n              valuesConsumer.add(state.numDocs-1, value);\n              valuesConsumer.finish(state.numDocs);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/NormsConsumer#flush(Map[FieldInfo,InvertedDocEndConsumerPerField],SegmentWriteState).mjava","sourceNew":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitNorms) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.numDocs);\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null;\n              fi.setNormValueType(null, false);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Produce _X.nrm if any document had a field with norms\n   *  not disabled */\n  @Override\n  public void flush(Map<FieldInfo,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {\n    boolean success = false;\n    boolean anythingFlushed = false;\n    try {\n      if (state.fieldInfos.hasNorms()) {\n        for (FieldInfo fi : state.fieldInfos) {\n          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi);\n          // we must check the final value of omitNorms for the fieldinfo, it could have \n          // changed for this field since the first time we added it.\n          if (!fi.omitNorms) {\n            if (toWrite != null && toWrite.initialized()) {\n              anythingFlushed = true;\n              final Type type = toWrite.flush(state.numDocs);\n              assert fi.getNormType() == type;\n            } else if (fi.isIndexed) {\n              anythingFlushed = true;\n              assert fi.getNormType() == null;\n              fi.setNormValueType(null, false);\n            }\n          }\n        }\n      } \n      \n      success = true;\n      if (!anythingFlushed && consumer != null) {\n        consumer.abort();\n      }\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"143d45d6fe43d56d1f541059577c929fc0ad27a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11f75174865a8734695cd60a4093339a4e63fcbb":["143d45d6fe43d56d1f541059577c929fc0ad27a1"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["fa0f44f887719e97183771e977cfc4bfb485b766"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["bbe822fc2a6ca4ade8768d6b9a38cd8662e2775d"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","11f75174865a8734695cd60a4093339a4e63fcbb"],"bbe822fc2a6ca4ade8768d6b9a38cd8662e2775d":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"143d45d6fe43d56d1f541059577c929fc0ad27a1":["11f75174865a8734695cd60a4093339a4e63fcbb"],"11f75174865a8734695cd60a4093339a4e63fcbb":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["143d45d6fe43d56d1f541059577c929fc0ad27a1","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"fa0f44f887719e97183771e977cfc4bfb485b766":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"bbe822fc2a6ca4ade8768d6b9a38cd8662e2775d":["fa0f44f887719e97183771e977cfc4bfb485b766"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["bbe822fc2a6ca4ade8768d6b9a38cd8662e2775d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}