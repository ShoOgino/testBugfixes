{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#isBalanced(String).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#isBalanced(String).mjava","pathOld":"/dev/null","sourceNew":"  /* Returns true if the clause has balanced parenthesis */\n  private static boolean isBalanced(String clause){\n    int openParens = 0;\n    boolean isDoubleQuote = false;\n    boolean isSingleQuote = false;\n    boolean isEscaped = false;\n    \n    for(int idx = 0; idx < clause.length(); ++idx){\n      char c = clause.charAt(idx);\n      \n      switch(c){\n        case '\\\\':\n          // We invert to support situations where \\\\ exists\n          isEscaped = !isEscaped;\n          break;\n          \n        case '\"':\n          // if we're not in a non-escaped single quote state, then invert the double quote state\n          if(!isEscaped && !isSingleQuote){\n            isDoubleQuote = !isDoubleQuote;\n          }\n          isEscaped = false;\n          break;\n        \n        case '\\'':\n          // if we're not in a non-escaped double quote state, then invert the single quote state\n          if(!isEscaped && !isDoubleQuote){\n            isSingleQuote = !isSingleQuote;\n          }\n          isEscaped = false;\n          break;\n          \n        case '(':\n          // if we're not in a non-escaped quote state, then increment the # of open parens\n          if(!isEscaped && !isSingleQuote && !isDoubleQuote){\n            openParens += 1;\n          }\n          isEscaped = false;\n          break;\n          \n        case ')':\n          // if we're not in a non-escaped quote state, then decrement the # of open parens\n          if(!isEscaped && !isSingleQuote && !isDoubleQuote){\n            openParens -= 1;\n            \n            // If we're ever < 0 then we know we're not balanced\n            if(openParens < 0){\n              return false;\n            }\n          }\n          isEscaped = false;\n          break;\n          \n        default:\n          isEscaped = false;\n      }\n    }\n\n    return (0 == openParens);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0370d6fb5289875090a50a9d0887ee584fed440","date":1552401990,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#isBalanced(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#isBalanced(String).mjava","sourceNew":"  /* Returns true if the clause has balanced parenthesis */\n  private static boolean isBalanced(String clause){\n    int openParens = 0;\n    boolean isDoubleQuote = false;\n    boolean isSingleQuote = false;\n    boolean isEscaped = false;\n\n    for(int idx = 0; idx < clause.length(); ++idx){\n      char c = clause.charAt(idx);\n\n      switch(c){\n        case '\\\\':\n          // We invert to support situations where \\\\ exists\n          isEscaped = !isEscaped;\n          break;\n\n        case '\"':\n          // if we're not in a non-escaped single quote state, then invert the double quote state\n          if(!isEscaped && !isSingleQuote){\n            isDoubleQuote = !isDoubleQuote;\n          }\n          isEscaped = false;\n          break;\n\n        case '\\'':\n          // if we're not in a non-escaped double quote state, then invert the single quote state\n          if(!isEscaped && !isDoubleQuote){\n            isSingleQuote = !isSingleQuote;\n          }\n          isEscaped = false;\n          break;\n\n        case '(':\n          // if we're not in a non-escaped quote state, then increment the # of open parens\n          if(!isEscaped && !isSingleQuote && !isDoubleQuote){\n            openParens += 1;\n          }\n          isEscaped = false;\n          break;\n\n        case ')':\n          // if we're not in a non-escaped quote state, then decrement the # of open parens\n          if(!isEscaped && !isSingleQuote && !isDoubleQuote){\n            openParens -= 1;\n\n            // If we're ever < 0 then we know we're not balanced\n            if(openParens < 0){\n              return false;\n            }\n          }\n          isEscaped = false;\n          break;\n\n        default:\n          isEscaped = false;\n      }\n    }\n\n    return (0 == openParens);\n  }\n\n","sourceOld":"  /* Returns true if the clause has balanced parenthesis */\n  private static boolean isBalanced(String clause){\n    int openParens = 0;\n    boolean isDoubleQuote = false;\n    boolean isSingleQuote = false;\n    boolean isEscaped = false;\n    \n    for(int idx = 0; idx < clause.length(); ++idx){\n      char c = clause.charAt(idx);\n      \n      switch(c){\n        case '\\\\':\n          // We invert to support situations where \\\\ exists\n          isEscaped = !isEscaped;\n          break;\n          \n        case '\"':\n          // if we're not in a non-escaped single quote state, then invert the double quote state\n          if(!isEscaped && !isSingleQuote){\n            isDoubleQuote = !isDoubleQuote;\n          }\n          isEscaped = false;\n          break;\n        \n        case '\\'':\n          // if we're not in a non-escaped double quote state, then invert the single quote state\n          if(!isEscaped && !isDoubleQuote){\n            isSingleQuote = !isSingleQuote;\n          }\n          isEscaped = false;\n          break;\n          \n        case '(':\n          // if we're not in a non-escaped quote state, then increment the # of open parens\n          if(!isEscaped && !isSingleQuote && !isDoubleQuote){\n            openParens += 1;\n          }\n          isEscaped = false;\n          break;\n          \n        case ')':\n          // if we're not in a non-escaped quote state, then decrement the # of open parens\n          if(!isEscaped && !isSingleQuote && !isDoubleQuote){\n            openParens -= 1;\n            \n            // If we're ever < 0 then we know we're not balanced\n            if(openParens < 0){\n              return false;\n            }\n          }\n          isEscaped = false;\n          break;\n          \n        default:\n          isEscaped = false;\n      }\n    }\n\n    return (0 == openParens);\n  }\n\n","bugFix":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0370d6fb5289875090a50a9d0887ee584fed440":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0370d6fb5289875090a50a9d0887ee584fed440"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0370d6fb5289875090a50a9d0887ee584fed440"],"a0370d6fb5289875090a50a9d0887ee584fed440":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}