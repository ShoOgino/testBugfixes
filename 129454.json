{"path":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#doTestMixedPostings(Codec).mjava","commits":[{"id":"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67","date":1348934182,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#doTestMixedPostings(Codec).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#doTestMixedPostings(Codec).mjava","sourceNew":"  private void doTestMixedPostings(Codec codec) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn on vectors for the checkindex cross-check\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field idField = new Field(\"id\", \"\", ft);\n    Field dateField = new Field(\"date\", \"\", ft);\n    doc.add(idField);\n    doc.add(dateField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(random().nextInt(50)));\n      dateField.setStringValue(Integer.toString(random().nextInt(100)));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  private void doTestMixedPostings(Codec codec) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn on vectors for the checkindex cross-check\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field idField = new Field(\"id\", \"\", ft);\n    Field dateField = new Field(\"date\", \"\", ft);\n    doc.add(idField);\n    doc.add(dateField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(random().nextInt(50)));\n      dateField.setStringValue(Integer.toString(random().nextInt(100)));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#doTestMixedPostings(Codec).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#doTestMixedPostings(Codec).mjava","sourceNew":"  private void doTestMixedPostings(Codec codec) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn on vectors for the checkindex cross-check\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field idField = new Field(\"id\", \"\", ft);\n    Field dateField = new Field(\"date\", \"\", ft);\n    doc.add(idField);\n    doc.add(dateField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(random().nextInt(50)));\n      dateField.setStringValue(Integer.toString(random().nextInt(100)));\n      iw.addDocument(doc);\n    }\n    iw.shutdown();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  private void doTestMixedPostings(Codec codec) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn on vectors for the checkindex cross-check\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field idField = new Field(\"id\", \"\", ft);\n    Field dateField = new Field(\"date\", \"\", ft);\n    doc.add(idField);\n    doc.add(dateField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(random().nextInt(50)));\n      dateField.setStringValue(Integer.toString(random().nextInt(100)));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#doTestMixedPostings(Codec).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#doTestMixedPostings(Codec).mjava","sourceNew":"  private void doTestMixedPostings(Codec codec) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn on vectors for the checkindex cross-check\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field idField = new Field(\"id\", \"\", ft);\n    Field dateField = new Field(\"date\", \"\", ft);\n    doc.add(idField);\n    doc.add(dateField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(random().nextInt(50)));\n      dateField.setStringValue(Integer.toString(random().nextInt(100)));\n      iw.addDocument(doc);\n    }\n    iw.shutdown();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  private void doTestMixedPostings(Codec codec) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn on vectors for the checkindex cross-check\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field idField = new Field(\"id\", \"\", ft);\n    Field dateField = new Field(\"date\", \"\", ft);\n    doc.add(idField);\n    doc.add(dateField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(random().nextInt(50)));\n      dateField.setStringValue(Integer.toString(random().nextInt(100)));\n      iw.addDocument(doc);\n    }\n    iw.shutdown();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#doTestMixedPostings(Codec).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#doTestMixedPostings(Codec).mjava","sourceNew":"  private void doTestMixedPostings(Codec codec) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn on vectors for the checkindex cross-check\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field idField = new Field(\"id\", \"\", ft);\n    Field dateField = new Field(\"date\", \"\", ft);\n    doc.add(idField);\n    doc.add(dateField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(random().nextInt(50)));\n      dateField.setStringValue(Integer.toString(random().nextInt(100)));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  private void doTestMixedPostings(Codec codec) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(codec);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn on vectors for the checkindex cross-check\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field idField = new Field(\"id\", \"\", ft);\n    Field dateField = new Field(\"date\", \"\", ft);\n    doc.add(idField);\n    doc.add(dateField);\n    for (int i = 0; i < 100; i++) {\n      idField.setStringValue(Integer.toString(random().nextInt(50)));\n      dateField.setStringValue(Integer.toString(random().nextInt(100)));\n      iw.addDocument(doc);\n    }\n    iw.shutdown();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}