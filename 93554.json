{"path":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermStates(IndexReader,List[LeafReaderContext],TermStates[],Term[]).mjava","commits":[{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermStates(IndexReader,List[LeafReaderContext],TermStates[],Term[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"  public void collectTermStates(IndexReader reader,\n                                List<LeafReaderContext> leaves, TermStates[] contextArray,\n                                Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermStates termStates = contextArray[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termStates == null) {\n            contextArray[i] = new TermStates(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termStates.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermStates(IndexReader,List[LeafReaderContext],TermStates[],Term[]).mjava","pathOld":"/dev/null","sourceNew":"  public void collectTermStates(IndexReader reader,\n                                List<LeafReaderContext> leaves, TermStates[] contextArray,\n                                Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermStates termStates = contextArray[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termStates == null) {\n            contextArray[i] = new TermStates(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termStates.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}