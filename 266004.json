{"path":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricsContext,String).mjava","commits":[{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        ConcurrentLFUCache.Stats stats = cache.getStats();\n        long lookups = stats.getCumulativeLookups();\n        long hits = stats.getCumulativeHits();\n        long inserts = stats.getCumulativePuts();\n        long evictions = stats.getCumulativeEvictions();\n        long idleEvictions = stats.getCumulativeIdleEvictions();\n        long size = stats.getCurrentSize();\n\n        map.put(LOOKUPS_PARAM, lookups);\n        map.put(HITS_PARAM, hits);\n        map.put(HIT_RATIO_PARAM, calcHitRatio(lookups, hits));\n        map.put(INSERTS_PARAM, inserts);\n        map.put(EVICTIONS_PARAM, evictions);\n        map.put(SIZE_PARAM, size);\n        map.put(MAX_SIZE_PARAM, maxSize);\n        map.put(MIN_SIZE_PARAM, minSizeLimit);\n        map.put(ACCEPTABLE_SIZE_PARAM, acceptableSize);\n        map.put(AUTOWARM_COUNT_PARAM, autowarmCount);\n        map.put(CLEANUP_THREAD_PARAM, cleanupThread);\n        map.put(SHOW_ITEMS_PARAM, showItems);\n        map.put(TIME_DECAY_PARAM, timeDecay);\n        map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        map.put(MAX_IDLE_TIME_PARAM, maxIdleTimeSec);\n        map.put(\"idleEvictions\", idleEvictions);\n\n        map.put(\"warmupTime\", warmupTime);\n\n        long clookups = 0;\n        long chits = 0;\n        long cinserts = 0;\n        long cevictions = 0;\n        long cidleEvictions = 0;\n\n        // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n        for (ConcurrentLFUCache.Stats statistics : statsList) {\n          clookups += statistics.getCumulativeLookups();\n          chits += statistics.getCumulativeHits();\n          cinserts += statistics.getCumulativePuts();\n          cevictions += statistics.getCumulativeEvictions();\n          cidleEvictions += statistics.getCumulativeIdleEvictions();\n        }\n        map.put(\"cumulative_lookups\", clookups);\n        map.put(\"cumulative_hits\", chits);\n        map.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n        map.put(\"cumulative_inserts\", cinserts);\n        map.put(\"cumulative_evictions\", cevictions);\n        map.put(\"cumulative_idleEvictions\", cidleEvictions);\n\n        if (detailed && showItems != 0) {\n          Map items = cache.getMostUsedItems(showItems == -1 ? Integer.MAX_VALUE : showItems);\n          for (Map.Entry e : (Set<Map.Entry>) items.entrySet()) {\n            Object k = e.getKey();\n            Object v = e.getValue();\n\n            String ks = \"item_\" + k;\n            String vs = v.toString();\n            map.put(ks, vs);\n          }\n\n        }\n\n      }\n    });\n    solrMetricsContext.gauge(this, cacheMap, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    registry = manager.registry(registryName);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        ConcurrentLFUCache.Stats stats = cache.getStats();\n        long lookups = stats.getCumulativeLookups();\n        long hits = stats.getCumulativeHits();\n        long inserts = stats.getCumulativePuts();\n        long evictions = stats.getCumulativeEvictions();\n        long idleEvictions = stats.getCumulativeIdleEvictions();\n        long size = stats.getCurrentSize();\n\n        map.put(LOOKUPS_PARAM, lookups);\n        map.put(HITS_PARAM, hits);\n        map.put(HIT_RATIO_PARAM, calcHitRatio(lookups, hits));\n        map.put(INSERTS_PARAM, inserts);\n        map.put(EVICTIONS_PARAM, evictions);\n        map.put(SIZE_PARAM, size);\n        map.put(MAX_SIZE_PARAM, maxSize);\n        map.put(MIN_SIZE_PARAM, minSizeLimit);\n        map.put(ACCEPTABLE_SIZE_PARAM, acceptableSize);\n        map.put(AUTOWARM_COUNT_PARAM, autowarmCount);\n        map.put(CLEANUP_THREAD_PARAM, cleanupThread);\n        map.put(SHOW_ITEMS_PARAM, showItems);\n        map.put(TIME_DECAY_PARAM, timeDecay);\n        map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        map.put(MAX_IDLE_TIME_PARAM, maxIdleTimeSec);\n        map.put(\"idleEvictions\", idleEvictions);\n\n        map.put(\"warmupTime\", warmupTime);\n\n        long clookups = 0;\n        long chits = 0;\n        long cinserts = 0;\n        long cevictions = 0;\n        long cidleEvictions = 0;\n\n        // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n        for (ConcurrentLFUCache.Stats statistics : statsList) {\n          clookups += statistics.getCumulativeLookups();\n          chits += statistics.getCumulativeHits();\n          cinserts += statistics.getCumulativePuts();\n          cevictions += statistics.getCumulativeEvictions();\n          cidleEvictions += statistics.getCumulativeIdleEvictions();\n        }\n        map.put(\"cumulative_lookups\", clookups);\n        map.put(\"cumulative_hits\", chits);\n        map.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n        map.put(\"cumulative_inserts\", cinserts);\n        map.put(\"cumulative_evictions\", cevictions);\n        map.put(\"cumulative_idleEvictions\", cidleEvictions);\n\n        if (detailed && showItems != 0) {\n          Map items = cache.getMostUsedItems(showItems == -1 ? Integer.MAX_VALUE : showItems);\n          for (Map.Entry e : (Set<Map.Entry>) items.entrySet()) {\n            Object k = e.getKey();\n            Object v = e.getValue();\n\n            String ks = \"item_\" + k;\n            String vs = v.toString();\n            map.put(ks, vs);\n          }\n\n        }\n\n      }\n    });\n    manager.registerGauge(this, registryName, cacheMap, tag, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        ConcurrentLFUCache.Stats stats = cache.getStats();\n        long lookups = stats.getCumulativeLookups();\n        long hits = stats.getCumulativeHits();\n        long inserts = stats.getCumulativePuts();\n        long evictions = stats.getCumulativeEvictions();\n        long idleEvictions = stats.getCumulativeIdleEvictions();\n        long size = stats.getCurrentSize();\n\n        map.put(LOOKUPS_PARAM, lookups);\n        map.put(HITS_PARAM, hits);\n        map.put(HIT_RATIO_PARAM, calcHitRatio(lookups, hits));\n        map.put(INSERTS_PARAM, inserts);\n        map.put(EVICTIONS_PARAM, evictions);\n        map.put(SIZE_PARAM, size);\n        map.put(MAX_SIZE_PARAM, maxSize);\n        map.put(MIN_SIZE_PARAM, minSizeLimit);\n        map.put(ACCEPTABLE_SIZE_PARAM, acceptableSize);\n        map.put(AUTOWARM_COUNT_PARAM, autowarmCount);\n        map.put(CLEANUP_THREAD_PARAM, cleanupThread);\n        map.put(SHOW_ITEMS_PARAM, showItems);\n        map.put(TIME_DECAY_PARAM, timeDecay);\n        map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        map.put(MAX_IDLE_TIME_PARAM, maxIdleTimeSec);\n        map.put(\"idleEvictions\", idleEvictions);\n\n        map.put(\"warmupTime\", warmupTime);\n\n        long clookups = 0;\n        long chits = 0;\n        long cinserts = 0;\n        long cevictions = 0;\n        long cidleEvictions = 0;\n\n        // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n        for (ConcurrentLFUCache.Stats statistics : statsList) {\n          clookups += statistics.getCumulativeLookups();\n          chits += statistics.getCumulativeHits();\n          cinserts += statistics.getCumulativePuts();\n          cevictions += statistics.getCumulativeEvictions();\n          cidleEvictions += statistics.getCumulativeIdleEvictions();\n        }\n        map.put(\"cumulative_lookups\", clookups);\n        map.put(\"cumulative_hits\", chits);\n        map.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n        map.put(\"cumulative_inserts\", cinserts);\n        map.put(\"cumulative_evictions\", cevictions);\n        map.put(\"cumulative_idleEvictions\", cidleEvictions);\n\n        if (detailed && showItems != 0) {\n          Map items = cache.getMostUsedItems(showItems == -1 ? Integer.MAX_VALUE : showItems);\n          for (Map.Entry e : (Set<Map.Entry>) items.entrySet()) {\n            Object k = e.getKey();\n            Object v = e.getValue();\n\n            String ks = \"item_\" + k;\n            String vs = v.toString();\n            map.put(ks, vs);\n          }\n\n        }\n\n      }\n    });\n    solrMetricsContext.gauge(cacheMap, true, scope, getCategory().toString());\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        ConcurrentLFUCache.Stats stats = cache.getStats();\n        long lookups = stats.getCumulativeLookups();\n        long hits = stats.getCumulativeHits();\n        long inserts = stats.getCumulativePuts();\n        long evictions = stats.getCumulativeEvictions();\n        long idleEvictions = stats.getCumulativeIdleEvictions();\n        long size = stats.getCurrentSize();\n\n        map.put(LOOKUPS_PARAM, lookups);\n        map.put(HITS_PARAM, hits);\n        map.put(HIT_RATIO_PARAM, calcHitRatio(lookups, hits));\n        map.put(INSERTS_PARAM, inserts);\n        map.put(EVICTIONS_PARAM, evictions);\n        map.put(SIZE_PARAM, size);\n        map.put(MAX_SIZE_PARAM, maxSize);\n        map.put(MIN_SIZE_PARAM, minSizeLimit);\n        map.put(ACCEPTABLE_SIZE_PARAM, acceptableSize);\n        map.put(AUTOWARM_COUNT_PARAM, autowarmCount);\n        map.put(CLEANUP_THREAD_PARAM, cleanupThread);\n        map.put(SHOW_ITEMS_PARAM, showItems);\n        map.put(TIME_DECAY_PARAM, timeDecay);\n        map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        map.put(MAX_IDLE_TIME_PARAM, maxIdleTimeSec);\n        map.put(\"idleEvictions\", idleEvictions);\n\n        map.put(\"warmupTime\", warmupTime);\n\n        long clookups = 0;\n        long chits = 0;\n        long cinserts = 0;\n        long cevictions = 0;\n        long cidleEvictions = 0;\n\n        // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n        for (ConcurrentLFUCache.Stats statistics : statsList) {\n          clookups += statistics.getCumulativeLookups();\n          chits += statistics.getCumulativeHits();\n          cinserts += statistics.getCumulativePuts();\n          cevictions += statistics.getCumulativeEvictions();\n          cidleEvictions += statistics.getCumulativeIdleEvictions();\n        }\n        map.put(\"cumulative_lookups\", clookups);\n        map.put(\"cumulative_hits\", chits);\n        map.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n        map.put(\"cumulative_inserts\", cinserts);\n        map.put(\"cumulative_evictions\", cevictions);\n        map.put(\"cumulative_idleEvictions\", cidleEvictions);\n\n        if (detailed && showItems != 0) {\n          Map items = cache.getMostUsedItems(showItems == -1 ? Integer.MAX_VALUE : showItems);\n          for (Map.Entry e : (Set<Map.Entry>) items.entrySet()) {\n            Object k = e.getKey();\n            Object v = e.getValue();\n\n            String ks = \"item_\" + k;\n            String vs = v.toString();\n            map.put(ks, vs);\n          }\n\n        }\n\n      }\n    });\n    solrMetricsContext.gauge(this, cacheMap, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/LFUCache#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    cacheMap = new MetricsMap((detailed, map) -> {\n      if (cache != null) {\n        ConcurrentLFUCache.Stats stats = cache.getStats();\n        long lookups = stats.getCumulativeLookups();\n        long hits = stats.getCumulativeHits();\n        long inserts = stats.getCumulativePuts();\n        long evictions = stats.getCumulativeEvictions();\n        long idleEvictions = stats.getCumulativeIdleEvictions();\n        long size = stats.getCurrentSize();\n\n        map.put(LOOKUPS_PARAM, lookups);\n        map.put(HITS_PARAM, hits);\n        map.put(HIT_RATIO_PARAM, calcHitRatio(lookups, hits));\n        map.put(INSERTS_PARAM, inserts);\n        map.put(EVICTIONS_PARAM, evictions);\n        map.put(SIZE_PARAM, size);\n        map.put(MAX_SIZE_PARAM, maxSize);\n        map.put(MIN_SIZE_PARAM, minSizeLimit);\n        map.put(ACCEPTABLE_SIZE_PARAM, acceptableSize);\n        map.put(AUTOWARM_COUNT_PARAM, autowarmCount);\n        map.put(CLEANUP_THREAD_PARAM, cleanupThread);\n        map.put(SHOW_ITEMS_PARAM, showItems);\n        map.put(TIME_DECAY_PARAM, timeDecay);\n        map.put(RAM_BYTES_USED_PARAM, ramBytesUsed());\n        map.put(MAX_IDLE_TIME_PARAM, maxIdleTimeSec);\n        map.put(\"idleEvictions\", idleEvictions);\n\n        map.put(\"warmupTime\", warmupTime);\n\n        long clookups = 0;\n        long chits = 0;\n        long cinserts = 0;\n        long cevictions = 0;\n        long cidleEvictions = 0;\n\n        // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n        for (ConcurrentLFUCache.Stats statistics : statsList) {\n          clookups += statistics.getCumulativeLookups();\n          chits += statistics.getCumulativeHits();\n          cinserts += statistics.getCumulativePuts();\n          cevictions += statistics.getCumulativeEvictions();\n          cidleEvictions += statistics.getCumulativeIdleEvictions();\n        }\n        map.put(\"cumulative_lookups\", clookups);\n        map.put(\"cumulative_hits\", chits);\n        map.put(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n        map.put(\"cumulative_inserts\", cinserts);\n        map.put(\"cumulative_evictions\", cevictions);\n        map.put(\"cumulative_idleEvictions\", cidleEvictions);\n\n        if (detailed && showItems != 0) {\n          Map items = cache.getMostUsedItems(showItems == -1 ? Integer.MAX_VALUE : showItems);\n          for (Map.Entry e : (Set<Map.Entry>) items.entrySet()) {\n            Object k = e.getKey();\n            Object v = e.getValue();\n\n            String ks = \"item_\" + k;\n            String vs = v.toString();\n            map.put(ks, vs);\n          }\n\n        }\n\n      }\n    });\n    solrMetricsContext.gauge(cacheMap, true, scope, getCategory().toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d7d3943904804560937e6239effeebda0f920e4":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["4d7d3943904804560937e6239effeebda0f920e4"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}