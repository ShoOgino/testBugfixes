{"path":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear \"foo.bar\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["11a663cf78956908deec3d6106ec00b5171f6a5e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear \"foo.bar\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11a663cf78956908deec3d6106ec00b5171f6a5e","date":1485778881,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","sourceNew":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear all metrics with prefix \"foo.bar.\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear \"foo.bar\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","bugFix":["0265144286422ad99682a00904cc2536b79c8535"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","sourceNew":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear all metrics with prefix \"foo.bar.\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear \"foo.bar\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","sourceNew":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear all metrics with prefix \"foo.bar.\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear all metrics with prefix \"foo.bar.\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","sourceNew":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear all metrics with prefix \"foo.bar.\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear all metrics with prefix \"foo.bar.\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","sourceNew":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.registerMetric(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.registerMetric(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.registerMetric(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear all metrics with prefix \"foo.bar.\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear all metrics with prefix \"foo.bar.\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testClearMetrics().mjava","sourceNew":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.registerMetric(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.registerMetric(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.registerMetric(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear all metrics with prefix \"foo.bar.\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testClearMetrics() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"bar\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\", \"baz\");\n    }\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      metricManager.register(null, registryName, entry.getValue(), false, entry.getKey(), \"foo\");\n    }\n\n    assertEquals(metrics.size() * 3, metricManager.registry(registryName).getMetrics().size());\n\n    // clear all metrics with prefix \"foo.bar.\"\n    Set<String> removed = metricManager.clearMetrics(registryName, \"foo\", \"bar.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.bar.\"));\n    }\n    removed = metricManager.clearMetrics(registryName, \"foo\", \"baz.\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.baz.\"));\n    }\n    // perhaps surprisingly, this works too - see PrefixFilter docs\n    removed = metricManager.clearMetrics(registryName, \"fo\");\n    assertEquals(metrics.size(), removed.size());\n    for (String s : removed) {\n      assertTrue(s.startsWith(\"foo.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["11a663cf78956908deec3d6106ec00b5171f6a5e"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"11a663cf78956908deec3d6106ec00b5171f6a5e":["0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","11a663cf78956908deec3d6106ec00b5171f6a5e"],"816521ebaad5add9cb96bb88c577394e2938c40b":["11a663cf78956908deec3d6106ec00b5171f6a5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","11a663cf78956908deec3d6106ec00b5171f6a5e"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"11a663cf78956908deec3d6106ec00b5171f6a5e":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}