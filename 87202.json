{"path":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int[]).mjava","commits":[{"id":"17aa383cdefa6c6eb46c3288753026d489892e36","date":1114593391,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int[]).mjava","pathOld":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int[]).mjava","sourceNew":"    /**\n     * Delegates to each filter in the chain.\n     * @param reader IndexReader\n     * @param logic Logical operation\n     * @return BitSet\n     */\n    private BitSet bits(IndexReader reader, int[] logic) throws IOException\n    {\n        if (logic.length != chain.length)\n            throw new IllegalArgumentException(\"Invalid number of elements in logic array\");\n        BitSet result;\n        int i = 0;\n\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results. Thanks to\n         * Daniel Armbrust for pointing this out and suggesting workaround.\n         */\n        if (logic[0] == AND)\n        {\n            result = (BitSet) chain[i].bits(reader).clone();\n            ++i;\n        }\n        else\n        {\n            result = new BitSet(reader.maxDoc());\n        }\n\n        for (; i < chain.length; i++)\n        {\n            doChain(result, reader, logic[i], chain[i]);\n        }\n        return result;\n    }\n\n","sourceOld":"    /**\n     * Delegates to each filter in the chain.\n     * @param reader IndexReader\n     * @param logic Logical operation\n     * @return BitSet\n     */\n    private BitSet bits(IndexReader reader, int[] logic) throws IOException\n    {\n        if (logic.length != chain.length)\n            throw new IllegalArgumentException(\"Invalid number of elements in logic array\");\n        BitSet result;\n        int i = 0;\n\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results. Thanks to\n         * Daniel Armbrust for pointing this out and suggesting workaround.\n         */\n        if (logic[0] == AND)\n        {\n            result = (BitSet) chain[i].bits(reader).clone();\n            ++i;\n        }\n        else\n        {\n            result = new BitSet(reader.maxDoc());\n        }\n\n        for (; i < chain.length; i++)\n        {\n            doChain(result, reader, logic[i], chain[i]);\n        }\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f731e95ce88cd992c856dfa6bade727c4d04f13","date":1199054879,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int[]).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int[]).mjava","sourceNew":"    /**\n     * Delegates to each filter in the chain.\n     * @param reader IndexReader\n     * @param logic Logical operation\n     * @return BitSet\n     */\n    private BitSet bits(IndexReader reader, int[] logic) throws IOException\n    {\n        if (logic.length != chain.length)\n            throw new IllegalArgumentException(\"Invalid number of elements in logic array\");\n        BitSet result;\n        int i = 0;\n\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results. Thanks to\n         * Daniel Armbrust for pointing this out and suggesting workaround.\n         */\n        if (logic[0] == AND)\n        {\n            result = (BitSet) chain[i].bits(reader).clone();\n            ++i;\n        }\n        else if (logic[0] == ANDNOT)\n        {\n            result = (BitSet) chain[i].bits(reader).clone();\n            result.flip(0,reader.maxDoc());\n            ++i;\n        }\n        else\n        {\n            result = new BitSet(reader.maxDoc());\n        }\n\n        for (; i < chain.length; i++)\n        {\n            doChain(result, reader, logic[i], chain[i]);\n        }\n        return result;\n    }\n\n","sourceOld":"    /**\n     * Delegates to each filter in the chain.\n     * @param reader IndexReader\n     * @param logic Logical operation\n     * @return BitSet\n     */\n    private BitSet bits(IndexReader reader, int[] logic) throws IOException\n    {\n        if (logic.length != chain.length)\n            throw new IllegalArgumentException(\"Invalid number of elements in logic array\");\n        BitSet result;\n        int i = 0;\n\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results. Thanks to\n         * Daniel Armbrust for pointing this out and suggesting workaround.\n         */\n        if (logic[0] == AND)\n        {\n            result = (BitSet) chain[i].bits(reader).clone();\n            ++i;\n        }\n        else\n        {\n            result = new BitSet(reader.maxDoc());\n        }\n\n        for (; i < chain.length; i++)\n        {\n            doChain(result, reader, logic[i], chain[i]);\n        }\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a27a24aac4a53ec0af1f168a3b1ab4a06a042250","date":1211570705,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int[]).mjava","sourceNew":null,"sourceOld":"    /**\n     * Delegates to each filter in the chain.\n     * @param reader IndexReader\n     * @param logic Logical operation\n     * @return BitSet\n     */\n    private BitSet bits(IndexReader reader, int[] logic) throws IOException\n    {\n        if (logic.length != chain.length)\n            throw new IllegalArgumentException(\"Invalid number of elements in logic array\");\n        BitSet result;\n        int i = 0;\n\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results. Thanks to\n         * Daniel Armbrust for pointing this out and suggesting workaround.\n         */\n        if (logic[0] == AND)\n        {\n            result = (BitSet) chain[i].bits(reader).clone();\n            ++i;\n        }\n        else if (logic[0] == ANDNOT)\n        {\n            result = (BitSet) chain[i].bits(reader).clone();\n            result.flip(0,reader.maxDoc());\n            ++i;\n        }\n        else\n        {\n            result = new BitSet(reader.maxDoc());\n        }\n\n        for (; i < chain.length; i++)\n        {\n            doChain(result, reader, logic[i], chain[i]);\n        }\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17aa383cdefa6c6eb46c3288753026d489892e36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f731e95ce88cd992c856dfa6bade727c4d04f13":["17aa383cdefa6c6eb46c3288753026d489892e36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["3f731e95ce88cd992c856dfa6bade727c4d04f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"]},"commit2Childs":{"17aa383cdefa6c6eb46c3288753026d489892e36":["3f731e95ce88cd992c856dfa6bade727c4d04f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17aa383cdefa6c6eb46c3288753026d489892e36"],"3f731e95ce88cd992c856dfa6bade727c4d04f13":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}