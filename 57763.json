{"path":"src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","commits":[{"id":"bf0f06494833f3935ee69a7e806ce358b324ca0d","date":1258413240,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   * \n   * @param x1\n   * @param y1\n   * @param x2\n   * @param y2\n   * @param radius\n   * @return\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius){\n    double result = 0;\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX / 2);\n      double hsinY = Math.sin(diffY / 2);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["15cafceb8478fa94442a7368e682a9d9b61d8d13"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ad922eddebc57a54c58f83752607900c0d5afdb","date":1258422827,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":"  /**\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   * \n   * @param x1 The x coordinate of the first point\n   * @param y1 The y coordinate of the first point\n   * @param x2 The x coordinate of the second point\n   * @param y2 The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius){\n    double result = 0;\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX / 2);\n      double hsinY = Math.sin(diffY / 2);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   * \n   * @param x1\n   * @param y1\n   * @param x2\n   * @param y2\n   * @param radius\n   * @return\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius){\n    double result = 0;\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX / 2);\n      double hsinY = Math.sin(diffY / 2);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["15cafceb8478fa94442a7368e682a9d9b61d8d13"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d180fbad725df7c7fdbcd73f50094dc0f1cf65a7","date":1258477540,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":"  /**\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   * \n   * @param x1 The x coordinate of the first point\n   * @param y1 The y coordinate of the first point\n   * @param x2 The x coordinate of the second point\n   * @param y2 The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius){\n    double result = 0;\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   * \n   * @param x1 The x coordinate of the first point\n   * @param y1 The y coordinate of the first point\n   * @param x2 The x coordinate of the second point\n   * @param y2 The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius){\n    double result = 0;\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX / 2);\n      double hsinY = Math.sin(diffY / 2);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ee3516c0159528e9661e9988a585ec3baad3026","date":1258585358,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":"  /**\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   * \n   * @param x1 The x coordinate of the first point\n   * @param y1 The y coordinate of the first point\n   * @param x2 The x coordinate of the second point\n   * @param y2 The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius){\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   * \n   * @param x1 The x coordinate of the first point\n   * @param y1 The y coordinate of the first point\n   * @param x2 The x coordinate of the second point\n   * @param y2 The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius){\n    double result = 0;\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4289a1f64dea17529773bb2e2b0565818bc289df","date":1262618826,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":"  /**\n   * @param x1     The x coordinate of the first point\n   * @param y1     The y coordinate of the first point\n   * @param x2     The x coordinate of the second point\n   * @param y2     The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   * \n   * @param x1 The x coordinate of the first point\n   * @param y1 The y coordinate of the first point\n   * @param x2 The x coordinate of the second point\n   * @param y2 The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius){\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["15cafceb8478fa94442a7368e682a9d9b61d8d13"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":"  /**\n   * @param x1     The x coordinate of the first point\n   * @param y1     The y coordinate of the first point\n   * @param x2     The x coordinate of the second point\n   * @param y2     The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @param x1     The x coordinate of the first point\n   * @param y1     The y coordinate of the first point\n   * @param x2     The x coordinate of the second point\n   * @param y2     The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1ee3516c0159528e9661e9988a585ec3baad3026":["d180fbad725df7c7fdbcd73f50094dc0f1cf65a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4ad922eddebc57a54c58f83752607900c0d5afdb":["bf0f06494833f3935ee69a7e806ce358b324ca0d"],"4289a1f64dea17529773bb2e2b0565818bc289df":["1ee3516c0159528e9661e9988a585ec3baad3026"],"d180fbad725df7c7fdbcd73f50094dc0f1cf65a7":["4ad922eddebc57a54c58f83752607900c0d5afdb"],"ad94625fb8d088209f46650c8097196fec67f00c":["4289a1f64dea17529773bb2e2b0565818bc289df"],"bf0f06494833f3935ee69a7e806ce358b324ca0d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1ee3516c0159528e9661e9988a585ec3baad3026":["4289a1f64dea17529773bb2e2b0565818bc289df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bf0f06494833f3935ee69a7e806ce358b324ca0d"],"4ad922eddebc57a54c58f83752607900c0d5afdb":["d180fbad725df7c7fdbcd73f50094dc0f1cf65a7"],"d180fbad725df7c7fdbcd73f50094dc0f1cf65a7":["1ee3516c0159528e9661e9988a585ec3baad3026"],"4289a1f64dea17529773bb2e2b0565818bc289df":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"bf0f06494833f3935ee69a7e806ce358b324ca0d":["4ad922eddebc57a54c58f83752607900c0d5afdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}