{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],ZkStateReader,String).mjava","commits":[{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],ZkStateReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @param stateReader The ZkStateReader for this clusterstate\n   * @param znode the znode from which this data is read from\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, ZkStateReader stateReader, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap(),stateReader);\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version, znode);\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState( version, liveNodes, collections,stateReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],ZkStateReader,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @param stateReader The ZkStateReader for this clusterstate\n   * @param znode the znode from which this data is read from\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, ZkStateReader stateReader, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap(),stateReader);\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version, znode);\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState( version, liveNodes, collections,stateReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}