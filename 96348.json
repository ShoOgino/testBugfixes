{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            if (storePayloads) {\n              final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n              if (payloadLength > 0) {\n                buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    //System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq);\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          //System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            //System.out.println(\"    write pos=\" + pos.pos);\n            if (storePayloads) {\n              final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n              if (payloadLength > 0) {\n                buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n      \n      //System.out.println(\"  bytes=\" + buffer.getFilePointer());\n      buffer2.writeVInt((int) buffer.getFilePointer());\n      buffer.writeTo(buffer2);\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            if (storePayloads) {\n              final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n              if (payloadLength > 0) {\n                buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    if (DEBUG) System.out.println(\"PW   finishTerm docCount=\" + stats.docFreq + \" pendingCount=\" + pendingCount + \" pendingTerms.size()=\" + pendingTerms.size());\n\n    assert pendingCount > 0 || pendingCount == -1;\n\n    if (pendingCount == -1) {\n      wrappedPostingsWriter.finishTerm(stats);\n      // Must add null entry to record terms that our\n      // wrapped postings impl added\n      pendingTerms.add(null);\n    } else {\n\n      // There were few enough total occurrences for this\n      // term, so we fully inline our postings data into\n      // terms dict, now:\n\n      // TODO: it'd be better to share this encoding logic\n      // in some inner codec that knows how to write a\n      // single doc / single position, etc.  This way if a\n      // given codec wants to store other interesting\n      // stuff, it could use this pulsing codec to do so\n\n      if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        int lastDocID = 0;\n        int pendingIDX = 0;\n        int lastPayloadLength = -1;\n        while(pendingIDX < pendingCount) {\n          final Position doc = pending[pendingIDX];\n\n          final int delta = doc.docID - lastDocID;\n          lastDocID = doc.docID;\n\n          if (DEBUG) System.out.println(\"  write doc=\" + doc.docID + \" freq=\" + doc.termFreq);\n\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n\n          int lastPos = 0;\n          for(int posIDX=0;posIDX<doc.termFreq;posIDX++) {\n            final Position pos = pending[pendingIDX++];\n            assert pos.docID == doc.docID;\n            final int posDelta = pos.pos - lastPos;\n            lastPos = pos.pos;\n            if (DEBUG) System.out.println(\"    write pos=\" + pos.pos);\n            if (storePayloads) {\n              final int payloadLength = pos.payload == null ? 0 : pos.payload.length;\n              if (payloadLength != lastPayloadLength) {\n                buffer.writeVInt((posDelta << 1)|1);\n                buffer.writeVInt(payloadLength);\n                lastPayloadLength = payloadLength;\n              } else {\n                buffer.writeVInt(posDelta << 1);\n              }\n              if (payloadLength > 0) {\n                buffer.writeBytes(pos.payload.bytes, 0, pos.payload.length);\n              }\n            } else {\n              buffer.writeVInt(posDelta);\n            }\n          }\n        }\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          final int delta = doc.docID - lastDocID;\n          assert doc.termFreq != 0;\n          if (doc.termFreq == 1) {\n            buffer.writeVInt((delta<<1)|1);\n          } else {\n            buffer.writeVInt(delta<<1);\n            buffer.writeVInt(doc.termFreq);\n          }\n          lastDocID = doc.docID;\n        }\n      } else if (indexOptions == IndexOptions.DOCS_ONLY) {\n        int lastDocID = 0;\n        for(int posIDX=0;posIDX<pendingCount;posIDX++) {\n          final Position doc = pending[posIDX];\n          buffer.writeVInt(doc.docID - lastDocID);\n          lastDocID = doc.docID;\n        }\n      }\n\n      final byte[] bytes = new byte[(int) buffer.getFilePointer()];\n      buffer.writeTo(bytes, 0);\n      pendingTerms.add(new PendingTerm(bytes));\n      buffer.reset();\n    }\n\n    pendingCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}