{"path":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testPlainTextSpecifyingMimeType().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testPlainTextSpecifyingMimeType().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testPlainTextSpecifyingMimeType().mjava","sourceNew":"  @Test\n  public void testPlainTextSpecifyingMimeType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying MIME type:\n    loadLocal(\"version_control.txt\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.content\", \"extractedContent\",\n            ExtractingParams.STREAM_TYPE, \"text/plain\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testPlainTextSpecifyingMimeType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying MIME type:\n    loadLocal(\"version_control.txt\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.content\", \"extractedContent\",\n            ExtractingParams.STREAM_TYPE, \"text/plain\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testPlainTextSpecifyingMimeType().mjava","pathOld":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testPlainTextSpecifyingMimeType().mjava","sourceNew":"  @Test\n  public void testPlainTextSpecifyingMimeType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying MIME type:\n    loadLocal(\"version_control.txt\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.content\", \"extractedContent\",\n            ExtractingParams.STREAM_TYPE, \"text/plain\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testPlainTextSpecifyingMimeType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying MIME type:\n    loadLocal(\"version_control.txt\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.content\", \"extractedContent\",\n            ExtractingParams.STREAM_TYPE, \"text/plain\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abd55340ba9df8b62edcd692b34e46cf0614a52e","date":1311341057,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testPlainTextSpecifyingMimeType().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testPlainTextSpecifyingMimeType().mjava","sourceNew":"  @Test\n  public void testPlainTextSpecifyingMimeType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying MIME type:\n    loadLocal(\"extraction/version_control.txt\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.content\", \"extractedContent\",\n            ExtractingParams.STREAM_TYPE, \"text/plain\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testPlainTextSpecifyingMimeType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying MIME type:\n    loadLocal(\"version_control.txt\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.content\", \"extractedContent\",\n            ExtractingParams.STREAM_TYPE, \"text/plain\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c801445354e017746d2c981c9b7afc6041b59405","date":1410123013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testPlainTextSpecifyingMimeType().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testPlainTextSpecifyingMimeType().mjava","sourceNew":"  @Test\n  public void testPlainTextSpecifyingMimeType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying MIME type:\n    loadLocal(\"extraction/version_control.txt\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.X-Parsed-By\", \"ignored_parser\",\n            \"fmap.content\", \"extractedContent\",\n            ExtractingParams.STREAM_TYPE, \"text/plain\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testPlainTextSpecifyingMimeType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    // Load plain text specifying MIME type:\n    loadLocal(\"extraction/version_control.txt\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"fmap.content\", \"extractedContent\",\n            ExtractingParams.STREAM_TYPE, \"text/plain\"\n    );\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"extractedContent:Apache\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c801445354e017746d2c981c9b7afc6041b59405":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c801445354e017746d2c981c9b7afc6041b59405"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"c801445354e017746d2c981c9b7afc6041b59405":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["c801445354e017746d2c981c9b7afc6041b59405"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}