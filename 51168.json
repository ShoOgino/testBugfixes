{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","commits":[{"id":"a37a7b0a78003a4b0171c6c70384c2a70c686670","date":1289859534,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      return doc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      return doc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":2,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          //System.out.println(\"StandardR.D&PE seg=\" + segment + \" nextDoc return doc=END\");\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      //System.out.println(\"StandardR.D&PE nextDoc seg=\" + segment + \" return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          //System.out.println(\"StandardR.D&PE seg=\" + segment + \" nextDoc return doc=END\");\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      //System.out.println(\"StandardR.D&PE nextDoc seg=\" + segment + \" return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          //System.out.println(\"StandardR.D&PE seg=\" + segment + \" nextDoc return doc=END\");\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      //System.out.println(\"StandardR.D&PE nextDoc seg=\" + segment + \" return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          //System.out.println(\"StandardR.D&PE seg=\" + segment + \" nextDoc return doc=END\");\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      //System.out.println(\"StandardR.D&PE nextDoc seg=\" + segment + \" return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          //System.out.println(\"StandardR.D&PE seg=\" + segment + \" nextDoc return doc=END\");\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      //System.out.println(\"StandardR.D&PE nextDoc seg=\" + segment + \" return doc=\" + doc);\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          //System.out.println(\"StandardR.D&PE seg=\" + segment + \" nextDoc return doc=END\");\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      //System.out.println(\"StandardR.D&PE nextDoc seg=\" + segment + \" return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          //System.out.println(\"StandardR.D&PE seg=\" + segment + \" nextDoc return doc=END\");\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      //System.out.println(\"StandardR.D&PE nextDoc seg=\" + segment + \" return doc=\" + doc);\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          //System.out.println(\"StandardR.D&PE seg=\" + segment + \" nextDoc return doc=END\");\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      //System.out.println(\"StandardR.D&PE nextDoc seg=\" + segment + \" return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          //System.out.println(\"StandardR.D&PE seg=\" + segment + \" nextDoc return doc=END\");\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (skipDocs == null || !skipDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      //System.out.println(\"StandardR.D&PE nextDoc seg=\" + segment + \" return doc=\" + doc);\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsAndPayloadsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          //System.out.println(\"StandardR.D&PE seg=\" + segment + \" nextDoc return doc=END\");\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      //System.out.println(\"StandardR.D&PE nextDoc seg=\" + segment + \" return doc=\" + doc);\n      return doc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      while(true) {\n        if (ord == limit) {\n          //System.out.println(\"StandardR.D&PE seg=\" + segment + \" nextDoc return doc=END\");\n          return doc = NO_MORE_DOCS;\n        }\n\n        ord++;\n\n        // Decode next doc/freq pair\n        final int code = freqIn.readVInt();\n\n        doc += code >>> 1;              // shift off low bit\n        if ((code & 1) != 0) {          // if low bit is set\n          freq = 1;                     // freq is one\n        } else {\n          freq = freqIn.readVInt();     // else read freq\n        }\n        posPendingCount += freq;\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          break;\n        }\n      }\n\n      position = 0;\n\n      //System.out.println(\"StandardR.D&PE nextDoc seg=\" + segment + \" return doc=\" + doc);\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"a37a7b0a78003a4b0171c6c70384c2a70c686670":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a37a7b0a78003a4b0171c6c70384c2a70c686670"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","b1add9ddc0005b07550d4350720aac22dc9886b3"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a37a7b0a78003a4b0171c6c70384c2a70c686670"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a37a7b0a78003a4b0171c6c70384c2a70c686670"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b1add9ddc0005b07550d4350720aac22dc9886b3","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["b1add9ddc0005b07550d4350720aac22dc9886b3","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a37a7b0a78003a4b0171c6c70384c2a70c686670":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","b1add9ddc0005b07550d4350720aac22dc9886b3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["7b91922b55d15444d554721b352861d028eb8278","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a37a7b0a78003a4b0171c6c70384c2a70c686670","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","e79a6d080bdd5b2a8f56342cf571b5476de04180","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","e79a6d080bdd5b2a8f56342cf571b5476de04180","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}