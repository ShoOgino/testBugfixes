{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","commits":[{"id":"aeebe27bce18b879b80f68494c52cda1021b5705","date":1417792137,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","pathOld":"/dev/null","sourceNew":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n        true, true, terms.hasPayloads(),\n        indexOptions, DocValuesType.NONE, -1, null);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79700663e164dece87bed4adfd3e28bab6cb1385","date":1425241849,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","sourceNew":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n        true, true, terms.hasPayloads(),\n        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap());\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","sourceOld":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n        true, true, terms.hasPayloads(),\n        indexOptions, DocValuesType.NONE, -1, null);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","sourceNew":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n        true, true, terms.hasPayloads(),\n        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap());\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","sourceOld":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n        true, true, terms.hasPayloads(),\n        indexOptions, DocValuesType.NONE, -1, null);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","sourceNew":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n        true, true, terms.hasPayloads(),\n        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap());\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","sourceOld":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n        true, true, terms.hasPayloads(),\n        indexOptions, DocValuesType.NONE, -1, null);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","sourceNew":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","sourceOld":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n        true, true, terms.hasPayloads(),\n        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap());\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeba0a4d0845889a402dd225793d62f009d029c9","date":1527938093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","sourceNew":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0, false);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","sourceOld":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab548c8f96022b4780f7500a30b19b4f4a5feeb6","date":1527940044,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","sourceNew":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","sourceOld":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0, false);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","sourceNew":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0, false);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","sourceOld":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","sourceNew":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0, false);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","sourceOld":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","sourceNew":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0, false);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","sourceOld":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TermVectorLeafReader#TermVectorLeafReader(String,Terms).mjava","sourceNew":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0, 0, false);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","sourceOld":"  public TermVectorLeafReader(String field, Terms terms) {\n    fields = new Fields() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singletonList(field).iterator();\n      }\n\n      @Override\n      public Terms terms(String fld) throws IOException {\n        if (!field.equals(fld)) {\n          return null;\n        }\n        return terms;\n      }\n\n      @Override\n      public int size() {\n        return 1;\n      }\n    };\n\n    IndexOptions indexOptions;\n    if (!terms.hasFreqs()) {\n      indexOptions = IndexOptions.DOCS;\n    } else if (!terms.hasPositions()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS;\n    } else if (!terms.hasOffsets()) {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n    } else {\n      indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n    }\n    FieldInfo fieldInfo = new FieldInfo(field, 0,\n                                        true, true, terms.hasPayloads(),\n                                        indexOptions, DocValuesType.NONE, -1, Collections.emptyMap(), 0, 0, false);\n    fieldInfos = new FieldInfos(new FieldInfo[]{fieldInfo});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6652c943595e92c187ee904c382863013eae28f":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"aeebe27bce18b879b80f68494c52cda1021b5705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["aeebe27bce18b879b80f68494c52cda1021b5705","79700663e164dece87bed4adfd3e28bab6cb1385"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["eeba0a4d0845889a402dd225793d62f009d029c9"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["79700663e164dece87bed4adfd3e28bab6cb1385"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"eeba0a4d0845889a402dd225793d62f009d029c9":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"79700663e164dece87bed4adfd3e28bab6cb1385":["aeebe27bce18b879b80f68494c52cda1021b5705"],"f592209545c71895260367152601e9200399776d":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"299a2348fa24151d150182211b6208a38e5e3450":["aeebe27bce18b879b80f68494c52cda1021b5705","79700663e164dece87bed4adfd3e28bab6cb1385"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6652c943595e92c187ee904c382863013eae28f"]},"commit2Childs":{"f6652c943595e92c187ee904c382863013eae28f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aeebe27bce18b879b80f68494c52cda1021b5705":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","79700663e164dece87bed4adfd3e28bab6cb1385","299a2348fa24151d150182211b6208a38e5e3450"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aeebe27bce18b879b80f68494c52cda1021b5705"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["b70042a8a492f7054d480ccdd2be9796510d4327","eeba0a4d0845889a402dd225793d62f009d029c9"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["f6652c943595e92c187ee904c382863013eae28f","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"79700663e164dece87bed4adfd3e28bab6cb1385":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ca792c26af46bd6c4a08d81117c60440cf6a7e3d","299a2348fa24151d150182211b6208a38e5e3450"],"eeba0a4d0845889a402dd225793d62f009d029c9":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"f592209545c71895260367152601e9200399776d":[],"299a2348fa24151d150182211b6208a38e5e3450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","299a2348fa24151d150182211b6208a38e5e3450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}