{"path":"lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight inWeight = query.createWeight(searcher, scoreMode, boost);\n    if (scoreMode.needsScores() == false) {\n      return inWeight;\n    }\n    return new Weight(this) {\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return inWeight.isCacheable(ctx);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Scorer inScorer = inWeight.scorer(context);\n        if (inScorer == null) {\n          return null;\n        }\n\n        int[] tmpDocs = new int[2];\n        float[] tmpScores = new float[2];\n        tmpDocs[0] = -1;\n        DocIdSetIterator it = inScorer.iterator();\n        int i = 1;\n        for (int doc = it.nextDoc(); ; doc = it.nextDoc()) {\n          if (i == tmpDocs.length) {\n            tmpDocs = ArrayUtil.grow(tmpDocs);\n            tmpScores = Arrays.copyOf(tmpScores, tmpDocs.length);\n          }\n          tmpDocs[i] = doc;\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            i++;\n            break;\n          }\n          tmpScores[i] = inScorer.score();\n          i++;\n        }\n        final int[] docs = Arrays.copyOf(tmpDocs, i);\n        final float[] scores = Arrays.copyOf(tmpScores, i);\n\n        return new Scorer(inWeight) {\n\n          int i = 0;\n\n          @Override\n          public int docID() {\n            return docs[i];\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scores[i];\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              @Override\n              public int nextDoc() throws IOException {\n                assert docs[i] != NO_MORE_DOCS;\n                return docs[++i];\n              }\n\n              @Override\n              public int docID() {\n                return docs[i];\n              }\n\n              @Override\n              public long cost() {\n                return docs.length - 2;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                i = Arrays.binarySearch(docs, target);\n                if (i < 0) {\n                  i = -1 - i;\n                }\n                assert docs[i] >= target;\n                return docs[i];\n              }\n            };\n          }\n\n          private int startOfBlock(int target) {\n            int i = Arrays.binarySearch(docs, target);\n            if (i < 0) {\n              i = -1 - i;\n            }\n            return i - i % blockLength;\n          }\n\n          private int endOfBlock(int target) {\n            return Math.min(startOfBlock(target) + blockLength, docs.length - 1);\n          }\n\n          int lastShallowTarget = -1;\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            lastShallowTarget = target;\n            if (target == DocIdSetIterator.NO_MORE_DOCS) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            return docs[endOfBlock(target)] - 1;\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            float max = 0;\n            for (int j = startOfBlock(Math.max(docs[i], lastShallowTarget)); ; ++j) {\n              if (docs[j] > upTo) {\n                break;\n              }\n              max = Math.max(max, scores[j]);\n              if (j == docs.length - 1) {\n                break;\n              }\n            }\n            return max;\n          }\n\n        };\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        inWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return inWeight.explain(context, doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight inWeight = query.createWeight(searcher, scoreMode, boost);\n    if (scoreMode.needsScores() == false) {\n      return inWeight;\n    }\n    return new Weight(this) {\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return inWeight.isCacheable(ctx);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Scorer inScorer = inWeight.scorer(context);\n        if (inScorer == null) {\n          return null;\n        }\n\n        int[] tmpDocs = new int[2];\n        float[] tmpScores = new float[2];\n        tmpDocs[0] = -1;\n        DocIdSetIterator it = inScorer.iterator();\n        int i = 1;\n        for (int doc = it.nextDoc(); ; doc = it.nextDoc()) {\n          tmpDocs = ArrayUtil.grow(tmpDocs, i + 1);\n          tmpScores = ArrayUtil.grow(tmpScores, i + 1);\n          tmpDocs[i] = doc;\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            i++;\n            break;\n          }\n          tmpScores[i] = inScorer.score();\n          i++;\n        }\n        final int[] docs = ArrayUtil.copyOfSubArray(tmpDocs, 0, i);\n        final float[] scores = ArrayUtil.copyOfSubArray(tmpScores, 0, i);\n\n        return new Scorer(inWeight) {\n\n          int i = 0;\n\n          @Override\n          public int docID() {\n            return docs[i];\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scores[i];\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              @Override\n              public int nextDoc() throws IOException {\n                assert docs[i] != NO_MORE_DOCS;\n                return docs[++i];\n              }\n\n              @Override\n              public int docID() {\n                return docs[i];\n              }\n\n              @Override\n              public long cost() {\n                return docs.length - 2;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                i = Arrays.binarySearch(docs, target);\n                if (i < 0) {\n                  i = -1 - i;\n                }\n                assert docs[i] >= target;\n                return docs[i];\n              }\n            };\n          }\n\n          private int startOfBlock(int target) {\n            int i = Arrays.binarySearch(docs, target);\n            if (i < 0) {\n              i = -1 - i;\n            }\n            return i - i % blockLength;\n          }\n\n          private int endOfBlock(int target) {\n            return Math.min(startOfBlock(target) + blockLength, docs.length - 1);\n          }\n\n          int lastShallowTarget = -1;\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            lastShallowTarget = target;\n            if (target == DocIdSetIterator.NO_MORE_DOCS) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            return docs[endOfBlock(target)] - 1;\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            float max = 0;\n            for (int j = startOfBlock(Math.max(docs[i], lastShallowTarget)); ; ++j) {\n              if (docs[j] > upTo) {\n                break;\n              }\n              max = Math.max(max, scores[j]);\n              if (j == docs.length - 1) {\n                break;\n              }\n            }\n            return max;\n          }\n\n        };\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        inWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return inWeight.explain(context, doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight inWeight = query.createWeight(searcher, scoreMode, boost);\n    if (scoreMode.needsScores() == false) {\n      return inWeight;\n    }\n    return new Weight(this) {\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return inWeight.isCacheable(ctx);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Scorer inScorer = inWeight.scorer(context);\n        if (inScorer == null) {\n          return null;\n        }\n\n        int[] tmpDocs = new int[2];\n        float[] tmpScores = new float[2];\n        tmpDocs[0] = -1;\n        DocIdSetIterator it = inScorer.iterator();\n        int i = 1;\n        for (int doc = it.nextDoc(); ; doc = it.nextDoc()) {\n          if (i == tmpDocs.length) {\n            tmpDocs = ArrayUtil.grow(tmpDocs);\n            tmpScores = Arrays.copyOf(tmpScores, tmpDocs.length);\n          }\n          tmpDocs[i] = doc;\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            i++;\n            break;\n          }\n          tmpScores[i] = inScorer.score();\n          i++;\n        }\n        final int[] docs = Arrays.copyOf(tmpDocs, i);\n        final float[] scores = Arrays.copyOf(tmpScores, i);\n\n        return new Scorer(inWeight) {\n\n          int i = 0;\n\n          @Override\n          public int docID() {\n            return docs[i];\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scores[i];\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              @Override\n              public int nextDoc() throws IOException {\n                assert docs[i] != NO_MORE_DOCS;\n                return docs[++i];\n              }\n\n              @Override\n              public int docID() {\n                return docs[i];\n              }\n\n              @Override\n              public long cost() {\n                return docs.length - 2;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                i = Arrays.binarySearch(docs, target);\n                if (i < 0) {\n                  i = -1 - i;\n                }\n                assert docs[i] >= target;\n                return docs[i];\n              }\n            };\n          }\n\n          private int startOfBlock(int target) {\n            int i = Arrays.binarySearch(docs, target);\n            if (i < 0) {\n              i = -1 - i;\n            }\n            return i - i % blockLength;\n          }\n\n          private int endOfBlock(int target) {\n            return Math.min(startOfBlock(target) + blockLength, docs.length - 1);\n          }\n\n          int lastShallowTarget = -1;\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            lastShallowTarget = target;\n            if (target == DocIdSetIterator.NO_MORE_DOCS) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            return docs[endOfBlock(target)] - 1;\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            float max = 0;\n            for (int j = startOfBlock(Math.max(docs[i], lastShallowTarget)); ; ++j) {\n              if (docs[j] > upTo) {\n                break;\n              }\n              max = Math.max(max, scores[j]);\n              if (j == docs.length - 1) {\n                break;\n              }\n            }\n            return max;\n          }\n\n        };\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        inWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return inWeight.explain(context, doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight inWeight = query.createWeight(searcher, scoreMode, boost);\n    if (scoreMode.needsScores() == false) {\n      return inWeight;\n    }\n    return new Weight(this) {\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return inWeight.isCacheable(ctx);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Scorer inScorer = inWeight.scorer(context);\n        if (inScorer == null) {\n          return null;\n        }\n\n        int[] tmpDocs = new int[2];\n        float[] tmpScores = new float[2];\n        tmpDocs[0] = -1;\n        DocIdSetIterator it = inScorer.iterator();\n        int i = 1;\n        for (int doc = it.nextDoc(); ; doc = it.nextDoc()) {\n          tmpDocs = ArrayUtil.grow(tmpDocs, i + 1);\n          tmpScores = ArrayUtil.grow(tmpScores, i + 1);\n          tmpDocs[i] = doc;\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            i++;\n            break;\n          }\n          tmpScores[i] = inScorer.score();\n          i++;\n        }\n        final int[] docs = ArrayUtil.copyOfSubArray(tmpDocs, 0, i);\n        final float[] scores = ArrayUtil.copyOfSubArray(tmpScores, 0, i);\n\n        return new Scorer(inWeight) {\n\n          int i = 0;\n\n          @Override\n          public int docID() {\n            return docs[i];\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scores[i];\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              @Override\n              public int nextDoc() throws IOException {\n                assert docs[i] != NO_MORE_DOCS;\n                return docs[++i];\n              }\n\n              @Override\n              public int docID() {\n                return docs[i];\n              }\n\n              @Override\n              public long cost() {\n                return docs.length - 2;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                i = Arrays.binarySearch(docs, target);\n                if (i < 0) {\n                  i = -1 - i;\n                }\n                assert docs[i] >= target;\n                return docs[i];\n              }\n            };\n          }\n\n          private int startOfBlock(int target) {\n            int i = Arrays.binarySearch(docs, target);\n            if (i < 0) {\n              i = -1 - i;\n            }\n            return i - i % blockLength;\n          }\n\n          private int endOfBlock(int target) {\n            return Math.min(startOfBlock(target) + blockLength, docs.length - 1);\n          }\n\n          int lastShallowTarget = -1;\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            lastShallowTarget = target;\n            if (target == DocIdSetIterator.NO_MORE_DOCS) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            return docs[endOfBlock(target)] - 1;\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            float max = 0;\n            for (int j = startOfBlock(Math.max(docs[i], lastShallowTarget)); ; ++j) {\n              if (docs[j] > upTo) {\n                break;\n              }\n              max = Math.max(max, scores[j]);\n              if (j == docs.length - 1) {\n                break;\n              }\n            }\n            return max;\n          }\n\n        };\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        inWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return inWeight.explain(context, doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight inWeight = query.createWeight(searcher, scoreMode, boost);\n    if (scoreMode.needsScores() == false) {\n      return inWeight;\n    }\n    return new Weight(this) {\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return inWeight.isCacheable(ctx);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Scorer inScorer = inWeight.scorer(context);\n        if (inScorer == null) {\n          return null;\n        }\n\n        int[] tmpDocs = new int[2];\n        float[] tmpScores = new float[2];\n        tmpDocs[0] = -1;\n        DocIdSetIterator it = inScorer.iterator();\n        int i = 1;\n        for (int doc = it.nextDoc(); ; doc = it.nextDoc()) {\n          if (i == tmpDocs.length) {\n            tmpDocs = ArrayUtil.grow(tmpDocs);\n            tmpScores = Arrays.copyOf(tmpScores, tmpDocs.length);\n          }\n          tmpDocs[i] = doc;\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            i++;\n            break;\n          }\n          tmpScores[i] = inScorer.score();\n          i++;\n        }\n        final int[] docs = Arrays.copyOf(tmpDocs, i);\n        final float[] scores = Arrays.copyOf(tmpScores, i);\n\n        return new Scorer(inWeight) {\n\n          int i = 0;\n\n          @Override\n          public int docID() {\n            return docs[i];\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scores[i];\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              @Override\n              public int nextDoc() throws IOException {\n                assert docs[i] != NO_MORE_DOCS;\n                return docs[++i];\n              }\n\n              @Override\n              public int docID() {\n                return docs[i];\n              }\n\n              @Override\n              public long cost() {\n                return docs.length - 2;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                i = Arrays.binarySearch(docs, target);\n                if (i < 0) {\n                  i = -1 - i;\n                }\n                assert docs[i] >= target;\n                return docs[i];\n              }\n            };\n          }\n\n          private int startOfBlock(int target) {\n            int i = Arrays.binarySearch(docs, target);\n            if (i < 0) {\n              i = -1 - i;\n            }\n            return i - i % blockLength;\n          }\n\n          private int endOfBlock(int target) {\n            return Math.min(startOfBlock(target) + blockLength, docs.length - 1);\n          }\n\n          int lastShallowTarget = -1;\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            lastShallowTarget = target;\n            if (target == DocIdSetIterator.NO_MORE_DOCS) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            return docs[endOfBlock(target)] - 1;\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            float max = 0;\n            for (int j = startOfBlock(Math.max(docs[i], lastShallowTarget)); ; ++j) {\n              if (docs[j] > upTo) {\n                break;\n              }\n              max = Math.max(max, scores[j]);\n              if (j == docs.length - 1) {\n                break;\n              }\n            }\n            return max;\n          }\n\n        };\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        inWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return inWeight.explain(context, doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight inWeight = query.createWeight(searcher, scoreMode, boost);\n    if (scoreMode.needsScores() == false) {\n      return inWeight;\n    }\n    return new Weight(this) {\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return inWeight.isCacheable(ctx);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Scorer inScorer = inWeight.scorer(context);\n        if (inScorer == null) {\n          return null;\n        }\n\n        int[] tmpDocs = new int[2];\n        float[] tmpScores = new float[2];\n        tmpDocs[0] = -1;\n        DocIdSetIterator it = inScorer.iterator();\n        int i = 1;\n        for (int doc = it.nextDoc(); ; doc = it.nextDoc()) {\n          tmpDocs = ArrayUtil.grow(tmpDocs, i + 1);\n          tmpScores = ArrayUtil.grow(tmpScores, i + 1);\n          tmpDocs[i] = doc;\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            i++;\n            break;\n          }\n          tmpScores[i] = inScorer.score();\n          i++;\n        }\n        final int[] docs = ArrayUtil.copyOfSubArray(tmpDocs, 0, i);\n        final float[] scores = ArrayUtil.copyOfSubArray(tmpScores, 0, i);\n\n        return new Scorer(inWeight) {\n\n          int i = 0;\n\n          @Override\n          public int docID() {\n            return docs[i];\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scores[i];\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              @Override\n              public int nextDoc() throws IOException {\n                assert docs[i] != NO_MORE_DOCS;\n                return docs[++i];\n              }\n\n              @Override\n              public int docID() {\n                return docs[i];\n              }\n\n              @Override\n              public long cost() {\n                return docs.length - 2;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                i = Arrays.binarySearch(docs, target);\n                if (i < 0) {\n                  i = -1 - i;\n                }\n                assert docs[i] >= target;\n                return docs[i];\n              }\n            };\n          }\n\n          private int startOfBlock(int target) {\n            int i = Arrays.binarySearch(docs, target);\n            if (i < 0) {\n              i = -1 - i;\n            }\n            return i - i % blockLength;\n          }\n\n          private int endOfBlock(int target) {\n            return Math.min(startOfBlock(target) + blockLength, docs.length - 1);\n          }\n\n          int lastShallowTarget = -1;\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            lastShallowTarget = target;\n            if (target == DocIdSetIterator.NO_MORE_DOCS) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            return docs[endOfBlock(target)] - 1;\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            float max = 0;\n            for (int j = startOfBlock(Math.max(docs[i], lastShallowTarget)); ; ++j) {\n              if (docs[j] > upTo) {\n                break;\n              }\n              max = Math.max(max, scores[j]);\n              if (j == docs.length - 1) {\n                break;\n              }\n            }\n            return max;\n          }\n\n        };\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        inWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return inWeight.explain(context, doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight inWeight = query.createWeight(searcher, scoreMode, boost);\n    if (scoreMode.needsScores() == false) {\n      return inWeight;\n    }\n    return new Weight(this) {\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return inWeight.isCacheable(ctx);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Scorer inScorer = inWeight.scorer(context);\n        if (inScorer == null) {\n          return null;\n        }\n\n        int[] tmpDocs = new int[2];\n        float[] tmpScores = new float[2];\n        tmpDocs[0] = -1;\n        DocIdSetIterator it = inScorer.iterator();\n        int i = 1;\n        for (int doc = it.nextDoc(); ; doc = it.nextDoc()) {\n          if (i == tmpDocs.length) {\n            tmpDocs = ArrayUtil.grow(tmpDocs);\n            tmpScores = Arrays.copyOf(tmpScores, tmpDocs.length);\n          }\n          tmpDocs[i] = doc;\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            i++;\n            break;\n          }\n          tmpScores[i] = inScorer.score();\n          i++;\n        }\n        final int[] docs = Arrays.copyOf(tmpDocs, i);\n        final float[] scores = Arrays.copyOf(tmpScores, i);\n\n        return new Scorer(inWeight) {\n\n          int i = 0;\n\n          @Override\n          public int docID() {\n            return docs[i];\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scores[i];\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              @Override\n              public int nextDoc() throws IOException {\n                assert docs[i] != NO_MORE_DOCS;\n                return docs[++i];\n              }\n\n              @Override\n              public int docID() {\n                return docs[i];\n              }\n\n              @Override\n              public long cost() {\n                return docs.length - 2;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                i = Arrays.binarySearch(docs, target);\n                if (i < 0) {\n                  i = -1 - i;\n                }\n                assert docs[i] >= target;\n                return docs[i];\n              }\n            };\n          }\n\n          private int startOfBlock(int target) {\n            int i = Arrays.binarySearch(docs, target);\n            if (i < 0) {\n              i = -1 - i;\n            }\n            return i - i % blockLength;\n          }\n\n          private int endOfBlock(int target) {\n            return Math.min(startOfBlock(target) + blockLength, docs.length - 1);\n          }\n\n          int lastShallowTarget = -1;\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            lastShallowTarget = target;\n            if (target == DocIdSetIterator.NO_MORE_DOCS) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            return docs[endOfBlock(target)] - 1;\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            float max = 0;\n            for (int j = startOfBlock(Math.max(docs[i], lastShallowTarget)); ; ++j) {\n              if (docs[j] > upTo) {\n                break;\n              }\n              max = Math.max(max, scores[j]);\n              if (j == docs.length - 1) {\n                break;\n              }\n            }\n            return max;\n          }\n\n        };\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        inWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return inWeight.explain(context, doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BlockScoreQueryWrapper#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight inWeight = query.createWeight(searcher, scoreMode, boost);\n    if (scoreMode.needsScores() == false) {\n      return inWeight;\n    }\n    return new Weight(this) {\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return inWeight.isCacheable(ctx);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Scorer inScorer = inWeight.scorer(context);\n        if (inScorer == null) {\n          return null;\n        }\n\n        int[] tmpDocs = new int[2];\n        float[] tmpScores = new float[2];\n        tmpDocs[0] = -1;\n        DocIdSetIterator it = inScorer.iterator();\n        int i = 1;\n        for (int doc = it.nextDoc(); ; doc = it.nextDoc()) {\n          tmpDocs = ArrayUtil.grow(tmpDocs, i + 1);\n          tmpScores = ArrayUtil.grow(tmpScores, i + 1);\n          tmpDocs[i] = doc;\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            i++;\n            break;\n          }\n          tmpScores[i] = inScorer.score();\n          i++;\n        }\n        final int[] docs = ArrayUtil.copyOfSubArray(tmpDocs, 0, i);\n        final float[] scores = ArrayUtil.copyOfSubArray(tmpScores, 0, i);\n\n        return new Scorer(inWeight) {\n\n          int i = 0;\n\n          @Override\n          public int docID() {\n            return docs[i];\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scores[i];\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              @Override\n              public int nextDoc() throws IOException {\n                assert docs[i] != NO_MORE_DOCS;\n                return docs[++i];\n              }\n\n              @Override\n              public int docID() {\n                return docs[i];\n              }\n\n              @Override\n              public long cost() {\n                return docs.length - 2;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                i = Arrays.binarySearch(docs, target);\n                if (i < 0) {\n                  i = -1 - i;\n                }\n                assert docs[i] >= target;\n                return docs[i];\n              }\n            };\n          }\n\n          private int startOfBlock(int target) {\n            int i = Arrays.binarySearch(docs, target);\n            if (i < 0) {\n              i = -1 - i;\n            }\n            return i - i % blockLength;\n          }\n\n          private int endOfBlock(int target) {\n            return Math.min(startOfBlock(target) + blockLength, docs.length - 1);\n          }\n\n          int lastShallowTarget = -1;\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            lastShallowTarget = target;\n            if (target == DocIdSetIterator.NO_MORE_DOCS) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            return docs[endOfBlock(target)] - 1;\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            float max = 0;\n            for (int j = startOfBlock(Math.max(docs[i], lastShallowTarget)); ; ++j) {\n              if (docs[j] > upTo) {\n                break;\n              }\n              max = Math.max(max, scores[j]);\n              if (j == docs.length - 1) {\n                break;\n              }\n            }\n            return max;\n          }\n\n        };\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return inWeight.explain(context, doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    final Weight inWeight = query.createWeight(searcher, scoreMode, boost);\n    if (scoreMode.needsScores() == false) {\n      return inWeight;\n    }\n    return new Weight(this) {\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return inWeight.isCacheable(ctx);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Scorer inScorer = inWeight.scorer(context);\n        if (inScorer == null) {\n          return null;\n        }\n\n        int[] tmpDocs = new int[2];\n        float[] tmpScores = new float[2];\n        tmpDocs[0] = -1;\n        DocIdSetIterator it = inScorer.iterator();\n        int i = 1;\n        for (int doc = it.nextDoc(); ; doc = it.nextDoc()) {\n          tmpDocs = ArrayUtil.grow(tmpDocs, i + 1);\n          tmpScores = ArrayUtil.grow(tmpScores, i + 1);\n          tmpDocs[i] = doc;\n          if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n            i++;\n            break;\n          }\n          tmpScores[i] = inScorer.score();\n          i++;\n        }\n        final int[] docs = ArrayUtil.copyOfSubArray(tmpDocs, 0, i);\n        final float[] scores = ArrayUtil.copyOfSubArray(tmpScores, 0, i);\n\n        return new Scorer(inWeight) {\n\n          int i = 0;\n\n          @Override\n          public int docID() {\n            return docs[i];\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scores[i];\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n\n              @Override\n              public int nextDoc() throws IOException {\n                assert docs[i] != NO_MORE_DOCS;\n                return docs[++i];\n              }\n\n              @Override\n              public int docID() {\n                return docs[i];\n              }\n\n              @Override\n              public long cost() {\n                return docs.length - 2;\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                i = Arrays.binarySearch(docs, target);\n                if (i < 0) {\n                  i = -1 - i;\n                }\n                assert docs[i] >= target;\n                return docs[i];\n              }\n            };\n          }\n\n          private int startOfBlock(int target) {\n            int i = Arrays.binarySearch(docs, target);\n            if (i < 0) {\n              i = -1 - i;\n            }\n            return i - i % blockLength;\n          }\n\n          private int endOfBlock(int target) {\n            return Math.min(startOfBlock(target) + blockLength, docs.length - 1);\n          }\n\n          int lastShallowTarget = -1;\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            lastShallowTarget = target;\n            if (target == DocIdSetIterator.NO_MORE_DOCS) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            return docs[endOfBlock(target)] - 1;\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            float max = 0;\n            for (int j = startOfBlock(Math.max(docs[i], lastShallowTarget)); ; ++j) {\n              if (docs[j] > upTo) {\n                break;\n              }\n              max = Math.max(max, scores[j]);\n              if (j == docs.length - 1) {\n                break;\n              }\n            }\n            return max;\n          }\n\n        };\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        inWeight.extractTerms(terms);\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        return inWeight.explain(context, doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["523cc6563c99a55527ef7993efc5413c6648852d","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["523cc6563c99a55527ef7993efc5413c6648852d","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["523cc6563c99a55527ef7993efc5413c6648852d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"523cc6563c99a55527ef7993efc5413c6648852d":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}