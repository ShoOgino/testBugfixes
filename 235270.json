{"path":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","sourceNew":"  public boolean exists(String path) {\n    // back compat behavior\n    File dirFile = new File(path);\n    return dirFile.canRead();\n  }\n\n","sourceOld":"  public boolean exists(String path) {\n    // back compat behavior\n    File dirFile = new File(path);\n    return dirFile.canRead();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","sourceNew":"  public boolean exists(String path) {\n    // back compat behavior\n    File dirFile = new File(path);\n    return dirFile.canRead();\n  }\n\n","sourceOld":"  public boolean exists(String path) {\n    // back compat behavior\n    File dirFile = new File(path);\n    return dirFile.canRead();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","sourceNew":"  public boolean exists(String path) {\n    // back compat behavior\n    File dirFile = new File(path);\n    return dirFile.canRead();\n  }\n\n","sourceOld":"  public boolean exists(String path) {\n    // back compat behavior\n    File dirFile = new File(path);\n    return dirFile.canRead();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","sourceNew":"  /**\n   * Returns true if a Directory exists for a given path.\n   * \n   * @param path\n   * @return\n   */\n  public abstract boolean exists(String path);\n\n","sourceOld":"  public boolean exists(String path) {\n    // back compat behavior\n    File dirFile = new File(path);\n    return dirFile.canRead();\n  }\n\n","bugFix":["ec10d7f440570f813952960ef905138a95114a45"],"bugIntro":["1b9ba9bf38fb09b392a86a15ce4ff88440f3acb9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4281584355bbe0d25a40eb7990ca2184a954bfa6","date":1313725067,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","sourceNew":"  /**\n   * Returns true if a Directory exists for a given path.\n   * \n   */\n  public abstract boolean exists(String path);\n\n","sourceOld":"  /**\n   * Returns true if a Directory exists for a given path.\n   * \n   * @param path\n   * @return\n   */\n  public abstract boolean exists(String path);\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"948cb7389da6d4f397f5a0f89caf885a9033c959","date":1362946471,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","sourceNew":"  /**\n   * Returns true if a Directory exists for a given path.\n   * @throws IOException If there is a low-level I/O error.\n   * \n   */\n  public abstract boolean exists(String path) throws IOException;\n\n","sourceOld":"  /**\n   * Returns true if a Directory exists for a given path.\n   * \n   */\n  public abstract boolean exists(String path);\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b9ba9bf38fb09b392a86a15ce4ff88440f3acb9","date":1518805689,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#exists(String).mjava","sourceNew":"  /**\n   * Returns true if a Directory exists for a given path in the underlying (stable) storage <em>and</em> \n   * contains at least one file.  \n   * Note that the existence of a {@link Directory} <em>Object</em> as returned by a previous call to the \n   * {@link #get} method (on the specified <code>path</code>) is not enough to cause this method to return \n   * true.  Some prior user of that Directory must have written &amp; synced at least one file to that \n   * Directory (and at least one file must still exist)\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract boolean exists(String path) throws IOException;\n\n","sourceOld":"  /**\n   * Returns true if a Directory exists for a given path.\n   * @throws IOException If there is a low-level I/O error.\n   * \n   */\n  public abstract boolean exists(String path) throws IOException;\n\n","bugFix":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b9ba9bf38fb09b392a86a15ce4ff88440f3acb9":["948cb7389da6d4f397f5a0f89caf885a9033c959"],"948cb7389da6d4f397f5a0f89caf885a9033c959":["4281584355bbe0d25a40eb7990ca2184a954bfa6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"4281584355bbe0d25a40eb7990ca2184a954bfa6":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b9ba9bf38fb09b392a86a15ce4ff88440f3acb9"]},"commit2Childs":{"1b9ba9bf38fb09b392a86a15ce4ff88440f3acb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"948cb7389da6d4f397f5a0f89caf885a9033c959":["1b9ba9bf38fb09b392a86a15ce4ff88440f3acb9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"4281584355bbe0d25a40eb7990ca2184a954bfa6":["948cb7389da6d4f397f5a0f89caf885a9033c959"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e22ffe8cc51a892ae103df018822d7873e901c2a":["4281584355bbe0d25a40eb7990ca2184a954bfa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}