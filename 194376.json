{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(reader);\n        Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true);\n        \n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(reader);\n        Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true);\n        \n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n        Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true);\n        \n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = new IndexSearcher(reader);\n        Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true);\n        \n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n        Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n        \n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n        Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true);\n        \n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n        Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n        \n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n        Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n        \n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n        Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n        \n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n        Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n        \n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aeebe27bce18b879b80f68494c52cda1021b5705","date":1417792137,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          final StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n          String text = doc.get(FIELD_NAME);\n          TokenStream tokenStream = TokenSources.getAnyTokenStream(reader, hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n        Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET);\n        \n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          String text = searcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n          TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, text);\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          final StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n          String text = doc.get(FIELD_NAME);\n          TokenStream tokenStream = TokenSources.getAnyTokenStream(reader, hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, null, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          final StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n          String text = doc.get(FIELD_NAME);\n          TokenStream tokenStream = TokenSources.getAnyTokenStream(reader, hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d62e4938659e263e96ae8188e11aea8a940aea5","date":1430230314,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          final int docId = hits.scoreDocs[i].doc;\n          final StoredDocument doc = searcher.doc(docId);\n          String text = doc.get(FIELD_NAME);\n          TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          final StoredDocument doc = searcher.doc(hits.scoreDocs[i].doc);\n          String text = doc.get(FIELD_NAME);\n          TokenStream tokenStream = TokenSources.getAnyTokenStream(reader, hits.scoreDocs[i].doc, FIELD_NAME, doc, analyzer);\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n\n        BooleanQuery.Builder query = new BooleanQuery.Builder();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query.build(), 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          final int docId = hits.scoreDocs[i].doc;\n          final StoredDocument doc = searcher.doc(docId);\n          String text = doc.get(FIELD_NAME);\n          TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n          Highlighter highlighter = getHighlighter(query.build(), FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query, 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          final int docId = hits.scoreDocs[i].doc;\n          final StoredDocument doc = searcher.doc(docId);\n          String text = doc.get(FIELD_NAME);\n          TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n          Highlighter highlighter = getHighlighter(query, FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n\n        BooleanQuery.Builder query = new BooleanQuery.Builder();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query.build(), 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          final int docId = hits.scoreDocs[i].doc;\n          final Document doc = searcher.doc(docId);\n          String text = doc.get(FIELD_NAME);\n          TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n          Highlighter highlighter = getHighlighter(query.build(), FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n\n        BooleanQuery.Builder query = new BooleanQuery.Builder();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query.build(), 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          final int docId = hits.scoreDocs[i].doc;\n          final StoredDocument doc = searcher.doc(docId);\n          String text = doc.get(FIELD_NAME);\n          TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n          Highlighter highlighter = getHighlighter(query.build(), FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testUnRewrittenQuery().mjava","sourceNew":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n\n        BooleanQuery.Builder query = new BooleanQuery.Builder();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query.build(), 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits.value; i++) {\n          final int docId = hits.scoreDocs[i].doc;\n          final Document doc = searcher.doc(docId);\n          String text = doc.get(FIELD_NAME);\n          TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n          Highlighter highlighter = getHighlighter(query.build(), FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testUnRewrittenQuery() throws Exception {\n    final TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        // test to show how rewritten query can still be used\n        searcher = newSearcher(reader);\n\n        BooleanQuery.Builder query = new BooleanQuery.Builder();\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"jf?\")), Occur.SHOULD);\n        query.add(new WildcardQuery(new Term(FIELD_NAME, \"kenned*\")), Occur.SHOULD);\n\n        if (VERBOSE) System.out.println(\"Searching with primitive query\");\n        // forget to set this and...\n        // query=query.rewrite(reader);\n        TopDocs hits = searcher.search(query.build(), 1000);\n\n        // create an instance of the highlighter with the tags used to surround\n        // highlighted text\n        // QueryHighlightExtractor highlighter = new\n        // QueryHighlightExtractor(this,\n        // query, new StandardAnalyzer(TEST_VERSION));\n\n        int maxNumFragmentsRequired = 3;\n\n        for (int i = 0; i < hits.totalHits; i++) {\n          final int docId = hits.scoreDocs[i].doc;\n          final Document doc = searcher.doc(docId);\n          String text = doc.get(FIELD_NAME);\n          TokenStream tokenStream = getAnyTokenStream(FIELD_NAME, docId);\n          Highlighter highlighter = getHighlighter(query.build(), FIELD_NAME, HighlighterTest.this, false);\n\n          highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n          String highlightedText = highlighter.getBestFragments(tokenStream, text,\n              maxNumFragmentsRequired, \"...\");\n\n          if (VERBOSE) System.out.println(highlightedText);\n        }\n        // We expect to have zero highlights if the query is multi-terms and is\n        // not\n        // rewritten!\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 0);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["eafa8c5eabc3dacd34680054e6a33bda024080ac","c83d6c4335f31cae14f625a222bc842f20073dcd"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"5d62e4938659e263e96ae8188e11aea8a940aea5":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"aeebe27bce18b879b80f68494c52cda1021b5705":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["aeebe27bce18b879b80f68494c52cda1021b5705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"5d62e4938659e263e96ae8188e11aea8a940aea5":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"aeebe27bce18b879b80f68494c52cda1021b5705":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","aeebe27bce18b879b80f68494c52cda1021b5705"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}