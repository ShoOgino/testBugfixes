{"path":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // its a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if its e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // its a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if its e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e07c409cff8701e4dc3d45934b021a949a5a8822","date":1475694629,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d81baa64023bbb9b43f6d929ee168b105940d30","date":1486492702,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9e336b9a6f5841091d9af651e8a219656360379","date":1501525451,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\") final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed","date":1590169220,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\") final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\") final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        // it's a single-valued numeric field: we must currently create insanity :(\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","e07c409cff8701e4dc3d45934b021a949a5a8822"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["3d81baa64023bbb9b43f6d929ee168b105940d30","d9e336b9a6f5841091d9af651e8a219656360379"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["e07c409cff8701e4dc3d45934b021a949a5a8822"],"d9e336b9a6f5841091d9af651e8a219656360379":["3d81baa64023bbb9b43f6d929ee168b105940d30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["d9e336b9a6f5841091d9af651e8a219656360379"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed"]},"commit2Childs":{"ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3d81baa64023bbb9b43f6d929ee168b105940d30"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"3d81baa64023bbb9b43f6d929ee168b105940d30":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","d9e336b9a6f5841091d9af651e8a219656360379"],"d9e336b9a6f5841091d9af651e8a219656360379":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e07c409cff8701e4dc3d45934b021a949a5a8822"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}