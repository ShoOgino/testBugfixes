{"path":"backwards/src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","pathOld":"/dev/null","sourceNew":"  public void testWrappedPhrase() throws IOException {\n    query.add(new Term(\"repeated\", \"first\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.add(new Term(\"repeated\", \"second\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.setSlop(100);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 100 just right\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n    query.setSlop(99);\n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 99 not enough\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestPhraseQuery#testWrappedPhrase().mjava","sourceNew":"  public void testWrappedPhrase() throws IOException {\n    query.add(new Term(\"repeated\", \"first\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.add(new Term(\"repeated\", \"second\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.setSlop(100);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 100 just right\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n    query.setSlop(99);\n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 99 not enough\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n  }\n\n","sourceOld":"  public void testWrappedPhrase() throws IOException {\n    query.add(new Term(\"repeated\", \"first\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.add(new Term(\"repeated\", \"second\"));\n    query.add(new Term(\"repeated\", \"part\"));\n    query.setSlop(100);\n\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 100 just right\", 1, hits.length);\n    QueryUtils.check(query,searcher);\n\n    query.setSlop(99);\n\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"slop of 99 not enough\", 0, hits.length);\n    QueryUtils.check(query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}