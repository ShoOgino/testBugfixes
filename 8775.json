{"path":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqHandlerAPIs().mjava","commits":[{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqHandlerAPIs().mjava","pathOld":"/dev/null","sourceNew":"  private void testReqHandlerAPIs() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String testServerBaseUrl = urls.get(random().nextInt(urls.size()));\n    TestSolrConfigHandler.reqhandlertests(writeHarness, testServerBaseUrl , cloudClient);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e78c35bca3e32dfc7a695136fa2b5de1ae135c22","date":1441118240,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqHandlerAPIs().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqHandlerAPIs().mjava","sourceNew":"  private void testReqHandlerAPIs() throws Exception {\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.reqhandlertests(writeHarness, testServerBaseUrl , cloudClient);\n  }\n\n","sourceOld":"  private void testReqHandlerAPIs() throws Exception {\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String testServerBaseUrl = urls.get(random().nextInt(urls.size()));\n    TestSolrConfigHandler.reqhandlertests(writeHarness, testServerBaseUrl , cloudClient);\n  }\n\n","bugFix":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0853c291617e0f9d0474b720bf609eb350e9225c","date":1514464265,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqHandlerAPIs().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqHandlerAPIs().mjava","sourceNew":"  private void testReqHandlerAPIs() throws Exception {\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = randomRestTestHarness();\n    TestSolrConfigHandler.reqhandlertests(writeHarness, testServerBaseUrl , cloudClient);\n  }\n\n","sourceOld":"  private void testReqHandlerAPIs() throws Exception {\n    String testServerBaseUrl = getRandomServer(cloudClient,\"collection1\");\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    TestSolrConfigHandler.reqhandlertests(writeHarness, testServerBaseUrl , cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0853c291617e0f9d0474b720bf609eb350e9225c":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"e78c35bca3e32dfc7a695136fa2b5de1ae135c22":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0853c291617e0f9d0474b720bf609eb350e9225c"]},"commit2Childs":{"0853c291617e0f9d0474b720bf609eb350e9225c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e78c35bca3e32dfc7a695136fa2b5de1ae135c22":["0853c291617e0f9d0474b720bf609eb350e9225c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}