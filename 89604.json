{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext).mjava","commits":[{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(reader);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(reader);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#getSpans(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context, acceptDocs);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context, acceptDocs);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return (clauses.get(0)).getSpans(context);\n\n    return new Spans() {\n        private SpanQueue queue = null;\n\n        private boolean initSpanQueue(int target) throws IOException {\n          queue = new SpanQueue(clauses.size());\n          Iterator<SpanQuery> i = clauses.iterator();\n          while (i.hasNext()) {\n            Spans spans = i.next().getSpans(context);\n            if (   ((target == -1) && spans.next())\n                || ((target != -1) && spans.skipTo(target))) {\n              queue.add(spans);\n            }\n          }\n          return queue.size() != 0;\n        }\n\n        @Override\n        public boolean next() throws IOException {\n          if (queue == null) {\n            return initSpanQueue(-1);\n          }\n\n          if (queue.size() == 0) { // all done\n            return false;\n          }\n\n          if (top().next()) { // move to next\n            queue.updateTop();\n            return true;\n          }\n\n          queue.pop();  // exhausted a clause\n          return queue.size() != 0;\n        }\n\n        private Spans top() { return queue.top(); }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (queue == null) {\n            return initSpanQueue(target);\n          }\n  \n          boolean skipCalled = false;\n          while (queue.size() != 0 && top().doc() < target) {\n            if (top().skipTo(target)) {\n              queue.updateTop();\n            } else {\n              queue.pop();\n            }\n            skipCalled = true;\n          }\n  \n          if (skipCalled) {\n            return queue.size() != 0;\n          }\n          return next();\n        }\n\n        @Override\n        public int doc() { return top().doc(); }\n        @Override\n        public int start() { return top().start(); }\n        @Override\n        public int end() { return top().end(); }\n\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        Spans theTop = top();\n        if (theTop != null && theTop.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(theTop.getPayload());\n        }\n        return result;\n      }\n\n      @Override\n      public boolean isPayloadAvailable() {\n        Spans top = top();\n        return top != null && top.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\"+SpanOrQuery.this+\")@\"+\n            ((queue == null)?\"START\"\n             :(queue.size()>0?(doc()+\":\"+start()+\"-\"+end()):\"END\"));\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["c8323d210478d76a02372693d254b69aac614689"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8323d210478d76a02372693d254b69aac614689","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}