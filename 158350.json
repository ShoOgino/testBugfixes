{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","commits":[{"id":"621de970aff856ee9aecb707681598307d510ae8","date":1303659945,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3044\n  public void testAttributeReuse() throws Exception {\n    assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n    ThaiAnalyzer analyzer = new ThaiAnalyzer(Version.LUCENE_30);\n    // just consume\n    TokenStream ts = analyzer.reusableTokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n    // this consumer adds flagsAtt, which this analyzer does not use. \n    ts = analyzer.reusableTokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    ts.addAttribute(FlagsAttribute.class);\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d5df8e07c035d62d982894b439322da40e0938","date":1303923139,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3044\n  public void testAttributeReuse() throws Exception {\n    assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n    ThaiAnalyzer analyzer = new ThaiAnalyzer(Version.LUCENE_30);\n    // just consume\n    TokenStream ts = analyzer.reusableTokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n    // this consumer adds flagsAtt, which this analyzer does not use. \n    ts = analyzer.reusableTokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    ts.addAttribute(FlagsAttribute.class);\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3044\n  public void testAttributeReuse() throws Exception {\n    assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n    ThaiAnalyzer analyzer = new ThaiAnalyzer(Version.LUCENE_30);\n    // just consume\n    TokenStream ts = analyzer.reusableTokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n    // this consumer adds flagsAtt, which this analyzer does not use. \n    ts = analyzer.reusableTokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    ts.addAttribute(FlagsAttribute.class);\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3044\n  public void testAttributeReuse() throws Exception {\n    assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n    ThaiAnalyzer analyzer = new ThaiAnalyzer(Version.LUCENE_30);\n    // just consume\n    TokenStream ts = analyzer.reusableTokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n    // this consumer adds flagsAtt, which this analyzer does not use. \n    ts = analyzer.reusableTokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    ts.addAttribute(FlagsAttribute.class);\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","sourceNew":"  // LUCENE-3044\n  public void testAttributeReuse() throws Exception {\n    assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n    ThaiAnalyzer analyzer = new ThaiAnalyzer(Version.LUCENE_30);\n    // just consume\n    TokenStream ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n    // this consumer adds flagsAtt, which this analyzer does not use. \n    ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    ts.addAttribute(FlagsAttribute.class);\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n  }\n\n","sourceOld":"  // LUCENE-3044\n  public void testAttributeReuse() throws Exception {\n    assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n    ThaiAnalyzer analyzer = new ThaiAnalyzer(Version.LUCENE_30);\n    // just consume\n    TokenStream ts = analyzer.reusableTokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n    // this consumer adds flagsAtt, which this analyzer does not use. \n    ts = analyzer.reusableTokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    ts.addAttribute(FlagsAttribute.class);\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf703a22c95bad237d2d787a15bfbbc329df81c0","date":1323380832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","sourceNew":"  // LUCENE-3044\n  public void testAttributeReuse() throws Exception {\n    ThaiAnalyzer analyzer = new ThaiAnalyzer(Version.LUCENE_30);\n    // just consume\n    TokenStream ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n    // this consumer adds flagsAtt, which this analyzer does not use. \n    ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    ts.addAttribute(FlagsAttribute.class);\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n  }\n\n","sourceOld":"  // LUCENE-3044\n  public void testAttributeReuse() throws Exception {\n    assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n    ThaiAnalyzer analyzer = new ThaiAnalyzer(Version.LUCENE_30);\n    // just consume\n    TokenStream ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n    // this consumer adds flagsAtt, which this analyzer does not use. \n    ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    ts.addAttribute(FlagsAttribute.class);\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","sourceNew":"  // LUCENE-3044\n  public void testAttributeReuse() throws Exception {\n    ThaiAnalyzer analyzer = new ThaiAnalyzer(Version.LUCENE_30);\n    // just consume\n    TokenStream ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n    // this consumer adds flagsAtt, which this analyzer does not use. \n    ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    ts.addAttribute(FlagsAttribute.class);\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n  }\n\n","sourceOld":"  // LUCENE-3044\n  public void testAttributeReuse() throws Exception {\n    assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n    ThaiAnalyzer analyzer = new ThaiAnalyzer(Version.LUCENE_30);\n    // just consume\n    TokenStream ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n    // this consumer adds flagsAtt, which this analyzer does not use. \n    ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    ts.addAttribute(FlagsAttribute.class);\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testAttributeReuse().mjava","sourceNew":"  // LUCENE-3044\n  public void testAttributeReuse() throws Exception {\n    ThaiAnalyzer analyzer = new ThaiAnalyzer(Version.LUCENE_30);\n    // just consume\n    TokenStream ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n    // this consumer adds flagsAtt, which this analyzer does not use. \n    ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    ts.addAttribute(FlagsAttribute.class);\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n  }\n\n","sourceOld":"  // LUCENE-3044\n  public void testAttributeReuse() throws Exception {\n    ThaiAnalyzer analyzer = new ThaiAnalyzer(Version.LUCENE_30);\n    // just consume\n    TokenStream ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n    // this consumer adds flagsAtt, which this analyzer does not use. \n    ts = analyzer.tokenStream(\"dummy\", new StringReader(\"ภาษาไทย\"));\n    ts.addAttribute(FlagsAttribute.class);\n    assertTokenStreamContents(ts, new String[] { \"ภาษา\", \"ไทย\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bf703a22c95bad237d2d787a15bfbbc329df81c0"],"621de970aff856ee9aecb707681598307d510ae8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d5df8e07c035d62d982894b439322da40e0938":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","621de970aff856ee9aecb707681598307d510ae8"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["69e043c521d4e8db770cc140c63f5ef51f03426a","bf703a22c95bad237d2d787a15bfbbc329df81c0"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","621de970aff856ee9aecb707681598307d510ae8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","621de970aff856ee9aecb707681598307d510ae8"],"bf703a22c95bad237d2d787a15bfbbc329df81c0":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["621de970aff856ee9aecb707681598307d510ae8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"621de970aff856ee9aecb707681598307d510ae8":["d4d5df8e07c035d62d982894b439322da40e0938","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","69e043c521d4e8db770cc140c63f5ef51f03426a"],"d4d5df8e07c035d62d982894b439322da40e0938":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["621de970aff856ee9aecb707681598307d510ae8","d4d5df8e07c035d62d982894b439322da40e0938","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"bf703a22c95bad237d2d787a15bfbbc329df81c0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","bf703a22c95bad237d2d787a15bfbbc329df81c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d4d5df8e07c035d62d982894b439322da40e0938","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}