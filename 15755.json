{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#assertConsistentReplicas(Slice).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#assertConsistentReplicas(Slice).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#assertConsistentReplicas(Slice).mjava","sourceNew":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#assertConsistentReplicas(Slice).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#assertConsistentReplicas(Slice).mjava","sourceNew":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#assertConsistentReplicas(Slice).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#assertConsistentReplicas(Slice).mjava","sourceNew":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      if (log.isInfoEnabled()) {\n        log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      }\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":"  private int assertConsistentReplicas(Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}