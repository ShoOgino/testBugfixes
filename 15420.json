{"path":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(TermAttribute.class)) {\n        termAtt = buffer.getAttribute(TermAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.term();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            Query currentQuery = newTermQuery(\n                new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.term();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String).mjava","pathOld":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(TermAttribute.class)) {\n        termAtt = buffer.getAttribute(TermAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.term();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            Query currentQuery = newTermQuery(\n                new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.term();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(TermAttribute.class)) {\n        termAtt = buffer.getAttribute(TermAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      String term = null;\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        term = termAtt.term();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, term));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(true);\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            Query currentQuery = newTermQuery(\n                new Term(field, term));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, term));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.term();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, term),position);\n          } else {\n            pq.add(new Term(field, term));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}