{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","commits":[{"id":"8728c3940d6ab6d12b8afb3369f180328b2b2ef3","date":1446040476,"type":1,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointInPolygonQuery#computeBBox(double[],double[]).mjava","sourceNew":"  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n\n    return new GeoRect(GeoUtils.unscaleLon(GeoUtils.scaleLon(minLon)), GeoUtils.unscaleLon(GeoUtils.scaleLon(maxLon)),\n        GeoUtils.unscaleLat(GeoUtils.scaleLat(minLat)), GeoUtils.unscaleLat(GeoUtils.scaleLat(maxLat)));\n  }\n\n","sourceOld":"  private static GeoRect computeBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n\n    return new GeoRect(minLon, maxLon, minLat, maxLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33bb6bd7295e66f93f182556f5353b97243e62ba","date":1449525768,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /**\n   * Compute Bounding Box for a polygon using WGS-84 parameters\n   */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n\n    return new GeoRect(GeoUtils.unscaleLon(GeoUtils.scaleLon(minLon)), GeoUtils.unscaleLon(GeoUtils.scaleLon(maxLon)),\n        GeoUtils.unscaleLat(GeoUtils.scaleLat(minLat)), GeoUtils.unscaleLat(GeoUtils.scaleLat(maxLat)));\n  }\n\n","sourceOld":"  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n\n    return new GeoRect(GeoUtils.unscaleLon(GeoUtils.scaleLon(minLon)), GeoUtils.unscaleLon(GeoUtils.scaleLon(maxLon)),\n        GeoUtils.unscaleLat(GeoUtils.scaleLat(minLat)), GeoUtils.unscaleLat(GeoUtils.scaleLat(maxLat)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04995b00da1e08edb88b14c5a9789d741de5c51d","date":1453863716,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /**\n   * Compute Bounding Box for a polygon using WGS-84 parameters\n   */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(minLon - TOLERANCE, maxLon + TOLERANCE, minLat - TOLERANCE, maxLat + TOLERANCE);\n  }\n\n","sourceOld":"  /**\n   * Compute Bounding Box for a polygon using WGS-84 parameters\n   */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n\n    return new GeoRect(GeoUtils.unscaleLon(GeoUtils.scaleLon(minLon)), GeoUtils.unscaleLon(GeoUtils.scaleLon(maxLon)),\n        GeoUtils.unscaleLat(GeoUtils.scaleLat(minLat)), GeoUtils.unscaleLat(GeoUtils.scaleLat(maxLat)));\n  }\n\n","bugFix":["8728c3940d6ab6d12b8afb3369f180328b2b2ef3","e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b40ebb10ce3de00cc12680ddbced2e2004391a7","date":1454568229,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /**\n   * Compute Bounding Box for a polygon using WGS-84 parameters\n   */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(Math.max(minLon - TOLERANCE, MIN_LON_INCL), Math.min(maxLon + TOLERANCE, MAX_LON_INCL),\n        Math.max(minLat - TOLERANCE, MIN_LAT_INCL), Math.min(maxLat + TOLERANCE, MAX_LAT_INCL));\n  }\n\n","sourceOld":"  /**\n   * Compute Bounding Box for a polygon using WGS-84 parameters\n   */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(minLon - TOLERANCE, maxLon + TOLERANCE, minLat - TOLERANCE, maxLat + TOLERANCE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(max(minLon - TOLERANCE, MIN_LON_INCL), min(maxLon + TOLERANCE, MAX_LON_INCL),\n        max(minLat - TOLERANCE, MIN_LAT_INCL), min(maxLat + TOLERANCE, MAX_LAT_INCL));\n  }\n\n","sourceOld":"  /**\n   * Compute Bounding Box for a polygon using WGS-84 parameters\n   */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(Math.max(minLon - TOLERANCE, MIN_LON_INCL), Math.min(maxLon + TOLERANCE, MAX_LON_INCL),\n        Math.max(minLat - TOLERANCE, MIN_LAT_INCL), Math.min(maxLat + TOLERANCE, MAX_LAT_INCL));\n  }\n\n","bugFix":null,"bugIntro":["ca8abb1a4010d2a9e71b0162d3600e898a8a4f56","ca8abb1a4010d2a9e71b0162d3600e898a8a4f56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /**\n   * Compute Bounding Box for a polygon using WGS-84 parameters\n   */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(Math.max(minLon - TOLERANCE, MIN_LON_INCL), Math.min(maxLon + TOLERANCE, MAX_LON_INCL),\n        Math.max(minLat - TOLERANCE, MIN_LAT_INCL), Math.min(maxLat + TOLERANCE, MAX_LAT_INCL));\n  }\n\n","sourceOld":"  /**\n   * Compute Bounding Box for a polygon using WGS-84 parameters\n   */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(minLon - TOLERANCE, maxLon + TOLERANCE, minLat - TOLERANCE, maxLat + TOLERANCE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoUtils#polyToBBox(double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#polyToBBox(double[],double[]).mjava","sourceNew":"  /** Compute Bounding Box for a polygon using WGS-84 parameters */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = min(polyLons[i], minLon);\n      maxLon = max(polyLons[i], maxLon);\n      minLat = min(polyLats[i], minLat);\n      maxLat = max(polyLats[i], maxLat);\n    }\n    // expand bounding box by TOLERANCE factor to handle round-off error\n    return new GeoRect(max(minLon - TOLERANCE, MIN_LON_INCL), min(maxLon + TOLERANCE, MAX_LON_INCL),\n        max(minLat - TOLERANCE, MIN_LAT_INCL), min(maxLat + TOLERANCE, MAX_LAT_INCL));\n  }\n\n","sourceOld":"  /**\n   * Compute Bounding Box for a polygon using WGS-84 parameters\n   */\n  public static GeoRect polyToBBox(double[] polyLons, double[] polyLats) {\n    if (polyLons.length != polyLats.length) {\n      throw new IllegalArgumentException(\"polyLons and polyLats must be equal length\");\n    }\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n\n    for (int i=0;i<polyLats.length;i++) {\n      if (GeoUtils.isValidLon(polyLons[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLons[\" + i + \"]=\" + polyLons[i]);\n      }\n      if (GeoUtils.isValidLat(polyLats[i]) == false) {\n        throw new IllegalArgumentException(\"invalid polyLats[\" + i + \"]=\" + polyLats[i]);\n      }\n      minLon = Math.min(polyLons[i], minLon);\n      maxLon = Math.max(polyLons[i], maxLon);\n      minLat = Math.min(polyLats[i], minLat);\n      maxLat = Math.max(polyLats[i], maxLat);\n    }\n\n    return new GeoRect(GeoUtils.unscaleLon(GeoUtils.scaleLon(minLon)), GeoUtils.unscaleLon(GeoUtils.scaleLon(maxLon)),\n        GeoUtils.unscaleLat(GeoUtils.scaleLat(minLat)), GeoUtils.unscaleLat(GeoUtils.scaleLat(maxLat)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["33bb6bd7295e66f93f182556f5353b97243e62ba","937923083e4d137932336fc80f3d78758ff698a6"],"8728c3940d6ab6d12b8afb3369f180328b2b2ef3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1704c078ec59838c9d95d5bf5738b393b537494":["04995b00da1e08edb88b14c5a9789d741de5c51d","5b40ebb10ce3de00cc12680ddbced2e2004391a7"],"5b40ebb10ce3de00cc12680ddbced2e2004391a7":["04995b00da1e08edb88b14c5a9789d741de5c51d"],"937923083e4d137932336fc80f3d78758ff698a6":["5b40ebb10ce3de00cc12680ddbced2e2004391a7"],"04995b00da1e08edb88b14c5a9789d741de5c51d":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["8728c3940d6ab6d12b8afb3369f180328b2b2ef3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8728c3940d6ab6d12b8afb3369f180328b2b2ef3"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"8728c3940d6ab6d12b8afb3369f180328b2b2ef3":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"5b40ebb10ce3de00cc12680ddbced2e2004391a7":["b1704c078ec59838c9d95d5bf5738b393b537494","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04995b00da1e08edb88b14c5a9789d741de5c51d":["b1704c078ec59838c9d95d5bf5738b393b537494","5b40ebb10ce3de00cc12680ddbced2e2004391a7"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","04995b00da1e08edb88b14c5a9789d741de5c51d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}