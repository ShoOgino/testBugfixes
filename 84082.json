{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","commits":[{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient, shardLeadersOnly);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient, shardLeadersOnly);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"291857aeee5ec20518ddce131ac4362c0075ebe1","date":1467882201,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient,\n          shardLeadersOnly, directUpdatesToLeadersOnly);\n    }\n\n","sourceOld":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient, shardLeadersOnly);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12df104910eced8075ef09fb442e2db6273d6741","date":1475520560,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly);\n    }\n\n","sourceOld":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient,\n          shardLeadersOnly, directUpdatesToLeadersOnly);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly);\n    }\n\n","sourceOld":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient, shardLeadersOnly);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      if (stateProvider == null) {\n        stateProvider = new ZkClientClusterStateProvider(zkHosts, zkChroot);\n      }\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly, stateProvider);\n    }\n\n","sourceOld":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly);\n    }\n\n","bugFix":null,"bugIntro":["c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      if (stateProvider == null) {\n        stateProvider = new ZkClientClusterStateProvider(zkHosts, zkChroot);\n      }\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly, stateProvider);\n    }\n\n","sourceOld":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      if (stateProvider == null) {\n        if (!zkHosts.isEmpty()) {\n          stateProvider = new ZkClientClusterStateProvider(zkHosts, zkChroot);\n        }\n        else if (!this.solrUrls.isEmpty()) {\n          try {\n            stateProvider = new HttpClusterStateProvider(solrUrls, httpClient);\n          } catch (Exception e) {\n            throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n                + \"Solr server(s), \"  + solrUrls + \", down?)\", e);\n          }\n        } else {\n          throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n        }\n      }\n      return new CloudSolrClient(zkHosts, zkChroot, solrUrls, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly, stateProvider);\n    }\n\n","sourceOld":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      if (stateProvider == null) {\n        stateProvider = new ZkClientClusterStateProvider(zkHosts, zkChroot);\n      }\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly, stateProvider);\n    }\n\n","bugFix":null,"bugIntro":["c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      if (stateProvider == null) {\n        if (!zkHosts.isEmpty()) {\n          stateProvider = new ZkClientClusterStateProvider(zkHosts, zkChroot);\n        }\n        else if (!this.solrUrls.isEmpty()) {\n          try {\n            stateProvider = new HttpClusterStateProvider(solrUrls, httpClient);\n          } catch (Exception e) {\n            throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n                + \"Solr server(s), \"  + solrUrls + \", down?)\", e);\n          }\n        } else {\n          throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n        }\n      }\n      return new CloudSolrClient(zkHosts, zkChroot, solrUrls, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly, stateProvider);\n    }\n\n","sourceOld":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      if (stateProvider == null) {\n        stateProvider = new ZkClientClusterStateProvider(zkHosts, zkChroot);\n      }\n      return new CloudSolrClient(zkHosts, zkChroot, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly, stateProvider);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c07dc645ff236a7d51da2a5ef49a948dfbf8610c","date":1498242650,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      if (stateProvider == null) {\n        if (!zkHosts.isEmpty()) {\n          stateProvider = new ZkClientClusterStateProvider(zkHosts, zkChroot);\n        }\n        else if (!this.solrUrls.isEmpty()) {\n          try {\n            stateProvider = new HttpClusterStateProvider(solrUrls, httpClient);\n          } catch (Exception e) {\n            throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n                + \"Solr server(s), \"  + solrUrls + \", down?)\", e);\n          }\n        } else {\n          throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n        }\n      }\n      return new CloudSolrClient(this);\n    }\n\n","sourceOld":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      if (stateProvider == null) {\n        if (!zkHosts.isEmpty()) {\n          stateProvider = new ZkClientClusterStateProvider(zkHosts, zkChroot);\n        }\n        else if (!this.solrUrls.isEmpty()) {\n          try {\n            stateProvider = new HttpClusterStateProvider(solrUrls, httpClient);\n          } catch (Exception e) {\n            throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n                + \"Solr server(s), \"  + solrUrls + \", down?)\", e);\n          }\n        } else {\n          throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n        }\n      }\n      return new CloudSolrClient(zkHosts, zkChroot, solrUrls, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly, stateProvider);\n    }\n\n","bugFix":["a64b273d51a6540272668680ece9f8b686ff0004","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      if (stateProvider == null) {\n        if (!zkHosts.isEmpty()) {\n          stateProvider = new ZkClientClusterStateProvider(zkHosts, zkChroot);\n        }\n        else if (!this.solrUrls.isEmpty()) {\n          try {\n            stateProvider = new HttpClusterStateProvider(solrUrls, httpClient);\n          } catch (Exception e) {\n            throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n                + \"Solr server(s), \"  + solrUrls + \", down?)\", e);\n          }\n        } else {\n          throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n        }\n      }\n      return new CloudSolrClient(this);\n    }\n\n","sourceOld":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      if (stateProvider == null) {\n        if (!zkHosts.isEmpty()) {\n          stateProvider = new ZkClientClusterStateProvider(zkHosts, zkChroot);\n        }\n        else if (!this.solrUrls.isEmpty()) {\n          try {\n            stateProvider = new HttpClusterStateProvider(solrUrls, httpClient);\n          } catch (Exception e) {\n            throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n                + \"Solr server(s), \"  + solrUrls + \", down?)\", e);\n          }\n        } else {\n          throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n        }\n      }\n      return new CloudSolrClient(zkHosts, zkChroot, solrUrls, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly, stateProvider);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      if (stateProvider == null) {\n        if (!zkHosts.isEmpty()) {\n          stateProvider = new ZkClientClusterStateProvider(zkHosts, zkChroot);\n        }\n        else if (!this.solrUrls.isEmpty()) {\n          try {\n            stateProvider = new HttpClusterStateProvider(solrUrls, httpClient);\n          } catch (Exception e) {\n            throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n                + \"Solr server(s), \"  + solrUrls + \", down?)\", e);\n          }\n        } else {\n          throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n        }\n      }\n      return new CloudSolrClient(this);\n    }\n\n","sourceOld":"    /**\n     * Create a {@link CloudSolrClient} based on the provided configuration.\n     */\n    public CloudSolrClient build() {\n      if (stateProvider == null) {\n        if (!zkHosts.isEmpty()) {\n          stateProvider = new ZkClientClusterStateProvider(zkHosts, zkChroot);\n        }\n        else if (!this.solrUrls.isEmpty()) {\n          try {\n            stateProvider = new HttpClusterStateProvider(solrUrls, httpClient);\n          } catch (Exception e) {\n            throw new RuntimeException(\"Couldn't initialize a HttpClusterStateProvider (is/are the \"\n                + \"Solr server(s), \"  + solrUrls + \", down?)\", e);\n          }\n        } else {\n          throw new IllegalArgumentException(\"Both zkHosts and solrUrl cannot be null.\");\n        }\n      }\n      return new CloudSolrClient(zkHosts, zkChroot, solrUrls, httpClient, loadBalancedSolrClient, lbClientBuilder,\n          shardLeadersOnly, directUpdatesToLeadersOnly, stateProvider);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a64b273d51a6540272668680ece9f8b686ff0004":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["12df104910eced8075ef09fb442e2db6273d6741"],"12df104910eced8075ef09fb442e2db6273d6741":["291857aeee5ec20518ddce131ac4362c0075ebe1"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"28288370235ed02234a64753cdbf0c6ec096304a":["a64b273d51a6540272668680ece9f8b686ff0004","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","12df104910eced8075ef09fb442e2db6273d6741"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["a64b273d51a6540272668680ece9f8b686ff0004"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"a64b273d51a6540272668680ece9f8b686ff0004":["28288370235ed02234a64753cdbf0c6ec096304a","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004","727bb765ff2542275f6d31f67be18d7104bae148"],"12df104910eced8075ef09fb442e2db6273d6741":["3eaeb36333664e8cb92108ef03f68a7b90beb759","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","291857aeee5ec20518ddce131ac4362c0075ebe1"],"291857aeee5ec20518ddce131ac4362c0075ebe1":["12df104910eced8075ef09fb442e2db6273d6741"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}