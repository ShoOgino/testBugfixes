{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","commits":[{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"/dev/null","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = maxDelta < 0 ? 64 : DirectWriter.bitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        final int bpv = delta < 0 ? 64 : DirectWriter.bitsRequired(delta);\n        meta.writeVInt(bpv);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, bpv);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = DirectWriter.bitsRequired(uniqueValues.size() - 1);\n        meta.writeVInt(bitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, bitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45b4d1a00eca88b48ea7e1ffae3041b63da020e","date":1402400148,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = maxDelta < 0 ? 64 : DirectWriter.bitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        final int bpv = delta < 0 ? 64 : DirectWriter.bitsRequired(delta);\n        meta.writeVInt(bpv);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, bpv);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        Arrays.sort(decode);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = DirectWriter.bitsRequired(uniqueValues.size() - 1);\n        meta.writeVInt(bitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, bitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = maxDelta < 0 ? 64 : DirectWriter.bitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        final int bpv = delta < 0 ? 64 : DirectWriter.bitsRequired(delta);\n        meta.writeVInt(bpv);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, bpv);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = DirectWriter.bitsRequired(uniqueValues.size() - 1);\n        meta.writeVInt(bitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, bitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3f1f6da1318f50d5d7c35654b84bf25cddc7ecf","date":1402500925,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n    final int deltaBitsRequired = delta < 0 ? 64 : DirectWriter.bitsRequired(delta);\n\n    final int format;\n    if (uniqueValues != null && DirectWriter.bitsRequired(uniqueValues.size() - 1) < deltaBitsRequired) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      final long gcdDelta = (maxValue - minValue) / gcd;\n      final long gcdBitsRequired = gcdDelta < 0 ? 64 : DirectWriter.bitsRequired(gcdDelta);\n      format = gcdBitsRequired < deltaBitsRequired ? GCD_COMPRESSED : DELTA_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = maxDelta < 0 ? 64 : DirectWriter.bitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        meta.writeVInt(deltaBitsRequired);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, deltaBitsRequired);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        Arrays.sort(decode);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = DirectWriter.bitsRequired(uniqueValues.size() - 1);\n        meta.writeVInt(bitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, bitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (delta < 0L || PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.bitsRequired(delta))) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = maxDelta < 0 ? 64 : DirectWriter.bitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        final int bpv = delta < 0 ? 64 : DirectWriter.bitsRequired(delta);\n        meta.writeVInt(bpv);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, bpv);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        Arrays.sort(decode);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = DirectWriter.bitsRequired(uniqueValues.size() - 1);\n        meta.writeVInt(bitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, bitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0cb4eabd8bb5c27d3a284e18c812a89958a66","date":1402928522,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n    final int deltaBitsRequired = DirectWriter.unsignedBitsRequired(delta);\n    final int tableBitsRequired = uniqueValues == null\n        ? Integer.MAX_VALUE\n        : DirectWriter.bitsRequired(uniqueValues.size() - 1);\n\n    final int format;\n    if (uniqueValues != null && tableBitsRequired < deltaBitsRequired) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      final long gcdDelta = (maxValue - minValue) / gcd;\n      final long gcdBitsRequired = DirectWriter.unsignedBitsRequired(gcdDelta);\n      format = gcdBitsRequired < deltaBitsRequired ? GCD_COMPRESSED : DELTA_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = DirectWriter.unsignedBitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        meta.writeVInt(deltaBitsRequired);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, deltaBitsRequired);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        Arrays.sort(decode);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        meta.writeVInt(tableBitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, tableBitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n    final int deltaBitsRequired = delta < 0 ? 64 : DirectWriter.bitsRequired(delta);\n\n    final int format;\n    if (uniqueValues != null && DirectWriter.bitsRequired(uniqueValues.size() - 1) < deltaBitsRequired) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      final long gcdDelta = (maxValue - minValue) / gcd;\n      final long gcdBitsRequired = gcdDelta < 0 ? 64 : DirectWriter.bitsRequired(gcdDelta);\n      format = gcdBitsRequired < deltaBitsRequired ? GCD_COMPRESSED : DELTA_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = maxDelta < 0 ? 64 : DirectWriter.bitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        meta.writeVInt(deltaBitsRequired);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, deltaBitsRequired);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        Arrays.sort(decode);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = DirectWriter.bitsRequired(uniqueValues.size() - 1);\n        meta.writeVInt(bitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, bitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n    final int deltaBitsRequired = DirectWriter.unsignedBitsRequired(delta);\n    final int tableBitsRequired = uniqueValues == null\n        ? Integer.MAX_VALUE\n        : DirectWriter.bitsRequired(uniqueValues.size() - 1);\n\n    final int format;\n    if (uniqueValues != null && tableBitsRequired < deltaBitsRequired) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      final long gcdDelta = (maxValue - minValue) / gcd;\n      final long gcdBitsRequired = DirectWriter.unsignedBitsRequired(gcdDelta);\n      format = gcdBitsRequired < deltaBitsRequired ? GCD_COMPRESSED : DELTA_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = DirectWriter.unsignedBitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        meta.writeVInt(deltaBitsRequired);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, deltaBitsRequired);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        Arrays.sort(decode);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        meta.writeVInt(tableBitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, tableBitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n    final int deltaBitsRequired = delta < 0 ? 64 : DirectWriter.bitsRequired(delta);\n\n    final int format;\n    if (uniqueValues != null && DirectWriter.bitsRequired(uniqueValues.size() - 1) < deltaBitsRequired) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      final long gcdDelta = (maxValue - minValue) / gcd;\n      final long gcdBitsRequired = gcdDelta < 0 ? 64 : DirectWriter.bitsRequired(gcdDelta);\n      format = gcdBitsRequired < deltaBitsRequired ? GCD_COMPRESSED : DELTA_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = maxDelta < 0 ? 64 : DirectWriter.bitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        meta.writeVInt(deltaBitsRequired);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, deltaBitsRequired);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        Arrays.sort(decode);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = DirectWriter.bitsRequired(uniqueValues.size() - 1);\n        meta.writeVInt(bitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, bitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n    final int deltaBitsRequired = DirectWriter.unsignedBitsRequired(delta);\n    final int tableBitsRequired = uniqueValues == null\n        ? Integer.MAX_VALUE\n        : DirectWriter.bitsRequired(uniqueValues.size() - 1);\n\n    final int format;\n    if (uniqueValues != null && tableBitsRequired < deltaBitsRequired) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      final long gcdDelta = (maxValue - minValue) / gcd;\n      final long gcdBitsRequired = DirectWriter.unsignedBitsRequired(gcdDelta);\n      format = gcdBitsRequired < deltaBitsRequired ? GCD_COMPRESSED : DELTA_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = DirectWriter.unsignedBitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        meta.writeVInt(deltaBitsRequired);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, deltaBitsRequired);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        Arrays.sort(decode);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        meta.writeVInt(tableBitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, tableBitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n    final int deltaBitsRequired = DirectWriter.unsignedBitsRequired(delta);\n    final int tableBitsRequired = uniqueValues == null\n        ? Integer.MAX_VALUE\n        : DirectWriter.bitsRequired(uniqueValues.size() - 1);\n\n    final int format;\n    if (uniqueValues != null && tableBitsRequired < deltaBitsRequired) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      final long gcdDelta = (maxValue - minValue) / gcd;\n      final long gcdBitsRequired = DirectWriter.unsignedBitsRequired(gcdDelta);\n      format = gcdBitsRequired < deltaBitsRequired ? GCD_COMPRESSED : DELTA_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = DirectWriter.unsignedBitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        meta.writeVInt(deltaBitsRequired);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, deltaBitsRequired);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        Arrays.sort(decode);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        meta.writeVInt(tableBitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, tableBitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n    final int deltaBitsRequired = DirectWriter.unsignedBitsRequired(delta);\n    final int tableBitsRequired = uniqueValues == null\n        ? Integer.MAX_VALUE\n        : DirectWriter.bitsRequired(uniqueValues.size() - 1);\n\n    final int format;\n    if (uniqueValues != null && tableBitsRequired < deltaBitsRequired) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      final long gcdDelta = (maxValue - minValue) / gcd;\n      final long gcdBitsRequired = DirectWriter.unsignedBitsRequired(gcdDelta);\n      format = gcdBitsRequired < deltaBitsRequired ? GCD_COMPRESSED : DELTA_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = DirectWriter.unsignedBitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        meta.writeVInt(deltaBitsRequired);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, deltaBitsRequired);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        Arrays.sort(decode);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        meta.writeVInt(tableBitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, tableBitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (Number nv : values) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n    final int deltaBitsRequired = DirectWriter.unsignedBitsRequired(delta);\n    final int tableBitsRequired = uniqueValues == null\n        ? Integer.MAX_VALUE\n        : DirectWriter.bitsRequired(uniqueValues.size() - 1);\n\n    final int format;\n    if (uniqueValues != null && tableBitsRequired < deltaBitsRequired) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      final long gcdDelta = (maxValue - minValue) / gcd;\n      final long gcdBitsRequired = DirectWriter.unsignedBitsRequired(gcdDelta);\n      format = gcdBitsRequired < deltaBitsRequired ? GCD_COMPRESSED : DELTA_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final long maxDelta = (maxValue - minValue) / gcd;\n        final int bits = DirectWriter.unsignedBitsRequired(maxDelta);\n        meta.writeVInt(bits);\n        final DirectWriter quotientWriter = DirectWriter.getInstance(data, count, bits);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final long minDelta = delta < 0 ? 0 : minValue;\n        meta.writeLong(minDelta);\n        meta.writeVInt(deltaBitsRequired);\n        final DirectWriter writer = DirectWriter.getInstance(data, count, deltaBitsRequired);\n        for (Number nv : values) {\n          long v = nv == null ? 0 : nv.longValue();\n          writer.add(v - minDelta);\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        Arrays.sort(decode);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        meta.writeVInt(tableBitsRequired);\n        final DirectWriter ordsWriter = DirectWriter.getInstance(data, count, tableBitsRequired);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n    meta.writeLong(data.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["b3f1f6da1318f50d5d7c35654b84bf25cddc7ecf"],"b3f1f6da1318f50d5d7c35654b84bf25cddc7ecf":["f45b4d1a00eca88b48ea7e1ffae3041b63da020e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f45b4d1a00eca88b48ea7e1ffae3041b63da020e":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["b3f1f6da1318f50d5d7c35654b84bf25cddc7ecf","dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["4cc45c615dbb82bf79d5f9550286098367874fbf","c6f080a2ab37c464dd98db173f6cbf10dc74f211","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"b3f1f6da1318f50d5d7c35654b84bf25cddc7ecf":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["f45b4d1a00eca88b48ea7e1ffae3041b63da020e"],"f45b4d1a00eca88b48ea7e1ffae3041b63da020e":["b3f1f6da1318f50d5d7c35654b84bf25cddc7ecf"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}