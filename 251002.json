{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","commits":[{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy(5))\n    );\n    failure.setDoFail();\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["f2c5f0cb44df114db4228c8f77861714b5cabaea","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1224a4027481acce15495b03bce9b48b93b42722"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["3bb13258feba31ab676502787ab2e1779f129b7a","1224a4027481acce15495b03bce9b48b93b42722"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["f2c5f0cb44df114db4228c8f77861714b5cabaea","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1224a4027481acce15495b03bce9b48b93b42722":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3bb13258feba31ab676502787ab2e1779f129b7a":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","1224a4027481acce15495b03bce9b48b93b42722"],"1224a4027481acce15495b03bce9b48b93b42722":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}