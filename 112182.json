{"path":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testDocListConversion().mjava","commits":[{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testDocListConversion().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  // tests ClusteringComponent.docListToSolrDocumentList\n  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n\n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n\n      SolrDocumentList list = ClusteringComponent.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n\n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n\n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n      \n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n      \n      SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n        \n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n        \n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testDocListConversion().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testDocListConversion().mjava","sourceNew":"  // tests ClusteringComponent.docListToSolrDocumentList\n  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n\n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n\n      SolrDocumentList list = ClusteringComponent.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n\n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n\n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"val_i\", \"1\", \n                     \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n      \n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n      \n      SolrDocumentList list = SolrPluginUtils.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n        \n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n        \n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testDocListConversion().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testDocListConversion().mjava","sourceNew":"  // tests ClusteringComponent.docListToSolrDocumentList\n  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    h.getCore().withSearcher(srchr -> {\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n\n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n\n      SolrDocumentList list = ClusteringComponent.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n\n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n\n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n      return null;\n    });\n  }\n\n","sourceOld":"  // tests ClusteringComponent.docListToSolrDocumentList\n  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n\n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n\n      SolrDocumentList list = ClusteringComponent.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n\n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n\n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testDocListConversion().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testDocListConversion().mjava","sourceNew":"  // tests ClusteringComponent.docListToSolrDocumentList\n  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    h.getCore().withSearcher(srchr -> {\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n\n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n\n      SolrDocumentList list = ClusteringComponent.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n\n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n\n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n      return null;\n    });\n  }\n\n","sourceOld":"  // tests ClusteringComponent.docListToSolrDocumentList\n  @Test\n  public void testDocListConversion() throws Exception {\n    assertU(\"\", adoc(\"id\", \"3234\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick red fox\"));\n    assertU(\"\", adoc(\"id\", \"3235\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick green fox\"));\n    assertU(\"\", adoc(\"id\", \"3236\", \"url\", \"ignoreme\", \"val_i\", \"1\",\n        \"val_dynamic\", \"quick brown fox\"));\n    assertU(\"\", commit());\n\n    RefCounted<SolrIndexSearcher> holder = h.getCore().getSearcher();\n    try {\n      SolrIndexSearcher srchr = holder.get();\n      QueryResult qr = new QueryResult();\n      QueryCommand cmd = new QueryCommand();\n      cmd.setQuery(new MatchAllDocsQuery());\n      cmd.setLen(10);\n      qr = srchr.search(qr, cmd);\n\n      DocList docs = qr.getDocList();\n      assertEquals(\"wrong docs size\", 3, docs.size());\n      Set<String> fields = new HashSet<>();\n      fields.add(\"val_dynamic\");\n      fields.add(\"dynamic_val\");\n      fields.add(\"range_facet_l\"); // copied from id\n\n      SolrDocumentList list = ClusteringComponent.docListToSolrDocumentList(docs, srchr, fields, null);\n      assertEquals(\"wrong list Size\", docs.size(), list.size());\n      for (SolrDocument document : list) {\n\n        assertTrue(\"unexpected field\", ! document.containsKey(\"val_i\"));\n        assertTrue(\"unexpected id field\", ! document.containsKey(\"id\"));\n\n        assertTrue(\"original field\", document.containsKey(\"val_dynamic\"));\n        assertTrue(\"dyn copy field\", document.containsKey(\"dynamic_val\"));\n        assertTrue(\"copy field\", document.containsKey(\"range_facet_l\"));\n\n        assertNotNull(\"original field null\", document.get(\"val_dynamic\"));\n        assertNotNull(\"dyn copy field null\", document.get(\"dynamic_val\"));\n        assertNotNull(\"copy field null\", document.get(\"range_facet_l\"));\n      }\n    } finally {\n      if (null != holder) holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de548de3ce5405595899f548152d4b93ac9eb9cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ab833f2b623042c834458d4cbcad05073a93793":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["63a9344cff6a72bc4c1ef080c69e10ad0635b811","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["de548de3ce5405595899f548152d4b93ac9eb9cc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}