{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","commits":[{"id":"975cb787e66d548dba4f63c22c08d692c7235f73","date":1174605228,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c528d38c8d9b2452e932321931b11e7c19a96d5","date":1185353698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","sourceNew":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","sourceNew":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","sourceNew":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","sourceNew":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT)\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","sourceNew":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT)\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","sourceNew":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),null,false, IndexWriter.MaxFieldLength.LIMITED);\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexAndSearchTasks().mjava","sourceNew":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Test index creation logic\n   */\n  public void testIndexAndSearchTasks() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"Optimize\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingSearchTest } : 200\",\n        \"CloseReader\",\n        \"[ CountingSearchTest > : 70\",\n        \"[ CountingSearchTest > : 9\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",279,CountingSearchTestTask.numSearches);\n    assertTrue(\"Index does not exist?...!\", IndexReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write. \n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(),\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    assertEquals(\"1000 docs were added to the index, this is what we expect to find!\",1000,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["975cb787e66d548dba4f63c22c08d692c7235f73"],"975cb787e66d548dba4f63c22c08d692c7235f73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["4256bc1b3c94786287ccdfc751230374521843cf"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"4256bc1b3c94786287ccdfc751230374521843cf":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"975cb787e66d548dba4f63c22c08d692c7235f73":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["975cb787e66d548dba4f63c22c08d692c7235f73"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}