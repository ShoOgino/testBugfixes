{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","commits":[{"id":"c2635332d49f7c5a0b484950462a01775512628e","date":1331332806,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    IndexableField[] f = new IndexableField[field.stored() ? 3 : 2];\n    f[0] = getAmountField(field).createField(String.valueOf(value.getAmount()), boost);\n    f[1] = getCurrencyField(field).createField(value.getCurrencyCode(), boost);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, boost);\n    }\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fd6ef1120d3887d6a8783b5506c8fea3ddf707f0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    IndexableField[] f = new IndexableField[field.stored() ? 3 : 2];\n    f[0] = getAmountField(field).createField(String.valueOf(value.getAmount()), boost);\n    f[1] = getCurrencyField(field).createField(value.getCurrencyCode(), boost);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, boost);\n    }\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","date":1331744509,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    IndexableField[] f = new IndexableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.omitNorms() ? 1F : boost);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.omitNorms() ? 1F : boost);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, boost);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    IndexableField[] f = new IndexableField[field.stored() ? 3 : 2];\n    f[0] = getAmountField(field).createField(String.valueOf(value.getAmount()), boost);\n    f[1] = getCurrencyField(field).createField(value.getCurrencyCode(), boost);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, boost);\n    }\n\n    return f;\n  }\n\n","bugFix":["c2635332d49f7c5a0b484950462a01775512628e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a3635dad24b0681f0088f2ef680456482cdb451","date":1344025573,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    IndexableField[] f = new IndexableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, 1F);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    IndexableField[] f = new IndexableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.omitNorms() ? 1F : boost);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.omitNorms() ? 1F : boost);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, boost);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    IndexableField[] f = new IndexableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, 1F);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    IndexableField[] f = new IndexableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.omitNorms() ? 1F : boost);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.omitNorms() ? 1F : boost);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, boost);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    IndexableField[] f = new IndexableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, 1F);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    IndexableField[] f = new IndexableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.omitNorms() ? 1F : boost);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.omitNorms() ? 1F : boost);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, boost);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    StorableField[] f = new StorableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, 1F);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    IndexableField[] f = new IndexableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, 1F);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public StorableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    StorableField[] f = new StorableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, 1F);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    IndexableField[] f = new IndexableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, 1F);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    List<StorableField> f = new ArrayList<StorableField>();\n    SchemaField amountField = getAmountField(field);\n    f.add(amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F));\n    SchemaField currencyField = getCurrencyField(field);\n    f.add(currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F));\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f.add(createField(field.getName(), storedValue, customType, 1F));\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    StorableField[] f = new StorableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, 1F);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    List<StorableField> f = new ArrayList<StorableField>();\n    SchemaField amountField = getAmountField(field);\n    f.add(amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F));\n    SchemaField currencyField = getCurrencyField(field);\n    f.add(currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F));\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f.add(createField(field.getName(), storedValue, customType, 1F));\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public StorableField[] createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    StorableField[] f = new StorableField[field.stored() ? 3 : 2];\n    SchemaField amountField = getAmountField(field);\n    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F);\n    SchemaField currencyField = getCurrencyField(field);\n    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F);\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f[2] = createField(field.getName(), storedValue, customType, 1F);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    List<StorableField> f = new ArrayList<>();\n    SchemaField amountField = getAmountField(field);\n    f.add(amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F));\n    SchemaField currencyField = getCurrencyField(field);\n    f.add(currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F));\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f.add(createField(field.getName(), storedValue, customType, 1F));\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    List<StorableField> f = new ArrayList<StorableField>();\n    SchemaField amountField = getAmountField(field);\n    f.add(amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F));\n    SchemaField currencyField = getCurrencyField(field);\n    f.add(currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F));\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f.add(createField(field.getName(), storedValue, customType, 1F));\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    List<IndexableField> f = new ArrayList<>();\n    SchemaField amountField = getAmountField(field);\n    f.add(amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F));\n    SchemaField currencyField = getCurrencyField(field);\n    f.add(currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F));\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f.add(createField(field.getName(), storedValue, customType, 1F));\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    List<StorableField> f = new ArrayList<>();\n    SchemaField amountField = getAmountField(field);\n    f.add(amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F));\n    SchemaField currencyField = getCurrencyField(field);\n    f.add(currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F));\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f.add(createField(field.getName(), storedValue, customType, 1F));\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeea025b4a7a8e8f70426ac4527ef481b3a86b72","date":1476199075,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    List<IndexableField> f = new ArrayList<>();\n    SchemaField amountField = getAmountField(field);\n    f.add(amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F));\n    SchemaField currencyField = getCurrencyField(field);\n    f.add(currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F));\n\n    if (field.stored()) {\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f.add(createField(field.getName(), storedValue, StoredField.TYPE, 1F));\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    List<IndexableField> f = new ArrayList<>();\n    SchemaField amountField = getAmountField(field);\n    f.add(amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F));\n    SchemaField currencyField = getCurrencyField(field);\n    f.add(currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F));\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f.add(createField(field.getName(), storedValue, customType, 1F));\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    List<IndexableField> f = new ArrayList<>();\n    SchemaField amountField = getAmountField(field);\n    f.add(amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F));\n    SchemaField currencyField = getCurrencyField(field);\n    f.add(currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F));\n\n    if (field.stored()) {\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f.add(createField(field.getName(), storedValue, StoredField.TYPE, 1F));\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    List<IndexableField> f = new ArrayList<>();\n    SchemaField amountField = getAmountField(field);\n    f.add(amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F));\n    SchemaField currencyField = getCurrencyField(field);\n    f.add(currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F));\n\n    if (field.stored()) {\n      org.apache.lucene.document.FieldType customType = new org.apache.lucene.document.FieldType();\n      assert !customType.omitNorms();\n      customType.setStored(true);\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f.add(createField(field.getName(), storedValue, customType, 1F));\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object externalVal) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    List<IndexableField> f = new ArrayList<>();\n    SchemaField amountField = getAmountField(field);\n    f.add(amountField.createField(String.valueOf(value.getAmount())));\n    SchemaField currencyField = getCurrencyField(field);\n    f.add(currencyField.createField(value.getCurrencyCode()));\n\n    if (field.stored()) {\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f.add(createField(field.getName(), storedValue, StoredField.TYPE));\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object externalVal, float boost) {\n    CurrencyValue value = CurrencyValue.parse(externalVal.toString(), defaultCurrency);\n\n    List<IndexableField> f = new ArrayList<>();\n    SchemaField amountField = getAmountField(field);\n    f.add(amountField.createField(String.valueOf(value.getAmount()), amountField.indexed() && !amountField.omitNorms() ? boost : 1F));\n    SchemaField currencyField = getCurrencyField(field);\n    f.add(currencyField.createField(value.getCurrencyCode(), currencyField.indexed() && !currencyField.omitNorms() ? boost : 1F));\n\n    if (field.stored()) {\n      String storedValue = externalVal.toString().trim();\n      if (storedValue.indexOf(\",\") < 0) {\n        storedValue += \",\" + defaultCurrency;\n      }\n      f.add(createField(field.getName(), storedValue, StoredField.TYPE, 1F));\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2635332d49f7c5a0b484950462a01775512628e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["73bb5a57dc75b54a39494f99986599cae7dff417"],"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"fd6ef1120d3887d6a8783b5506c8fea3ddf707f0":["c2635332d49f7c5a0b484950462a01775512628e"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","3a3635dad24b0681f0088f2ef680456482cdb451"],"3a3635dad24b0681f0088f2ef680456482cdb451":["fd6ef1120d3887d6a8783b5506c8fea3ddf707f0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"1d028314cced5858683a1bb4741423d0f934257b":["3a3635dad24b0681f0088f2ef680456482cdb451","409324b31a1419d7c05a38211168cf317e39be77"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["1d028314cced5858683a1bb4741423d0f934257b","73bb5a57dc75b54a39494f99986599cae7dff417"],"c2635332d49f7c5a0b484950462a01775512628e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","3a3635dad24b0681f0088f2ef680456482cdb451"],"acd9883560fd89e6448b2b447302fe543040cd4f":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"73bb5a57dc75b54a39494f99986599cae7dff417":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","acd9883560fd89e6448b2b447302fe543040cd4f"],"fd6ef1120d3887d6a8783b5506c8fea3ddf707f0":["8fd5be977c105554c6a7b68afcdbc511439723ab","3a3635dad24b0681f0088f2ef680456482cdb451","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"3a3635dad24b0681f0088f2ef680456482cdb451":["8fd5be977c105554c6a7b68afcdbc511439723ab","1d028314cced5858683a1bb4741423d0f934257b","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1d028314cced5858683a1bb4741423d0f934257b":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["38e3b736c7ca086d61b7dbb841c905ee115490da","fd6ef1120d3887d6a8783b5506c8fea3ddf707f0"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["409324b31a1419d7c05a38211168cf317e39be77"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73bb5a57dc75b54a39494f99986599cae7dff417":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","8fd5be977c105554c6a7b68afcdbc511439723ab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}