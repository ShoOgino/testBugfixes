{"path":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServerSchemaAPI#testSchemaAddFieldAndFailOnImmutable().mjava","commits":[{"id":"bbdd035c502312d32111b9642ba3dbd5c52ee64f","date":1488346355,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServerSchemaAPI#testSchemaAddFieldAndFailOnImmutable().mjava","pathOld":"/dev/null","sourceNew":"  @Test \n  public void testSchemaAddFieldAndFailOnImmutable() throws Exception {\n    assumeFalse(\"it needs a readonly schema\", Boolean.getBoolean(\"managed.schema.mutable\"));\n\n      SchemaRequest.AddField addFieldUpdateSchemaRequest = new SchemaRequest.AddField(fieldAttributes);\n      SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(server);\n      // wt hell???? assertFalse(addFieldResponse.toString(), addFieldResponse.getStatus()==0);\n      assertTrue((\"\"+addFieldResponse).contains(\"schema is not editable\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b1c6fcf212154c29df39b78c50590f977bd9178","date":1515538302,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServerSchemaAPI#testSchemaAddFieldAndFailOnImmutable().mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServerSchemaAPI#testSchemaAddFieldAndFailOnImmutable().mjava","sourceNew":"  @Test \n  public void testSchemaAddFieldAndFailOnImmutable() {\n    assumeFalse(\"it needs a readonly schema\", Boolean.getBoolean(\"managed.schema.mutable\"));\n\n    SchemaRequest.AddField addFieldUpdateSchemaRequest = new SchemaRequest.AddField(fieldAttributes);\n    assertFailedSchemaResponse(() -> addFieldUpdateSchemaRequest.process(server),\n        \"schema is not editable\");\n  }\n\n","sourceOld":"  @Test \n  public void testSchemaAddFieldAndFailOnImmutable() throws Exception {\n    assumeFalse(\"it needs a readonly schema\", Boolean.getBoolean(\"managed.schema.mutable\"));\n\n      SchemaRequest.AddField addFieldUpdateSchemaRequest = new SchemaRequest.AddField(fieldAttributes);\n      SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(server);\n      // wt hell???? assertFalse(addFieldResponse.toString(), addFieldResponse.getStatus()==0);\n      assertTrue((\"\"+addFieldResponse).contains(\"schema is not editable\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServerSchemaAPI#testSchemaAddFieldAndFailOnImmutable().mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServerSchemaAPI#testSchemaAddFieldAndFailOnImmutable().mjava","sourceNew":"  @Test \n  public void testSchemaAddFieldAndFailOnImmutable() {\n    assumeFalse(\"it needs a readonly schema\", Boolean.getBoolean(\"managed.schema.mutable\"));\n\n    SchemaRequest.AddField addFieldUpdateSchemaRequest = new SchemaRequest.AddField(fieldAttributes);\n    assertFailedSchemaResponse(() -> addFieldUpdateSchemaRequest.process(server),\n        \"schema is not editable\");\n  }\n\n","sourceOld":"  @Test \n  public void testSchemaAddFieldAndFailOnImmutable() throws Exception {\n    assumeFalse(\"it needs a readonly schema\", Boolean.getBoolean(\"managed.schema.mutable\"));\n\n      SchemaRequest.AddField addFieldUpdateSchemaRequest = new SchemaRequest.AddField(fieldAttributes);\n      SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(server);\n      // wt hell???? assertFalse(addFieldResponse.toString(), addFieldResponse.getStatus()==0);\n      assertTrue((\"\"+addFieldResponse).contains(\"schema is not editable\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bbdd035c502312d32111b9642ba3dbd5c52ee64f","6b1c6fcf212154c29df39b78c50590f977bd9178"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b1c6fcf212154c29df39b78c50590f977bd9178":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"bbdd035c502312d32111b9642ba3dbd5c52ee64f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"6b1c6fcf212154c29df39b78c50590f977bd9178":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bbdd035c502312d32111b9642ba3dbd5c52ee64f":["b94236357aaa22b76c10629851fe4e376e0cea82","6b1c6fcf212154c29df39b78c50590f977bd9178"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}