{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","commits":[{"id":"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","date":1328817590,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set[#],int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set<?> dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48fa282ce05aee81cc6535d4d2b9cf9ab9abbae4","date":1333981885,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48fa282ce05aee81cc6535d4d2b9cf9ab9abbae4":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","48fa282ce05aee81cc6535d4d2b9cf9ab9abbae4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["48fa282ce05aee81cc6535d4d2b9cf9ab9abbae4","ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"48fa282ce05aee81cc6535d4d2b9cf9ab9abbae4":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}