{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","sourceNew":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","sourceNew":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","sourceNew":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#randomTestString(int).mjava","sourceNew":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random().nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random().nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  private String randomTestString(int maxLength) {\n    // we can't just use _TestUtil.randomUnicodeString() or we might get 0xfffe etc\n    // (considered invalid by XML)\n    \n    int size = random.nextInt(maxLength);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < size; i++) {\n      switch(random.nextInt(4)) {\n        case 0: /* single byte */ \n          sb.append('a'); \n          break;\n        case 1: /* two bytes */\n          sb.append('\\u0645');\n          break;\n        case 2: /* three bytes */\n          sb.append('\\u092a');\n          break;\n        case 3: /* four bytes */\n          sb.appendCodePoint(0x29B05);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}