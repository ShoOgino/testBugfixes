{"path":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever.MyIndexWriter#merge(MergePolicy.OneMerge).mjava","commits":[{"id":"e7ca9acad3ff1db8085aa83c6726b7f86b90dd88","date":1309095400,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever.MyIndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void merge(MergePolicy.OneMerge merge) throws CorruptIndexException, IOException {\n      if (merge.optimize && (first || merge.segments.size() == 1)) {\n        first = false;\n        if (VERBOSE) {\n          System.out.println(\"TEST: optimized merge\");\n        }\n        optimizeMergeCount.incrementAndGet();\n      }\n      super.merge(merge);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever.MyIndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void merge(MergePolicy.OneMerge merge) throws CorruptIndexException, IOException {\n      if (merge.optimize && (first || merge.segments.size() == 1)) {\n        first = false;\n        if (VERBOSE) {\n          System.out.println(\"TEST: optimized merge\");\n        }\n        optimizeMergeCount.incrementAndGet();\n      }\n      super.merge(merge);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever.MyIndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void merge(MergePolicy.OneMerge merge) throws CorruptIndexException, IOException {\n      if (merge.optimize && (first || merge.segments.size() == 1)) {\n        first = false;\n        if (VERBOSE) {\n          System.out.println(\"TEST: optimized merge\");\n        }\n        optimizeMergeCount.incrementAndGet();\n      }\n      super.merge(merge);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestForceMergeForever.MyIndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever.MyIndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"    @Override\n    public void merge(MergePolicy.OneMerge merge) throws CorruptIndexException, IOException {\n      if (merge.maxNumSegments != -1 && (first || merge.segments.size() == 1)) {\n        first = false;\n        if (VERBOSE) {\n          System.out.println(\"TEST: maxNumSegments merge\");\n        }\n        mergeCount.incrementAndGet();\n      }\n      super.merge(merge);\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergePolicy.OneMerge merge) throws CorruptIndexException, IOException {\n      if (merge.optimize && (first || merge.segments.size() == 1)) {\n        first = false;\n        if (VERBOSE) {\n          System.out.println(\"TEST: optimized merge\");\n        }\n        optimizeMergeCount.incrementAndGet();\n      }\n      super.merge(merge);\n    }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e7ca9acad3ff1db8085aa83c6726b7f86b90dd88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["e7ca9acad3ff1db8085aa83c6726b7f86b90dd88"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7ca9acad3ff1db8085aa83c6726b7f86b90dd88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7ca9acad3ff1db8085aa83c6726b7f86b90dd88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"]},"commit2Childs":{"e7ca9acad3ff1db8085aa83c6726b7f86b90dd88":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7ca9acad3ff1db8085aa83c6726b7f86b90dd88","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}