{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","commits":[{"id":"9a7edeee192980cdc45735957606fc0dbf22d437","date":1459455891,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","pathOld":"/dev/null","sourceNew":"    public List<Edge> call() {\n\n      Map joinParams = new HashMap();\n      String fl = fromField + \",\" + toField;\n\n      joinParams.putAll(queryParams);\n      joinParams.put(\"fl\", fl);\n      joinParams.put(\"qt\", \"/export\");\n      joinParams.put(\"sort\", toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.put(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","sourceNew":"    public List<Edge> call() {\n\n      ModifiableSolrParams joinParams = new ModifiableSolrParams(queryParams);\n      String fl = fromField + \",\" + toField;\n\n      joinParams.set(\"fl\", fl);\n      joinParams.set(\"qt\", \"/export\");\n      joinParams.set(\"sort\", toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.set(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","sourceOld":"    public List<Edge> call() {\n\n      Map joinParams = new HashMap();\n      String fl = fromField + \",\" + toField;\n\n      joinParams.putAll(queryParams);\n      joinParams.put(\"fl\", fl);\n      joinParams.put(\"qt\", \"/export\");\n      joinParams.put(\"sort\", toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.put(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","sourceNew":"    public List<Edge> call() {\n\n      ModifiableSolrParams joinParams = new ModifiableSolrParams(queryParams);\n      String fl = fromField + \",\" + toField;\n\n      joinParams.set(\"fl\", fl);\n      joinParams.set(\"qt\", \"/export\");\n      joinParams.set(\"sort\", toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.set(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","sourceOld":"    public List<Edge> call() {\n\n      Map joinParams = new HashMap();\n      String fl = fromField + \",\" + toField;\n\n      joinParams.putAll(queryParams);\n      joinParams.put(\"fl\", fl);\n      joinParams.put(\"qt\", \"/export\");\n      joinParams.put(\"sort\", toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.put(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","sourceNew":"    public List<Edge> call() {\n\n      ModifiableSolrParams joinParams = new ModifiableSolrParams(queryParams);\n      String fl = fromField + \",\" + toField;\n\n      joinParams.set(\"fl\", fl);\n      joinParams.set(\"qt\", \"/export\");\n      joinParams.set(\"sort\", toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.set(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","sourceOld":"    public List<Edge> call() {\n\n      Map joinParams = new HashMap();\n      String fl = fromField + \",\" + toField;\n\n      joinParams.putAll(queryParams);\n      joinParams.put(\"fl\", fl);\n      joinParams.put(\"qt\", \"/export\");\n      joinParams.put(\"sort\", toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.put(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","sourceNew":"    public List<Edge> call() {\n\n      ModifiableSolrParams joinParams = new ModifiableSolrParams(queryParams);\n      String fl = fromField + \",\" + toField;\n\n      joinParams.set(\"fl\", fl);\n      joinParams.set(\"qt\", \"/export\");\n      joinParams.set(\"sort\", toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.set(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","sourceOld":"    public List<Edge> call() {\n\n      Map joinParams = new HashMap();\n      String fl = fromField + \",\" + toField;\n\n      joinParams.putAll(queryParams);\n      joinParams.put(\"fl\", fl);\n      joinParams.put(\"qt\", \"/export\");\n      joinParams.put(\"sort\", toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.put(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","sourceNew":"    public List<Edge> call() {\n\n      ModifiableSolrParams joinParams = new ModifiableSolrParams(queryParams);\n      String fl = fromField + \",\" + toField;\n\n      joinParams.set(\"fl\", fl);\n      joinParams.set(\"qt\", \"/export\");\n      joinParams.set(SORT, toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.set(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","sourceOld":"    public List<Edge> call() {\n\n      ModifiableSolrParams joinParams = new ModifiableSolrParams(queryParams);\n      String fl = fromField + \",\" + toField;\n\n      joinParams.set(\"fl\", fl);\n      joinParams.set(\"qt\", \"/export\");\n      joinParams.set(\"sort\", toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.set(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.JoinRunner#call().mjava","sourceNew":"    public List<Edge> call() {\n\n      ModifiableSolrParams joinParams = new ModifiableSolrParams(queryParams);\n      String fl = fromField + \",\" + toField;\n\n      joinParams.set(\"fl\", fl);\n      joinParams.set(\"qt\", \"/export\");\n      joinParams.set(SORT, toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.set(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","sourceOld":"    public List<Edge> call() {\n\n      ModifiableSolrParams joinParams = new ModifiableSolrParams(queryParams);\n      String fl = fromField + \",\" + toField;\n\n      joinParams.set(\"fl\", fl);\n      joinParams.set(\"qt\", \"/export\");\n      joinParams.set(\"sort\", toField + \" asc,\"+fromField +\" asc\");\n\n      StringBuffer nodeQuery = new StringBuffer();\n\n      for(String node : nodes) {\n        nodeQuery.append(node).append(\" \");\n      }\n\n      String q = fromField + \":(\" + nodeQuery.toString().trim() + \")\";\n\n      joinParams.set(\"q\", q);\n      TupleStream stream = null;\n      try {\n        stream = new UniqueStream(new CloudSolrStream(zkHost, collection, joinParams), new MultipleFieldEqualitor(new FieldEqualitor(toField), new FieldEqualitor(fromField)));\n        stream.setStreamContext(streamContext);\n        stream.open();\n        BATCH:\n        while (true) {\n          Tuple tuple = stream.read();\n          if (tuple.EOF) {\n            break BATCH;\n          }\n          String _toNode = tuple.getString(toField);\n          String _fromNode = tuple.getString(fromField);\n          Edge edge = new Edge(_fromNode, _toNode);\n          edges.add(edge);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      } finally {\n        try {\n          stream.close();\n        } catch(Exception ce) {\n          throw new RuntimeException(ce);\n        }\n      }\n      return edges;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a7edeee192980cdc45735957606fc0dbf22d437":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["9a7edeee192980cdc45735957606fc0dbf22d437","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"01624b85de12fb02335810bdf325124e59040772":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["9a7edeee192980cdc45735957606fc0dbf22d437"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9a7edeee192980cdc45735957606fc0dbf22d437","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01624b85de12fb02335810bdf325124e59040772"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9a7edeee192980cdc45735957606fc0dbf22d437","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"9a7edeee192980cdc45735957606fc0dbf22d437":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a7edeee192980cdc45735957606fc0dbf22d437"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"01624b85de12fb02335810bdf325124e59040772":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}