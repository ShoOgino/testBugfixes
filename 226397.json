{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldReturn(String,String,String[]).mjava","commits":[{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 0; i < values.length; i++) {\n      expected[i + 1] = \"//result/doc[str[@name='id']='\" + i + \"']/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 0; i < values.length; i++) {\n      expected[i + 1] = \"//result/doc[str[@name='id']='\" + i + \"']/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":1,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 0; i < values.length; i++) {\n      expected[i + 1] = \"//result/doc[str[@name='id']='\" + i + \"']/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 0; i < values.length; i++) {\n      expected[i + 1] = \"//result/doc[str[@name='id']='\" + i + \"']/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}