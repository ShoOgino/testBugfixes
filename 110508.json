{"path":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.PayloadSpans#collectLeaf(PostingsEnum,int,Term).mjava","commits":[{"id":"557b118fdfb9d28b6cfe38fac273af58c4d51135","date":1445505363,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.PayloadSpans#collectLeaf(PostingsEnum,int,Term).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.PayloadSpanScorer#collectLeaf(PostingsEnum,int,Term).mjava","sourceNew":"    @Override\n    public void collectLeaf(PostingsEnum postings, int position, Term term) throws IOException {\n      BytesRef payload = postings.getPayload();\n      if (payload == null)\n        return;\n      float payloadFactor = docScorer.computePayloadFactor(docID(), in.startPosition(), in.endPosition(), payload);\n      payloadScore = function.currentScore(docID(), getField(), in.startPosition(), in.endPosition(),\n                                            payloadsSeen, payloadScore, payloadFactor);\n      payloadsSeen++;\n    }\n\n","sourceOld":"    @Override\n    public void collectLeaf(PostingsEnum postings, int position, Term term) throws IOException {\n      BytesRef payload = postings.getPayload();\n      if (payload == null)\n        return;\n      float payloadFactor = docScorer.computePayloadFactor(docID(), spans.startPosition(), spans.endPosition(), payload);\n      payloadScore = function.currentScore(docID(), getField(), spans.startPosition(), spans.endPosition(),\n                                            payloadsSeen, payloadScore, payloadFactor);\n      payloadsSeen++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abe64b887edbb37f6261531cf8a62d88d63fdcb","date":1510236307,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.PayloadSpans#collectLeaf(PostingsEnum,int,Term).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.PayloadSpans#collectLeaf(PostingsEnum,int,Term).mjava","sourceNew":"    @Override\n    public void collectLeaf(PostingsEnum postings, int position, Term term) throws IOException {\n      BytesRef payload = postings.getPayload();\n      float payloadFactor = decoder.computePayloadFactor(docID(), in.startPosition(), in.endPosition(), payload);\n      payloadScore = function.currentScore(docID(), getField(), in.startPosition(), in.endPosition(),\n                                            payloadsSeen, payloadScore, payloadFactor);\n      payloadsSeen++;\n    }\n\n","sourceOld":"    @Override\n    public void collectLeaf(PostingsEnum postings, int position, Term term) throws IOException {\n      BytesRef payload = postings.getPayload();\n      if (payload == null)\n        return;\n      float payloadFactor = docScorer.computePayloadFactor(docID(), in.startPosition(), in.endPosition(), payload);\n      payloadScore = function.currentScore(docID(), getField(), in.startPosition(), in.endPosition(),\n                                            payloadsSeen, payloadScore, payloadFactor);\n      payloadsSeen++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2","date":1510236334,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.PayloadSpans#collectLeaf(PostingsEnum,int,Term).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.PayloadSpans#collectLeaf(PostingsEnum,int,Term).mjava","sourceNew":"    @Override\n    public void collectLeaf(PostingsEnum postings, int position, Term term) throws IOException {\n      BytesRef payload = postings.getPayload();\n      float payloadFactor = decoder.computePayloadFactor(payload);\n      payloadScore = function.currentScore(docID(), getField(), in.startPosition(), in.endPosition(),\n                                            payloadsSeen, payloadScore, payloadFactor);\n      payloadsSeen++;\n    }\n\n","sourceOld":"    @Override\n    public void collectLeaf(PostingsEnum postings, int position, Term term) throws IOException {\n      BytesRef payload = postings.getPayload();\n      float payloadFactor = decoder.computePayloadFactor(docID(), in.startPosition(), in.endPosition(), payload);\n      payloadScore = function.currentScore(docID(), getField(), in.startPosition(), in.endPosition(),\n                                            payloadsSeen, payloadScore, payloadFactor);\n      payloadsSeen++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["1abe64b887edbb37f6261531cf8a62d88d63fdcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"]},"commit2Childs":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["1abe64b887edbb37f6261531cf8a62d88d63fdcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}