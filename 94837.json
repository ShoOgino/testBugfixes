{"path":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testCheckFooterValidPastFooter().mjava","commits":[{"id":"71488d7f5786ae87541276121ecb69705a11a295","date":1465498138,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testCheckFooterValidPastFooter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testCheckFooterValidPastFooter().mjava","sourceNew":"  public void testCheckFooterValidPastFooter() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new RAMInputStream(\"file\", file));\n    CodecUtil.checkHeader(input, \"FooBar\", 5, 5);\n    assertEquals(\"this is the data\", input.readString());\n    // bogusly read a byte too far (can happen)\n    input.readByte();\n    Exception mine = new RuntimeException(\"fake exception\");\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertEquals(\"fake exception\", expected.getMessage());\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertTrue(suppressed[0].getMessage().contains(\"checksum status indeterminate\"));\n    input.close();\n  }\n\n","sourceOld":"  public void testCheckFooterValidPastFooter() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new RAMInputStream(\"file\", file));\n    CodecUtil.checkHeader(input, \"FooBar\", 5, 5);\n    assertEquals(\"this is the data\", input.readString());\n    // bogusly read a byte too far (can happen)\n    input.readByte();\n    Exception mine = new RuntimeException(\"fake exception\");\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertEquals(\"fake exception\", expected.getMessage());\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertTrue(suppressed[0].getMessage().contains(\"checksum status indeterminate\"));\n    input.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testCheckFooterValidPastFooter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testCheckFooterValidPastFooter().mjava","sourceNew":"  public void testCheckFooterValidPastFooter() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new RAMInputStream(\"file\", file));\n    CodecUtil.checkHeader(input, \"FooBar\", 5, 5);\n    assertEquals(\"this is the data\", input.readString());\n    // bogusly read a byte too far (can happen)\n    input.readByte();\n    Exception mine = new RuntimeException(\"fake exception\");\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertEquals(\"fake exception\", expected.getMessage());\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertTrue(suppressed[0].getMessage().contains(\"checksum status indeterminate\"));\n    input.close();\n  }\n\n","sourceOld":"  public void testCheckFooterValidPastFooter() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new RAMInputStream(\"file\", file));\n    CodecUtil.checkHeader(input, \"FooBar\", 5, 5);\n    assertEquals(\"this is the data\", input.readString());\n    // bogusly read a byte too far (can happen)\n    input.readByte();\n    Exception mine = new RuntimeException(\"fake exception\");\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertEquals(\"fake exception\", expected.getMessage());\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertTrue(suppressed[0].getMessage().contains(\"checksum status indeterminate\"));\n    input.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testCheckFooterValidPastFooter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testCheckFooterValidPastFooter().mjava","sourceNew":"  public void testCheckFooterValidPastFooter() throws Exception {\n    ByteBuffersDataOutput out = new ByteBuffersDataOutput();\n    IndexOutput output = new ByteBuffersIndexOutput(out, \"temp\", \"temp\");\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new ByteBuffersIndexInput(out.toDataInput(), \"temp\"));\n    CodecUtil.checkHeader(input, \"FooBar\", 5, 5);\n    assertEquals(\"this is the data\", input.readString());\n    // bogusly read a byte too far (can happen)\n    input.readByte();\n    Exception mine = new RuntimeException(\"fake exception\");\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertEquals(\"fake exception\", expected.getMessage());\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertTrue(suppressed[0].getMessage().contains(\"checksum status indeterminate\"));\n    input.close();\n  }\n\n","sourceOld":"  public void testCheckFooterValidPastFooter() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new RAMInputStream(\"file\", file));\n    CodecUtil.checkHeader(input, \"FooBar\", 5, 5);\n    assertEquals(\"this is the data\", input.readString());\n    // bogusly read a byte too far (can happen)\n    input.readByte();\n    Exception mine = new RuntimeException(\"fake exception\");\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertEquals(\"fake exception\", expected.getMessage());\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertTrue(suppressed[0].getMessage().contains(\"checksum status indeterminate\"));\n    input.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eb39083d248dc00a9ce4656e519cea3fbf159c91","date":1588849460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testCheckFooterValidPastFooter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testCheckFooterValidPastFooter().mjava","sourceNew":"  public void testCheckFooterValidPastFooter() throws Exception {\n    ByteBuffersDataOutput out = new ByteBuffersDataOutput();\n    IndexOutput output = new ByteBuffersIndexOutput(out, \"temp\", \"temp\");\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new ByteBuffersIndexInput(out.toDataInput(), \"temp\"));\n    CodecUtil.checkHeader(input, \"FooBar\", 5, 5);\n    assertEquals(\"this is the data\", input.readString());\n    // bogusly read a byte too far (can happen)\n    input.readByte();\n    Exception mine = new RuntimeException(\"fake exception\");\n    CorruptIndexException expected = expectThrows(CorruptIndexException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertTrue(expected.getMessage().contains(\"checksum status indeterminate\"));\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertEquals(\"fake exception\", suppressed[0].getMessage());\n    input.close();\n  }\n\n","sourceOld":"  public void testCheckFooterValidPastFooter() throws Exception {\n    ByteBuffersDataOutput out = new ByteBuffersDataOutput();\n    IndexOutput output = new ByteBuffersIndexOutput(out, \"temp\", \"temp\");\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new ByteBuffersIndexInput(out.toDataInput(), \"temp\"));\n    CodecUtil.checkHeader(input, \"FooBar\", 5, 5);\n    assertEquals(\"this is the data\", input.readString());\n    // bogusly read a byte too far (can happen)\n    input.readByte();\n    Exception mine = new RuntimeException(\"fake exception\");\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertEquals(\"fake exception\", expected.getMessage());\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertTrue(suppressed[0].getMessage().contains(\"checksum status indeterminate\"));\n    input.close();\n  }\n\n","bugFix":["05fe562aa248790944d43cdd478f512572835ba0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["71488d7f5786ae87541276121ecb69705a11a295"],"eb39083d248dc00a9ce4656e519cea3fbf159c91":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71488d7f5786ae87541276121ecb69705a11a295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","71488d7f5786ae87541276121ecb69705a11a295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb39083d248dc00a9ce4656e519cea3fbf159c91"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["eb39083d248dc00a9ce4656e519cea3fbf159c91"],"eb39083d248dc00a9ce4656e519cea3fbf159c91":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71488d7f5786ae87541276121ecb69705a11a295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"71488d7f5786ae87541276121ecb69705a11a295":["409da428f28953cf35fddd5c9ff5c7e4f5439863","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}