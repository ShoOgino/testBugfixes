{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FuzzyKmeansEvaluator#doWork(Object,Object).mjava","commits":[{"id":"c1d0ba687e34a329efbeaa5dd3993568f15a91ed","date":1516728571,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FuzzyKmeansEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n\n    Matrix matrix = null;\n    int k = 0;\n\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for fuzzyKmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for fuzzyKmeans should be k.\");\n    }\n\n    FuzzyKMeansClusterer<KmeansEvaluator.ClusterPoint> kmeans = new FuzzyKMeansClusterer(k,\n                                                                                         fuzziness,\n                                                                                         maxIterations,\n                                                                                         new EuclideanDistance());\n    List<KmeansEvaluator.ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new KmeansEvaluator.ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"fuzziness\", fuzziness);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    List<CentroidCluster<KmeansEvaluator.ClusterPoint>> clusters = kmeans.cluster(points);\n    RealMatrix realMatrix = kmeans.getMembershipMatrix();\n    double[][] mmData = realMatrix.getData();\n    Matrix mmMatrix = new Matrix(mmData);\n    mmMatrix.setRowLabels(matrix.getRowLabels());\n    return new KmeansEvaluator.ClusterTuple(fields, clusters, matrix.getColumnLabels(),mmMatrix);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FuzzyKmeansEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n\n    Matrix matrix = null;\n    int k = 0;\n\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for fuzzyKmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for fuzzyKmeans should be k.\");\n    }\n\n    FuzzyKMeansClusterer<KmeansEvaluator.ClusterPoint> kmeans = new FuzzyKMeansClusterer(k,\n                                                                                         fuzziness,\n                                                                                         maxIterations,\n                                                                                         new EuclideanDistance());\n    List<KmeansEvaluator.ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new KmeansEvaluator.ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"fuzziness\", fuzziness);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    List<CentroidCluster<KmeansEvaluator.ClusterPoint>> clusters = kmeans.cluster(points);\n    RealMatrix realMatrix = kmeans.getMembershipMatrix();\n    double[][] mmData = realMatrix.getData();\n    Matrix mmMatrix = new Matrix(mmData);\n    mmMatrix.setRowLabels(matrix.getRowLabels());\n    return new KmeansEvaluator.ClusterTuple(fields, clusters, matrix.getColumnLabels(),mmMatrix);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c469fe67f2da2a654eb8d709dfd239236f23a9a2","date":1570414680,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FuzzyKmeansEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FuzzyKmeansEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n\n    Matrix matrix = null;\n    int k = 0;\n\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for fuzzyKmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for fuzzyKmeans should be k.\");\n    }\n\n    FuzzyKMeansClusterer<KmeansEvaluator.ClusterPoint> kmeans = new FuzzyKMeansClusterer(k,\n                                                                                         fuzziness,\n                                                                                         maxIterations,\n                                                                                         new EuclideanDistance());\n    List<KmeansEvaluator.ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new KmeansEvaluator.ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"fuzziness\", fuzziness);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    List<CentroidCluster<KmeansEvaluator.ClusterPoint>> clusters = kmeans.cluster(points);\n    RealMatrix realMatrix = kmeans.getMembershipMatrix();\n    double[][] mmData = realMatrix.getData();\n    Matrix mmMatrix = new Matrix(mmData);\n    mmMatrix.setRowLabels(matrix.getRowLabels());\n    List<String> clusterCols = new ArrayList();\n    for(int i=0; i<clusters.size(); i++) {\n      clusterCols.add(\"cluster\"+ ZplotStream.pad(Integer.toString(i), clusters.size()));\n    }\n    mmMatrix.setRowLabels(clusterCols);\n    return new KmeansEvaluator.ClusterTuple(fields, clusters, matrix.getColumnLabels(),mmMatrix);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n\n    Matrix matrix = null;\n    int k = 0;\n\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for fuzzyKmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for fuzzyKmeans should be k.\");\n    }\n\n    FuzzyKMeansClusterer<KmeansEvaluator.ClusterPoint> kmeans = new FuzzyKMeansClusterer(k,\n                                                                                         fuzziness,\n                                                                                         maxIterations,\n                                                                                         new EuclideanDistance());\n    List<KmeansEvaluator.ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new KmeansEvaluator.ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"fuzziness\", fuzziness);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    List<CentroidCluster<KmeansEvaluator.ClusterPoint>> clusters = kmeans.cluster(points);\n    RealMatrix realMatrix = kmeans.getMembershipMatrix();\n    double[][] mmData = realMatrix.getData();\n    Matrix mmMatrix = new Matrix(mmData);\n    mmMatrix.setRowLabels(matrix.getRowLabels());\n    return new KmeansEvaluator.ClusterTuple(fields, clusters, matrix.getColumnLabels(),mmMatrix);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FuzzyKmeansEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FuzzyKmeansEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n\n    Matrix matrix = null;\n    int k = 0;\n\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for fuzzyKmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for fuzzyKmeans should be k.\");\n    }\n\n    FuzzyKMeansClusterer<KmeansEvaluator.ClusterPoint> kmeans = new FuzzyKMeansClusterer(k,\n                                                                                         fuzziness,\n                                                                                         maxIterations,\n                                                                                         new EuclideanDistance());\n    List<KmeansEvaluator.ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new KmeansEvaluator.ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"fuzziness\", fuzziness);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    List<CentroidCluster<KmeansEvaluator.ClusterPoint>> clusters = kmeans.cluster(points);\n    RealMatrix realMatrix = kmeans.getMembershipMatrix();\n    double[][] mmData = realMatrix.getData();\n    Matrix mmMatrix = new Matrix(mmData);\n    mmMatrix.setRowLabels(matrix.getRowLabels());\n    List<String> clusterCols = new ArrayList();\n    for(int i=0; i<clusters.size(); i++) {\n      clusterCols.add(\"cluster\"+ ZplotStream.pad(Integer.toString(i), clusters.size()));\n    }\n    mmMatrix.setRowLabels(clusterCols);\n    return new KmeansEvaluator.ClusterTuple(fields, clusters, matrix.getColumnLabels(),mmMatrix);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n\n    Matrix matrix = null;\n    int k = 0;\n\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for fuzzyKmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for fuzzyKmeans should be k.\");\n    }\n\n    FuzzyKMeansClusterer<KmeansEvaluator.ClusterPoint> kmeans = new FuzzyKMeansClusterer(k,\n                                                                                         fuzziness,\n                                                                                         maxIterations,\n                                                                                         new EuclideanDistance());\n    List<KmeansEvaluator.ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new KmeansEvaluator.ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"fuzziness\", fuzziness);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    List<CentroidCluster<KmeansEvaluator.ClusterPoint>> clusters = kmeans.cluster(points);\n    RealMatrix realMatrix = kmeans.getMembershipMatrix();\n    double[][] mmData = realMatrix.getData();\n    Matrix mmMatrix = new Matrix(mmData);\n    mmMatrix.setRowLabels(matrix.getRowLabels());\n    return new KmeansEvaluator.ClusterTuple(fields, clusters, matrix.getColumnLabels(),mmMatrix);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FuzzyKmeansEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/FuzzyKmeansEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n\n    Matrix matrix = null;\n    int k = 0;\n\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for fuzzyKmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for fuzzyKmeans should be k.\");\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    FuzzyKMeansClusterer<KmeansEvaluator.ClusterPoint> kmeans = new FuzzyKMeansClusterer(k,\n                                                                                         fuzziness,\n                                                                                         maxIterations,\n                                                                                         new EuclideanDistance());\n    List<KmeansEvaluator.ClusterPoint> points = new ArrayList<>();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new KmeansEvaluator.ClusterPoint(ids.get(i), vec));\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"fuzziness\", fuzziness);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    List<CentroidCluster<KmeansEvaluator.ClusterPoint>> clusters = kmeans.cluster(points);\n    RealMatrix realMatrix = kmeans.getMembershipMatrix();\n    double[][] mmData = realMatrix.getData();\n    Matrix mmMatrix = new Matrix(mmData);\n    mmMatrix.setRowLabels(matrix.getRowLabels());\n    List<String> clusterCols = new ArrayList<>();\n    for(int i=0; i<clusters.size(); i++) {\n      clusterCols.add(\"cluster\"+ ZplotStream.pad(Integer.toString(i), clusters.size()));\n    }\n    mmMatrix.setRowLabels(clusterCols);\n    return new KmeansEvaluator.ClusterTuple(fields, clusters, matrix.getColumnLabels(),mmMatrix);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value1, Object value2) throws IOException {\n\n\n    Matrix matrix = null;\n    int k = 0;\n\n\n    if(value1 instanceof Matrix) {\n      matrix = (Matrix)value1;\n    } else {\n      throw new IOException(\"The first parameter for fuzzyKmeans should be the observation matrix.\");\n    }\n\n    if(value2 instanceof Number) {\n      k = ((Number)value2).intValue();\n    } else {\n      throw new IOException(\"The second parameter for fuzzyKmeans should be k.\");\n    }\n\n    FuzzyKMeansClusterer<KmeansEvaluator.ClusterPoint> kmeans = new FuzzyKMeansClusterer(k,\n                                                                                         fuzziness,\n                                                                                         maxIterations,\n                                                                                         new EuclideanDistance());\n    List<KmeansEvaluator.ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      points.add(new KmeansEvaluator.ClusterPoint(ids.get(i), vec));\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"k\", k);\n    fields.put(\"fuzziness\", fuzziness);\n    fields.put(\"distance\", \"euclidean\");\n    fields.put(\"maxIterations\", maxIterations);\n\n    List<CentroidCluster<KmeansEvaluator.ClusterPoint>> clusters = kmeans.cluster(points);\n    RealMatrix realMatrix = kmeans.getMembershipMatrix();\n    double[][] mmData = realMatrix.getData();\n    Matrix mmMatrix = new Matrix(mmData);\n    mmMatrix.setRowLabels(matrix.getRowLabels());\n    List<String> clusterCols = new ArrayList();\n    for(int i=0; i<clusters.size(); i++) {\n      clusterCols.add(\"cluster\"+ ZplotStream.pad(Integer.toString(i), clusters.size()));\n    }\n    mmMatrix.setRowLabels(clusterCols);\n    return new KmeansEvaluator.ClusterTuple(fields, clusters, matrix.getColumnLabels(),mmMatrix);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["c469fe67f2da2a654eb8d709dfd239236f23a9a2"],"c1d0ba687e34a329efbeaa5dd3993568f15a91ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c469fe67f2da2a654eb8d709dfd239236f23a9a2":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1d0ba687e34a329efbeaa5dd3993568f15a91ed"],"b0b597c65628ca9e73913a07e81691f8229bae35":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","c469fe67f2da2a654eb8d709dfd239236f23a9a2"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1d0ba687e34a329efbeaa5dd3993568f15a91ed":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"c469fe67f2da2a654eb8d709dfd239236f23a9a2":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1d0ba687e34a329efbeaa5dd3993568f15a91ed","43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["c469fe67f2da2a654eb8d709dfd239236f23a9a2","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}