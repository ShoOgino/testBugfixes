{"path":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(newRandom(), dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(newRandom(), dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(newRandom(), dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(newRandom(), dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(newRandom(), dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(newRandom(), dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(newRandom(), dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(newRandom(), dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(newRandom(), dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680afea24788497408a554fb2e56812496e8c7c4","date":1282663439,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3664dc00236a987ef7ac7860a3be1186b4dfbb8d","date":1282926223,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(newRandom(), dir);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    s.close();\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    s.close();\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    s.close();\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    s.close();\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", Field.Store.NO, Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    s.close();\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = s.getSimilarityProvider();\n    s.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return delegate.queryNorm(sumOfSquaredWeights);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    s.close();\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1.0/3), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2.0/3), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    s.close();\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = s.getSimilarityProvider();\n    s.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return delegate.queryNorm(sumOfSquaredWeights);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = s.getSimilarityProvider();\n    s.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return delegate.queryNorm(sumOfSquaredWeights);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    s.close();\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = s.getSimilarityProvider();\n    s.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return delegate.queryNorm(sumOfSquaredWeights);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = s.getSimilarityProvider();\n    s.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return delegate.queryNorm(sumOfSquaredWeights);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    s.close();\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    final SimilarityProvider delegate = s.getSimilarityProvider();\n    s.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return delegate.queryNorm(sumOfSquaredWeights);\n      }\n\n      @Override\n      public Similarity get(String field) {\n        return delegate.get(field);\n      }\n    });\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testNullOrSubScorer().mjava","sourceNew":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1630\n  public void testNullOrSubScorer() throws Throwable {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d\", TextField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // this test relies upon coord being the default implementation,\n    // otherwise scores are different!\n    s.setSimilarity(new DefaultSimilarity());\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n\n    // LUCENE-2617: make sure that a term not in the index still contributes to the score via coord factor\n    float score = s.search(q, 10).getMaxScore();\n    Query subQuery = new TermQuery(new Term(\"field\", \"not_in_index\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.SHOULD);\n    float score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*.5F, score2, 1e-6);\n\n    // LUCENE-2617: make sure that a clause not in the index still contributes to the score via coord factor\n    BooleanQuery qq = (BooleanQuery)q.clone();\n    PhraseQuery phrase = new PhraseQuery();\n    phrase.add(new Term(\"field\", \"not_in_index\"));\n    phrase.add(new Term(\"field\", \"another_not_in_index\"));\n    phrase.setBoost(0);\n    qq.add(phrase, BooleanClause.Occur.SHOULD);\n    score2 = s.search(qq, 10).getMaxScore();\n    assertEquals(score*(1/3F), score2, 1e-6);\n\n    // now test BooleanScorer2\n    subQuery = new TermQuery(new Term(\"field\", \"b\"));\n    subQuery.setBoost(0);\n    q.add(subQuery, BooleanClause.Occur.MUST);\n    score2 = s.search(q, 10).getMaxScore();\n    assertEquals(score*(2/3F), score2, 1e-6);\n \n    // PhraseQuery w/ no terms added returns a null scorer\n    PhraseQuery pq = new PhraseQuery();\n    q.add(pq, BooleanClause.Occur.SHOULD);\n    assertEquals(1, s.search(q, 10).totalHits);\n\n    // A required clause which returns null scorer should return null scorer to\n    // IndexSearcher.\n    q = new BooleanQuery();\n    pq = new PhraseQuery();\n    q.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.SHOULD);\n    q.add(pq, BooleanClause.Occur.MUST);\n    assertEquals(0, s.search(q, 10).totalHits);\n\n    DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(1.0f);\n    dmq.add(new TermQuery(new Term(\"field\", \"a\")));\n    dmq.add(pq);\n    assertEquals(1, s.search(dmq, 10).totalHits);\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3664dc00236a987ef7ac7860a3be1186b4dfbb8d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"680afea24788497408a554fb2e56812496e8c7c4":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"3664dc00236a987ef7ac7860a3be1186b4dfbb8d":["680afea24788497408a554fb2e56812496e8c7c4"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["680afea24788497408a554fb2e56812496e8c7c4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","1509f151d7692d84fae414b2b799ac06ba60fcb4","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e","5f4e87790277826a2aea119328600dfb07761f32"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"680afea24788497408a554fb2e56812496e8c7c4":["3664dc00236a987ef7ac7860a3be1186b4dfbb8d"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"3664dc00236a987ef7ac7860a3be1186b4dfbb8d":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}