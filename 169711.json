{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#WithinPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int,double).mjava","commits":[{"id":"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b","date":1364392557,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#WithinPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * See {@link AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                int detailLevel, int prefixGridScanLevel, double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    if (queryBuffer == -1)\n      this.bufferedQueryShape = null;\n    else\n      this.bufferedQueryShape = bufferShape(queryShape, queryBuffer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4","date":1422887461,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#WithinPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int,boolean,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#WithinPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int,double).mjava","sourceNew":"  /**\n   * See {@link AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int, boolean)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                int detailLevel, int prefixGridScanLevel, boolean hasIndexedLeaves,\n                                double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel, hasIndexedLeaves);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","sourceOld":"  /**\n   * See {@link AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                int detailLevel, int prefixGridScanLevel, double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    if (queryBuffer == -1)\n      this.bufferedQueryShape = null;\n    else\n      this.bufferedQueryShape = bufferShape(queryShape, queryBuffer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#WithinPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#WithinPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int,boolean,double).mjava","sourceNew":"  /**\n   * See {@link AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                int detailLevel, int prefixGridScanLevel,\n                                double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","sourceOld":"  /**\n   * See {@link AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int, boolean)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                int detailLevel, int prefixGridScanLevel, boolean hasIndexedLeaves,\n                                double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel, hasIndexedLeaves);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#WithinPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * See {@link AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                int detailLevel, int prefixGridScanLevel,\n                                double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#WithinPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#WithinPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int,double).mjava","sourceNew":"  /**\n   * See {@link AbstractVisitingPrefixTreeQuery#AbstractVisitingPrefixTreeQuery(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                               int detailLevel, int prefixGridScanLevel,\n                               double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","sourceOld":"  /**\n   * See {@link AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(com.spatial4j.core.shape.Shape, String, org.apache.lucene.spatial.prefix.tree.SpatialPrefixTree, int, int)}.\n   * {@code queryBuffer} is the (minimum) distance beyond the query shape edge\n   * where non-matching documents are looked for so they can be excluded. If\n   * -1 is used then the whole world is examined (a good default for correctness).\n   */\n  public WithinPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                int detailLevel, int prefixGridScanLevel,\n                                double queryBuffer) {\n    super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    this.bufferedQueryShape = queryBuffer == -1 ? null : bufferShape(queryShape, queryBuffer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"672b198fc3dce868916c727917cae58c2906763d":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672b198fc3dce868916c727917cae58c2906763d"],"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"672b198fc3dce868916c727917cae58c2906763d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5aeecf64d57563b4636e7f4222e7ddcde7f8df7b"],"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","672b198fc3dce868916c727917cae58c2906763d"],"5aeecf64d57563b4636e7f4222e7ddcde7f8df7b":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}