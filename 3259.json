{"path":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) throws IOException {\n      if (rangeBounds.size() >= 2) {\n        assert rangeBounds.size() % 2 == 0;\n\n        this.currentLowerBound = rangeBounds.removeFirst();\n        assert currentUpperBound == null || termComp.compare(currentUpperBound, currentLowerBound) <= 0 :\n          \"The current upper bound must be <= the new lower bound\";\n        \n        this.currentUpperBound = rangeBounds.removeFirst();\n        return currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.size() == 0;\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"449aa3166f747982f507c48782901cde8693b608","date":1285560445,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) throws IOException {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && termComp.compare(term, currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && termComp.compare(term, currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","sourceOld":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) throws IOException {\n      if (rangeBounds.size() >= 2) {\n        assert rangeBounds.size() % 2 == 0;\n\n        this.currentLowerBound = rangeBounds.removeFirst();\n        assert currentUpperBound == null || termComp.compare(currentUpperBound, currentLowerBound) <= 0 :\n          \"The current upper bound must be <= the new lower bound\";\n        \n        this.currentUpperBound = rangeBounds.removeFirst();\n        return currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.size() == 0;\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) throws IOException {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && termComp.compare(term, currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && termComp.compare(term, currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","sourceOld":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) throws IOException {\n      if (rangeBounds.size() >= 2) {\n        assert rangeBounds.size() % 2 == 0;\n\n        this.currentLowerBound = rangeBounds.removeFirst();\n        assert currentUpperBound == null || termComp.compare(currentUpperBound, currentLowerBound) <= 0 :\n          \"The current upper bound must be <= the new lower bound\";\n        \n        this.currentUpperBound = rangeBounds.removeFirst();\n        return currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.size() == 0;\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) throws IOException {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && termComp.compare(term, currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && termComp.compare(term, currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","sourceOld":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) throws IOException {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && termComp.compare(term, currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && termComp.compare(term, currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"449aa3166f747982f507c48782901cde8693b608":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["449aa3166f747982f507c48782901cde8693b608"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","449aa3166f747982f507c48782901cde8693b608"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"449aa3166f747982f507c48782901cde8693b608":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["449aa3166f747982f507c48782901cde8693b608","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}