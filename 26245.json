{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  TestUtil.getTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  _TestUtil.getTempDir(\"trecFeedAllTypes\");\n    _TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  TestUtil.getTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  TestUtil.getTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<ParsePathType>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  TestUtil.createTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  TestUtil.getTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  createTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  TestUtil.createTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  createTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  TestUtil.getTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    Path dataDir =  createTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataPath(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.toRealPath().toString().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    File dataDir =  createTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataFile(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.getCanonicalPath().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee","date":1410650745,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    Path dataDir =  createTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataInputStream(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.toRealPath().toString().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    Path dataDir =  createTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataPath(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.toRealPath().toString().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ac6066eb96c6bfb09ee6fdaf8a019ebfe1c8f3","date":1418877721,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/TrecContentSourceTest#testTrecFeedDirAllTypes().mjava","sourceNew":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    Path dataDir =  createTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataInputStream(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"docs.dir\", dataDir.toRealPath().toString().replace('\\\\','/'));\n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * Open a trec content source over a directory with files of all trec path types and all\n   * supported formats - bzip, gzip, txt. \n   */\n  public void testTrecFeedDirAllTypes() throws Exception {\n    Path dataDir =  createTempDir(\"trecFeedAllTypes\");\n    TestUtil.unzip(getDataInputStream(\"trecdocs.zip\"), dataDir);\n    TrecContentSource tcs = new TrecContentSource();\n    Properties props = new Properties();\n    props.setProperty(\"print.props\", \"false\");\n    props.setProperty(\"content.source.verbose\", \"false\");\n    props.setProperty(\"content.source.excludeIteration\", \"true\");\n    props.setProperty(\"doc.maker.forever\", \"false\");\n    props.setProperty(\"docs.dir\", dataDir.toRealPath().toString().replace('\\\\','/')); \n    props.setProperty(\"trec.doc.parser\", TrecParserByPath.class.getName());\n    props.setProperty(\"content.source.forever\", \"false\");\n    tcs.setConfig(new Config(props));\n    tcs.resetInputs();\n    DocData dd = new DocData();\n    int n = 0;\n    boolean gotExpectedException = false;\n    HashSet<ParsePathType> unseenTypes = new HashSet<>(Arrays.asList(ParsePathType.values()));\n    try {\n      while (n<100) { // arbiterary limit to prevent looping forever in case of test failure\n        dd = tcs.getNextDocData(dd);\n        ++n;\n        assertNotNull(\"doc data \"+n+\" should not be null!\", dd);\n        unseenTypes.remove(tcs.currPathType);\n        switch(tcs.currPathType) {\n          case GOV2:\n            assertDocData(dd, \"TEST-000\", \"TEST-000 title\", \"TEST-000 text\", tcs.parseDate(\"Sun, 11 Jan 2009 08:00:00 GMT\"));\n            break;\n          case FBIS:\n            assertDocData(dd, \"TEST-001\", \"TEST-001 Title\", \"TEST-001 text\", tcs.parseDate(\"1 January 1991\"));\n            break;\n          case FR94:\n            // no title extraction in this source for now\n            assertDocData(dd, \"TEST-002\", null, \"DEPARTMENT OF SOMETHING\", tcs.parseDate(\"February 3, 1994\"));\n            break;\n          case FT:\n            assertDocData(dd, \"TEST-003\", \"Test-003 title\", \"Some pub text\", tcs.parseDate(\"980424\"));\n            break;\n          case LATIMES:\n            assertDocData(dd, \"TEST-004\", \"Test-004 Title\", \"Some paragraph\", tcs.parseDate(\"January 17, 1997, Sunday\"));\n            break;\n          default:\n            assertTrue(\"Should never get here!\", false);\n        }\n      }\n    } catch (NoMoreDataException e) {\n      gotExpectedException = true;\n    }\n    assertTrue(\"Should have gotten NoMoreDataException!\", gotExpectedException);\n    assertEquals(\"Wrong number of documents created by source!\",5,n);\n    assertTrue(\"Did not see all types!\",unseenTypes.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7ac6066eb96c6bfb09ee6fdaf8a019ebfe1c8f3":["509b34c7d48bc90eb4ec5e8757e0f879a19f22ee"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7ac6066eb96c6bfb09ee6fdaf8a019ebfe1c8f3"]},"commit2Childs":{"f7ac6066eb96c6bfb09ee6fdaf8a019ebfe1c8f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6613659748fe4411a7dcf85266e55db1f95f7315"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee":["f7ac6066eb96c6bfb09ee6fdaf8a019ebfe1c8f3"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"f4abec28b874149a7223e32cc7a01704c27790de":["509b34c7d48bc90eb4ec5e8757e0f879a19f22ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}