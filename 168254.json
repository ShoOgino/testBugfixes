{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","commits":[{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(3, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       }]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1baa51a584257952df4811539013a7ce52c103ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0cc3985db0453a1f825e33cce38b0849aa38d8b","date":1427304750,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","sourceNew":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(3, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       }]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","sourceOld":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(3, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       }]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(3, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       }]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1baa51a584257952df4811539013a7ce52c103ae","date":1434484920,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","sourceNew":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","sourceOld":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(3, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       }]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","bugFix":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","sourceNew":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","sourceOld":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","sourceNew":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","sourceOld":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","sourceNew":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","sourceOld":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema?wt=json\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema?wt=json\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03d29de0abdd3a2150c0dabfe1bf98024bbfa367","date":1515464714,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","sourceNew":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n  }\n\n","sourceOld":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","sourceNew":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n  }\n\n","sourceOld":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"errors\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","sourceNew":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(cmds));\n\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    Object errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n  }\n\n","sourceOld":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(cmds));\n\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(map.get(\"error\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testDeleteAndReplace().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(cmds));\n\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    Object errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n  }\n\n","sourceOld":"  public void testDeleteAndReplace() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    Map map = getObj(harness, \"NewField1\", \"fields\");\n    assertNull(\"Field 'NewField1' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNull(\"Field 'NewField2' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNull(\"'NewFieldType' field type already exists in the schema\", map);\n\n    List list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(\"There is already a copy field with source 'NewField1' in the schema\", 0, list.size());\n\n    map = getObj(harness, \"NewDynamicField1*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField1*' already exists in the schema\", map);\n\n    map = getObj(harness, \"NewDynamicField2*\", \"dynamicFields\");\n    assertNull(\"Dynamic field 'NewDynamicField2*' already exists in the schema\", map);\n\n    String cmds = \"{\\n\" + \n        \"     'add-field-type': {   'name':'NewFieldType',     'class':'solr.StrField'                    },\\n\" +\n        \"          'add-field': [{  'name':'NewField1',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField2',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField3',         'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewField4',         'type':'NewFieldType'                    }],\\n\" +\n        \"  'add-dynamic-field': [{  'name':'NewDynamicField1*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField2*', 'type':'NewFieldType'                    },\\n\" +\n        \"                        {  'name':'NewDynamicField3*', 'type':'NewFieldType'                    }],\\n\" +\n        \"     'add-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']},\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                       },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField3'                       },\\n\" +\n        \"                        {'source':'NewField4',         'dest':'NewField2', maxChars: 100        },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1'], maxChars: 3333     }]\\n\" +\n        \"}\\n\";\n\n    String response = harness.post(\"/schema\", json(cmds));\n\n    map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(harness, \"NewFieldType\", \"fieldTypes\");\n    assertNotNull(\"'NewFieldType' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField1\", \"fields\");\n    assertNotNull(\"Field 'NewField1' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField2\", \"fields\");\n    assertNotNull(\"Field 'NewField2' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField3\", \"fields\");\n    assertNotNull(\"Field 'NewField3' is not in the schema\", map);\n\n    map = getObj(harness, \"NewField4\", \"fields\");\n    assertNotNull(\"Field 'NewField4' is not in the schema\", map);\n\n    list = getSourceCopyFields(harness, \"NewField1\");\n    Set set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField3\", ((Map)list.get(0)).get(\"dest\"));\n\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(3, list.size());\n    map.clear();\n    for (Object obj : list) { \n      map.put(((Map)obj).get(\"dest\"), ((Map)obj).get(\"maxChars\"));\n    }\n    assertTrue(map.containsKey(\"NewField1\"));\n    assertEquals(3333L, map.get(\"NewField1\"));\n    assertTrue(map.containsKey(\"NewField2\"));\n    assertEquals(100L, map.get(\"NewField2\"));\n    assertTrue(map.containsKey(\"NewField3\"));\n    assertNull(map.get(\"NewField3\"));\n\n    cmds = \"{'delete-field-type' : {'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    Object errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains(\"Can't delete 'NewFieldType' because it's the field type of \"));\n\n    cmds = \"{'delete-field' : {'name':'NewField1'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField1' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'delete-field' : {'name':'NewField2'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"Can't delete field 'NewField2' because it's referred to by at least one copy field directive\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField1', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n    // Make sure the copy field directives with source NewField1 are preserved\n    list = getSourceCopyFields(harness, \"NewField1\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"dest\"));\n    }\n    assertEquals(2, list.size());\n    assertTrue(set.contains(\"NewField2\"));\n    assertTrue(set.contains(\"NewDynamicField1A\"));\n\n    cmds = \"{'delete-dynamic-field' : {'name':'NewDynamicField1*'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNotNull(errors);\n    assertTrue(errors.toString().contains\n        (\"copyField dest :'NewDynamicField1A' is not an explicit field and doesn't match a dynamicField.\"));\n\n    cmds = \"{'replace-field' : {'name':'NewField2', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with destination NewField2 are preserved\n    list = getDestCopyFields(harness, \"NewField2\");\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertEquals(4, list.size());\n    assertTrue(set.contains(\"NewField1\"));\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField1*\"));\n    assertTrue(set.contains(\"NewDynamicField2*\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField2*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with source NewDynamicField2* are preserved\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField2\", ((Map) list.get(0)).get(\"dest\"));\n\n    cmds = \"{'replace-dynamic-field' : {'name':'NewDynamicField1*', 'type':'string'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    errors = map.get(\"error\");\n    assertNull(errors);\n    // Make sure the copy field directives with destinations matching NewDynamicField1* are preserved\n    list = getDestCopyFields(harness, \"NewDynamicField1A\");\n    assertEquals(1, list.size());\n    assertEquals(\"NewField1\", ((Map) list.get(0)).get(\"source\"));\n\n    cmds = \"{'replace-field-type': {'name':'NewFieldType', 'class':'solr.BinaryField'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n    // Make sure the copy field directives with sources and destinations of type NewFieldType are preserved\n    list = getDestCopyFields(harness, \"NewField3\");\n    assertEquals(2, list.size());\n    set = new HashSet();\n    for (Object obj : list) {\n      set.add(((Map)obj).get(\"source\"));\n    }\n    assertTrue(set.contains(\"NewField4\"));\n    assertTrue(set.contains(\"NewDynamicField3*\"));\n\n    cmds = \"{\\n\" +\n        \"  'delete-copy-field': [{'source':'NewField1',         'dest':['NewField2', 'NewDynamicField1A']     },\\n\" +\n        \"                        {'source':'NewDynamicField1*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField2*', 'dest':'NewField2'                            },\\n\" +\n        \"                        {'source':'NewDynamicField3*', 'dest':'NewField3'                            },\\n\" +\n        \"                        {'source':'NewField4',         'dest':['NewField1', 'NewField2', 'NewField3']}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n    list = getSourceCopyFields(harness, \"NewField1\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField1*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField2*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewDynamicField3*\");\n    assertEquals(0, list.size());\n    list = getSourceCopyFields(harness, \"NewField4\");\n    assertEquals(0, list.size());\n    \n    cmds = \"{'delete-field': [{'name':'NewField1'},{'name':'NewField2'},{'name':'NewField3'},{'name':'NewField4'}]}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n\n    cmds = \"{'delete-dynamic-field': [{'name':'NewDynamicField1*'},\" +\n        \"                             {'name':'NewDynamicField2*'},\\n\" +\n        \"                             {'name':'NewDynamicField3*'}]\\n\" +\n        \"}\\n\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n    \n    cmds = \"{'delete-field-type':{'name':'NewFieldType'}}\";\n    response = harness.post(\"/schema\", json(cmds));\n    map = (Map) fromJSONString(response);\n    assertNull(map.get(\"error\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a52341299179de5479672f7cf518bf4b173f34b3","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["1baa51a584257952df4811539013a7ce52c103ae","ac1e7fa558287a811ea07634d815ee7b1c541284"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e0cc3985db0453a1f825e33cce38b0849aa38d8b"],"a52341299179de5479672f7cf518bf4b173f34b3":["1baa51a584257952df4811539013a7ce52c103ae","ac1e7fa558287a811ea07634d815ee7b1c541284"],"1baa51a584257952df4811539013a7ce52c103ae":["e0cc3985db0453a1f825e33cce38b0849aa38d8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e0cc3985db0453a1f825e33cce38b0849aa38d8b":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["1baa51a584257952df4811539013a7ce52c103ae"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["e0cc3985db0453a1f825e33cce38b0849aa38d8b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a52341299179de5479672f7cf518bf4b173f34b3":["b94236357aaa22b76c10629851fe4e376e0cea82","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"1baa51a584257952df4811539013a7ce52c103ae":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeeea2295d6355a29e259130a5c48ace73022d7c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"e0cc3985db0453a1f825e33cce38b0849aa38d8b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1baa51a584257952df4811539013a7ce52c103ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}