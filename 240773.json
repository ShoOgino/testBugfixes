{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testAddDocsNonAbortingException().mjava","commits":[{"id":"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","date":1306166545,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testAddDocsNonAbortingException().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddDocsNonAbortingException() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs1 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs1;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    \n    final List<Document> docs = new ArrayList<Document>();\n    for(int docCount=0;docCount<7;docCount++) {\n      Document doc = new Document();\n      docs.add(doc);\n      doc.add(newField(\"id\", docCount+\"\", Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"silly content \" + docCount, Field.Index.ANALYZED));\n      if (docCount == 4) {\n        Field f = newField(\"crash\", \"\", Field.Index.ANALYZED);\n        doc.add(f);\n        MockTokenizer tokenizer = new MockTokenizer(new StringReader(\"crash me on the 4th token\"), MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        f.setTokenStream(new CrashingFilter(\"crash\", tokenizer));\n      }\n    }\n    try {\n      w.addDocuments(docs);\n      // BUG: CrashingFilter didn't\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n      assertEquals(CRASH_FAIL_MESSAGE, ioe.getMessage());\n    }\n\n    final int numDocs2 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs2;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final IndexSearcher s = new IndexSearcher(r);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"silly\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(0, s.search(pq, 1).totalHits);\n\n    pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"good\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(numDocs1+numDocs2, s.search(pq, 1).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testAddDocsNonAbortingException().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddDocsNonAbortingException() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs1 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs1;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    \n    final List<Document> docs = new ArrayList<Document>();\n    for(int docCount=0;docCount<7;docCount++) {\n      Document doc = new Document();\n      docs.add(doc);\n      doc.add(newField(\"id\", docCount+\"\", Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"silly content \" + docCount, Field.Index.ANALYZED));\n      if (docCount == 4) {\n        Field f = newField(\"crash\", \"\", Field.Index.ANALYZED);\n        doc.add(f);\n        MockTokenizer tokenizer = new MockTokenizer(new StringReader(\"crash me on the 4th token\"), MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        f.setTokenStream(new CrashingFilter(\"crash\", tokenizer));\n      }\n    }\n    try {\n      w.addDocuments(docs);\n      // BUG: CrashingFilter didn't\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n      assertEquals(CRASH_FAIL_MESSAGE, ioe.getMessage());\n    }\n\n    final int numDocs2 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs2;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final IndexSearcher s = new IndexSearcher(r);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"silly\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(0, s.search(pq, 1).totalHits);\n\n    pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"good\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(numDocs1+numDocs2, s.search(pq, 1).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testAddDocsNonAbortingException().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddDocsNonAbortingException() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs1 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs1;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    \n    final List<Document> docs = new ArrayList<Document>();\n    for(int docCount=0;docCount<7;docCount++) {\n      Document doc = new Document();\n      docs.add(doc);\n      doc.add(newField(\"id\", docCount+\"\", Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"silly content \" + docCount, Field.Index.ANALYZED));\n      if (docCount == 4) {\n        Field f = newField(\"crash\", \"\", Field.Index.ANALYZED);\n        doc.add(f);\n        MockTokenizer tokenizer = new MockTokenizer(new StringReader(\"crash me on the 4th token\"), MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        f.setTokenStream(new CrashingFilter(\"crash\", tokenizer));\n      }\n    }\n    try {\n      w.addDocuments(docs);\n      // BUG: CrashingFilter didn't\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n      assertEquals(CRASH_FAIL_MESSAGE, ioe.getMessage());\n    }\n\n    final int numDocs2 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs2;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final IndexSearcher s = new IndexSearcher(r);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"silly\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(0, s.search(pq, 1).totalHits);\n\n    pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"good\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(numDocs1+numDocs2, s.search(pq, 1).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testAddDocsNonAbortingException().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testAddDocsNonAbortingException().mjava","sourceNew":"  public void testAddDocsNonAbortingException() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs1 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs1;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    \n    final List<Document> docs = new ArrayList<Document>();\n    for(int docCount=0;docCount<7;docCount++) {\n      Document doc = new Document();\n      docs.add(doc);\n      doc.add(newField(\"id\", docCount+\"\", StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"silly content \" + docCount, TextField.TYPE_UNSTORED));\n      if (docCount == 4) {\n        Field f = newField(\"crash\", \"\", TextField.TYPE_UNSTORED);\n        doc.add(f);\n        MockTokenizer tokenizer = new MockTokenizer(new StringReader(\"crash me on the 4th token\"), MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        f.setTokenStream(new CrashingFilter(\"crash\", tokenizer));\n      }\n    }\n    try {\n      w.addDocuments(docs);\n      // BUG: CrashingFilter didn't\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n      assertEquals(CRASH_FAIL_MESSAGE, ioe.getMessage());\n    }\n\n    final int numDocs2 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs2;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final IndexSearcher s = new IndexSearcher(r);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"silly\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(0, s.search(pq, 1).totalHits);\n\n    pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"good\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(numDocs1+numDocs2, s.search(pq, 1).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testAddDocsNonAbortingException() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs1 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs1;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    \n    final List<Document> docs = new ArrayList<Document>();\n    for(int docCount=0;docCount<7;docCount++) {\n      Document doc = new Document();\n      docs.add(doc);\n      doc.add(newField(\"id\", docCount+\"\", Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"content\", \"silly content \" + docCount, Field.Index.ANALYZED));\n      if (docCount == 4) {\n        Field f = newField(\"crash\", \"\", Field.Index.ANALYZED);\n        doc.add(f);\n        MockTokenizer tokenizer = new MockTokenizer(new StringReader(\"crash me on the 4th token\"), MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        f.setTokenStream(new CrashingFilter(\"crash\", tokenizer));\n      }\n    }\n    try {\n      w.addDocuments(docs);\n      // BUG: CrashingFilter didn't\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n      assertEquals(CRASH_FAIL_MESSAGE, ioe.getMessage());\n    }\n\n    final int numDocs2 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs2;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final IndexSearcher s = new IndexSearcher(r);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"silly\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(0, s.search(pq, 1).totalHits);\n\n    pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"good\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(numDocs1+numDocs2, s.search(pq, 1).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testAddDocsNonAbortingException().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testAddDocsNonAbortingException().mjava","sourceNew":"  public void testAddDocsNonAbortingException() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs1 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs1;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    \n    final List<Document> docs = new ArrayList<Document>();\n    for(int docCount=0;docCount<7;docCount++) {\n      Document doc = new Document();\n      docs.add(doc);\n      doc.add(newField(\"id\", docCount+\"\", StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"silly content \" + docCount, TextField.TYPE_UNSTORED));\n      if (docCount == 4) {\n        Field f = newField(\"crash\", \"\", TextField.TYPE_UNSTORED);\n        doc.add(f);\n        MockTokenizer tokenizer = new MockTokenizer(new StringReader(\"crash me on the 4th token\"), MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        f.setTokenStream(new CrashingFilter(\"crash\", tokenizer));\n      }\n    }\n    try {\n      w.addDocuments(docs);\n      // BUG: CrashingFilter didn't\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n      assertEquals(CRASH_FAIL_MESSAGE, ioe.getMessage());\n    }\n\n    final int numDocs2 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs2;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final IndexSearcher s = new IndexSearcher(r);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"silly\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(0, s.search(pq, 1).totalHits);\n\n    pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"good\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(numDocs1+numDocs2, s.search(pq, 1).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testAddDocsNonAbortingException() throws Exception {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int numDocs1 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs1;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    \n    final List<Document> docs = new ArrayList<Document>();\n    for(int docCount=0;docCount<7;docCount++) {\n      Document doc = new Document();\n      docs.add(doc);\n      doc.add(newField(\"id\", docCount+\"\", StringField.TYPE_UNSTORED));\n      doc.add(newField(\"content\", \"silly content \" + docCount, TextField.TYPE_UNSTORED));\n      if (docCount == 4) {\n        Field f = newField(\"crash\", \"\", TextField.TYPE_UNSTORED);\n        doc.add(f);\n        MockTokenizer tokenizer = new MockTokenizer(new StringReader(\"crash me on the 4th token\"), MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        f.setTokenStream(new CrashingFilter(\"crash\", tokenizer));\n      }\n    }\n    try {\n      w.addDocuments(docs);\n      // BUG: CrashingFilter didn't\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n      assertEquals(CRASH_FAIL_MESSAGE, ioe.getMessage());\n    }\n\n    final int numDocs2 = random.nextInt(25);\n    for(int docCount=0;docCount<numDocs2;docCount++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"good content\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final IndexSearcher s = new IndexSearcher(r);\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"silly\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(0, s.search(pq, 1).totalHits);\n\n    pq = new PhraseQuery();\n    pq.add(new Term(\"content\", \"good\"));\n    pq.add(new Term(\"content\", \"content\"));\n    assertEquals(numDocs1+numDocs2, s.search(pq, 1).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"]},"commit2Childs":{"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1509f151d7692d84fae414b2b799ac06ba60fcb4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}