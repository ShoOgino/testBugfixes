{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes).mjava","commits":[{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet) throws IOException {\n    // lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      // publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d45e9e2ad7f57776540627c78f5e22e469ccdc1","date":1302784878,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet) throws IOException {\n    // lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      // publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["327863a2fd61e831028b6c56c8fef6b00a44eb0b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}