{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#nextInterval().mjava","commits":[{"id":"361b1afc99f68598c73d37074aec089c9c951586","date":1522744632,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#nextInterval().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextInterval() throws IOException {\n      while (this.queue.size() == subIterators.length && queue.top().start() == start) {\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      }\n      if (this.queue.size() < subIterators.length)\n        return IntervalIterator.NO_MORE_INTERVALS;\n      do {\n        start = queue.top().start();\n        end = queueEnd;\n        if (queue.top().end() == end)\n          return start;\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      } while (this.queue.size() == subIterators.length && end == queueEnd);\n      return start;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3480728ed564c17162fff1200a8d15c1a5f24cd","date":1527693339,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#nextInterval().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#nextInterval().mjava","sourceNew":"    @Override\n    public int nextInterval() throws IOException {\n      // first, find a matching interval\n      while (this.queue.size() == subIterators.length && queue.top().start() == start) {\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS)\n                return IntervalIterator.NO_MORE_INTERVALS;\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      }\n      if (this.queue.size() < subIterators.length)\n        return IntervalIterator.NO_MORE_INTERVALS;\n      // then, minimize it\n      do {\n        start = queue.top().start();\n        end = queueEnd;\n        if (queue.top().end() == end)\n          return start;\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n                return start;\n              }\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      } while (this.queue.size() == subIterators.length && end == queueEnd);\n      return start;\n    }\n\n","sourceOld":"    @Override\n    public int nextInterval() throws IOException {\n      while (this.queue.size() == subIterators.length && queue.top().start() == start) {\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      }\n      if (this.queue.size() < subIterators.length)\n        return IntervalIterator.NO_MORE_INTERVALS;\n      do {\n        start = queue.top().start();\n        end = queueEnd;\n        if (queue.top().end() == end)\n          return start;\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      } while (this.queue.size() == subIterators.length && end == queueEnd);\n      return start;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff275d3941a30f2db7c9278444015f412b835254","date":1544435249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#nextInterval().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#nextInterval().mjava","sourceNew":"    @Override\n    public int nextInterval() throws IOException {\n      // first, find a matching interval\n      while (this.queue.size() == subIterators.length && queue.top().start() == start) {\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS)\n                return IntervalIterator.NO_MORE_INTERVALS;\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      }\n      if (this.queue.size() < subIterators.length)\n        return IntervalIterator.NO_MORE_INTERVALS;\n      // then, minimize it\n      do {\n        start = queue.top().start();\n        firstEnd = queue.top().end();\n        end = queueEnd;\n        if (queue.top().end() == end)\n          return start;\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n                return start;\n              }\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      } while (this.queue.size() == subIterators.length && end == queueEnd);\n      return start;\n    }\n\n","sourceOld":"    @Override\n    public int nextInterval() throws IOException {\n      // first, find a matching interval\n      while (this.queue.size() == subIterators.length && queue.top().start() == start) {\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS)\n                return IntervalIterator.NO_MORE_INTERVALS;\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      }\n      if (this.queue.size() < subIterators.length)\n        return IntervalIterator.NO_MORE_INTERVALS;\n      // then, minimize it\n      do {\n        start = queue.top().start();\n        end = queueEnd;\n        if (queue.top().end() == end)\n          return start;\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n                return start;\n              }\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      } while (this.queue.size() == subIterators.length && end == queueEnd);\n      return start;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f272fe1542bca669076ff8ed44b298b316ab4aa5","date":1546365319,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#nextInterval().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#nextInterval().mjava","sourceNew":"    @Override\n    public int nextInterval() throws IOException {\n      // first, find a matching interval\n      while (this.queue.size() == subIterators.length && queue.top().start() == start) {\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS)\n                return start = end = IntervalIterator.NO_MORE_INTERVALS;\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      }\n      if (this.queue.size() < subIterators.length)\n        return start = end = IntervalIterator.NO_MORE_INTERVALS;\n      // then, minimize it\n      do {\n        start = queue.top().start();\n        firstEnd = queue.top().end();\n        end = queueEnd;\n        if (queue.top().end() == end)\n          return start;\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n                return start;\n              }\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      } while (this.queue.size() == subIterators.length && end == queueEnd);\n      return start;\n    }\n\n","sourceOld":"    @Override\n    public int nextInterval() throws IOException {\n      // first, find a matching interval\n      while (this.queue.size() == subIterators.length && queue.top().start() == start) {\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS)\n                return IntervalIterator.NO_MORE_INTERVALS;\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      }\n      if (this.queue.size() < subIterators.length)\n        return IntervalIterator.NO_MORE_INTERVALS;\n      // then, minimize it\n      do {\n        start = queue.top().start();\n        firstEnd = queue.top().end();\n        end = queueEnd;\n        if (queue.top().end() == end)\n          return start;\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n                return start;\n              }\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      } while (this.queue.size() == subIterators.length && end == queueEnd);\n      return start;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde","date":1553685823,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/UnorderedIntervalsSource.UnorderedIntervalIterator#nextInterval().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#nextInterval().mjava","sourceNew":"    @Override\n    public int nextInterval() throws IOException {\n      // first, find a matching interval\n      while (this.queue.size() == subIterators.length && queue.top().start() == start) {\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS)\n                return start = end = IntervalIterator.NO_MORE_INTERVALS;\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      }\n      if (this.queue.size() < subIterators.length)\n        return start = end = IntervalIterator.NO_MORE_INTERVALS;\n      // then, minimize it\n      do {\n        start = queue.top().start();\n        firstEnd = queue.top().end();\n        end = queueEnd;\n        if (queue.top().end() == end)\n          return start;\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n                return start;\n              }\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      } while (this.queue.size() == subIterators.length && end == queueEnd);\n      return start;\n    }\n\n","sourceOld":"    @Override\n    public int nextInterval() throws IOException {\n      // first, find a matching interval\n      while (this.queue.size() == subIterators.length && queue.top().start() == start) {\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS)\n                return start = end = IntervalIterator.NO_MORE_INTERVALS;\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      }\n      if (this.queue.size() < subIterators.length)\n        return start = end = IntervalIterator.NO_MORE_INTERVALS;\n      // then, minimize it\n      do {\n        start = queue.top().start();\n        firstEnd = queue.top().end();\n        end = queueEnd;\n        if (queue.top().end() == end)\n          return start;\n        IntervalIterator it = queue.pop();\n        if (it != null && it.nextInterval() != IntervalIterator.NO_MORE_INTERVALS) {\n          if (allowOverlaps == false) {\n            while (hasOverlaps(it)) {\n              if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n                return start;\n              }\n            }\n          }\n          queue.add(it);\n          updateRightExtreme(it);\n        }\n      } while (this.queue.size() == subIterators.length && end == queueEnd);\n      return start;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["f272fe1542bca669076ff8ed44b298b316ab4aa5"],"ff275d3941a30f2db7c9278444015f412b835254":["c3480728ed564c17162fff1200a8d15c1a5f24cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f272fe1542bca669076ff8ed44b298b316ab4aa5":["ff275d3941a30f2db7c9278444015f412b835254"],"361b1afc99f68598c73d37074aec089c9c951586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3480728ed564c17162fff1200a8d15c1a5f24cd":["361b1afc99f68598c73d37074aec089c9c951586"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"]},"commit2Childs":{"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff275d3941a30f2db7c9278444015f412b835254":["f272fe1542bca669076ff8ed44b298b316ab4aa5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["361b1afc99f68598c73d37074aec089c9c951586"],"f272fe1542bca669076ff8ed44b298b316ab4aa5":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"361b1afc99f68598c73d37074aec089c9c951586":["c3480728ed564c17162fff1200a8d15c1a5f24cd"],"c3480728ed564c17162fff1200a8d15c1a5f24cd":["ff275d3941a30f2db7c9278444015f412b835254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}