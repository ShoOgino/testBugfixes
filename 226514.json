{"path":"lucene/core/src/java/org/apache/lucene/util/RollingCharBuffer#get(int).mjava","commits":[{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RollingCharBuffer#get(int).mjava","pathOld":"/dev/null","sourceNew":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      final int ch = reader.read();\n      if (ch == -1) {\n        end = true;\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n      buffer[nextWrite++] = (char) ch;\n      count++;\n      nextPos++;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count;\n\n      final int index = getIndex(pos);\n      return buffer[index];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["790bdefa98dd40c18848b1915db6ba17dabe4b61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RollingCharBuffer#get(int).mjava","pathOld":"/dev/null","sourceNew":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      final int ch = reader.read();\n      if (ch == -1) {\n        end = true;\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n      buffer[nextWrite++] = (char) ch;\n      count++;\n      nextPos++;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count;\n\n      final int index = getIndex(pos);\n      return buffer[index];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790bdefa98dd40c18848b1915db6ba17dabe4b61","date":1332711475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RollingCharBuffer#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RollingCharBuffer#get(int).mjava","sourceNew":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      final int ch = reader.read();\n      if (ch == -1) {\n        end = true;\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n      buffer[nextWrite++] = (char) ch;\n      count++;\n      nextPos++;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count: \"nextPos=\" + nextPos + \" pos=\" + pos + \" count=\" + count;\n\n      final int index = getIndex(pos);\n      return buffer[index];\n    }\n  }\n\n","sourceOld":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      final int ch = reader.read();\n      if (ch == -1) {\n        end = true;\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n      buffer[nextWrite++] = (char) ch;\n      count++;\n      nextPos++;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count;\n\n      final int index = getIndex(pos);\n      return buffer[index];\n    }\n  }\n\n","bugFix":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","date":1336310014,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RollingCharBuffer#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RollingCharBuffer#get(int).mjava","sourceNew":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n\n      final int toRead = buffer.length - Math.max(count, nextWrite);\n      final int readCount = reader.read(buffer, nextWrite, toRead);\n      if (readCount == -1) {\n        end = true;\n        return -1;\n      }\n      final int ch = buffer[nextWrite];\n      nextWrite += readCount;\n      count += readCount;\n      nextPos += readCount;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count: \"nextPos=\" + nextPos + \" pos=\" + pos + \" count=\" + count;\n\n      return buffer[getIndex(pos)];\n    }\n  }\n\n","sourceOld":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      final int ch = reader.read();\n      if (ch == -1) {\n        end = true;\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n      buffer[nextWrite++] = (char) ch;\n      count++;\n      nextPos++;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count: \"nextPos=\" + nextPos + \" pos=\" + pos + \" count=\" + count;\n\n      final int index = getIndex(pos);\n      return buffer[index];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b496a51639fc02b2ff28d1b029b37e42f6c7627","date":1347885256,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/RollingCharBuffer#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RollingCharBuffer#get(int).mjava","sourceNew":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n\n      final int toRead = buffer.length - Math.max(count, nextWrite);\n      final int readCount = reader.read(buffer, nextWrite, toRead);\n      if (readCount == -1) {\n        end = true;\n        return -1;\n      }\n      final int ch = buffer[nextWrite];\n      nextWrite += readCount;\n      count += readCount;\n      nextPos += readCount;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count: \"nextPos=\" + nextPos + \" pos=\" + pos + \" count=\" + count;\n\n      return buffer[getIndex(pos)];\n    }\n  }\n\n","sourceOld":"  /* Absolute position read.  NOTE: pos must not jump\n   * ahead by more than 1!  Ie, it's OK to read arbitarily\n   * far back (just not prior to the last {@link\n   * #freeBefore}), but NOT ok to read arbitrarily far\n   * ahead.  Returns -1 if you hit EOF. */\n  public int get(int pos) throws IOException {\n    //System.out.println(\"    get pos=\" + pos + \" nextPos=\" + nextPos + \" count=\" + count);\n    if (pos == nextPos) {\n      if (end) {\n        return -1;\n      }\n      if (count == buffer.length) {\n        // Grow\n        final char[] newBuffer = new char[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_CHAR)];\n        //System.out.println(Thread.currentThread().getName() + \": cb grow \" + newBuffer.length);\n        System.arraycopy(buffer, nextWrite, newBuffer, 0, buffer.length - nextWrite);\n        System.arraycopy(buffer, 0, newBuffer, buffer.length - nextWrite, nextWrite);\n        nextWrite = buffer.length;\n        buffer = newBuffer;\n      }\n      if (nextWrite == buffer.length) {\n        nextWrite = 0;\n      }\n\n      final int toRead = buffer.length - Math.max(count, nextWrite);\n      final int readCount = reader.read(buffer, nextWrite, toRead);\n      if (readCount == -1) {\n        end = true;\n        return -1;\n      }\n      final int ch = buffer[nextWrite];\n      nextWrite += readCount;\n      count += readCount;\n      nextPos += readCount;\n      return ch;\n    } else {\n      // Cannot read from future (except by 1):\n      assert pos < nextPos;\n\n      // Cannot read from already freed past:\n      assert nextPos - pos <= count: \"nextPos=\" + nextPos + \" pos=\" + pos + \" count=\" + count;\n\n      return buffer[getIndex(pos)];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"790bdefa98dd40c18848b1915db6ba17dabe4b61":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0984ad47974c2d5d354519ddb2aa8358973a6271"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["790bdefa98dd40c18848b1915db6ba17dabe4b61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b496a51639fc02b2ff28d1b029b37e42f6c7627":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b496a51639fc02b2ff28d1b029b37e42f6c7627"]},"commit2Childs":{"790bdefa98dd40c18848b1915db6ba17dabe4b61":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["790bdefa98dd40c18848b1915db6ba17dabe4b61","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["6b496a51639fc02b2ff28d1b029b37e42f6c7627"],"6b496a51639fc02b2ff28d1b029b37e42f6c7627":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}