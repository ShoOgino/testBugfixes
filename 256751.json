{"path":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","commits":[{"id":"d6aab5206b894bf0ea232b059a45cf2de460726f","date":1284150281,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams).mjava","sourceNew":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","sourceNew":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","sourceNew":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#getCustomParams(String,SolrParams,boolean).mjava","sourceNew":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * For every param that is of the form \"spellcheck.[dictionary name].XXXX=YYYY, add\n   * XXXX=YYYY as a param to the custom param list\n   * @param params The original SolrParams\n   * @return The new Params\n   */\n  protected SolrParams getCustomParams(String dictionary, SolrParams params, boolean shardRequest) {\n    ModifiableSolrParams result = new ModifiableSolrParams();\n    Iterator<String> iter = params.getParameterNamesIterator();\n    String prefix = SpellingParams.SPELLCHECK_PREFIX + \".\" + dictionary + \".\";\n    while (iter.hasNext()){\n      String nxt = iter.next();\n      if (nxt.startsWith(prefix)){\n        result.add(nxt.substring(prefix.length()), params.getParams(nxt));\n      }\n    }\n    if(shardRequest)\n    {\n    \tresult.add(ShardParams.IS_SHARD, \"true\");\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d6aab5206b894bf0ea232b059a45cf2de460726f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["d6aab5206b894bf0ea232b059a45cf2de460726f"],"c26f00b574427b55127e869b935845554afde1fa":["d6aab5206b894bf0ea232b059a45cf2de460726f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["d6aab5206b894bf0ea232b059a45cf2de460726f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6aab5206b894bf0ea232b059a45cf2de460726f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"d6aab5206b894bf0ea232b059a45cf2de460726f":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6aab5206b894bf0ea232b059a45cf2de460726f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}