{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public InvertedFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final InvertedFieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public InvertedFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final InvertedFieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129c6e8ac0c0d9a110ba29e4b5f1889374f30076","date":1337725510,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c7e80d1cfd3bd2dfe5763f7b8f9f0ef61f33092","date":1349647593,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"879f5e74b68e6faa45251db337bb1e1a9e9be647","date":1350008268,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // nocommit: way to randomize skipInterval and acceptibleOverHead?!\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // nocommit: way to randomize skipInterval and acceptibleOverHead?!\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(2);\n\n    /*\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new TempFSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new TempFSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n    */\n    if (t1 == 0) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new TempFSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new TempFSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(2);\n\n    /*\n    final int t1 = random.nextInt(4);\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new TempFSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new TempFSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n    */\n    if (t1 == 0) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new TempFSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new TempFSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      // TODO: randomize variables like acceptibleOverHead?!\n      postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbaae1c00d39df2c872bbe043af26d02d3818313","date":1409657064,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(state, totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene41PostingsWriter(state, skipInterval);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.getDocCount() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71488d7f5786ae87541276121ecb69705a11a295","date":1465498138,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    try(IndexOutput out = state.directory.createOutput(seedFileName, state.context)) {\n      CodecUtil.writeIndexHeader(out, \"MockRandomSeed\", 0, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeLong(seed);\n      CodecUtil.writeFooter(out);\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    try(IndexOutput out = state.directory.createOutput(seedFileName, state.context)) {\n      CodecUtil.writeIndexHeader(out, \"MockRandomSeed\", 0, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeLong(seed);\n      CodecUtil.writeFooter(out);\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    try(IndexOutput out = state.directory.createOutput(seedFileName, state.context)) {\n      CodecUtil.writeIndexHeader(out, \"MockRandomSeed\", 0, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeLong(seed);\n      CodecUtil.writeFooter(out);\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene84PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    try(IndexOutput out = state.directory.createOutput(seedFileName, state.context)) {\n      CodecUtil.writeIndexHeader(out, \"MockRandomSeed\", 0, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeLong(seed);\n      CodecUtil.writeFooter(out);\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene50PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    try(IndexOutput out = state.directory.createOutput(seedFileName, state.context)) {\n      CodecUtil.writeIndexHeader(out, \"MockRandomSeed\", 0, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeLong(seed);\n      CodecUtil.writeFooter(out);\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene84PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(3);\n\n     if (t1 == 0) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 2) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    try(IndexOutput out = state.directory.createOutput(seedFileName, state.context)) {\n      CodecUtil.writeIndexHeader(out, \"MockRandomSeed\", 0, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeLong(seed);\n      CodecUtil.writeFooter(out);\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene84PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    try(IndexOutput out = state.directory.createOutput(seedFileName, state.context)) {\n      CodecUtil.writeIndexHeader(out, \"MockRandomSeed\", 0, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeLong(seed);\n      CodecUtil.writeFooter(out);\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene84PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    try(IndexOutput out = state.directory.createOutput(seedFileName, state.context)) {\n      CodecUtil.writeIndexHeader(out, \"MockRandomSeed\", 0, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeLong(seed);\n      CodecUtil.writeFooter(out);\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene84PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(3);\n\n     if (t1 == 0) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 2) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    try(IndexOutput out = state.directory.createOutput(seedFileName, state.context)) {\n      CodecUtil.writeIndexHeader(out, \"MockRandomSeed\", 0, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeLong(seed);\n      CodecUtil.writeFooter(out);\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene84PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(4);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 3) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    int minSkipInterval;\n    if (state.segmentInfo.maxDoc() > 1000000) {\n      // Test2BPostings can OOME otherwise:\n      minSkipInterval = 3;\n    } else {\n      minSkipInterval = 2;\n    }\n\n    // we pull this before the seed intentionally: because it's not consumed at runtime\n    // (the skipInterval is written into postings header).\n    // NOTE: Currently not passed to postings writer.\n    //       before, it was being passed in wrongly as acceptableOverhead!\n    int skipInterval = TestUtil.nextInt(seedRandom, minSkipInterval, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentInfo.name + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SEED_EXT);\n    try(IndexOutput out = state.directory.createOutput(seedFileName, state.context)) {\n      CodecUtil.writeIndexHeader(out, \"MockRandomSeed\", 0, state.segmentInfo.getId(), state.segmentSuffix);\n      out.writeLong(seed);\n      CodecUtil.writeFooter(out);\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter = new Lucene84PostingsWriter(state);\n\n    final FieldsConsumer fields;\n    final int t1 = random.nextInt(5);\n\n    if (t1 == 0) {\n      boolean success = false;\n      try {\n        fields = new FSTTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 1) {\n      boolean success = false;\n      try {\n        fields = new FSTOrdTermsWriter(state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 2) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else if (t1 == 3) {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          int termIndexInterval = TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state, termIndexInterval);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = TestUtil.nextInt(random, 2, 100);\n            final int tii = TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    } else if (t1 == 4) {\n      // Use OrdsBlockTree terms dict\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing OrdsBlockTree\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new OrdsBlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n      \n    } else {\n      // BUG!\n      throw new AssertionError();\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"879f5e74b68e6faa45251db337bb1e1a9e9be647":["8c7e80d1cfd3bd2dfe5763f7b8f9f0ef61f33092"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","b0267c69e2456a3477a1ad785723f2135da3117e"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"b06445ae1731e049327712db0454e5643ca9b7fe":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a45bec74b98f6fc05f52770cfb425739e6563960","56df73d43b6fc340f5332322862382c7e30f4368"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"5eb2511ababf862ea11e10761c70ee560cd84510":["6613659748fe4411a7dcf85266e55db1f95f7315","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"6616b1fd222bb5a60f7f7856ace312252bc97890":["879f5e74b68e6faa45251db337bb1e1a9e9be647"],"99eb4a732d1a908f4636ace52928876136bf1896":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["71488d7f5786ae87541276121ecb69705a11a295"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a45bec74b98f6fc05f52770cfb425739e6563960":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"b0267c69e2456a3477a1ad785723f2135da3117e":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["8c7e80d1cfd3bd2dfe5763f7b8f9f0ef61f33092","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"71488d7f5786ae87541276121ecb69705a11a295":["b0267c69e2456a3477a1ad785723f2135da3117e"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b0267c69e2456a3477a1ad785723f2135da3117e","71488d7f5786ae87541276121ecb69705a11a295"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["8c7e80d1cfd3bd2dfe5763f7b8f9f0ef61f33092","6616b1fd222bb5a60f7f7856ace312252bc97890"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"8c7e80d1cfd3bd2dfe5763f7b8f9f0ef61f33092":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["fbaae1c00d39df2c872bbe043af26d02d3818313","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7","5eb2511ababf862ea11e10761c70ee560cd84510"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"879f5e74b68e6faa45251db337bb1e1a9e9be647":["6616b1fd222bb5a60f7f7856ace312252bc97890"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b0267c69e2456a3477a1ad785723f2135da3117e"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["129c6e8ac0c0d9a110ba29e4b5f1889374f30076","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["6613659748fe4411a7dcf85266e55db1f95f7315"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"6613659748fe4411a7dcf85266e55db1f95f7315":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a","5eb2511ababf862ea11e10761c70ee560cd84510"],"a45bec74b98f6fc05f52770cfb425739e6563960":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","71488d7f5786ae87541276121ecb69705a11a295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"71488d7f5786ae87541276121ecb69705a11a295":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","a45bec74b98f6fc05f52770cfb425739e6563960","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["8c7e80d1cfd3bd2dfe5763f7b8f9f0ef61f33092"],"8c7e80d1cfd3bd2dfe5763f7b8f9f0ef61f33092":["879f5e74b68e6faa45251db337bb1e1a9e9be647","db4fdbf3d262768eabc027cd8321edca0cd11fa8","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["56df73d43b6fc340f5332322862382c7e30f4368"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","5eb2511ababf862ea11e10761c70ee560cd84510","db4fdbf3d262768eabc027cd8321edca0cd11fa8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}