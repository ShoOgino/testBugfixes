{"path":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    Random random = newRandom();\n    Directory directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    Random random = newRandom();\n    Directory directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzziness().mjava","sourceNew":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFuzziness() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"aaaaa\", writer);\n    addDoc(\"aaaab\", writer);\n    addDoc(\"aaabb\", writer);\n    addDoc(\"aabbb\", writer);\n    addDoc(\"abbbb\", writer);\n    addDoc(\"bbbbb\", writer);\n    addDoc(\"ddddd\", writer);\n\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    writer.close();\n\n    FuzzyQuery query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    \n    // same with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 6);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    // test scoring\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"3 documents should match\", 3, hits.length);\n    List<String> order = Arrays.asList(\"bbbbb\",\"abbbb\",\"aabbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // test pq size by supplying maxExpansions=2\n    // This query would normally return 3 documents, because 3 terms match (see above):\n    query = new FuzzyQuery(new Term(\"field\", \"bbbbb\"), FuzzyQuery.defaultMinSimilarity, 0, 2); \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"only 2 documents should match\", 2, hits.length);\n    order = Arrays.asList(\"bbbbb\",\"abbbb\");\n    for (int i = 0; i < hits.length; i++) {\n      final String term = searcher.doc(hits[i].doc).get(\"field\");\n      //System.out.println(hits[i].score);\n      assertEquals(order.get(i), term);\n    }\n\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"), FuzzyQuery.defaultMinSimilarity, 0);  \t\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    query = new FuzzyQuery(new Term(\"field\", \"aaccc\"), FuzzyQuery.defaultMinSimilarity, 0);   // edit distance to \"aaaaa\" = 3\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query identical to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaa\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    // default allows for up to two edits:\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n\n    // query similar to a word in the index:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    assertEquals(searcher.doc(hits[2].doc).get(\"field\"), (\"aaabb\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"aaaaa\"));\n    assertEquals(searcher.doc(hits[1].doc).get(\"field\"), (\"aaaab\"));\n    query = new FuzzyQuery(new Term(\"field\", \"aaaac\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    \n    // now with prefix\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 1);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 2);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 3);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 4);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    assertEquals(searcher.doc(hits[0].doc).get(\"field\"), (\"ddddd\"));\n    query = new FuzzyQuery(new Term(\"field\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 5);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n\n    // different field = no match:\n    query = new FuzzyQuery(new Term(\"anotherfield\", \"ddddX\"), FuzzyQuery.defaultMinSimilarity, 0);   \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["790e1fde4caa765b3faaad3fbcd25c6973450336","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1f653cfcf159baeaafe5d01682a911e95bba4012","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e","5f4e87790277826a2aea119328600dfb07761f32"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}