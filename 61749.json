{"path":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#addChecker(SolrSpellChecker).mjava","commits":[{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#addChecker(SolrSpellChecker).mjava","pathOld":"/dev/null","sourceNew":"  public void addChecker(SolrSpellChecker checker) {\n    if (initalized) {\n      throw new IllegalStateException(\n          \"Need to add checkers before calling init()\");\n    }\n    try {\n      if (stringDistance == null) {\n        stringDistance = checker.getStringDistance();\n      } else if (stringDistance != checker.getStringDistance()) {\n        throw new IllegalArgumentException(\n            \"All checkers need to use the same StringDistance.\");\n      }\n    } catch (UnsupportedOperationException uoe) {\n      // ignore\n    }\n    try {\n      if (accuracy == null) {\n        accuracy = checker.getAccuracy();\n      } else if (accuracy != checker.getAccuracy()) {\n        throw new IllegalArgumentException(\n            \"All checkers need to use the same Accuracy.\");\n      }\n    } catch (UnsupportedOperationException uoe) {\n      // ignore\n    }\n    if (queryAnalyzer == null) {\n      queryAnalyzer = checker.getQueryAnalyzer();\n    } else if (queryAnalyzer != checker.getQueryAnalyzer()) {\n      throw new IllegalArgumentException(\n          \"All checkers need to use the same Analyzer.\");\n    }\n    checkers.add(checker);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["018154532bcbac1068a66011cafb190e2b42fed3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#addChecker(SolrSpellChecker).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#addChecker(SolrSpellChecker).mjava","sourceNew":"  public void addChecker(SolrSpellChecker checker) {\n    if (initialized) {\n      throw new IllegalStateException(\n          \"Need to add checkers before calling init()\");\n    }\n    try {\n      if (stringDistance == null) {\n        stringDistance = checker.getStringDistance();\n      } else if (stringDistance != checker.getStringDistance()) {\n        throw new IllegalArgumentException(\n            \"All checkers need to use the same StringDistance.\");\n      }\n    } catch (UnsupportedOperationException uoe) {\n      // ignore\n    }\n    try {\n      if (accuracy == null) {\n        accuracy = checker.getAccuracy();\n      } else if (accuracy != checker.getAccuracy()) {\n        throw new IllegalArgumentException(\n            \"All checkers need to use the same Accuracy.\");\n      }\n    } catch (UnsupportedOperationException uoe) {\n      // ignore\n    }\n    if (queryAnalyzer == null) {\n      queryAnalyzer = checker.getQueryAnalyzer();\n    } else if (queryAnalyzer != checker.getQueryAnalyzer()) {\n      throw new IllegalArgumentException(\n          \"All checkers need to use the same Analyzer.\");\n    }\n    checkers.add(checker);\n  }\n\n","sourceOld":"  public void addChecker(SolrSpellChecker checker) {\n    if (initalized) {\n      throw new IllegalStateException(\n          \"Need to add checkers before calling init()\");\n    }\n    try {\n      if (stringDistance == null) {\n        stringDistance = checker.getStringDistance();\n      } else if (stringDistance != checker.getStringDistance()) {\n        throw new IllegalArgumentException(\n            \"All checkers need to use the same StringDistance.\");\n      }\n    } catch (UnsupportedOperationException uoe) {\n      // ignore\n    }\n    try {\n      if (accuracy == null) {\n        accuracy = checker.getAccuracy();\n      } else if (accuracy != checker.getAccuracy()) {\n        throw new IllegalArgumentException(\n            \"All checkers need to use the same Accuracy.\");\n      }\n    } catch (UnsupportedOperationException uoe) {\n      // ignore\n    }\n    if (queryAnalyzer == null) {\n      queryAnalyzer = checker.getQueryAnalyzer();\n    } else if (queryAnalyzer != checker.getQueryAnalyzer()) {\n      throw new IllegalArgumentException(\n          \"All checkers need to use the same Analyzer.\");\n    }\n    checkers.add(checker);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"018154532bcbac1068a66011cafb190e2b42fed3","date":1449250877,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#addChecker(SolrSpellChecker).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker#addChecker(SolrSpellChecker).mjava","sourceNew":"  public void addChecker(SolrSpellChecker checker) {\n    if (initialized) {\n      throw new IllegalStateException(\n          \"Need to add checkers before calling init()\");\n    }\n    try {\n      if (stringDistance == null) {\n        stringDistance = checker.getStringDistance();\n      } else if (!stringDistance.equals(checker.getStringDistance())) {\n        throw new IllegalArgumentException(\n            \"All checkers need to use the same StringDistance.\");\n      }\n    } catch (UnsupportedOperationException uoe) {\n      // ignore\n    }\n    try {\n      if (accuracy == null) {\n        accuracy = checker.getAccuracy();\n      } else if (accuracy != checker.getAccuracy()) {\n        throw new IllegalArgumentException(\n            \"All checkers need to use the same Accuracy.\");\n      }\n    } catch (UnsupportedOperationException uoe) {\n      // ignore\n    }\n    if (queryAnalyzer == null) {\n      queryAnalyzer = checker.getQueryAnalyzer();\n    } else if (queryAnalyzer != checker.getQueryAnalyzer()) {\n      throw new IllegalArgumentException(\n          \"All checkers need to use the same Analyzer.\");\n    }\n    checkers.add(checker);\n  }\n\n","sourceOld":"  public void addChecker(SolrSpellChecker checker) {\n    if (initialized) {\n      throw new IllegalStateException(\n          \"Need to add checkers before calling init()\");\n    }\n    try {\n      if (stringDistance == null) {\n        stringDistance = checker.getStringDistance();\n      } else if (stringDistance != checker.getStringDistance()) {\n        throw new IllegalArgumentException(\n            \"All checkers need to use the same StringDistance.\");\n      }\n    } catch (UnsupportedOperationException uoe) {\n      // ignore\n    }\n    try {\n      if (accuracy == null) {\n        accuracy = checker.getAccuracy();\n      } else if (accuracy != checker.getAccuracy()) {\n        throw new IllegalArgumentException(\n            \"All checkers need to use the same Accuracy.\");\n      }\n    } catch (UnsupportedOperationException uoe) {\n      // ignore\n    }\n    if (queryAnalyzer == null) {\n      queryAnalyzer = checker.getQueryAnalyzer();\n    } else if (queryAnalyzer != checker.getQueryAnalyzer()) {\n      throw new IllegalArgumentException(\n          \"All checkers need to use the same Analyzer.\");\n    }\n    checkers.add(checker);\n  }\n\n","bugFix":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ad9ec888e587ca9a3279368245cdf00aabdc108":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018154532bcbac1068a66011cafb190e2b42fed3"],"018154532bcbac1068a66011cafb190e2b42fed3":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["0ad9ec888e587ca9a3279368245cdf00aabdc108"]},"commit2Childs":{"0ad9ec888e587ca9a3279368245cdf00aabdc108":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"018154532bcbac1068a66011cafb190e2b42fed3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["018154532bcbac1068a66011cafb190e2b42fed3"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}