{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","commits":[{"id":"d289450fa5030c34b5e378c04bcb03a026aad9f4","date":1400178141,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    return new IntersectEnum(compiled, startTerm);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3","date":1400179494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    return new IntersectEnum(this, compiled, startTerm);\n  }\n\n","sourceOld":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    return new IntersectEnum(compiled, startTerm);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7266c313bb3b4fbcde3dcc82556182e1fae90080","date":1400183760,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    return new IntersectTermsEnum(this, compiled, startTerm);\n  }\n\n","sourceOld":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    return new IntersectEnum(this, compiled, startTerm);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    return new IntersectTermsEnum(this, compiled, startTerm);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) System.out.println(\"  FieldReader.intersect startTerm=\" + BlockTreeTermsWriter.brToString(startTerm));\n    //System.out.println(\"intersect: \" + compiled.type + \" a=\" + compiled.automaton);\n    // TODO: we could push \"it's a range\" or \"it's a prefix\" down into IntersectTermsEnum?\n    // can we optimize knowing that...?\n    return new IntersectTermsEnum(this, compiled.automaton, compiled.runAutomaton, compiled.commonSuffixRef, startTerm, compiled.sinkState);\n  }\n\n","sourceOld":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    return new IntersectTermsEnum(this, compiled, startTerm);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) System.out.println(\"  FieldReader.intersect startTerm=\" + BlockTreeTermsWriter.brToString(startTerm));\n    //System.out.println(\"intersect: \" + compiled.type + \" a=\" + compiled.automaton);\n    // TODO: we could push \"it's a range\" or \"it's a prefix\" down into IntersectTermsEnum?\n    // can we optimize knowing that...?\n    return new IntersectTermsEnum(this, compiled.automaton, compiled.runAutomaton, compiled.commonSuffixRef, startTerm, compiled.sinkState);\n  }\n\n","sourceOld":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    return new IntersectTermsEnum(this, compiled, startTerm);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61eadeb75db46a857947318760374f73002b0354","date":1480710364,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) System.out.println(\"  FieldReader.intersect startTerm=\" + BlockTreeTermsWriter.brToString(startTerm));\n    //System.out.println(\"intersect: \" + compiled.type + \" a=\" + compiled.automaton);\n    // TODO: we could push \"it's a range\" or \"it's a prefix\" down into IntersectTermsEnum?\n    // can we optimize knowing that...?\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    return new IntersectTermsEnum(this, compiled.automaton, compiled.runAutomaton, compiled.commonSuffixRef, startTerm, compiled.sinkState);\n  }\n\n","sourceOld":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) System.out.println(\"  FieldReader.intersect startTerm=\" + BlockTreeTermsWriter.brToString(startTerm));\n    //System.out.println(\"intersect: \" + compiled.type + \" a=\" + compiled.automaton);\n    // TODO: we could push \"it's a range\" or \"it's a prefix\" down into IntersectTermsEnum?\n    // can we optimize knowing that...?\n    return new IntersectTermsEnum(this, compiled.automaton, compiled.runAutomaton, compiled.commonSuffixRef, startTerm, compiled.sinkState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) System.out.println(\"  FieldReader.intersect startTerm=\" + BlockTreeTermsWriter.brToString(startTerm));\n    //System.out.println(\"intersect: \" + compiled.type + \" a=\" + compiled.automaton);\n    // TODO: we could push \"it's a range\" or \"it's a prefix\" down into IntersectTermsEnum?\n    // can we optimize knowing that...?\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    return new IntersectTermsEnum(this, compiled.automaton, compiled.runAutomaton, compiled.commonSuffixRef, startTerm, compiled.sinkState);\n  }\n\n","sourceOld":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) System.out.println(\"  FieldReader.intersect startTerm=\" + BlockTreeTermsWriter.brToString(startTerm));\n    //System.out.println(\"intersect: \" + compiled.type + \" a=\" + compiled.automaton);\n    // TODO: we could push \"it's a range\" or \"it's a prefix\" down into IntersectTermsEnum?\n    // can we optimize knowing that...?\n    return new IntersectTermsEnum(this, compiled.automaton, compiled.runAutomaton, compiled.commonSuffixRef, startTerm, compiled.sinkState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd96a930cc08d72beee719cc11ce465b9d9861c3","date":1535640296,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) System.out.println(\"  FieldReader.intersect startTerm=\" + BlockTreeTermsWriter.brToString(startTerm));\n    //System.out.println(\"intersect: \" + compiled.type + \" a=\" + compiled.automaton);\n    // TODO: we could push \"it's a range\" or \"it's a prefix\" down into IntersectTermsEnum?\n    // can we optimize knowing that...?\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    return new IntersectTermsEnum(this, compiled.automaton, compiled.runAutomaton, compiled.commonSuffixRef, startTerm);\n  }\n\n","sourceOld":"  @Override\n  public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) System.out.println(\"  FieldReader.intersect startTerm=\" + BlockTreeTermsWriter.brToString(startTerm));\n    //System.out.println(\"intersect: \" + compiled.type + \" a=\" + compiled.automaton);\n    // TODO: we could push \"it's a range\" or \"it's a prefix\" down into IntersectTermsEnum?\n    // can we optimize knowing that...?\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    return new IntersectTermsEnum(this, compiled.automaton, compiled.runAutomaton, compiled.commonSuffixRef, startTerm, compiled.sinkState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61eadeb75db46a857947318760374f73002b0354":["3e8715d826e588419327562287d5d6a8040d63d6"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7266c313bb3b4fbcde3dcc82556182e1fae90080"],"dd96a930cc08d72beee719cc11ce465b9d9861c3":["61eadeb75db46a857947318760374f73002b0354"],"7266c313bb3b4fbcde3dcc82556182e1fae90080":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3"],"d289450fa5030c34b5e378c04bcb03a026aad9f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["4d637064d608752565d4f9f41b2497dfdfdde50e","3e8715d826e588419327562287d5d6a8040d63d6"],"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3":["d289450fa5030c34b5e378c04bcb03a026aad9f4"],"9856095f7afb5a607bf5e65077615ed91273508c":["3e8715d826e588419327562287d5d6a8040d63d6","61eadeb75db46a857947318760374f73002b0354"],"3e8715d826e588419327562287d5d6a8040d63d6":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd96a930cc08d72beee719cc11ce465b9d9861c3"]},"commit2Childs":{"61eadeb75db46a857947318760374f73002b0354":["dd96a930cc08d72beee719cc11ce465b9d9861c3","9856095f7afb5a607bf5e65077615ed91273508c"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"dd96a930cc08d72beee719cc11ce465b9d9861c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7266c313bb3b4fbcde3dcc82556182e1fae90080":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"d289450fa5030c34b5e378c04bcb03a026aad9f4":["c8e28215c157245fd00f3954f8f0d4f45c2b0fd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","d289450fa5030c34b5e378c04bcb03a026aad9f4"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"c8e28215c157245fd00f3954f8f0d4f45c2b0fd3":["7266c313bb3b4fbcde3dcc82556182e1fae90080"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"3e8715d826e588419327562287d5d6a8040d63d6":["61eadeb75db46a857947318760374f73002b0354","d2638f781be724518ff6c2263d14a48cf6e68017","9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}