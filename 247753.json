{"path":"backwards/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms()\n    throws IOException {\n    if (normGen == null) {\n      if (!preLockless) {\n        // This means we were created w/ LOCKLESS code and no\n        // norms are written yet:\n        return false;\n      } else {\n        // This means this segment was saved with pre-LOCKLESS\n        // code.  So we must fallback to the original\n        // directory list check:\n        String[] result = dir.listAll();\n        if (result == null)\n          throw new IOException(\"cannot read directory \" + dir + \": listAll() returned null\");\n\n        final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n        String pattern;\n        pattern = name + \".s\";\n        int patternLength = pattern.length();\n        for(int i = 0; i < result.length; i++){\n          String fileName = result[i];\n          if (filter.accept(null, fileName) && fileName.startsWith(pattern) && Character.isDigit(fileName.charAt(patternLength)))\n              return true;\n        }\n        return false;\n      }\n    } else {\n      // This means this segment was saved with LOCKLESS\n      // code so we first check whether any normGen's are >= 1\n      // (meaning they definitely have separate norms):\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] >= YES) {\n          return true;\n        }\n      }\n      // Next we look for any == 0.  These cases were\n      // pre-LOCKLESS and must be checked in directory:\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] == CHECK_DIR) {\n          if (hasSeparateNorms(i)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentInfo#hasSeparateNorms().mjava","sourceNew":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms()\n    throws IOException {\n    if (normGen == null) {\n      if (!preLockless) {\n        // This means we were created w/ LOCKLESS code and no\n        // norms are written yet:\n        return false;\n      } else {\n        // This means this segment was saved with pre-LOCKLESS\n        // code.  So we must fallback to the original\n        // directory list check:\n        String[] result = dir.listAll();\n        if (result == null)\n          throw new IOException(\"cannot read directory \" + dir + \": listAll() returned null\");\n\n        final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n        String pattern;\n        pattern = name + \".s\";\n        int patternLength = pattern.length();\n        for(int i = 0; i < result.length; i++){\n          String fileName = result[i];\n          if (filter.accept(null, fileName) && fileName.startsWith(pattern) && Character.isDigit(fileName.charAt(patternLength)))\n              return true;\n        }\n        return false;\n      }\n    } else {\n      // This means this segment was saved with LOCKLESS\n      // code so we first check whether any normGen's are >= 1\n      // (meaning they definitely have separate norms):\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] >= YES) {\n          return true;\n        }\n      }\n      // Next we look for any == 0.  These cases were\n      // pre-LOCKLESS and must be checked in directory:\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] == CHECK_DIR) {\n          if (hasSeparateNorms(i)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns true if any fields in this segment have separate norms.\n   */\n  public boolean hasSeparateNorms()\n    throws IOException {\n    if (normGen == null) {\n      if (!preLockless) {\n        // This means we were created w/ LOCKLESS code and no\n        // norms are written yet:\n        return false;\n      } else {\n        // This means this segment was saved with pre-LOCKLESS\n        // code.  So we must fallback to the original\n        // directory list check:\n        String[] result = dir.listAll();\n        if (result == null)\n          throw new IOException(\"cannot read directory \" + dir + \": listAll() returned null\");\n\n        final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n        String pattern;\n        pattern = name + \".s\";\n        int patternLength = pattern.length();\n        for(int i = 0; i < result.length; i++){\n          String fileName = result[i];\n          if (filter.accept(null, fileName) && fileName.startsWith(pattern) && Character.isDigit(fileName.charAt(patternLength)))\n              return true;\n        }\n        return false;\n      }\n    } else {\n      // This means this segment was saved with LOCKLESS\n      // code so we first check whether any normGen's are >= 1\n      // (meaning they definitely have separate norms):\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] >= YES) {\n          return true;\n        }\n      }\n      // Next we look for any == 0.  These cases were\n      // pre-LOCKLESS and must be checked in directory:\n      for(int i=0;i<normGen.length;i++) {\n        if (normGen[i] == CHECK_DIR) {\n          if (hasSeparateNorms(i)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}