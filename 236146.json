{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMarkovChain().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMarkovChain().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMarkovChain().mjava","sourceNew":"  @Test\n  public void testMarkovChain() throws Exception {\n    String cexpr = \"let(state0=array(.5,.5),\\n\" +\n                   \"    state1=array(.5,.5),\\n\" +\n                   \"    states=matrix(state0, state1),\\n\" +\n                   \"    m=markovChain(states, 0),\\n\" +\n                   \"    s=sample(m, 50000),\\n\" +\n                   \"    f=freqTable(s))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map<String, Number>> out = (List<Map<String, Number>>)tuples.get(0).get(\"f\");\n    assertEquals(out.size(), 2);\n    Map<String, Number> bin0 = out.get(0);\n    double state0Pct = bin0.get(\"pct\").doubleValue();\n    assertEquals(state0Pct, .5, .015);\n    Map<String, Number> bin1 = out.get(1);\n    double state1Pct = bin1.get(\"pct\").doubleValue();\n    assertEquals(state1Pct, .5, .015);\n  }\n\n","sourceOld":"  @Test\n  public void testMarkovChain() throws Exception {\n    String cexpr = \"let(state0=array(.5,.5),\\n\" +\n                   \"    state1=array(.5,.5),\\n\" +\n                   \"    states=matrix(state0, state1),\\n\" +\n                   \"    m=markovChain(states, 0),\\n\" +\n                   \"    s=sample(m, 50000),\\n\" +\n                   \"    f=freqTable(s))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map<String, Number>> out = (List<Map<String, Number>>)tuples.get(0).get(\"f\");\n    assertEquals(out.size(), 2);\n    Map<String, Number> bin0 = out.get(0);\n    double state0Pct = bin0.get(\"pct\").doubleValue();\n    assertEquals(state0Pct, .5, .015);\n    Map<String, Number> bin1 = out.get(1);\n    double state1Pct = bin1.get(\"pct\").doubleValue();\n    assertEquals(state1Pct, .5, .015);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad296b823241a7204dcaa288b06f3df339fb2ed6","date":1551795554,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMarkovChain().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMarkovChain().mjava","sourceNew":"  @Test\n  public void testMarkovChain() throws Exception {\n    String cexpr = \"let(state0=array(.5,.5),\\n\" +\n                   \"    state1=array(.5,.5),\\n\" +\n                   \"    states=matrix(state0, state1),\\n\" +\n                   \"    m=markovChain(states, 0),\\n\" +\n                   \"    s=sample(m, 50000),\\n\" +\n                   \"    f=freqTable(s))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n\n    Tuple bin0 = tuples.get(0);\n    double state0Pct = bin0.getDouble(\"pct\");\n    assertEquals(state0Pct, .5, .015);\n    Tuple bin1 = tuples.get(1);\n    double state1Pct = bin1.getDouble(\"pct\");\n    assertEquals(state1Pct, .5, .015);\n  }\n\n","sourceOld":"  @Test\n  public void testMarkovChain() throws Exception {\n    String cexpr = \"let(state0=array(.5,.5),\\n\" +\n                   \"    state1=array(.5,.5),\\n\" +\n                   \"    states=matrix(state0, state1),\\n\" +\n                   \"    m=markovChain(states, 0),\\n\" +\n                   \"    s=sample(m, 50000),\\n\" +\n                   \"    f=freqTable(s))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map<String, Number>> out = (List<Map<String, Number>>)tuples.get(0).get(\"f\");\n    assertEquals(out.size(), 2);\n    Map<String, Number> bin0 = out.get(0);\n    double state0Pct = bin0.get(\"pct\").doubleValue();\n    assertEquals(state0Pct, .5, .015);\n    Map<String, Number> bin1 = out.get(1);\n    double state1Pct = bin1.get(\"pct\").doubleValue();\n    assertEquals(state1Pct, .5, .015);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}