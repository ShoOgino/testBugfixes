{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(DistributedQueueFactory,CloudSolrClient).mjava","commits":[{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(DistributedQueueFactory,CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(DistributedQueueFactory queueFactory, CloudSolrClient solrClient) {\n    this.queueFactory = queueFactory;\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(DistributedQueueFactory,CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientDataProvider(DistributedQueueFactory queueFactory, CloudSolrClient solrClient) {\n    this.queueFactory = queueFactory;\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b869898f50ca80263bac2e3ae0949f7700e5c977","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}