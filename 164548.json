{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"ddc5fbfd4c64963aba52713a4496522540294d69","date":1262508497,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#tokenStream(String,Reader).mjava","sourceNew":"  /**\n   * Creates {@link TokenStreamComponents} used to tokenize all the text in the provided\n   * {@link Reader}.\n   * \n   * @return {@link TokenStreamComponents} built from a {@link ArabicLetterTokenizer}\n   *         filtered with {@link LowerCaseFilter}, \n   *         {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TokenStream} which tokenizes all the text in the provided\n   * {@link Reader}.\n   * \n   * @return A {@link TokenStream} built from a {@link ArabicLetterTokenizer}\n   *         filtered with {@link LowerCaseFilter}, \n   *         {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  public TokenStream tokenStream(String fieldName, Reader reader) {\n    TokenStream result = new ArabicLetterTokenizer(reader);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    result = new StopFilter(matchVersion, result, stoptable);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates {@link TokenStreamComponents} used to tokenize all the text in the provided\n   * {@link Reader}.\n   * \n   * @return {@link TokenStreamComponents} built from a {@link ArabicLetterTokenizer}\n   *         filtered with {@link LowerCaseFilter}, \n   *         {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates {@link TokenStreamComponents} used to tokenize all the text in the provided\n   * {@link Reader}.\n   * \n   * @return {@link TokenStreamComponents} built from a {@link ArabicLetterTokenizer}\n   *         filtered with {@link LowerCaseFilter}, \n   *         {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates {@link TokenStreamComponents} used to tokenize all the text in the provided\n   * {@link Reader}.\n   * \n   * @return {@link TokenStreamComponents} built from a {@link ArabicLetterTokenizer}\n   *         filtered with {@link LowerCaseFilter}, \n   *         {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from a {@link ArabicLetterTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link ArabicNormalizationFilter},\n   *         {@link PersianNormalizationFilter} and Persian Stop words\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new ArabicLetterTokenizer(matchVersion, reader);\n    TokenStream result = new LowerCaseFilter(matchVersion, source);\n    result = new ArabicNormalizationFilter(result);\n    /* additional persian-specific normalization */\n    result = new PersianNormalizationFilter(result);\n    /*\n     * the order here is important: the stopword list is normalized with the\n     * above!\n     */\n    return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ddc5fbfd4c64963aba52713a4496522540294d69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["ddc5fbfd4c64963aba52713a4496522540294d69"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddc5fbfd4c64963aba52713a4496522540294d69"],"ddc5fbfd4c64963aba52713a4496522540294d69":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}