{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#readVIntBlock(IndexInput,int[],int[],int,boolean).mjava","commits":[{"id":"8081d5018e8846bf4080f2809432c759996e749f","date":1344206372,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#readVIntBlock(IndexInput,int[],int[],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  static void readVIntBlock(IndexInput docIn, int[] docBuffer, int[] freqBuffer, int num, boolean indexHasFreq) throws IOException {\n    if (indexHasFreq) {\n      for(int i=0;i<num;i++) {\n        final int code = docIn.readVInt();\n        docBuffer[i] = code >>> 1;\n        if ((code & 1) != 0) {\n          freqBuffer[i] = 1;\n        } else {\n          freqBuffer[i] = docIn.readVInt();\n        }\n      }\n    } else {\n      for(int i=0;i<num;i++) {\n        docBuffer[i] = docIn.readVInt();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#readVIntBlock(IndexInput,int[],int[],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#readVIntBlock(IndexInput,int[],int[],int,boolean).mjava","sourceNew":"  /**\n   * Read values that have been written using variable-length encoding instead of bit-packing.\n   */\n  private static void readVIntBlock(IndexInput docIn, int[] docBuffer,\n      int[] freqBuffer, int num, boolean indexHasFreq) throws IOException {\n    if (indexHasFreq) {\n      for(int i=0;i<num;i++) {\n        final int code = docIn.readVInt();\n        docBuffer[i] = code >>> 1;\n        if ((code & 1) != 0) {\n          freqBuffer[i] = 1;\n        } else {\n          freqBuffer[i] = docIn.readVInt();\n        }\n      }\n    } else {\n      for(int i=0;i<num;i++) {\n        docBuffer[i] = docIn.readVInt();\n      }\n    }\n  }\n\n","sourceOld":"  static void readVIntBlock(IndexInput docIn, int[] docBuffer, int[] freqBuffer, int num, boolean indexHasFreq) throws IOException {\n    if (indexHasFreq) {\n      for(int i=0;i<num;i++) {\n        final int code = docIn.readVInt();\n        docBuffer[i] = code >>> 1;\n        if ((code & 1) != 0) {\n          freqBuffer[i] = 1;\n        } else {\n          freqBuffer[i] = docIn.readVInt();\n        }\n      }\n    } else {\n      for(int i=0;i<num;i++) {\n        docBuffer[i] = docIn.readVInt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#readVIntBlock(IndexInput,int[],int[],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read values that have been written using variable-length encoding instead of bit-packing.\n   */\n  private static void readVIntBlock(IndexInput docIn, int[] docBuffer,\n      int[] freqBuffer, int num, boolean indexHasFreq) throws IOException {\n    if (indexHasFreq) {\n      for(int i=0;i<num;i++) {\n        final int code = docIn.readVInt();\n        docBuffer[i] = code >>> 1;\n        if ((code & 1) != 0) {\n          freqBuffer[i] = 1;\n        } else {\n          freqBuffer[i] = docIn.readVInt();\n        }\n      }\n    } else {\n      for(int i=0;i<num;i++) {\n        docBuffer[i] = docIn.readVInt();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#readVIntBlock(IndexInput,int[],int[],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read values that have been written using variable-length encoding instead of bit-packing.\n   */\n  private static void readVIntBlock(IndexInput docIn, int[] docBuffer,\n      int[] freqBuffer, int num, boolean indexHasFreq) throws IOException {\n    if (indexHasFreq) {\n      for(int i=0;i<num;i++) {\n        final int code = docIn.readVInt();\n        docBuffer[i] = code >>> 1;\n        if ((code & 1) != 0) {\n          freqBuffer[i] = 1;\n        } else {\n          freqBuffer[i] = docIn.readVInt();\n        }\n      }\n    } else {\n      for(int i=0;i<num;i++) {\n        docBuffer[i] = docIn.readVInt();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#readVIntBlock(IndexInput,int[],int[],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#readVIntBlock(IndexInput,int[],int[],int,boolean).mjava","sourceNew":"  /**\n   * Read values that have been written using variable-length encoding instead of bit-packing.\n   */\n  private static void readVIntBlock(IndexInput docIn, int[] docBuffer,\n      int[] freqBuffer, int num, boolean indexHasFreq) throws IOException {\n    if (indexHasFreq) {\n      for(int i=0;i<num;i++) {\n        final int code = docIn.readVInt();\n        docBuffer[i] = code >>> 1;\n        if ((code & 1) != 0) {\n          freqBuffer[i] = 1;\n        } else {\n          freqBuffer[i] = docIn.readVInt();\n        }\n      }\n    } else {\n      for(int i=0;i<num;i++) {\n        docBuffer[i] = docIn.readVInt();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read values that have been written using variable-length encoding instead of bit-packing.\n   */\n  private static void readVIntBlock(IndexInput docIn, int[] docBuffer,\n      int[] freqBuffer, int num, boolean indexHasFreq) throws IOException {\n    if (indexHasFreq) {\n      for(int i=0;i<num;i++) {\n        final int code = docIn.readVInt();\n        docBuffer[i] = code >>> 1;\n        if ((code & 1) != 0) {\n          freqBuffer[i] = 1;\n        } else {\n          freqBuffer[i] = docIn.readVInt();\n        }\n      }\n    } else {\n      for(int i=0;i<num;i++) {\n        docBuffer[i] = docIn.readVInt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"8081d5018e8846bf4080f2809432c759996e749f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["8081d5018e8846bf4080f2809432c759996e749f"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","8081d5018e8846bf4080f2809432c759996e749f"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"8081d5018e8846bf4080f2809432c759996e749f":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}