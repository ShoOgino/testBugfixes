{"path":"backwards/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldSelector() throws Exception {\n    RAMDirectory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = new RAMDirectory();\n    ramDirectory2 = new RAMDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set ftl = new HashSet();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMultiSearcher#testFieldSelector().mjava","sourceNew":"  public void testFieldSelector() throws Exception {\n    RAMDirectory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = new RAMDirectory();\n    ramDirectory2 = new RAMDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set ftl = new HashSet();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n  }\n\n","sourceOld":"  public void testFieldSelector() throws Exception {\n    RAMDirectory ramDirectory1, ramDirectory2;\n    IndexSearcher indexSearcher1, indexSearcher2;\n\n    ramDirectory1 = new RAMDirectory();\n    ramDirectory2 = new RAMDirectory();\n    Query query = new TermQuery(new Term(\"contents\", \"doc0\"));\n\n    // Now put the documents in a different index\n    initIndex(ramDirectory1, 10, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n    initIndex(ramDirectory2, 10, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n\n    indexSearcher1 = new IndexSearcher(ramDirectory1, true);\n    indexSearcher2 = new IndexSearcher(ramDirectory2, true);\n\n    MultiSearcher searcher = getMultiSearcherInstance(new Searcher[]{indexSearcher1, indexSearcher2});\n    assertTrue(\"searcher is null and it shouldn't be\", searcher != null);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(hits.length + \" does not equal: \" + 2, hits.length == 2);\n    Document document = searcher.doc(hits[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    //Should be one document from each directory\n    //they both have two fields, contents and other\n    Set ftl = new HashSet();\n    ftl.add(\"other\");\n    SetBasedFieldSelector fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(hits[0].doc, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    String value = document.get(\"contents\");\n    assertTrue(\"value is not null and it should be\", value == null);\n    value = document.get(\"other\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);\n    ftl.clear();\n    ftl.add(\"contents\");\n    fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(hits[1].doc, fs);\n    value = document.get(\"contents\");\n    assertTrue(\"value is null and it shouldn't be\", value != null);    \n    value = document.get(\"other\");\n    assertTrue(\"value is not null and it should be\", value == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}