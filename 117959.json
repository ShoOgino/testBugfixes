{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testGetInt16Array().mjava","commits":[{"id":"e0f5e4b06eda9c2996435d90659faa1a8601d196","date":1329255071,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testGetInt16Array().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testGetInt16Array().mjava","sourceNew":"  public void testGetInt16Array() throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    short[] sourceArray = new short[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.FIXED_INTS_16, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      valueHolder.numberValue = (long) sourceArray[i];\n      w.add(i, valueHolder);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Ints.getValues(dir, \"test\", sourceArray.length, Type.FIXED_INTS_16, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    short[] loaded = ((short[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetInt16Array() throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    short[] sourceArray = new short[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.FIXED_INTS_16, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      valueHolder.numberValue = (long) sourceArray[i];\n      w.add(i, valueHolder);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Ints.getValues(dir, \"test\", sourceArray.length, Type.FIXED_INTS_16, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    short[] loaded = ((short[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testGetInt16Array().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testGetInt16Array().mjava","sourceNew":"  public void testGetInt16Array() throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    short[] sourceArray = new short[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.FIXED_INTS_16, newIOContext(random()));\n    for (int i = 0; i < sourceArray.length; i++) {\n      valueHolder.numberValue = (long) sourceArray[i];\n      w.add(i, valueHolder);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Ints.getValues(dir, \"test\", sourceArray.length, Type.FIXED_INTS_16, newIOContext(random()));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    short[] loaded = ((short[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetInt16Array() throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    short[] sourceArray = new short[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.FIXED_INTS_16, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      valueHolder.numberValue = (long) sourceArray[i];\n      w.add(i, valueHolder);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Ints.getValues(dir, \"test\", sourceArray.length, Type.FIXED_INTS_16, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    short[] loaded = ((short[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce","date":1358288854,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testGetInt16Array().mjava","sourceNew":null,"sourceOld":"  public void testGetInt16Array() throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    short[] sourceArray = new short[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.FIXED_INTS_16, newIOContext(random()));\n    for (int i = 0; i < sourceArray.length; i++) {\n      valueHolder.numberValue = (long) sourceArray[i];\n      w.add(i, valueHolder);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Ints.getValues(dir, \"test\", sourceArray.length, Type.FIXED_INTS_16, newIOContext(random()));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    short[] loaded = ((short[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testGetInt16Array().mjava","sourceNew":null,"sourceOld":"  public void testGetInt16Array() throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    short[] sourceArray = new short[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, Type.FIXED_INTS_16, newIOContext(random()));\n    for (int i = 0; i < sourceArray.length; i++) {\n      valueHolder.numberValue = (long) sourceArray[i];\n      w.add(i, valueHolder);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Ints.getValues(dir, \"test\", sourceArray.length, Type.FIXED_INTS_16, newIOContext(random()));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    short[] loaded = ((short[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0f5e4b06eda9c2996435d90659faa1a8601d196":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"e0f5e4b06eda9c2996435d90659faa1a8601d196":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d4d69c535930b5cce125cff868d40f6373dc27d4","84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce"],"84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}