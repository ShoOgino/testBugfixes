{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#OverseerAutoReplicaFailoverThread(ConfigSolr,ZkStateReader,UpdateShardHandler).mjava","commits":[{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#OverseerAutoReplicaFailoverThread(ConfigSolr,ZkStateReader,UpdateShardHandler).mjava","pathOld":"/dev/null","sourceNew":"  public OverseerAutoReplicaFailoverThread(ConfigSolr config, ZkStateReader zkStateReader,\n      UpdateShardHandler updateShardHandler) {\n    this.zkStateReader = zkStateReader;\n    \n    this.workLoopDelay = config.getAutoReplicaFailoverWorkLoopDelay();\n    this.waitAfterExpiration = config.getAutoReplicaFailoverWaitAfterExpiration();\n    int badNodeExpiration = config.getAutoReplicaFailoverBadNodeExpiration();\n    \n    log.info(\n        \"Starting \"\n            + this.getClass().getSimpleName()\n            + \" autoReplicaFailoverWorkLoopDelay={} autoReplicaFailoverWaitAfterExpiration={} autoReplicaFailoverBadNodeExpiration={}\",\n        workLoopDelay, waitAfterExpiration, badNodeExpiration);\n\n    baseUrlForBadNodes = CacheBuilder.newBuilder()\n        .concurrencyLevel(1).expireAfterWrite(badNodeExpiration, TimeUnit.MILLISECONDS).build();\n    \n    // TODO: Speed up our work loop when live_nodes changes??\n\n    updateExecutor = updateShardHandler.getUpdateExecutor();\n\n    \n    // TODO: perhaps do a health ping periodically to each node (scaryish)\n    // And/OR work on JIRA issue around self health checks (SOLR-5805)\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#OverseerAutoReplicaFailoverThread(CloudConfig,ZkStateReader,UpdateShardHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#OverseerAutoReplicaFailoverThread(ConfigSolr,ZkStateReader,UpdateShardHandler).mjava","sourceNew":"  public OverseerAutoReplicaFailoverThread(CloudConfig config, ZkStateReader zkStateReader,\n      UpdateShardHandler updateShardHandler) {\n    this.zkStateReader = zkStateReader;\n    \n    this.workLoopDelay = config.getAutoReplicaFailoverWorkLoopDelay();\n    this.waitAfterExpiration = config.getAutoReplicaFailoverWaitAfterExpiration();\n    int badNodeExpiration = config.getAutoReplicaFailoverBadNodeExpiration();\n    \n    log.info(\n        \"Starting \"\n            + this.getClass().getSimpleName()\n            + \" autoReplicaFailoverWorkLoopDelay={} autoReplicaFailoverWaitAfterExpiration={} autoReplicaFailoverBadNodeExpiration={}\",\n        workLoopDelay, waitAfterExpiration, badNodeExpiration);\n\n    baseUrlForBadNodes = CacheBuilder.newBuilder()\n        .concurrencyLevel(1).expireAfterWrite(badNodeExpiration, TimeUnit.MILLISECONDS).build();\n    \n    // TODO: Speed up our work loop when live_nodes changes??\n\n    updateExecutor = updateShardHandler.getUpdateExecutor();\n\n    \n    // TODO: perhaps do a health ping periodically to each node (scaryish)\n    // And/OR work on JIRA issue around self health checks (SOLR-5805)\n  }\n\n","sourceOld":"  public OverseerAutoReplicaFailoverThread(ConfigSolr config, ZkStateReader zkStateReader,\n      UpdateShardHandler updateShardHandler) {\n    this.zkStateReader = zkStateReader;\n    \n    this.workLoopDelay = config.getAutoReplicaFailoverWorkLoopDelay();\n    this.waitAfterExpiration = config.getAutoReplicaFailoverWaitAfterExpiration();\n    int badNodeExpiration = config.getAutoReplicaFailoverBadNodeExpiration();\n    \n    log.info(\n        \"Starting \"\n            + this.getClass().getSimpleName()\n            + \" autoReplicaFailoverWorkLoopDelay={} autoReplicaFailoverWaitAfterExpiration={} autoReplicaFailoverBadNodeExpiration={}\",\n        workLoopDelay, waitAfterExpiration, badNodeExpiration);\n\n    baseUrlForBadNodes = CacheBuilder.newBuilder()\n        .concurrencyLevel(1).expireAfterWrite(badNodeExpiration, TimeUnit.MILLISECONDS).build();\n    \n    // TODO: Speed up our work loop when live_nodes changes??\n\n    updateExecutor = updateShardHandler.getUpdateExecutor();\n\n    \n    // TODO: perhaps do a health ping periodically to each node (scaryish)\n    // And/OR work on JIRA issue around self health checks (SOLR-5805)\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#OverseerAutoReplicaFailoverThread(ConfigSolr,ZkStateReader,UpdateShardHandler).mjava","sourceNew":null,"sourceOld":"  public OverseerAutoReplicaFailoverThread(ConfigSolr config, ZkStateReader zkStateReader,\n      UpdateShardHandler updateShardHandler) {\n    this.zkStateReader = zkStateReader;\n    \n    this.workLoopDelay = config.getAutoReplicaFailoverWorkLoopDelay();\n    this.waitAfterExpiration = config.getAutoReplicaFailoverWaitAfterExpiration();\n    int badNodeExpiration = config.getAutoReplicaFailoverBadNodeExpiration();\n    \n    log.info(\n        \"Starting \"\n            + this.getClass().getSimpleName()\n            + \" autoReplicaFailoverWorkLoopDelay={} autoReplicaFailoverWaitAfterExpiration={} autoReplicaFailoverBadNodeExpiration={}\",\n        workLoopDelay, waitAfterExpiration, badNodeExpiration);\n\n    baseUrlForBadNodes = CacheBuilder.newBuilder()\n        .concurrencyLevel(1).expireAfterWrite(badNodeExpiration, TimeUnit.MILLISECONDS).build();\n    \n    // TODO: Speed up our work loop when live_nodes changes??\n\n    updateExecutor = updateShardHandler.getUpdateExecutor();\n\n    \n    // TODO: perhaps do a health ping periodically to each node (scaryish)\n    // And/OR work on JIRA issue around self health checks (SOLR-5805)\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452","e15199583d3635cb940942caed05132dd6c4c7c6"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e15199583d3635cb940942caed05132dd6c4c7c6"],"e15199583d3635cb940942caed05132dd6c4c7c6":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e15199583d3635cb940942caed05132dd6c4c7c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}