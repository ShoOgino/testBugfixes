{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertWildcardQueryEquals(String,boolean,String).mjava","commits":[{"id":"bfb889456f00316d23950a3c6efea95b78a799eb","date":1046573221,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertWildcardQueryEquals(String,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"    public void assertWildcardQueryEquals(String query, boolean lowercase, String result)\n\tthrows Exception {\n\tQueryParser qp = getParser(null);\n\tqp.setLowercaseWildcardTerms(lowercase);\n\tQuery q = qp.parse(query);\n\tString s = q.toString(\"field\");\n\tif (!s.equals(result)) {\n\t    fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n\t\t+ \"/, expecting /\" + result + \"/\");\n\t}\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105b8c63d8ae43de76f14005b62a5657a4b8d9ce","date":1064896862,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertWildcardQueryEquals(String,boolean,String).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertWildcardQueryEquals(String,boolean,String).mjava","sourceNew":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result)\n    throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setLowercaseWildcardTerms(lowercase);\n    Query q = qp.parse(query);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","sourceOld":"    public void assertWildcardQueryEquals(String query, boolean lowercase, String result)\n\tthrows Exception {\n\tQueryParser qp = getParser(null);\n\tqp.setLowercaseWildcardTerms(lowercase);\n\tQuery q = qp.parse(query);\n\tString s = q.toString(\"field\");\n\tif (!s.equals(result)) {\n\t    fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n\t\t+ \"/, expecting /\" + result + \"/\");\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf","date":1103065373,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertWildcardQueryEquals(String,boolean,String).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertWildcardQueryEquals(String,boolean,String).mjava","sourceNew":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result)\n    throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setLowercaseExpandedTerms(lowercase);\n    Query q = qp.parse(query);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","sourceOld":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result)\n    throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setLowercaseWildcardTerms(lowercase);\n    Query q = qp.parse(query);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df63e0c4264f6da210aa1c1c3cb609554f4f43af","date":1161929844,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertWildcardQueryEquals(String,boolean,String).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertWildcardQueryEquals(String,boolean,String).mjava","sourceNew":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result)\n    throws Exception {\n    assertWildcardQueryEquals(query, lowercase, result, false);\n  }\n\n","sourceOld":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result)\n    throws Exception {\n    QueryParser qp = getParser(null);\n    qp.setLowercaseExpandedTerms(lowercase);\n    Query q = qp.parse(query);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"WildcardQuery /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#assertWildcardQueryEquals(String,boolean,String).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#assertWildcardQueryEquals(String,boolean,String).mjava","sourceNew":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result)\n    throws Exception {\n    assertWildcardQueryEquals(query, lowercase, result, false);\n  }\n\n","sourceOld":"  public void assertWildcardQueryEquals(String query, boolean lowercase, String result)\n    throws Exception {\n    assertWildcardQueryEquals(query, lowercase, result, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["bfb889456f00316d23950a3c6efea95b78a799eb"],"bfb889456f00316d23950a3c6efea95b78a799eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df63e0c4264f6da210aa1c1c3cb609554f4f43af":["10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["df63e0c4264f6da210aa1c1c3cb609554f4f43af"]},"commit2Childs":{"10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf":["df63e0c4264f6da210aa1c1c3cb609554f4f43af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfb889456f00316d23950a3c6efea95b78a799eb"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf"],"bfb889456f00316d23950a3c6efea95b78a799eb":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"df63e0c4264f6da210aa1c1c3cb609554f4f43af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}