{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    mapping = args.get( \"mapping\" );\n\n    if( mapping != null ){\n      List<String> wlist = null;\n      try{\n        File mappingFile = new File( mapping );\n        if( mappingFile.exists() ){\n          wlist = loader.getLines( mapping );\n        }\n        else{\n          List<String> files = StrUtils.splitFileNames( mapping );\n          wlist = new ArrayList<String>();\n          for( String file : files ){\n            List<String> lines = loader.getLines( file.trim() );\n            wlist.addAll( lines );\n          }\n        }\n      }\n      catch( IOException e ){\n        throw new InitializationException(\"IOException thrown while loading mappings\", e);\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules( wlist, builder );\n      normMap = builder.build();\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    mapping = args.get( \"mapping\" );\n\n    if( mapping != null ){\n      List<String> wlist = null;\n      try{\n        File mappingFile = new File( mapping );\n        if( mappingFile.exists() ){\n          wlist = loader.getLines( mapping );\n        }\n        else{\n          List<String> files = StrUtils.splitFileNames( mapping );\n          wlist = new ArrayList<String>();\n          for( String file : files ){\n            List<String> lines = loader.getLines( file.trim() );\n            wlist.addAll( lines );\n          }\n        }\n      }\n      catch( IOException e ){\n        throw new InitializationException(\"IOException thrown while loading mappings\", e);\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules( wlist, builder );\n      normMap = builder.build();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1be7eddae5f5e3424273c183686cc9e44196b811","date":1343102736,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    mapping = args.get( \"mapping\" );\n\n    if( mapping != null ){\n      List<String> wlist = null;\n      try{\n        File mappingFile = new File( mapping );\n        if( mappingFile.exists() ){\n          wlist = loader.getLines( mapping );\n        }\n        else{\n          List<String> files = splitFileNames( mapping );\n          wlist = new ArrayList<String>();\n          for( String file : files ){\n            List<String> lines = loader.getLines( file.trim() );\n            wlist.addAll( lines );\n          }\n        }\n      }\n      catch( IOException e ){\n        throw new InitializationException(\"IOException thrown while loading mappings\", e);\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules( wlist, builder );\n      normMap = builder.build();\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    mapping = args.get( \"mapping\" );\n\n    if( mapping != null ){\n      List<String> wlist = null;\n      try{\n        File mappingFile = new File( mapping );\n        if( mappingFile.exists() ){\n          wlist = loader.getLines( mapping );\n        }\n        else{\n          List<String> files = StrUtils.splitFileNames( mapping );\n          wlist = new ArrayList<String>();\n          for( String file : files ){\n            List<String> lines = loader.getLines( file.trim() );\n            wlist.addAll( lines );\n          }\n        }\n      }\n      catch( IOException e ){\n        throw new InitializationException(\"IOException thrown while loading mappings\", e);\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules( wlist, builder );\n      normMap = builder.build();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65","date":1343184871,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    mapping = args.get( \"mapping\" );\n\n    if( mapping != null ){\n      List<String> wlist = null;\n      try{\n        File mappingFile = new File( mapping );\n        if( mappingFile.exists() ){\n          wlist = loader.getLines( mapping );\n        }\n        else{\n          List<String> files = splitFileNames( mapping );\n          wlist = new ArrayList<String>();\n          for( String file : files ){\n            List<String> lines = loader.getLines( file.trim() );\n            wlist.addAll( lines );\n          }\n        }\n      }\n      catch( IOException e ){\n        throw new InitializationException(\"IOException thrown while loading mappings\", e);\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules( wlist, builder );\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    mapping = args.get( \"mapping\" );\n\n    if( mapping != null ){\n      List<String> wlist = null;\n      try{\n        File mappingFile = new File( mapping );\n        if( mappingFile.exists() ){\n          wlist = loader.getLines( mapping );\n        }\n        else{\n          List<String> files = splitFileNames( mapping );\n          wlist = new ArrayList<String>();\n          for( String file : files ){\n            List<String> lines = loader.getLines( file.trim() );\n            wlist.addAll( lines );\n          }\n        }\n      }\n      catch( IOException e ){\n        throw new InitializationException(\"IOException thrown while loading mappings\", e);\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules( wlist, builder );\n      normMap = builder.build();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    mapping = args.get( \"mapping\" );\n\n    if( mapping != null ){\n      List<String> wlist = null;\n      try{\n        File mappingFile = new File( mapping );\n        if( mappingFile.exists() ){\n          wlist = loader.getLines( mapping );\n        }\n        else{\n          List<String> files = splitFileNames( mapping );\n          wlist = new ArrayList<String>();\n          for( String file : files ){\n            List<String> lines = loader.getLines( file.trim() );\n            wlist.addAll( lines );\n          }\n        }\n      }\n      catch( IOException e ){\n        throw new InitializationException(\"IOException thrown while loading mappings\", e);\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules( wlist, builder );\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    mapping = args.get( \"mapping\" );\n\n    if( mapping != null ){\n      List<String> wlist = null;\n      try{\n        File mappingFile = new File( mapping );\n        if( mappingFile.exists() ){\n          wlist = loader.getLines( mapping );\n        }\n        else{\n          List<String> files = StrUtils.splitFileNames( mapping );\n          wlist = new ArrayList<String>();\n          for( String file : files ){\n            List<String> lines = loader.getLines( file.trim() );\n            wlist.addAll( lines );\n          }\n        }\n      }\n      catch( IOException e ){\n        throw new InitializationException(\"IOException thrown while loading mappings\", e);\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules( wlist, builder );\n      normMap = builder.build();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  // TODO: this should use inputstreams from the loader, not File!\n  public void inform(ResourceLoader loader) throws IOException {\n    mapping = args.get(\"mapping\");\n\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = loader.getLines(mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    mapping = args.get( \"mapping\" );\n\n    if( mapping != null ){\n      List<String> wlist = null;\n      try{\n        File mappingFile = new File( mapping );\n        if( mappingFile.exists() ){\n          wlist = loader.getLines( mapping );\n        }\n        else{\n          List<String> files = splitFileNames( mapping );\n          wlist = new ArrayList<String>();\n          for( String file : files ){\n            List<String> lines = loader.getLines( file.trim() );\n            wlist.addAll( lines );\n          }\n        }\n      }\n      catch( IOException e ){\n        throw new InitializationException(\"IOException thrown while loading mappings\", e);\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules( wlist, builder );\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de6b1e414481e1c25c32f310b02a6d192f7f9faa","date":1343310208,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  // TODO: this should use inputstreams from the loader, not File!\n  public void inform(ResourceLoader loader) throws IOException {\n    mapping = args.get(\"mapping\");\n\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = getLines(loader, mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = getLines(loader, file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: this should use inputstreams from the loader, not File!\n  public void inform(ResourceLoader loader) throws IOException {\n    mapping = args.get(\"mapping\");\n\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = loader.getLines(mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: this should use inputstreams from the loader, not File!\n  public void inform(ResourceLoader loader) throws IOException {\n    mapping = args.get(\"mapping\");\n\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = getLines(loader, mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = getLines(loader, file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: this should use inputstreams from the loader, not File!\n  public void inform(ResourceLoader loader) throws IOException {\n    mapping = args.get(\"mapping\");\n\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = getLines(loader, mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = getLines(loader, file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  // TODO: this should use inputstreams from the loader, not File!\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    mapping = args.get(\"mapping\");\n\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = getLines(loader, mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = getLines(loader, file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: this should use inputstreams from the loader, not File!\n  public void inform(ResourceLoader loader) throws IOException {\n    mapping = args.get(\"mapping\");\n\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = getLines(loader, mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = getLines(loader, file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  // TODO: this should use inputstreams from the loader, not File!\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    mapping = args.get(\"mapping\");\n\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = getLines(loader, mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = getLines(loader, file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: this should use inputstreams from the loader, not File!\n  public void inform(ResourceLoader loader) throws IOException {\n    mapping = args.get(\"mapping\");\n\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = getLines(loader, mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = getLines(loader, file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  // TODO: this should use inputstreams from the loader, not File!\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = getLines(loader, mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = getLines(loader, file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: this should use inputstreams from the loader, not File!\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    mapping = args.get(\"mapping\");\n\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = getLines(loader, mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = getLines(loader, file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  // TODO: this should use inputstreams from the loader, not File!\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = getLines(loader, mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<>();\n        for (String file : files) {\n          List<String> lines = getLines(loader, file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: this should use inputstreams from the loader, not File!\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = getLines(loader, mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = getLines(loader, file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (mapping != null) {\n      List<String> wlist = null;\n      List<String> files = splitFileNames(mapping);\n      wlist = new ArrayList<>();\n      for (String file : files) {\n        List<String> lines = getLines(loader, file.trim());\n        wlist.addAll(lines);\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: this should use inputstreams from the loader, not File!\n  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    if (mapping != null) {\n      List<String> wlist = null;\n      File mappingFile = new File(mapping);\n      if (mappingFile.exists()) {\n        wlist = getLines(loader, mapping);\n      } else {\n        List<String> files = splitFileNames(mapping);\n        wlist = new ArrayList<>();\n        for (String file : files) {\n          List<String> lines = getLines(loader, file.trim());\n          wlist.addAll(lines);\n        }\n      }\n      final NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n      parseRules(wlist, builder);\n      normMap = builder.build();\n      if (normMap.map == null) {\n        // if the inner FST is null, it means it accepts nothing (e.g. the file is empty)\n        // so just set the whole map to null\n        normMap = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["de6b1e414481e1c25c32f310b02a6d192f7f9faa","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["7530de27b87b961b51f01bd1299b7004d46e8823"],"de6b1e414481e1c25c32f310b02a6d192f7f9faa":["f6f80818731469e00f54165ec94aae2db868ea05"],"f4abec28b874149a7223e32cc7a01704c27790de":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d3e0b5069dbacda34baa90adceb47cb5c9f3e65"],"1be7eddae5f5e3424273c183686cc9e44196b811":["3241e06e642196396b80bb293acd9c0814d079e0"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65":["1be7eddae5f5e3424273c183686cc9e44196b811"],"7530de27b87b961b51f01bd1299b7004d46e8823":["de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f4abec28b874149a7223e32cc7a01704c27790de"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"de6b1e414481e1c25c32f310b02a6d192f7f9faa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","7530de27b87b961b51f01bd1299b7004d46e8823"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"1be7eddae5f5e3424273c183686cc9e44196b811":["3d3e0b5069dbacda34baa90adceb47cb5c9f3e65"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"3241e06e642196396b80bb293acd9c0814d079e0":["1be7eddae5f5e3424273c183686cc9e44196b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}