{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteDynamicFieldAccuracy().mjava","commits":[{"id":"c6ff97491f7791aa98e90d71c4c7fee58688c37b","date":1434817448,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteDynamicFieldAccuracy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteDynamicFieldAccuracy() throws Exception {\n    String dynamicFieldName = \"*_del\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(dynamicFieldName);\n    SchemaResponse.DynamicFieldResponse initialDFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialDFieldResponse.getDynamicField();\n    assertThat(dynamicFieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteDynamicField deleteFieldRequest =\n        new SchemaRequest.DeleteDynamicField(dynamicFieldName);\n    SchemaResponse.UpdateResponse deleteDynamicFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteDynamicFieldResponse);\n\n    try {\n      dynamicFieldSchemaRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the dynamic field %s shouldn't be anymore available over Schema API\",\n          dynamicFieldName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteDynamicFieldAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteDynamicFieldAccuracy().mjava","sourceNew":"  @Test\n  public void testDeleteDynamicFieldAccuracy() throws Exception {\n    String dynamicFieldName = \"*_del\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(dynamicFieldName);\n    SchemaResponse.DynamicFieldResponse initialDFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialDFieldResponse.getDynamicField();\n    assertThat(dynamicFieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteDynamicField deleteFieldRequest =\n        new SchemaRequest.DeleteDynamicField(dynamicFieldName);\n    SchemaResponse.UpdateResponse deleteDynamicFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteDynamicFieldResponse);\n\n    expectThrows(SolrException.class, () -> dynamicFieldSchemaRequest.process(getSolrClient()));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteDynamicFieldAccuracy() throws Exception {\n    String dynamicFieldName = \"*_del\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(dynamicFieldName);\n    SchemaResponse.DynamicFieldResponse initialDFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialDFieldResponse.getDynamicField();\n    assertThat(dynamicFieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteDynamicField deleteFieldRequest =\n        new SchemaRequest.DeleteDynamicField(dynamicFieldName);\n    SchemaResponse.UpdateResponse deleteDynamicFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteDynamicFieldResponse);\n\n    try {\n      dynamicFieldSchemaRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the dynamic field %s shouldn't be anymore available over Schema API\",\n          dynamicFieldName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteDynamicFieldAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteDynamicFieldAccuracy().mjava","sourceNew":"  @Test\n  public void testDeleteDynamicFieldAccuracy() throws Exception {\n    String dynamicFieldName = \"*_del\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(dynamicFieldName);\n    SchemaResponse.DynamicFieldResponse initialDFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialDFieldResponse.getDynamicField();\n    assertThat(dynamicFieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteDynamicField deleteFieldRequest =\n        new SchemaRequest.DeleteDynamicField(dynamicFieldName);\n    SchemaResponse.UpdateResponse deleteDynamicFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteDynamicFieldResponse);\n\n    expectThrows(SolrException.class, () -> dynamicFieldSchemaRequest.process(getSolrClient()));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteDynamicFieldAccuracy() throws Exception {\n    String dynamicFieldName = \"*_del\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(dynamicFieldName);\n    SchemaResponse.DynamicFieldResponse initialDFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialDFieldResponse.getDynamicField();\n    assertThat(dynamicFieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteDynamicField deleteFieldRequest =\n        new SchemaRequest.DeleteDynamicField(dynamicFieldName);\n    SchemaResponse.UpdateResponse deleteDynamicFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteDynamicFieldResponse);\n\n    try {\n      dynamicFieldSchemaRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the dynamic field %s shouldn't be anymore available over Schema API\",\n          dynamicFieldName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteDynamicFieldAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testDeleteDynamicFieldAccuracy().mjava","sourceNew":"  @Test\n  public void testDeleteDynamicFieldAccuracy() throws Exception {\n    String dynamicFieldName = \"*_del\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(dynamicFieldName);\n    SchemaResponse.DynamicFieldResponse initialDFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialDFieldResponse.getDynamicField();\n    assertThat(dynamicFieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteDynamicField deleteFieldRequest =\n        new SchemaRequest.DeleteDynamicField(dynamicFieldName);\n    SchemaResponse.UpdateResponse deleteDynamicFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteDynamicFieldResponse);\n\n    expectThrows(SolrException.class, () -> dynamicFieldSchemaRequest.process(getSolrClient()));\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteDynamicFieldAccuracy() throws Exception {\n    String dynamicFieldName = \"*_del\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dynamicFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addDynamicFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addDynamicFieldResponse);\n\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(dynamicFieldName);\n    SchemaResponse.DynamicFieldResponse initialDFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldResponse);\n    Map<String, Object> fieldAttributesResponse = initialDFieldResponse.getDynamicField();\n    assertThat(dynamicFieldName, is(equalTo(fieldAttributesResponse.get(\"name\"))));\n\n    SchemaRequest.DeleteDynamicField deleteFieldRequest =\n        new SchemaRequest.DeleteDynamicField(dynamicFieldName);\n    SchemaResponse.UpdateResponse deleteDynamicFieldResponse = deleteFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(deleteDynamicFieldResponse);\n\n    try {\n      dynamicFieldSchemaRequest.process(getSolrClient());\n      fail(String.format(Locale.ROOT, \"after removal, the dynamic field %s shouldn't be anymore available over Schema API\",\n          dynamicFieldName));\n    } catch (SolrException e) {\n      //success\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["c6ff97491f7791aa98e90d71c4c7fee58688c37b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["c6ff97491f7791aa98e90d71c4c7fee58688c37b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}