{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    MockRAMDirectory directory = newDirectory(random);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory(random);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    MockRAMDirectory directory = newDirectory(random);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory(random);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","date":1313816278,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["132903c28af3aa6f67284b78de91c0f0a99488c2","744486748bc5bee772100e49230e5bca39bac99a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","744486748bc5bee772100e49230e5bca39bac99a"],"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["744486748bc5bee772100e49230e5bca39bac99a"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["744486748bc5bee772100e49230e5bca39bac99a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"744486748bc5bee772100e49230e5bca39bac99a":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["d572389229127c297dd1fa5ce4758e1cec41e799"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","744486748bc5bee772100e49230e5bca39bac99a"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"744486748bc5bee772100e49230e5bca39bac99a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}