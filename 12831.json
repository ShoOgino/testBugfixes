{"path":"src/test/org/apache/solr/analysis/TestWordDelimiterFilter#assertAnalyzesTo(Analyzer,String,String[],int[],int[],int[]).mjava","commits":[{"id":"1d786062be6da940351591ec2372ddd0ae56bd39","date":1251293566,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestWordDelimiterFilter#assertAnalyzesTo(Analyzer,String,String[],int[],int[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  private void assertAnalyzesTo(Analyzer a, String input, String[] output,\n      int startOffsets[], int endOffsets[], int posIncs[]) throws Exception {\n\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    TermAttribute termAtt = (TermAttribute) ts\n        .getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) ts\n        .getAttribute(OffsetAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) ts\n        .getAttribute(PositionIncrementAttribute.class);\n    for (int i = 0; i < output.length; i++) {\n      assertTrue(ts.incrementToken());\n      assertEquals(output[i], termAtt.term());\n      assertEquals(startOffsets[i], offsetAtt.startOffset());\n      assertEquals(endOffsets[i], offsetAtt.endOffset());\n      assertEquals(posIncs[i], posIncAtt.getPositionIncrement());\n    }\n    assertFalse(ts.incrementToken());\n    ts.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/solr/analysis/TestWordDelimiterFilter#assertAnalyzesTo(Analyzer,String,String[],int[],int[],int[]).mjava","sourceNew":null,"sourceOld":"  private void assertAnalyzesTo(Analyzer a, String input, String[] output,\n      int startOffsets[], int endOffsets[], int posIncs[]) throws Exception {\n\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    TermAttribute termAtt = (TermAttribute) ts\n        .getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) ts\n        .getAttribute(OffsetAttribute.class);\n    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) ts\n        .getAttribute(PositionIncrementAttribute.class);\n    for (int i = 0; i < output.length; i++) {\n      assertTrue(ts.incrementToken());\n      assertEquals(output[i], termAtt.term());\n      assertEquals(startOffsets[i], offsetAtt.startOffset());\n      assertEquals(endOffsets[i], offsetAtt.endOffset());\n      assertEquals(posIncs[i], posIncAtt.getPositionIncrement());\n    }\n    assertFalse(ts.incrementToken());\n    ts.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d786062be6da940351591ec2372ddd0ae56bd39":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["1d786062be6da940351591ec2372ddd0ae56bd39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1d786062be6da940351591ec2372ddd0ae56bd39":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1d786062be6da940351591ec2372ddd0ae56bd39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}