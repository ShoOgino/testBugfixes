{"path":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testBadActionRaisesException().mjava","commits":[{"id":"78a6940133670e0174590da7b3d490e837698176","date":1335202499,"type":0,"author":"Stefan Matheis","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testBadActionRaisesException().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBadActionRaisesException() throws Exception {\n    \n    SolrQueryRequest req = req(\"action\", \"badaction\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    \n    try {\n      handler.handleRequestBody(req, rsp);\n      fail(\"Should have thrown a SolrException for the bad action\");\n    }\n    catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code,se.code());\n    }\n\n    req.close();    \n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad826eef7abbe5ff5f62d508c87065b81010c4c6","date":1336074973,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testBadActionRaisesException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testBadActionRaisesException().mjava","sourceNew":"  public void testBadActionRaisesException() throws Exception {\n    \n    try {\n      SolrQueryResponse rsp = makeRequest(handler, req(\"action\", \"badaction\"));\n      fail(\"Should have thrown a SolrException for the bad action\");\n    } catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code,se.code());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadActionRaisesException() throws Exception {\n    \n    SolrQueryRequest req = req(\"action\", \"badaction\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    \n    try {\n      handler.handleRequestBody(req, rsp);\n      fail(\"Should have thrown a SolrException for the bad action\");\n    }\n    catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code,se.code());\n    }\n\n    req.close();    \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testBadActionRaisesException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testBadActionRaisesException().mjava","sourceNew":"  public void testBadActionRaisesException() throws Exception {\n    SolrException se = expectThrows(SolrException.class, () -> makeRequest(handler, req(\"action\", \"badaction\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code,se.code());\n  }\n\n","sourceOld":"  public void testBadActionRaisesException() throws Exception {\n    \n    try {\n      SolrQueryResponse rsp = makeRequest(handler, req(\"action\", \"badaction\"));\n      fail(\"Should have thrown a SolrException for the bad action\");\n    } catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code,se.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testBadActionRaisesException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testBadActionRaisesException().mjava","sourceNew":"  public void testBadActionRaisesException() throws Exception {\n    SolrException se = expectThrows(SolrException.class, () -> makeRequest(handler, req(\"action\", \"badaction\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code,se.code());\n  }\n\n","sourceOld":"  public void testBadActionRaisesException() throws Exception {\n    \n    try {\n      SolrQueryResponse rsp = makeRequest(handler, req(\"action\", \"badaction\"));\n      fail(\"Should have thrown a SolrException for the bad action\");\n    } catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code,se.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testBadActionRaisesException().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testBadActionRaisesException().mjava","sourceNew":"  public void testBadActionRaisesException() throws Exception {\n    SolrException se = expectThrows(SolrException.class, () -> makeRequest(handler, req(\"action\", \"badaction\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code,se.code());\n  }\n\n","sourceOld":"  public void testBadActionRaisesException() throws Exception {\n    \n    try {\n      SolrQueryResponse rsp = makeRequest(handler, req(\"action\", \"badaction\"));\n      fail(\"Should have thrown a SolrException for the bad action\");\n    } catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code,se.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad826eef7abbe5ff5f62d508c87065b81010c4c6":["78a6940133670e0174590da7b3d490e837698176"],"78a6940133670e0174590da7b3d490e837698176":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["ad826eef7abbe5ff5f62d508c87065b81010c4c6"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["ad826eef7abbe5ff5f62d508c87065b81010c4c6","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ad826eef7abbe5ff5f62d508c87065b81010c4c6","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"ad826eef7abbe5ff5f62d508c87065b81010c4c6":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"78a6940133670e0174590da7b3d490e837698176":["ad826eef7abbe5ff5f62d508c87065b81010c4c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78a6940133670e0174590da7b3d490e837698176"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}