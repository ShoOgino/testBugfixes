{"path":"lucene/misc/src/test/org/apache/lucene/index/SortingLeafReaderTest#testBadSort().mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SortingLeafReaderTest#testBadSort().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingLeafReaderTest#testBadSort().mjava","sourceNew":"  public void testBadSort() throws Exception {\n    try {\n      SortingLeafReader.wrap(sortedReader, Sort.RELEVANCE);\n      fail(\"Didn't get expected exception\");\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  public void testBadSort() throws Exception {\n    try {\n      SortingLeafReader.wrap(sortedReader, Sort.RELEVANCE);\n      fail(\"Didn't get expected exception\");\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SortingLeafReaderTest#testBadSort().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SortingLeafReaderTest#testBadSort().mjava","sourceNew":"  public void testBadSort() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      SortingLeafReader.wrap(sortedReader, Sort.RELEVANCE);\n    });\n    assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testBadSort() throws Exception {\n    try {\n      SortingLeafReader.wrap(sortedReader, Sort.RELEVANCE);\n      fail(\"Didn't get expected exception\");\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", e.getMessage());\n    }\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SortingLeafReaderTest#testBadSort().mjava","sourceNew":null,"sourceOld":"  public void testBadSort() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      SortingLeafReader.wrap(sortedReader, Sort.RELEVANCE);\n    });\n    assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SortingLeafReaderTest#testBadSort().mjava","sourceNew":null,"sourceOld":"  public void testBadSort() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      SortingLeafReader.wrap(sortedReader, Sort.RELEVANCE);\n    });\n    assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBadSort().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SortingLeafReaderTest#testBadSort().mjava","sourceNew":"  public void testBadSort() throws Exception {\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iwc.setIndexSort(Sort.RELEVANCE);\n    });\n    assertEquals(\"invalid SortField type: must be one of [STRING, INT, FLOAT, LONG, DOUBLE] but got: <score>\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testBadSort() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      SortingLeafReader.wrap(sortedReader, Sort.RELEVANCE);\n    });\n    assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testBadSort().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SortingLeafReaderTest#testBadSort().mjava","sourceNew":"  public void testBadSort() throws Exception {\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      iwc.setIndexSort(Sort.RELEVANCE);\n    });\n    assertEquals(\"invalid SortField type: must be one of [STRING, INT, FLOAT, LONG, DOUBLE] but got: <score>\", expected.getMessage());\n  }\n\n","sourceOld":"  public void testBadSort() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      SortingLeafReader.wrap(sortedReader, Sort.RELEVANCE);\n    });\n    assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SortingLeafReaderTest#testBadSort().mjava","sourceNew":null,"sourceOld":"  public void testBadSort() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      SortingLeafReader.wrap(sortedReader, Sort.RELEVANCE);\n    });\n    assertEquals(\"Cannot sort an index with a Sort that refers to the relevance score\", expected.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"0ad30c6a479e764150a3316e57263319775f1df2":["05fe562aa248790944d43cdd478f512572835ba0","3d33e731a93d4b57e662ff094f64f94a745422d4"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["05fe562aa248790944d43cdd478f512572835ba0","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["05fe562aa248790944d43cdd478f512572835ba0","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"05fe562aa248790944d43cdd478f512572835ba0":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["05fe562aa248790944d43cdd478f512572835ba0"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}