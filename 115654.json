{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#comparePrefix(UnitNRShape,UnitNRShape).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#comparePrefix(UnitNRShape,UnitNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#comparePrefix(UnitNRShape,UnitNRShape).mjava","sourceNew":"  /** Compares a to b, returning less than 0, 0, or greater than 0, if a is less than, equal to, or\n   * greater than b, respectively, up to their common prefix (i.e. only min(a.levels,b.levels) are compared).\n   * @lucene.internal */\n  protected static int comparePrefix(UnitNRShape a, UnitNRShape b) {\n    int minLevel = Math.min(a.getLevel(), b.getLevel());\n    for (int level = 1; level <= minLevel; level++) {\n      int diff = a.getValAtLevel(level) - b.getValAtLevel(level);\n      if (diff != 0)\n        return diff;\n    }\n    return 0;\n  }\n\n","sourceOld":"  /** Compares a to b, returning less than 0, 0, or greater than 0, if a is less than, equal to, or\n   * greater than b, respectively, up to their common prefix (i.e. only min(a.levels,b.levels) are compared).\n   * @lucene.internal */\n  protected static int comparePrefix(UnitNRShape a, UnitNRShape b) {\n    int minLevel = Math.min(a.getLevel(), b.getLevel());\n    for (int level = 1; level <= minLevel; level++) {\n      int diff = a.getValAtLevel(level) - b.getValAtLevel(level);\n      if (diff != 0)\n        return diff;\n    }\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#comparePrefix(UnitNRShape,UnitNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#comparePrefix(UnitNRShape,UnitNRShape).mjava","sourceNew":"  /** Compares a to b, returning less than 0, 0, or greater than 0, if a is less than, equal to, or\n   * greater than b, respectively, up to their common prefix (i.e. only min(a.levels,b.levels) are compared).\n   * @lucene.internal */\n  protected static int comparePrefix(UnitNRShape a, UnitNRShape b) {\n    int minLevel = Math.min(a.getLevel(), b.getLevel());\n    for (int level = 1; level <= minLevel; level++) {\n      int diff = a.getValAtLevel(level) - b.getValAtLevel(level);\n      if (diff != 0)\n        return diff;\n    }\n    return 0;\n  }\n\n","sourceOld":"  /** Compares a to b, returning less than 0, 0, or greater than 0, if a is less than, equal to, or\n   * greater than b, respectively, up to their common prefix (i.e. only min(a.levels,b.levels) are compared).\n   * @lucene.internal */\n  protected static int comparePrefix(UnitNRShape a, UnitNRShape b) {\n    int minLevel = Math.min(a.getLevel(), b.getLevel());\n    for (int level = 1; level <= minLevel; level++) {\n      int diff = a.getValAtLevel(level) - b.getValAtLevel(level);\n      if (diff != 0)\n        return diff;\n    }\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}