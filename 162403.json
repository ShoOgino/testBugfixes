{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/CharacterRunAutomaton#run(char[],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CharacterRunAutomaton#run(char[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/CharacterRunAutomaton#run(char[],int,int).mjava","sourceNew":"  /**\n   * Returns true if the given string is accepted by this automaton\n   */\n  public boolean run(char[] s, int offset, int length) {\n    int p = initial;\n    int l = offset + length;\n    for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n      p = step(p, cp = Character.codePointAt(s, i, l));\n      if (p == -1) return false;\n    }\n    return accept[p];\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given string is accepted by this automaton\n   */\n  public boolean run(char[] s, int offset, int length) {\n    int p = initial;\n    int l = offset + length;\n    for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n      p = step(p, cp = Character.codePointAt(s, i, l));\n      if (p == -1) return false;\n    }\n    return accept[p];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7543e96e2d4820e09334d36a699b998ed963f4f","date":1476121426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CharacterRunAutomaton#run(char[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CharacterRunAutomaton#run(char[],int,int).mjava","sourceNew":"  /**\n   * Returns true if the given string is accepted by this automaton\n   */\n  public boolean run(char[] s, int offset, int length) {\n    int p = 0;\n    int l = offset + length;\n    for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n      p = step(p, cp = Character.codePointAt(s, i, l));\n      if (p == -1) return false;\n    }\n    return accept[p];\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given string is accepted by this automaton\n   */\n  public boolean run(char[] s, int offset, int length) {\n    int p = initial;\n    int l = offset + length;\n    for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n      p = step(p, cp = Character.codePointAt(s, i, l));\n      if (p == -1) return false;\n    }\n    return accept[p];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CharacterRunAutomaton#run(char[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CharacterRunAutomaton#run(char[],int,int).mjava","sourceNew":"  /**\n   * Returns true if the given string is accepted by this automaton\n   */\n  public boolean run(char[] s, int offset, int length) {\n    int p = 0;\n    int l = offset + length;\n    for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n      p = step(p, cp = Character.codePointAt(s, i, l));\n      if (p == -1) return false;\n    }\n    return accept[p];\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given string is accepted by this automaton\n   */\n  public boolean run(char[] s, int offset, int length) {\n    int p = initial;\n    int l = offset + length;\n    for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n      p = step(p, cp = Character.codePointAt(s, i, l));\n      if (p == -1) return false;\n    }\n    return accept[p];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CharacterRunAutomaton#run(char[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CharacterRunAutomaton#run(char[],int,int).mjava","sourceNew":"  /**\n   * Returns true if the given string is accepted by this automaton\n   */\n  public boolean run(char[] s, int offset, int length) {\n    int p = 0;\n    int l = offset + length;\n    for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n      p = step(p, cp = Character.codePointAt(s, i, l));\n      if (p == -1) return false;\n    }\n    return accept.get(p);\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given string is accepted by this automaton\n   */\n  public boolean run(char[] s, int offset, int length) {\n    int p = 0;\n    int l = offset + length;\n    for (int i = offset, cp = 0; i < l; i += Character.charCount(cp)) {\n      p = step(p, cp = Character.codePointAt(s, i, l));\n      if (p == -1) return false;\n    }\n    return accept[p];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b7543e96e2d4820e09334d36a699b998ed963f4f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["b7543e96e2d4820e09334d36a699b998ed963f4f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b7543e96e2d4820e09334d36a699b998ed963f4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"b7543e96e2d4820e09334d36a699b998ed963f4f":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b7543e96e2d4820e09334d36a699b998ed963f4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}