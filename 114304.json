{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","commits":[{"id":"3057b45cc5245d8fd8999a4bbe04da2c59511b75","date":1457536053,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field, Integer.valueOf(lowerTerm), Integer.valueOf(upperTerm));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field, Long.valueOf(lowerTerm), Long.valueOf(upperTerm));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field, Double.valueOf(lowerTerm), Double.valueOf(upperTerm));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field, Float.valueOf(lowerTerm), Float.valueOf(upperTerm));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["69674a7cf22e2b0f6f89e17cb6f74e7484ae4b19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69674a7cf22e2b0f6f89e17cb6f74e7484ae4b19","date":1460977771,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field,\n            (lowerTerm == null ? Integer.MIN_VALUE : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? Integer.MAX_VALUE : Integer.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field,\n            (lowerTerm == null ? Long.MIN_VALUE : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? Long.MAX_VALUE : Long.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field,\n            (lowerTerm == null ? Double.NEGATIVE_INFINITY : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? Double.POSITIVE_INFINITY : Double.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field,\n            (lowerTerm == null ? Float.NEGATIVE_INFINITY : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? Float.POSITIVE_INFINITY : Float.valueOf(upperTerm)));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field, Integer.valueOf(lowerTerm), Integer.valueOf(upperTerm));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field, Long.valueOf(lowerTerm), Long.valueOf(upperTerm));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field, Double.valueOf(lowerTerm), Double.valueOf(upperTerm));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field, Float.valueOf(lowerTerm), Float.valueOf(upperTerm));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":["3057b45cc5245d8fd8999a4bbe04da2c59511b75"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76b27bc4e241a6dd8c185cdb62b458a0562564f0","date":1460988862,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field,\n            (lowerTerm == null ? Integer.MIN_VALUE : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? Integer.MAX_VALUE : Integer.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field,\n            (lowerTerm == null ? Long.MIN_VALUE : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? Long.MAX_VALUE : Long.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field,\n            (lowerTerm == null ? Double.NEGATIVE_INFINITY : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? Double.POSITIVE_INFINITY : Double.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field,\n            (lowerTerm == null ? Float.NEGATIVE_INFINITY : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? Float.POSITIVE_INFINITY : Float.valueOf(upperTerm)));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field, Integer.valueOf(lowerTerm), Integer.valueOf(upperTerm));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field, Long.valueOf(lowerTerm), Long.valueOf(upperTerm));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field, Double.valueOf(lowerTerm), Double.valueOf(upperTerm));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field, Float.valueOf(lowerTerm), Float.valueOf(upperTerm));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field,\n            (lowerTerm == null ? Integer.MIN_VALUE : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? Integer.MAX_VALUE : Integer.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field,\n            (lowerTerm == null ? Long.MIN_VALUE : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? Long.MAX_VALUE : Long.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field,\n            (lowerTerm == null ? Double.NEGATIVE_INFINITY : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? Double.POSITIVE_INFINITY : Double.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field,\n            (lowerTerm == null ? Float.NEGATIVE_INFINITY : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? Float.POSITIVE_INFINITY : Float.valueOf(upperTerm)));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String lowerTerm = DOMUtils.getAttributeOrFail(e, \"lowerTerm\");\n    String upperTerm = DOMUtils.getAttributeOrFail(e, \"upperTerm\");\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field, Integer.valueOf(lowerTerm), Integer.valueOf(upperTerm));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field, Long.valueOf(lowerTerm), Long.valueOf(upperTerm));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field, Double.valueOf(lowerTerm), Double.valueOf(upperTerm));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field, Float.valueOf(lowerTerm), Float.valueOf(upperTerm));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field,\n            (lowerTerm == null ? Integer.MIN_VALUE : Integer.parseInt(lowerTerm)),\n            (upperTerm == null ? Integer.MAX_VALUE : Integer.parseInt(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field,\n            (lowerTerm == null ? Long.MIN_VALUE : Long.parseLong(lowerTerm)),\n            (upperTerm == null ? Long.MAX_VALUE : Long.parseLong(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field,\n            (lowerTerm == null ? Double.NEGATIVE_INFINITY : Double.parseDouble(lowerTerm)),\n            (upperTerm == null ? Double.POSITIVE_INFINITY : Double.parseDouble(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field,\n            (lowerTerm == null ? Float.NEGATIVE_INFINITY : Float.parseFloat(lowerTerm)),\n            (upperTerm == null ? Float.POSITIVE_INFINITY : Float.parseFloat(upperTerm)));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field,\n            (lowerTerm == null ? Integer.MIN_VALUE : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? Integer.MAX_VALUE : Integer.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field,\n            (lowerTerm == null ? Long.MIN_VALUE : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? Long.MAX_VALUE : Long.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field,\n            (lowerTerm == null ? Double.NEGATIVE_INFINITY : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? Double.POSITIVE_INFINITY : Double.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field,\n            (lowerTerm == null ? Float.NEGATIVE_INFINITY : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? Float.POSITIVE_INFINITY : Float.valueOf(upperTerm)));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field,\n            (lowerTerm == null ? Integer.MIN_VALUE : Integer.parseInt(lowerTerm)),\n            (upperTerm == null ? Integer.MAX_VALUE : Integer.parseInt(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field,\n            (lowerTerm == null ? Long.MIN_VALUE : Long.parseLong(lowerTerm)),\n            (upperTerm == null ? Long.MAX_VALUE : Long.parseLong(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field,\n            (lowerTerm == null ? Double.NEGATIVE_INFINITY : Double.parseDouble(lowerTerm)),\n            (upperTerm == null ? Double.POSITIVE_INFINITY : Double.parseDouble(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field,\n            (lowerTerm == null ? Float.NEGATIVE_INFINITY : Float.parseFloat(lowerTerm)),\n            (upperTerm == null ? Float.POSITIVE_INFINITY : Float.parseFloat(upperTerm)));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field,\n            (lowerTerm == null ? Integer.MIN_VALUE : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? Integer.MAX_VALUE : Integer.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field,\n            (lowerTerm == null ? Long.MIN_VALUE : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? Long.MAX_VALUE : Long.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field,\n            (lowerTerm == null ? Double.NEGATIVE_INFINITY : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? Double.POSITIVE_INFINITY : Double.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field,\n            (lowerTerm == null ? Float.NEGATIVE_INFINITY : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? Float.POSITIVE_INFINITY : Float.valueOf(upperTerm)));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/PointRangeQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field,\n            (lowerTerm == null ? Integer.MIN_VALUE : Integer.parseInt(lowerTerm)),\n            (upperTerm == null ? Integer.MAX_VALUE : Integer.parseInt(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field,\n            (lowerTerm == null ? Long.MIN_VALUE : Long.parseLong(lowerTerm)),\n            (upperTerm == null ? Long.MAX_VALUE : Long.parseLong(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field,\n            (lowerTerm == null ? Double.NEGATIVE_INFINITY : Double.parseDouble(lowerTerm)),\n            (upperTerm == null ? Double.POSITIVE_INFINITY : Double.parseDouble(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field,\n            (lowerTerm == null ? Float.NEGATIVE_INFINITY : Float.parseFloat(lowerTerm)),\n            (upperTerm == null ? Float.POSITIVE_INFINITY : Float.parseFloat(upperTerm)));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String field = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    final String lowerTerm = DOMUtils.getAttribute(e, \"lowerTerm\", null);\n    final String upperTerm = DOMUtils.getAttribute(e, \"upperTerm\", null);\n\n    String type = DOMUtils.getAttribute(e, \"type\", \"int\");\n    try {\n      if (type.equalsIgnoreCase(\"int\")) {\n        return IntPoint.newRangeQuery(field,\n            (lowerTerm == null ? Integer.MIN_VALUE : Integer.valueOf(lowerTerm)),\n            (upperTerm == null ? Integer.MAX_VALUE : Integer.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"long\")) {\n        return LongPoint.newRangeQuery(field,\n            (lowerTerm == null ? Long.MIN_VALUE : Long.valueOf(lowerTerm)),\n            (upperTerm == null ? Long.MAX_VALUE : Long.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"double\")) {\n        return DoublePoint.newRangeQuery(field,\n            (lowerTerm == null ? Double.NEGATIVE_INFINITY : Double.valueOf(lowerTerm)),\n            (upperTerm == null ? Double.POSITIVE_INFINITY : Double.valueOf(upperTerm)));\n      } else if (type.equalsIgnoreCase(\"float\")) {\n        return FloatPoint.newRangeQuery(field,\n            (lowerTerm == null ? Float.NEGATIVE_INFINITY : Float.valueOf(lowerTerm)),\n            (upperTerm == null ? Float.POSITIVE_INFINITY : Float.valueOf(upperTerm)));\n      } else {\n        throw new ParserException(\"type attribute must be one of: [long, int, double, float]\");\n      }\n    } catch (NumberFormatException nfe) {\n      throw new ParserException(\"Could not parse lowerTerm or upperTerm into a number\", nfe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["713122036535651642e6d4fe57ce12b449e18473"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["713122036535651642e6d4fe57ce12b449e18473"],"713122036535651642e6d4fe57ce12b449e18473":["3057b45cc5245d8fd8999a4bbe04da2c59511b75","76b27bc4e241a6dd8c185cdb62b458a0562564f0"],"69674a7cf22e2b0f6f89e17cb6f74e7484ae4b19":["3057b45cc5245d8fd8999a4bbe04da2c59511b75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76b27bc4e241a6dd8c185cdb62b458a0562564f0":["3057b45cc5245d8fd8999a4bbe04da2c59511b75","69674a7cf22e2b0f6f89e17cb6f74e7484ae4b19"],"ab68488225b6a6c357dda72ed11dedca9914a192":["713122036535651642e6d4fe57ce12b449e18473","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"3057b45cc5245d8fd8999a4bbe04da2c59511b75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"]},"commit2Childs":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"713122036535651642e6d4fe57ce12b449e18473":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","ab68488225b6a6c357dda72ed11dedca9914a192"],"69674a7cf22e2b0f6f89e17cb6f74e7484ae4b19":["76b27bc4e241a6dd8c185cdb62b458a0562564f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3057b45cc5245d8fd8999a4bbe04da2c59511b75"],"76b27bc4e241a6dd8c185cdb62b458a0562564f0":["713122036535651642e6d4fe57ce12b449e18473"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"3057b45cc5245d8fd8999a4bbe04da2c59511b75":["713122036535651642e6d4fe57ce12b449e18473","69674a7cf22e2b0f6f89e17cb6f74e7484ae4b19","76b27bc4e241a6dd8c185cdb62b458a0562564f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}