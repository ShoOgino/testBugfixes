{"path":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoMBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreDescriptor().getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricReporterPlugins();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), SolrInfoMBean.Group.core, registryName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoMBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreDescriptor().getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricReporterPlugins();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), SolrInfoMBean.Group.core, registryName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","sourceNew":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoMBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreDescriptor().getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricReporterPlugins();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), tag,\n        SolrInfoMBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","sourceOld":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoMBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreDescriptor().getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricReporterPlugins();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), SolrInfoMBean.Group.core, registryName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","sourceNew":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreDescriptor().getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricReporterPlugins();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), tag,\n        SolrInfoBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","sourceOld":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoMBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreDescriptor().getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricReporterPlugins();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), tag,\n        SolrInfoMBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","sourceNew":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricReporterPlugins();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), tag,\n        SolrInfoBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","sourceOld":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreDescriptor().getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricReporterPlugins();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), tag,\n        SolrInfoBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","sourceNew":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricReporterPlugins();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), tag,\n        SolrInfoBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","sourceOld":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoMBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreDescriptor().getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricReporterPlugins();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), tag,\n        SolrInfoMBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","date":1494330459,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","sourceNew":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricsConfig().getMetricReporters();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), tag,\n        SolrInfoBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","sourceOld":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricReporterPlugins();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), tag,\n        SolrInfoBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","sourceNew":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricsConfig().getMetricReporters();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), tag,\n        SolrInfoBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","sourceOld":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricReporterPlugins();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), tag,\n        SolrInfoBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","sourceNew":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    CoreContainer coreContainer = core.getCoreContainer();\n    NodeConfig nodeConfig = coreContainer.getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricsConfig().getMetricReporters();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), coreContainer, core, tag,\n        SolrInfoBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","sourceOld":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    NodeConfig nodeConfig = core.getCoreContainer().getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricsConfig().getMetricReporters();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), tag,\n        SolrInfoBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","sourceNew":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    CoreContainer coreContainer = core.getCoreContainer();\n    NodeConfig nodeConfig = coreContainer.getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricsConfig().getMetricReporters();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), coreContainer, core, solrMetricsContext.tag,\n        SolrInfoBean.Group.core, solrMetricsContext.registry);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","sourceOld":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    CoreContainer coreContainer = core.getCoreContainer();\n    NodeConfig nodeConfig = coreContainer.getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricsConfig().getMetricReporters();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), coreContainer, core, tag,\n        SolrInfoBean.Group.core, registryName);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#loadReporters().mjava","sourceNew":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    CoreContainer coreContainer = core.getCoreContainer();\n    NodeConfig nodeConfig = coreContainer.getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricsConfig().getMetricReporters();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), coreContainer, core, solrMetricsContext.getTag(),\n        SolrInfoBean.Group.core, solrMetricsContext.getRegistryName());\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","sourceOld":"  /**\n   * Load reporters configured globally and specific to {@link org.apache.solr.core.SolrInfoBean.Group#core}\n   * group or with a registry name specific to this core.\n   */\n  public void loadReporters() {\n    CoreContainer coreContainer = core.getCoreContainer();\n    NodeConfig nodeConfig = coreContainer.getConfig();\n    PluginInfo[] pluginInfos = nodeConfig.getMetricsConfig().getMetricReporters();\n    metricManager.loadReporters(pluginInfos, core.getResourceLoader(), coreContainer, core, solrMetricsContext.tag,\n        SolrInfoBean.Group.core, solrMetricsContext.registry);\n    if (cloudMode) {\n      metricManager.loadShardReporters(pluginInfos, core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0265144286422ad99682a00904cc2536b79c8535"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"816521ebaad5add9cb96bb88c577394e2938c40b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["f90f26c648df8320685eb76fec8bb9972e1994c4","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}