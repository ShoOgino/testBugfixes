{"path":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","commits":[{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"/dev/null","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new RAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new RAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new RAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new RAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new RAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1));\n        pr.add(IndexReader.open(dir2));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3), IndexReader.open(dir4)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5)});\n      }\n    });\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1));\n        pr.add(IndexReader.open(dir2));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3), IndexReader.open(dir4)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new RAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new RAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new RAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new RAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new RAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1));\n        pr.add(IndexReader.open(dir2));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3), IndexReader.open(dir4)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5)});\n      }\n    });\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1));\n        pr.add(IndexReader.open(dir2));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3), IndexReader.open(dir4)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1));\n        pr.add(IndexReader.open(dir2));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3), IndexReader.open(dir4)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testMixedReaders().mjava","sourceNew":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","sourceOld":"  public void testMixedReaders() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, true);\n    final Directory dir2 = new MockRAMDirectory();\n    createIndex(dir2, true);\n    final Directory dir3 = new MockRAMDirectory();\n    createIndex(dir3, false);\n    final Directory dir4 = new MockRAMDirectory();\n    createIndex(dir4, true);\n    final Directory dir5 = new MockRAMDirectory();\n    createIndex(dir5, false);\n    \n    performDefaultTests(new TestReopen() {\n\n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        // only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders\n        if (i == 1) TestIndexReaderReopen.modifyIndex(i, dir1);  \n        \n        TestIndexReaderReopen.modifyIndex(i, dir4);\n        TestIndexReaderReopen.modifyIndex(i, dir5);\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        ParallelReader pr = new ParallelReader();\n        pr.add(IndexReader.open(dir1, false));\n        pr.add(IndexReader.open(dir2, false));\n        MultiReader mr = new MultiReader(new IndexReader[] {\n            IndexReader.open(dir3, false), IndexReader.open(dir4, false)});\n        return new MultiReader(new IndexReader[] {\n           pr, mr, IndexReader.open(dir5, false)});\n      }\n    });\n    dir1.close();\n    dir2.close();\n    dir3.close();\n    dir4.close();\n    dir5.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["6db660b56f04fdb2853d25cdee8ee0d36559a521","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}