{"path":"solr/core/src/java/org/apache/solr/core/PackageManager#createNewClassLoaders(Map,int).mjava","commits":[{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PackageManager#createNewClassLoaders(Map,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PackageManager#createNewClassLoader(Map,int).mjava","sourceNew":"  void createNewClassLoaders(Map m, int ver) {\n    boolean[] loadedAll = new boolean[1];\n    loadedAll[0] = true;\n    Map<String, Package> newPkgs = new LinkedHashMap<>();\n    m.forEach((k, v) -> {\n      if (v instanceof Map) {\n        Map map = new HashMap((Map) v);\n        map.put(CoreAdminParams.NAME, String.valueOf(k));\n        String name = (String) k;\n        Package existing = pkgs.get(name);\n        if (existing != null && !existing.isModified(map)) {\n          //this package has not changed\n          newPkgs.put(name, existing);\n        }\n\n        RuntimeLib lib = new RuntimeLib(coreContainer);\n        lib.znodeVersion = ver;\n        try {\n          lib.init(new PluginInfo(RuntimeLib.TYPE, map));\n          if (lib.getUrl() == null) {\n            log.error(\"Unable to initialize runtimeLib : \" + Utils.toJSONString(v));\n            loadedAll[0] = false;\n          }\n          lib.loadJar();\n\n          newPkgs.put(name, new Package(lib,\n              new MemClassLoader(Collections.singletonList(lib), coreContainer.getResourceLoader()),\n              ver, name));\n        } catch (Exception e) {\n          log.error(\"error loading a runtimeLib \" + Utils.toJSONString(v), e);\n          loadedAll[0] = false;\n\n        }\n      }\n    });\n\n    if (loadedAll[0]) {\n      log.info(\"Libraries changed. New memclassloader created with jars {}\",\n          newPkgs.values().stream().map(it -> it.lib.getUrl()).collect(Collectors.toList()));\n      this.pkgs = newPkgs;\n\n    }\n  }\n\n","sourceOld":"  void createNewClassLoader(Map m, int ver) {\n    boolean[] loadedAll = new boolean[1];\n    loadedAll[0] = true;\n    Map<String, Package> newPkgs = new LinkedHashMap<>();\n    m.forEach((k, v) -> {\n      if (v instanceof Map) {\n        Map map = new HashMap((Map) v);\n        map.put(CoreAdminParams.NAME, String.valueOf(k));\n        String name = (String) k;\n        Package existing = pkgs.get(name);\n        if (existing != null && !existing.isModified(map)) {\n          //this package has not changed\n          newPkgs.put(name, existing);\n        }\n\n        RuntimeLib lib = new RuntimeLib(coreContainer);\n        lib.znodeVersion = ver;\n        try {\n          lib.init(new PluginInfo(RuntimeLib.TYPE, map));\n          if (lib.getUrl() == null) {\n            log.error(\"Unable to initialize runtimeLib : \" + Utils.toJSONString(v));\n            loadedAll[0] = false;\n          }\n          lib.loadJar();\n\n          newPkgs.put(name, new Package(lib,\n              new MemClassLoader(Collections.singletonList(lib), coreContainer.getResourceLoader()),\n              ver, name));\n        } catch (Exception e) {\n          log.error(\"error loading a runtimeLib \" + Utils.toJSONString(v), e);\n          loadedAll[0] = false;\n\n        }\n      }\n    });\n\n    if (loadedAll[0]) {\n      log.info(\"Libraries changed. New memclassloader created with jars {}\",\n          newPkgs.values().stream().map(it -> it.lib.getUrl()).collect(Collectors.toList()));\n      this.pkgs = newPkgs;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/PackageManager#createNewClassLoaders(Map,int).mjava","sourceNew":null,"sourceOld":"  void createNewClassLoaders(Map m, int ver) {\n    boolean[] loadedAll = new boolean[1];\n    loadedAll[0] = true;\n    Map<String, Package> newPkgs = new LinkedHashMap<>();\n    m.forEach((k, v) -> {\n      if (v instanceof Map) {\n        Map map = new HashMap((Map) v);\n        map.put(CoreAdminParams.NAME, String.valueOf(k));\n        String name = (String) k;\n        Package existing = pkgs.get(name);\n        if (existing != null && !existing.isModified(map)) {\n          //this package has not changed\n          newPkgs.put(name, existing);\n        }\n\n        RuntimeLib lib = new RuntimeLib(coreContainer);\n        lib.znodeVersion = ver;\n        try {\n          lib.init(new PluginInfo(RuntimeLib.TYPE, map));\n          if (lib.getUrl() == null) {\n            log.error(\"Unable to initialize runtimeLib : \" + Utils.toJSONString(v));\n            loadedAll[0] = false;\n          }\n          lib.loadJar();\n\n          newPkgs.put(name, new Package(lib,\n              new MemClassLoader(Collections.singletonList(lib), coreContainer.getResourceLoader()),\n              ver, name));\n        } catch (Exception e) {\n          log.error(\"error loading a runtimeLib \" + Utils.toJSONString(v), e);\n          loadedAll[0] = false;\n\n        }\n      }\n    });\n\n    if (loadedAll[0]) {\n      log.info(\"Libraries changed. New memclassloader created with jars {}\",\n          newPkgs.values().stream().map(it -> it.lib.getUrl()).collect(Collectors.toList()));\n      this.pkgs = newPkgs;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/PackageManager#createNewClassLoaders(Map,int).mjava","sourceNew":null,"sourceOld":"  void createNewClassLoaders(Map m, int ver) {\n    boolean[] loadedAll = new boolean[1];\n    loadedAll[0] = true;\n    Map<String, Package> newPkgs = new LinkedHashMap<>();\n    m.forEach((k, v) -> {\n      if (v instanceof Map) {\n        Map map = new HashMap((Map) v);\n        map.put(CoreAdminParams.NAME, String.valueOf(k));\n        String name = (String) k;\n        Package existing = pkgs.get(name);\n        if (existing != null && !existing.isModified(map)) {\n          //this package has not changed\n          newPkgs.put(name, existing);\n        }\n\n        RuntimeLib lib = new RuntimeLib(coreContainer);\n        lib.znodeVersion = ver;\n        try {\n          lib.init(new PluginInfo(RuntimeLib.TYPE, map));\n          if (lib.getUrl() == null) {\n            log.error(\"Unable to initialize runtimeLib : \" + Utils.toJSONString(v));\n            loadedAll[0] = false;\n          }\n          lib.loadJar();\n\n          newPkgs.put(name, new Package(lib,\n              new MemClassLoader(Collections.singletonList(lib), coreContainer.getResourceLoader()),\n              ver, name));\n        } catch (Exception e) {\n          log.error(\"error loading a runtimeLib \" + Utils.toJSONString(v), e);\n          loadedAll[0] = false;\n\n        }\n      }\n    });\n\n    if (loadedAll[0]) {\n      log.info(\"Libraries changed. New memclassloader created with jars {}\",\n          newPkgs.values().stream().map(it -> it.lib.getUrl()).collect(Collectors.toList()));\n      this.pkgs = newPkgs;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}