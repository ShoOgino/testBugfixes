{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T]_runWithRestrictedPermissions(PrivilegedExceptionAction[T],Permission...).mjava","commits":[{"id":"32da05d97a45ece3cec1f9d79cf153e2e845d08c","date":1435709797,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T]_runWithRestrictedPermissions(PrivilegedExceptionAction[T],Permission...).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Runs a code part with restricted permissions (be sure to add all required permissions,\n   * because it would start with empty permissions). You cannot grant more permissions than\n   * our policy file allows, but you may restrict writing to several dirs...\n   * <p><em>Note:</em> This assumes a {@link SecurityManager} enabled, otherwise it\n   * stops test execution.\n   */\n  public static <T> T runWithRestrictedPermissions(PrivilegedExceptionAction<T> action, Permission... permissions) throws Exception {\n    assumeTrue(\"runWithRestrictedPermissions requires a SecurityManager enabled\", System.getSecurityManager() != null);\n    final PermissionCollection perms = new Permissions();\n    Arrays.stream(permissions).forEach(perms::add);\n    final AccessControlContext ctx = new AccessControlContext(new ProtectionDomain[] { new ProtectionDomain(null, perms) });\n    try {\n      return AccessController.doPrivileged(action, ctx);\n    } catch (PrivilegedActionException e) {\n      throw e.getException();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4633934aa052ecdca54a4187d58bfe01038ced4","date":1449356526,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T]_runWithRestrictedPermissions(PrivilegedExceptionAction[T],Permission...).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T]_runWithRestrictedPermissions(PrivilegedExceptionAction[T],Permission...).mjava","sourceNew":"  /** \n   * Runs a code part with restricted permissions (be sure to add all required permissions,\n   * because it would start with empty permissions). You cannot grant more permissions than\n   * our policy file allows, but you may restrict writing to several dirs...\n   * <p><em>Note:</em> This assumes a {@link SecurityManager} enabled, otherwise it\n   * stops test execution. If enabled, it needs the following {@link SecurityPermission}:\n   * {@code \"createAccessControlContext\"}\n   */\n  public static <T> T runWithRestrictedPermissions(PrivilegedExceptionAction<T> action, Permission... permissions) throws Exception {\n    assumeTrue(\"runWithRestrictedPermissions requires a SecurityManager enabled\", System.getSecurityManager() != null);\n    // be sure to have required permission, otherwise doPrivileged runs with *no* permissions:\n    AccessController.checkPermission(new SecurityPermission(\"createAccessControlContext\"));\n    final PermissionCollection perms = new Permissions();\n    Arrays.stream(permissions).forEach(perms::add);\n    final AccessControlContext ctx = new AccessControlContext(new ProtectionDomain[] { new ProtectionDomain(null, perms) });\n    try {\n      return AccessController.doPrivileged(action, ctx);\n    } catch (PrivilegedActionException e) {\n      throw e.getException();\n    }\n  }\n\n","sourceOld":"  /** \n   * Runs a code part with restricted permissions (be sure to add all required permissions,\n   * because it would start with empty permissions). You cannot grant more permissions than\n   * our policy file allows, but you may restrict writing to several dirs...\n   * <p><em>Note:</em> This assumes a {@link SecurityManager} enabled, otherwise it\n   * stops test execution.\n   */\n  public static <T> T runWithRestrictedPermissions(PrivilegedExceptionAction<T> action, Permission... permissions) throws Exception {\n    assumeTrue(\"runWithRestrictedPermissions requires a SecurityManager enabled\", System.getSecurityManager() != null);\n    final PermissionCollection perms = new Permissions();\n    Arrays.stream(permissions).forEach(perms::add);\n    final AccessControlContext ctx = new AccessControlContext(new ProtectionDomain[] { new ProtectionDomain(null, perms) });\n    try {\n      return AccessController.doPrivileged(action, ctx);\n    } catch (PrivilegedActionException e) {\n      throw e.getException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4633934aa052ecdca54a4187d58bfe01038ced4":["32da05d97a45ece3cec1f9d79cf153e2e845d08c"],"32da05d97a45ece3cec1f9d79cf153e2e845d08c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4633934aa052ecdca54a4187d58bfe01038ced4"]},"commit2Childs":{"c4633934aa052ecdca54a4187d58bfe01038ced4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32da05d97a45ece3cec1f9d79cf153e2e845d08c":["c4633934aa052ecdca54a4187d58bfe01038ced4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32da05d97a45ece3cec1f9d79cf153e2e845d08c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}