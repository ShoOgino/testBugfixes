{"path":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","commits":[{"id":"f664ea05e4a031c766b6bff0cefcd6f3833fbb81","date":1235737223,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","pathOld":"/dev/null","sourceNew":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n      \n      String cmpCommitUserData = \"foo fighters\";\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d);\n      r.deleteDocument(5);\n      r.flush(cmpCommitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), cmpCommitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3ab91f3bb602daf6393fa7f78b11afd3400d669","date":1243282044,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","sourceNew":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map commitUserData = new HashMap();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n      \n      String cmpCommitUserData = \"foo fighters\";\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d);\n      r.deleteDocument(5);\n      r.flush(cmpCommitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), cmpCommitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","sourceNew":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map commitUserData = new HashMap();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map commitUserData = new HashMap();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","sourceNew":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map commitUserData = new HashMap();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map commitUserData = new HashMap();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","sourceNew":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map commitUserData = new HashMap();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map commitUserData = new HashMap();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","sourceNew":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map<String,String> commitUserData = new HashMap<String,String>();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map commitUserData = new HashMap();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","sourceNew":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map<String,String> commitUserData = new HashMap<String,String>();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map<String,String> commitUserData = new HashMap<String,String>();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","sourceNew":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map<String,String> commitUserData = new HashMap<String,String>();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(2));\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map<String,String> commitUserData = new HashMap<String,String>();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","sourceNew":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map<String,String> commitUserData = new HashMap<String,String>();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map<String,String> commitUserData = new HashMap<String,String>();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(2));\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","sourceNew":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map<String,String> commitUserData = new HashMap<String,String>();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n      .setMaxBufferedDocs(2));\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setMaxBufferedDocs(2));\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map<String,String> commitUserData = new HashMap<String,String>();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(2);\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testCommitUserData().mjava","sourceNew":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map<String,String> commitUserData = new HashMap<String,String>();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n      .setMaxBufferedDocs(2));\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setMaxBufferedDocs(2));\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","sourceOld":"    public void testCommitUserData() throws Exception {\n      RAMDirectory d = new MockRAMDirectory();\n\n      Map<String,String> commitUserData = new HashMap<String,String>();\n      commitUserData.put(\"foo\", \"fighters\");\n      \n      // set up writer\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT))\n      .setMaxBufferedDocs(2));\n      for(int i=0;i<27;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader r = IndexReader.open(d, false);\n      r.deleteDocument(5);\n      r.flush(commitUserData);\n      r.close();\n      \n      SegmentInfos sis = new SegmentInfos();\n      sis.read(d);\n      IndexReader r2 = IndexReader.open(d, false);\n      IndexCommit c = r.getIndexCommit();\n      assertEquals(c.getUserData(), commitUserData);\n\n      assertEquals(sis.getCurrentSegmentFileName(), c.getSegmentsFileName());\n\n      assertTrue(c.equals(r.getIndexCommit()));\n\n      // Change the index\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new StandardAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setMaxBufferedDocs(2));\n      for(int i=0;i<7;i++)\n        addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r3 = r2.reopen();\n      assertFalse(c.equals(r3.getIndexCommit()));\n      assertFalse(r2.getIndexCommit().isOptimized());\n      r3.close();\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      r3 = r2.reopen();\n      assertTrue(r3.getIndexCommit().isOptimized());\n      r2.close();\n      r3.close();\n      d.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"0a046c0c310bc77931fc8441bd920053b607dd14":["d3ab91f3bb602daf6393fa7f78b11afd3400d669","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"f664ea05e4a031c766b6bff0cefcd6f3833fbb81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["f664ea05e4a031c766b6bff0cefcd6f3833fbb81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f664ea05e4a031c766b6bff0cefcd6f3833fbb81":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f664ea05e4a031c766b6bff0cefcd6f3833fbb81"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}