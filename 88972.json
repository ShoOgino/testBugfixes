{"path":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testAllPointDocsDeletedInSegment().mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testAllDimensionalDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllDimensionalDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new DimensionalBinaryField(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    DimensionalValues values = MultiDimensionalValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b2820b242e28867a2f4edae536382216c511dc","date":1454059647,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25b2820b242e28867a2f4edae536382216c511dc":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","25b2820b242e28867a2f4edae536382216c511dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d15e34266d75e4e8b95da046cd0afc812367b38"]},"commit2Childs":{"25b2820b242e28867a2f4edae536382216c511dc":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["25b2820b242e28867a2f4edae536382216c511dc","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"8d15e34266d75e4e8b95da046cd0afc812367b38":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}