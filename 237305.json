{"path":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellingParams.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellingParams.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.add(\"responseHeader\", new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.add(\"responseHeader\", new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n\n        assertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellingParams.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.add(\"responseHeader\", new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.add(\"responseHeader\", new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.add(\"responseHeader\", new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.add(\"responseHeader\", new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n\n        assertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.add(\"responseHeader\", new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.add(\"responseHeader\", new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862753d1e2f4853f389dcb115747661e7bc0e384","date":1485438193,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/documenq/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/documenq/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/documenq/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/documenq/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"374570062523b2011ca513a2276525ff3ddf222d","date":1494268002,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/documenq/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/documenq/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/documenq/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/documenq/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n                suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n\n        //\"document\" is in 2 documents but \"another\" is only in 1.\n        //So with a threshold of 29%, \"another\" is absent from the dictionary\n        //while \"document\" is present.\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellingParams.SPELLCHECK_DICT, \"threshold_direct\", SpellingParams.SPELLCHECK_COUNT,\"5\", SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n            ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n        );\n\n        //TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n        SolrCore core = h.getCore();\n        SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n        assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n        params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold\");\n        params.add(SpellingParams.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n        params.add(CommonParams.Q, \"anotheq\");\n\n        SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n        SolrQueryResponse rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        NamedList values = rsp.getValues();\n        NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n        NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n\n        params.remove(SpellingParams.SPELLCHECK_DICT);\n        params.add(SpellingParams.SPELLCHECK_DICT, \"threshold_direct\");\n        rsp = new SolrQueryResponse();\n        rsp.addResponseHeader(new SimpleOrderedMap());\n        req = new LocalSolrQueryRequest(core, params);\n        handler.handleRequest(req, rsp);\n        req.close();\n        values = rsp.getValues();\n        spellCheck = (NamedList) values.get(\"spellcheck\");\n        suggestions = (NamedList) spellCheck.get(\"suggestions\");\n        assertTrue(suggestions.get(\"suggestion\")==null);\n        assertTrue((Boolean) spellCheck.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"862753d1e2f4853f389dcb115747661e7bc0e384":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["ecd75942508378ccc92c3a26f71db6cba9f25784","862753d1e2f4853f389dcb115747661e7bc0e384"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"30c8e5574b55d57947e989443dfde611646530ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["374570062523b2011ca513a2276525ff3ddf222d","5ff704ef91e9ae30ca59babb23ece85720701b60"],"e98520789adb1d5ad05afb4956eca0944a929688":["28288370235ed02234a64753cdbf0c6ec096304a"],"374570062523b2011ca513a2276525ff3ddf222d":["862753d1e2f4853f389dcb115747661e7bc0e384"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["862753d1e2f4853f389dcb115747661e7bc0e384","374570062523b2011ca513a2276525ff3ddf222d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["374570062523b2011ca513a2276525ff3ddf222d"]},"commit2Childs":{"862753d1e2f4853f389dcb115747661e7bc0e384":["598b5d23aa7c9732bf473c21a9cd309c44599394","374570062523b2011ca513a2276525ff3ddf222d","e9017cf144952056066919f1ebc7897ff9bd71b1"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"374570062523b2011ca513a2276525ff3ddf222d":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1","5ff704ef91e9ae30ca59babb23ece85720701b60"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["30c8e5574b55d57947e989443dfde611646530ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ecd75942508378ccc92c3a26f71db6cba9f25784":["862753d1e2f4853f389dcb115747661e7bc0e384","598b5d23aa7c9732bf473c21a9cd309c44599394"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","30c8e5574b55d57947e989443dfde611646530ee","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}