{"path":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testAllEqual().mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testAllEqual().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/rangetree/TestRangeTree#testAllEqual().mjava","sourceNew":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue(false);\n    long[] values = new long[numValues];\n    FixedBitSet missing = new FixedBitSet(numValues);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n\n    for(int docID=0;docID<numValues;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        missing.set(docID);\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n      values[docID] = value;\n    }\n\n    verifyLongs(values, null);\n  }\n\n","sourceOld":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue();\n    long[] values = new long[numValues];\n    FixedBitSet missing = new FixedBitSet(numValues);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n\n    for(int docID=0;docID<numValues;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        missing.set(docID);\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n      values[docID] = value;\n    }\n\n    verify(missing, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7","date":1447172780,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testAllEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testAllEqual().mjava","sourceNew":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue(false);\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","sourceOld":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue(false);\n    long[] values = new long[numValues];\n    FixedBitSet missing = new FixedBitSet(numValues);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n\n    for(int docID=0;docID<numValues;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        missing.set(docID);\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n      values[docID] = value;\n    }\n\n    verifyLongs(values, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testAllEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testAllEqual().mjava","sourceNew":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue(false);\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","sourceOld":"  public void testAllEqual() throws Exception {\n    int numValues = atLeast(10000);\n    long value = randomValue(false);\n    long[] values = new long[numValues];\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: use same value=\" + value);\n    }\n    Arrays.fill(values, value);\n\n    verifyLongs(values, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7"],"dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}