{"path":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#writeTerm(BytesRef,TermsEnum,FixedBitSet,NormsProducer).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#writeTerm(BytesRef,TermsEnum,FixedBitSet,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PushPostingsWriterBase#writeTerm(BytesRef,TermsEnum,FixedBitSet).mjava","sourceNew":"  @Override\n  public final BlockTermState writeTerm(BytesRef term, TermsEnum termsEnum, FixedBitSet docsSeen, NormsProducer norms) throws IOException {\n    NumericDocValues normValues;\n    if (fieldInfo.hasNorms() == false) {\n      normValues = null;\n    } else {\n      normValues = norms.getNorms(fieldInfo);\n    }\n    startTerm(normValues);\n    postingsEnum = termsEnum.postings(postingsEnum, enumFlags);\n    assert postingsEnum != null;\n\n    int docFreq = 0;\n    long totalTermFreq = 0;\n    while (true) {\n      int docID = postingsEnum.nextDoc();\n      if (docID == PostingsEnum.NO_MORE_DOCS) {\n        break;\n      }\n      docFreq++;\n      docsSeen.set(docID);\n      int freq;\n      if (writeFreqs) {\n        freq = postingsEnum.freq();\n        totalTermFreq += freq;\n      } else {\n        freq = -1;\n      }\n      startDoc(docID, freq);\n\n      if (writePositions) {\n        for(int i=0;i<freq;i++) {\n          int pos = postingsEnum.nextPosition();\n          BytesRef payload = writePayloads ? postingsEnum.getPayload() : null;\n          int startOffset;\n          int endOffset;\n          if (writeOffsets) {\n            startOffset = postingsEnum.startOffset();\n            endOffset = postingsEnum.endOffset();\n          } else {\n            startOffset = -1;\n            endOffset = -1;\n          }\n          addPosition(pos, payload, startOffset, endOffset);\n        }\n      }\n\n      finishDoc();\n    }\n\n    if (docFreq == 0) {\n      return null;\n    } else {\n      BlockTermState state = newTermState();\n      state.docFreq = docFreq;\n      state.totalTermFreq = writeFreqs ? totalTermFreq : -1;\n      finishTerm(state);\n      return state;\n    }\n  }\n\n","sourceOld":"  @Override\n  public final BlockTermState writeTerm(BytesRef term, TermsEnum termsEnum, FixedBitSet docsSeen) throws IOException {\n    startTerm();\n    postingsEnum = termsEnum.postings(postingsEnum, enumFlags);\n    assert postingsEnum != null;\n\n    int docFreq = 0;\n    long totalTermFreq = 0;\n    while (true) {\n      int docID = postingsEnum.nextDoc();\n      if (docID == PostingsEnum.NO_MORE_DOCS) {\n        break;\n      }\n      docFreq++;\n      docsSeen.set(docID);\n      int freq;\n      if (writeFreqs) {\n        freq = postingsEnum.freq();\n        totalTermFreq += freq;\n      } else {\n        freq = -1;\n      }\n      startDoc(docID, freq);\n\n      if (writePositions) {\n        for(int i=0;i<freq;i++) {\n          int pos = postingsEnum.nextPosition();\n          BytesRef payload = writePayloads ? postingsEnum.getPayload() : null;\n          int startOffset;\n          int endOffset;\n          if (writeOffsets) {\n            startOffset = postingsEnum.startOffset();\n            endOffset = postingsEnum.endOffset();\n          } else {\n            startOffset = -1;\n            endOffset = -1;\n          }\n          addPosition(pos, payload, startOffset, endOffset);\n        }\n      }\n\n      finishDoc();\n    }\n\n    if (docFreq == 0) {\n      return null;\n    } else {\n      BlockTermState state = newTermState();\n      state.docFreq = docFreq;\n      state.totalTermFreq = writeFreqs ? totalTermFreq : -1;\n      finishTerm(state);\n      return state;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}