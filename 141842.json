{"path":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiConstantScoreRangeQuery(Analyzer,String,String,String,String).mjava","commits":[{"id":"73b24dd99dc72171f84ace6f141e71e669f0221b","date":1237459915,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiConstantScoreRangeQuery(Analyzer,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public void testFarsiConstantScoreRangeQuery\n    (Analyzer analyzer, String firstBeg, String firstEnd, \n     String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (farsiIndex, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new ConstantScoreRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new ConstantScoreRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiConstantScoreRangeQuery(Analyzer,String,String,String,String).mjava","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiConstantScoreRangeQuery(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiConstantScoreRangeQuery\n    (Analyzer analyzer, String firstBeg, String firstEnd, \n     String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (farsiIndex, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new ConstantScoreRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new ConstantScoreRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiConstantScoreRangeQuery\n    (Analyzer analyzer, String firstBeg, String firstEnd, \n     String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (farsiIndex, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new ConstantScoreRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new ConstantScoreRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiConstantScoreRangeQuery(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiTermRangeQuery\n    (Analyzer analyzer, String firstBeg, String firstEnd, \n     String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (farsiIndex, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiConstantScoreRangeQuery\n    (Analyzer analyzer, String firstBeg, String firstEnd, \n     String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (farsiIndex, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new ConstantScoreRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new ConstantScoreRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73b24dd99dc72171f84ace6f141e71e669f0221b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4256bc1b3c94786287ccdfc751230374521843cf":["73b24dd99dc72171f84ace6f141e71e669f0221b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"]},"commit2Childs":{"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b24dd99dc72171f84ace6f141e71e669f0221b"],"73b24dd99dc72171f84ace6f141e71e669f0221b":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}