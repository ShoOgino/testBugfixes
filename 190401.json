{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","commits":[{"id":"54d17c38a2ec6cf529776157e201d539c5c0ff2f","date":1462480579,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = new HttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79728e71d79579147b18f43e27a36e34be4986e2","date":1462480538,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = new HttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = new HttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = new HttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","sourceNew":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = getHttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = new HttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","sourceNew":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = getHttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = new HttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","sourceNew":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = getHttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = new HttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","date":1563597632,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","sourceNew":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = getHttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, StandardCharsets.UTF_8);\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = getHttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, \"UTF-8\");\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd6cf7e1b30a14801c9e290183b875c6801bbe9","date":1591734817,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGraphHandler().mjava","sourceNew":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = getHttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, StandardCharsets.UTF_8);\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = BaseTestHarness.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = BaseTestHarness.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","sourceOld":"  @Test\n  public void testGraphHandler() throws Exception {\n\n\n    new UpdateRequest()\n        .add(id, \"0\", \"from_s\", \"bill\", \"to_s\", \"jim\", \"message_t\", \"Hello jim\")\n        .add(id, \"1\", \"from_s\", \"bill\", \"to_s\", \"sam\", \"message_t\", \"Hello sam\")\n        .add(id, \"2\", \"from_s\", \"bill\", \"to_s\", \"max\", \"message_t\", \"Hello max\")\n        .add(id, \"3\", \"from_s\", \"max\",  \"to_s\", \"kip\", \"message_t\", \"Hello kip\")\n        .add(id, \"4\", \"from_s\", \"sam\",  \"to_s\", \"steve\", \"message_t\", \"Hello steve\")\n        .add(id, \"5\", \"from_s\", \"jim\",  \"to_s\", \"ann\", \"message_t\", \"Hello steve\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    commit();\n\n    List<JettySolrRunner> runners = cluster.getJettySolrRunners();\n    JettySolrRunner runner = runners.get(0);\n    String url = runner.getBaseUrl().toString();\n\n    HttpSolrClient client = getHttpSolrClient(url);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n\n    String expr = \"sort(by=\\\"node asc\\\", gatherNodes(collection1, \" +\n        \"walk=\\\"bill->from_s\\\",\" +\n        \"trackTraversal=\\\"true\\\",\" +\n        \"gather=\\\"to_s\\\"))\";\n\n    params.add(\"expr\", expr);\n    QueryRequest query = new QueryRequest(params);\n    query.setPath(\"/collection1/graph\");\n\n    query.setResponseParser(new InputStreamResponseParser(\"xml\"));\n    query.setMethod(SolrRequest.METHOD.POST);\n\n    NamedList<Object> genericResponse = client.request(query);\n\n\n    InputStream stream = (InputStream)genericResponse.get(\"stream\");\n    InputStreamReader reader = new InputStreamReader(stream, StandardCharsets.UTF_8);\n    String xml = readString(reader);\n    //Validate the nodes\n    String error = h.validateXPath(xml,\n        \"//graph/node[1][@id ='jim']\",\n        \"//graph/node[2][@id ='max']\",\n        \"//graph/node[3][@id ='sam']\");\n    if(error != null) {\n      throw new Exception(error);\n    }\n    //Validate the edges\n    error = h.validateXPath(xml,\n        \"//graph/edge[1][@source ='bill']\",\n        \"//graph/edge[1][@target ='jim']\",\n        \"//graph/edge[2][@source ='bill']\",\n        \"//graph/edge[2][@target ='max']\",\n        \"//graph/edge[3][@source ='bill']\",\n        \"//graph/edge[3][@target ='sam']\");\n\n    if(error != null) {\n      throw new Exception(error);\n    }\n\n    client.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["79728e71d79579147b18f43e27a36e34be4986e2","63a1978c6710c767fa084741e3d6424840003a62"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"63a1978c6710c767fa084741e3d6424840003a62":["79728e71d79579147b18f43e27a36e34be4986e2"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79728e71d79579147b18f43e27a36e34be4986e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79728e71d79579147b18f43e27a36e34be4986e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["79728e71d79579147b18f43e27a36e34be4986e2","63a1978c6710c767fa084741e3d6424840003a62"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79728e71d79579147b18f43e27a36e34be4986e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"]},"commit2Childs":{"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["79728e71d79579147b18f43e27a36e34be4986e2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54d17c38a2ec6cf529776157e201d539c5c0ff2f","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","79728e71d79579147b18f43e27a36e34be4986e2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"79728e71d79579147b18f43e27a36e34be4986e2":["e9017cf144952056066919f1ebc7897ff9bd71b1","63a1978c6710c767fa084741e3d6424840003a62","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","d1f5728f32a4a256b36cfabd7a2636452f599bb9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}