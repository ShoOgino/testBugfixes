{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    DirectoryReader r_1 = DirectoryReader.open(w_1, true);\n    DirectoryReader r_2 = DirectoryReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    DirectoryReader merged = DirectoryReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    DirectoryReader r_1 = DirectoryReader.open(w_1, true);\n    DirectoryReader r_2 = DirectoryReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    DirectoryReader merged = DirectoryReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    IndexReader r_1 = IndexReader.open(w_1, true);\n    IndexReader r_2 = IndexReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    IndexReader merged = IndexReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random());\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random().nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random().nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random().nextBoolean()));\n    DirectoryReader r_1 = DirectoryReader.open(w_1, true);\n    DirectoryReader r_2 = DirectoryReader.open(w_2, true);\n    if (random().nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    DirectoryReader merged = DirectoryReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random);\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random.nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random.nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random.nextBoolean()));\n    DirectoryReader r_1 = DirectoryReader.open(w_1, true);\n    DirectoryReader r_2 = DirectoryReader.open(w_2, true);\n    if (random.nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    DirectoryReader merged = DirectoryReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ff79ec5acd6ad7b57378052a20e3cf8a975493f","date":1336830542,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    int valuesPerIndex = 10;\n    List<Type> values = Arrays.asList(Type.values());\n    Collections.shuffle(values, random());\n    Type first = values.get(0);\n    Type second = values.get(1);\n    // index first index\n    Directory d_1 = newDirectory();\n    IndexWriter w_1 = new IndexWriter(d_1, writerConfig(random().nextBoolean()));\n    indexValues(w_1, valuesPerIndex, first, values, false, 7);\n    w_1.commit();\n    assertEquals(valuesPerIndex, w_1.maxDoc());\n    _TestUtil.checkIndex(d_1);\n\n    // index second index\n    Directory d_2 = newDirectory();\n    IndexWriter w_2 = new IndexWriter(d_2, writerConfig(random().nextBoolean()));\n    indexValues(w_2, valuesPerIndex, second, values, false, 7);\n    w_2.commit();\n    assertEquals(valuesPerIndex, w_2.maxDoc());\n    _TestUtil.checkIndex(d_2);\n\n    Directory target = newDirectory();\n    IndexWriter w = new IndexWriter(target, writerConfig(random().nextBoolean()));\n    DirectoryReader r_1 = DirectoryReader.open(w_1, true);\n    DirectoryReader r_2 = DirectoryReader.open(w_2, true);\n    if (random().nextBoolean()) {\n      w.addIndexes(d_1, d_2);\n    } else {\n      w.addIndexes(r_1, r_2);\n    }\n    w.forceMerge(1, true);\n    w.commit();\n    \n    _TestUtil.checkIndex(target);\n    assertEquals(valuesPerIndex * 2, w.maxDoc());\n\n    // check values\n    \n    DirectoryReader merged = DirectoryReader.open(w, true);\n    Source source_1 = getSource(getDocValues(r_1, first.name()));\n    Source source_2 = getSource(getDocValues(r_2, second.name()));\n    Source source_1_merged = getSource(getDocValues(merged, first.name()));\n    Source source_2_merged = getSource(getDocValues(merged, second\n        .name()));\n    for (int i = 0; i < r_1.maxDoc(); i++) {\n      switch (first) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_1.getBytes(i, new BytesRef()),\n            source_1_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_1.getInt(i), source_1_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_1.getFloat(i), source_1_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n\n    for (int i = r_1.maxDoc(); i < merged.maxDoc(); i++) {\n      switch (second) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_SORTED:\n        assertEquals(source_2.getBytes(i - r_1.maxDoc(), new BytesRef()),\n            source_2_merged.getBytes(i, new BytesRef()));\n        break;\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        assertEquals(source_2.getInt(i - r_1.maxDoc()),\n            source_2_merged.getInt(i));\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        assertEquals(source_2.getFloat(i - r_1.maxDoc()),\n            source_2_merged.getFloat(i), 0.0d);\n        break;\n      default:\n        fail(\"unkonwn \" + first);\n      }\n    }\n    // close resources\n    r_1.close();\n    r_2.close();\n    merged.close();\n    w_1.close(true);\n    w_2.close(true);\n    w.close(true);\n    d_1.close();\n    d_2.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","04f07771a2a7dd3a395700665ed839c3dae2def2","d4d69c535930b5cce125cff868d40f6373dc27d4","505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newField(\"id\", \"2\", StringField.TYPE_STORED));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":["3ff79ec5acd6ad7b57378052a20e3cf8a975493f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55d38708477d49511977195bad066d9ced001005","date":1353348143,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddadc5a8439c906a65bfba5ce15166b5d5b58d82","date":1358287870,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    DocValues docValues = sr.docValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":["3ff79ec5acd6ad7b57378052a20e3cf8a975493f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.shutdown();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.shutdown();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.shutdown();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.shutdown();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.shutdown();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.shutdown();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    LeafReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    AtomicReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCodecReaderWrapper.wrap(SlowCompositeReaderWrapper.wrap(r1)), SlowCodecReaderWrapper.wrap(SlowCompositeReaderWrapper.wrap(r2)));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    LeafReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCompositeReaderWrapper.wrap(r1), SlowCompositeReaderWrapper.wrap(r2));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    LeafReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":["3ff79ec5acd6ad7b57378052a20e3cf8a975493f"],"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testAddIndexes().mjava","sourceNew":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    DirectoryReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    DirectoryReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCodecReaderWrapper.wrap(getOnlyLeafReader(r1)), SlowCodecReaderWrapper.wrap(getOnlyLeafReader(r2)));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    LeafReader sr = getOnlyLeafReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","sourceOld":"  public void testAddIndexes() throws IOException {\n    Directory d1 = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d1);\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 1));\n    w.addDocument(doc);\n    IndexReader r1 = w.getReader();\n    w.close();\n\n    Directory d2 = newDirectory();\n    w = new RandomIndexWriter(random(), d2);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"2\", Field.Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 2));\n    w.addDocument(doc);\n    IndexReader r2 = w.getReader();\n    w.close();\n\n    Directory d3 = newDirectory();\n    w = new RandomIndexWriter(random(), d3);\n    w.addIndexes(SlowCodecReaderWrapper.wrap(SlowCompositeReaderWrapper.wrap(r1)), SlowCodecReaderWrapper.wrap(SlowCompositeReaderWrapper.wrap(r2)));\n    r1.close();\n    d1.close();\n    r2.close();\n    d2.close();\n\n    w.forceMerge(1);\n    DirectoryReader r3 = w.getReader();\n    w.close();\n    LeafReader sr = getOnlySegmentReader(r3);\n    assertEquals(2, sr.numDocs());\n    NumericDocValues docValues = sr.getNumericDocValues(\"dv\");\n    assertNotNull(docValues);\n    r3.close();\n    d3.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","505bff044e47a553f461b6f4484d1d08faf4ac85","3ff79ec5acd6ad7b57378052a20e3cf8a975493f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["55d38708477d49511977195bad066d9ced001005"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["3ff79ec5acd6ad7b57378052a20e3cf8a975493f"],"3ff79ec5acd6ad7b57378052a20e3cf8a975493f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["04f07771a2a7dd3a395700665ed839c3dae2def2","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"55d38708477d49511977195bad066d9ced001005":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"6e2893fd5349134af382d33ccc3d84840394c6c1":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["d4d69c535930b5cce125cff868d40f6373dc27d4","55d38708477d49511977195bad066d9ced001005"],"3ff79ec5acd6ad7b57378052a20e3cf8a975493f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3ff79ec5acd6ad7b57378052a20e3cf8a975493f"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"55d38708477d49511977195bad066d9ced001005":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}