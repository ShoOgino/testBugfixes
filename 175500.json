{"path":"src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getMBeanInfo().mjava","commits":[{"id":"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b","date":1217355237,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getMBeanInfo().mjava","pathOld":"/dev/null","sourceNew":"    public MBeanInfo getMBeanInfo() {\n      ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<MBeanAttributeInfo>();\n\n      for (String stat : staticStats) {\n        attrInfoList.add(new MBeanAttributeInfo(stat, String.class.getName(),\n                null, true, false, false));\n      }\n\n      try {\n        NamedList dynamicStats = infoBean.getStatistics();\n        if (dynamicStats != null) {\n          for (int i = 0; i < dynamicStats.size(); i++) {\n            String name = dynamicStats.getName(i);\n            if (!staticStats.contains(name))\n              attrInfoList.add(new MBeanAttributeInfo(dynamicStats.getName(i),\n                      String.class.getName(), null, true, false, false));\n          }\n        }\n      } catch (Exception e) {\n        LOG.log(Level.WARNING, \"Could not getStatistics on info bean \"\n                + infoBean.getName(), e);\n      }\n\n      MBeanAttributeInfo[] attrInfoArr = attrInfoList\n              .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n      return new MBeanInfo(getClass().getName(), infoBean\n              .getDescription(), attrInfoArr, null, null, null);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getMBeanInfo().mjava","pathOld":"src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getMBeanInfo().mjava","sourceNew":"    public MBeanInfo getMBeanInfo() {\n      ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<MBeanAttributeInfo>();\n\n      for (String stat : staticStats) {\n        attrInfoList.add(new MBeanAttributeInfo(stat, String.class.getName(),\n                null, true, false, false));\n      }\n\n      try {\n        NamedList dynamicStats = infoBean.getStatistics();\n        if (dynamicStats != null) {\n          for (int i = 0; i < dynamicStats.size(); i++) {\n            String name = dynamicStats.getName(i);\n            if (!staticStats.contains(name))\n              attrInfoList.add(new MBeanAttributeInfo(dynamicStats.getName(i),\n                      String.class.getName(), null, true, false, false));\n          }\n        }\n      } catch (Exception e) {\n        LOG.warn( \"Could not getStatistics on info bean \"\n                + infoBean.getName(), e);\n      }\n\n      MBeanAttributeInfo[] attrInfoArr = attrInfoList\n              .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n      return new MBeanInfo(getClass().getName(), infoBean\n              .getDescription(), attrInfoArr, null, null, null);\n    }\n\n","sourceOld":"    public MBeanInfo getMBeanInfo() {\n      ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<MBeanAttributeInfo>();\n\n      for (String stat : staticStats) {\n        attrInfoList.add(new MBeanAttributeInfo(stat, String.class.getName(),\n                null, true, false, false));\n      }\n\n      try {\n        NamedList dynamicStats = infoBean.getStatistics();\n        if (dynamicStats != null) {\n          for (int i = 0; i < dynamicStats.size(); i++) {\n            String name = dynamicStats.getName(i);\n            if (!staticStats.contains(name))\n              attrInfoList.add(new MBeanAttributeInfo(dynamicStats.getName(i),\n                      String.class.getName(), null, true, false, false));\n          }\n        }\n      } catch (Exception e) {\n        LOG.log(Level.WARNING, \"Could not getStatistics on info bean \"\n                + infoBean.getName(), e);\n      }\n\n      MBeanAttributeInfo[] attrInfoArr = attrInfoList\n              .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n      return new MBeanInfo(getClass().getName(), infoBean\n              .getDescription(), attrInfoArr, null, null, null);\n    }\n\n","bugFix":null,"bugIntro":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getMBeanInfo().mjava","pathOld":"src/java/org/apache/solr/core/JmxMonitoredMap.SolrDynamicMBean#getMBeanInfo().mjava","sourceNew":"    public MBeanInfo getMBeanInfo() {\n      ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<MBeanAttributeInfo>();\n\n      for (String stat : staticStats) {\n        attrInfoList.add(new MBeanAttributeInfo(stat, String.class.getName(),\n                null, true, false, false));\n      }\n\n      try {\n        NamedList dynamicStats = infoBean.getStatistics();\n        if (dynamicStats != null) {\n          for (int i = 0; i < dynamicStats.size(); i++) {\n            String name = dynamicStats.getName(i);\n            if (!staticStats.contains(name))\n              attrInfoList.add(new MBeanAttributeInfo(dynamicStats.getName(i),\n                      String.class.getName(), null, true, false, false));\n          }\n        }\n      } catch (Exception e) {\n        LOG.warn( \"Could not getStatistics on info bean \"\n                + infoBean.getName(), e);\n      }\n\n      MBeanAttributeInfo[] attrInfoArr = attrInfoList\n              .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n      return new MBeanInfo(getClass().getName(), infoBean\n              .getDescription(), attrInfoArr, null, null, null);\n    }\n\n","sourceOld":"    public MBeanInfo getMBeanInfo() {\n      ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<MBeanAttributeInfo>();\n\n      for (String stat : staticStats) {\n        attrInfoList.add(new MBeanAttributeInfo(stat, String.class.getName(),\n                null, true, false, false));\n      }\n\n      try {\n        NamedList dynamicStats = infoBean.getStatistics();\n        if (dynamicStats != null) {\n          for (int i = 0; i < dynamicStats.size(); i++) {\n            String name = dynamicStats.getName(i);\n            if (!staticStats.contains(name))\n              attrInfoList.add(new MBeanAttributeInfo(dynamicStats.getName(i),\n                      String.class.getName(), null, true, false, false));\n          }\n        }\n      } catch (Exception e) {\n        LOG.warn( \"Could not getStatistics on info bean \"\n                + infoBean.getName(), e);\n      }\n\n      MBeanAttributeInfo[] attrInfoArr = attrInfoList\n              .toArray(new MBeanAttributeInfo[attrInfoList.size()]);\n      return new MBeanInfo(getClass().getName(), infoBean\n              .getDescription(), attrInfoArr, null, null, null);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}