{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#advance(int).mjava","commits":[{"id":"56374313ec4613df1f728772dedcff8bb3cd419d","date":1382027245,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while(true) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      if (subScorers[0].docID() >= target) {\n        afterNext();\n        return doc;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while(true) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      if (subScorers[0].docID() >= target) {\n        afterNext();\n        return doc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a74e723ad6f1491f36039f9fe6af13a530f8135d","date":1400774466,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#advance(int).mjava","sourceNew":"  @Override\n  public final int advance(int target) throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while(true) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      int docID = subScorers[0].docID();\n      if (docID >= target) {\n        freq = -1;\n        return doc = docID;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while(true) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      if (subScorers[0].docID() >= target) {\n        afterNext();\n        return doc;\n      }\n    }\n  }\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708","0e354c63cdcc974a17c9f8531cecc001229c0952"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#advance(int).mjava","sourceNew":"  @Override\n  public final int advance(int target) throws IOException {\n    assert doc != NO_MORE_DOCS;\n\n    ScorerWrapper top = subScorers.top();\n    while (top.doc < target) {\n      top.doc = top.scorer.advance(target);\n      if (top.doc == NO_MORE_DOCS) {\n        subScorers.pop();\n        if (subScorers.size() == 0) {\n          return this.doc = NO_MORE_DOCS;\n        }\n        top = subScorers.top();\n      } else {\n        top = subScorers.updateTop();\n      }\n    }\n\n    freq = -1;\n    return this.doc = top.doc;\n  }\n\n","sourceOld":"  @Override\n  public final int advance(int target) throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while(true) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      int docID = subScorers[0].docID();\n      if (docID >= target) {\n        freq = -1;\n        return doc = docID;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#advance(int).mjava","sourceNew":"  @Override\n  public final int advance(int target) throws IOException {\n    topScorers = null;\n    ScorerWrapper top = subScorers.top();\n    do {\n      top.doc = top.scorer.advance(target);\n      top = subScorers.updateTop();\n    } while (top.doc < target);\n\n    return top.doc;\n  }\n\n","sourceOld":"  @Override\n  public final int advance(int target) throws IOException {\n    assert doc != NO_MORE_DOCS;\n\n    ScorerWrapper top = subScorers.top();\n    while (top.doc < target) {\n      top.doc = top.scorer.advance(target);\n      if (top.doc == NO_MORE_DOCS) {\n        subScorers.pop();\n        if (subScorers.size() == 0) {\n          return this.doc = NO_MORE_DOCS;\n        }\n        top = subScorers.top();\n      } else {\n        top = subScorers.updateTop();\n      }\n    }\n\n    freq = -1;\n    return this.doc = top.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","date":1429852340,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#advance(int).mjava","sourceNew":"  @Override\n  public final int advance(int target) throws IOException {\n    topScorers = null;\n    DisiWrapper<Scorer> top = subScorers.top();\n    do {\n      top.doc = top.iterator.advance(target);\n      top = subScorers.updateTop();\n    } while (top.doc < target);\n\n    return top.doc;\n  }\n\n","sourceOld":"  @Override\n  public final int advance(int target) throws IOException {\n    topScorers = null;\n    ScorerWrapper top = subScorers.top();\n    do {\n      top.doc = top.scorer.advance(target);\n      top = subScorers.updateTop();\n    } while (top.doc < target);\n\n    return top.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#advance(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final int advance(int target) throws IOException {\n    topScorers = null;\n    DisiWrapper<Scorer> top = subScorers.top();\n    do {\n      top.doc = top.iterator.advance(target);\n      top = subScorers.updateTop();\n    } while (top.doc < target);\n\n    return top.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"a74e723ad6f1491f36039f9fe6af13a530f8135d":["56374313ec4613df1f728772dedcff8bb3cd419d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"56374313ec4613df1f728772dedcff8bb3cd419d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"a74e723ad6f1491f36039f9fe6af13a530f8135d":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56374313ec4613df1f728772dedcff8bb3cd419d"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56374313ec4613df1f728772dedcff8bb3cd419d":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}