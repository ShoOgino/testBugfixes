{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","pathOld":"/dev/null","sourceNew":"  public static Path findSolrConfig(Configuration conf) throws IOException {\n    Path solrHome = null;\n    // FIXME when mrunit supports the new cache apis\n    //URI[] localArchives = context.getCacheArchives();\n    Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);\n    if (localArchives.length == 0) {\n      throw new IOException(String.format(Locale.ENGLISH,\n          \"No local cache archives, where is %s:%s\", SolrOutputFormat\n              .getSetupOk(), SolrOutputFormat.getZipName(conf)));\n    }\n    for (Path unpackedDir : localArchives) {\n      // Only logged if debugging\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(Locale.ENGLISH, \"Examining unpack directory %s for %s\",\n            unpackedDir, SolrOutputFormat.getZipName(conf)));\n\n        ProcessBuilder lsCmd = new ProcessBuilder(new String[] { \"/bin/ls\",\n            \"-lR\", unpackedDir.toString() });\n        lsCmd.redirectErrorStream();\n        Process ls = lsCmd.start();\n        byte[] buf = new byte[16 * 1024];\n        InputStream all = ls.getInputStream();\n        try {\n          int count;\n          while ((count = all.read(buf)) >= 0) {\n            System.err.write(buf, 0, count);\n          }\n        } catch (IOException ignore) {\n        } finally {\n          all.close();\n        }\n        String exitValue;\n        try {\n          exitValue = String.valueOf(ls.waitFor());\n        } catch (InterruptedException e) {\n          exitValue = \"interrupted\";\n        }\n        System.err.format(\"Exit value of 'ls -lR' is %s%n\", exitValue);\n      }\n      if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {\n        LOG.info(\"Using this unpacked directory as solr home: {}\", unpackedDir);\n        solrHome = unpackedDir;\n        break;\n      }\n    }\n\n    return solrHome;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrRecordWriter#findSolrConfig(Configuration).mjava","sourceNew":"  public static Path findSolrConfig(Configuration conf) throws IOException {\n    Path solrHome = null;\n    // FIXME when mrunit supports the new cache apis\n    //URI[] localArchives = context.getCacheArchives();\n    Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);\n    if (localArchives.length == 0) {\n      throw new IOException(String.format(Locale.ENGLISH,\n          \"No local cache archives, where is %s:%s\", SolrOutputFormat\n              .getSetupOk(), SolrOutputFormat.getZipName(conf)));\n    }\n    for (Path unpackedDir : localArchives) {\n      // Only logged if debugging\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(Locale.ENGLISH, \"Examining unpack directory %s for %s\",\n            unpackedDir, SolrOutputFormat.getZipName(conf)));\n\n        ProcessBuilder lsCmd = new ProcessBuilder(new String[] { \"/bin/ls\",\n            \"-lR\", unpackedDir.toString() });\n        lsCmd.redirectErrorStream();\n        Process ls = lsCmd.start();\n        byte[] buf = new byte[16 * 1024];\n        InputStream all = ls.getInputStream();\n        try {\n          int count;\n          while ((count = all.read(buf)) >= 0) {\n            System.err.write(buf, 0, count);\n          }\n        } catch (IOException ignore) {\n        } finally {\n          all.close();\n        }\n        String exitValue;\n        try {\n          exitValue = String.valueOf(ls.waitFor());\n        } catch (InterruptedException e) {\n          exitValue = \"interrupted\";\n        }\n        System.err.format(\"Exit value of 'ls -lR' is %s%n\", exitValue);\n      }\n      if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {\n        LOG.info(\"Using this unpacked directory as solr home: {}\", unpackedDir);\n        solrHome = unpackedDir;\n        break;\n      }\n    }\n\n    return solrHome;\n  }\n\n","sourceOld":"  public static Path findSolrConfig(Configuration conf) throws IOException {\n    Path solrHome = null;\n    // FIXME when mrunit supports the new cache apis\n    //URI[] localArchives = context.getCacheArchives();\n    Path[] localArchives = DistributedCache.getLocalCacheArchives(conf);\n    if (localArchives.length == 0) {\n      throw new IOException(String.format(Locale.ENGLISH,\n          \"No local cache archives, where is %s:%s\", SolrOutputFormat\n              .getSetupOk(), SolrOutputFormat.getZipName(conf)));\n    }\n    for (Path unpackedDir : localArchives) {\n      // Only logged if debugging\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(Locale.ENGLISH, \"Examining unpack directory %s for %s\",\n            unpackedDir, SolrOutputFormat.getZipName(conf)));\n\n        ProcessBuilder lsCmd = new ProcessBuilder(new String[] { \"/bin/ls\",\n            \"-lR\", unpackedDir.toString() });\n        lsCmd.redirectErrorStream();\n        Process ls = lsCmd.start();\n        byte[] buf = new byte[16 * 1024];\n        InputStream all = ls.getInputStream();\n        try {\n          int count;\n          while ((count = all.read(buf)) >= 0) {\n            System.err.write(buf, 0, count);\n          }\n        } catch (IOException ignore) {\n        } finally {\n          all.close();\n        }\n        String exitValue;\n        try {\n          exitValue = String.valueOf(ls.waitFor());\n        } catch (InterruptedException e) {\n          exitValue = \"interrupted\";\n        }\n        System.err.format(\"Exit value of 'ls -lR' is %s%n\", exitValue);\n      }\n      if (unpackedDir.getName().equals(SolrOutputFormat.getZipName(conf))) {\n        LOG.info(\"Using this unpacked directory as solr home: {}\", unpackedDir);\n        solrHome = unpackedDir;\n        break;\n      }\n    }\n\n    return solrHome;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}