{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","sourceNew":"    /** output methods: */\n    @Override\n    public void flushBuffer(byte[] b, int offset, int size) throws IOException {\n      assert isOpen;\n      if (rateLimiter != null) {\n        rateLimiter.pause(size);\n      }\n      file.write(b, offset, size);\n    }\n\n","sourceOld":"    /** output methods: */\n    @Override\n    public void flushBuffer(byte[] b, int offset, int size) throws IOException {\n      assert isOpen;\n      if (rateLimiter != null) {\n        rateLimiter.pause(size);\n      }\n      file.write(b, offset, size);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4583d4aac44f313f9af74ab6d81baab3f976232","date":1352409883,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","sourceNew":"    /** output methods: */\n    @Override\n    public void flushBuffer(byte[] b, int offset, int size) throws IOException {\n      assert isOpen;\n      file.write(b, offset, size);\n    }\n\n","sourceOld":"    /** output methods: */\n    @Override\n    public void flushBuffer(byte[] b, int offset, int size) throws IOException {\n      assert isOpen;\n      if (rateLimiter != null) {\n        rateLimiter.pause(size);\n      }\n      file.write(b, offset, size);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","sourceNew":"    /** output methods: */\n    @Override\n    public void flushBuffer(byte[] b, int offset, int size) throws IOException {\n      assert isOpen;\n      file.write(b, offset, size);\n    }\n\n","sourceOld":"    /** output methods: */\n    @Override\n    public void flushBuffer(byte[] b, int offset, int size) throws IOException {\n      assert isOpen;\n      if (rateLimiter != null) {\n        rateLimiter.pause(size);\n      }\n      file.write(b, offset, size);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dcf83b1542b01ad5cddb41b01dc51f751215919","date":1376231222,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","sourceNew":"    @Override\n    protected void flushBuffer(byte[] b, int offset, int size) throws IOException {\n      assert isOpen;\n      while (size > 0) {\n        final int toWrite = Math.min(CHUNK_SIZE, size);\n        file.write(b, offset, toWrite);\n        offset += toWrite;\n        size -= toWrite;\n      }\n      assert size == 0;\n    }\n\n","sourceOld":"    /** output methods: */\n    @Override\n    public void flushBuffer(byte[] b, int offset, int size) throws IOException {\n      assert isOpen;\n      file.write(b, offset, size);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","sourceNew":"    @Override\n    protected void flushBuffer(byte[] b, int offset, int size) throws IOException {\n      assert isOpen;\n      while (size > 0) {\n        final int toWrite = Math.min(CHUNK_SIZE, size);\n        file.write(b, offset, toWrite);\n        offset += toWrite;\n        size -= toWrite;\n      }\n      assert size == 0;\n    }\n\n","sourceOld":"    /** output methods: */\n    @Override\n    public void flushBuffer(byte[] b, int offset, int size) throws IOException {\n      assert isOpen;\n      file.write(b, offset, size);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bce1e2aee8b16573bc0d091471e4660d140b5823","date":1400533696,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void flushBuffer(byte[] b, int offset, int size) throws IOException {\n      assert isOpen;\n      while (size > 0) {\n        final int toWrite = Math.min(CHUNK_SIZE, size);\n        file.write(b, offset, toWrite);\n        offset += toWrite;\n        size -= toWrite;\n      }\n      assert size == 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory.FSIndexOutput#flushBuffer(byte[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void flushBuffer(byte[] b, int offset, int size) throws IOException {\n      assert isOpen;\n      while (size > 0) {\n        final int toWrite = Math.min(CHUNK_SIZE, size);\n        file.write(b, offset, toWrite);\n        offset += toWrite;\n        size -= toWrite;\n      }\n      assert size == 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bce1e2aee8b16573bc0d091471e4660d140b5823":["0dcf83b1542b01ad5cddb41b01dc51f751215919"],"e4583d4aac44f313f9af74ab6d81baab3f976232":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","e4583d4aac44f313f9af74ab6d81baab3f976232"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["e4583d4aac44f313f9af74ab6d81baab3f976232"],"0dcf83b1542b01ad5cddb41b01dc51f751215919":["e4583d4aac44f313f9af74ab6d81baab3f976232"],"b7605579001505896d48b07160075a5c8b8e128e":["0dcf83b1542b01ad5cddb41b01dc51f751215919","bce1e2aee8b16573bc0d091471e4660d140b5823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bce1e2aee8b16573bc0d091471e4660d140b5823"]},"commit2Childs":{"bce1e2aee8b16573bc0d091471e4660d140b5823":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e4583d4aac44f313f9af74ab6d81baab3f976232":["407687e67faf6e1f02a211ca078d8e3eed631027","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","0dcf83b1542b01ad5cddb41b01dc51f751215919"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e4583d4aac44f313f9af74ab6d81baab3f976232","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"0dcf83b1542b01ad5cddb41b01dc51f751215919":["bce1e2aee8b16573bc0d091471e4660d140b5823","b7605579001505896d48b07160075a5c8b8e128e"],"b7605579001505896d48b07160075a5c8b8e128e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}