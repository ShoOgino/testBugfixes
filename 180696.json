{"path":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytes().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytes().mjava","sourceNew":"  @Test\n  public void testCopyBytes() throws Exception {\n    int num = atLeast(10);\n    for (int iter = 0; iter < num; iter++) {\n      Directory dir = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" dir=\" + dir);\n      }\n      \n      // make random file\n      IndexOutput out = dir.createOutput(\"test\", newIOContext(random));\n      byte[] bytes = new byte[_TestUtil.nextInt(random, 1, 77777)];\n      final int size = _TestUtil.nextInt(random, 1, 1777777);\n      int upto = 0;\n      int byteUpto = 0;\n      while (upto < size) {\n        bytes[byteUpto++] = value(upto);\n        upto++;\n        if (byteUpto == bytes.length) {\n          out.writeBytes(bytes, 0, bytes.length);\n          byteUpto = 0;\n        }\n      }\n      \n      out.writeBytes(bytes, 0, byteUpto);\n      assertEquals(size, out.getFilePointer());\n      out.close();\n      assertEquals(size, dir.fileLength(\"test\"));\n      \n      // copy from test -> test2\n      final IndexInput in = dir.openInput(\"test\", newIOContext(random));\n      \n      out = dir.createOutput(\"test2\", newIOContext(random));\n      \n      upto = 0;\n      while (upto < size) {\n        if (random.nextBoolean()) {\n          out.writeByte(in.readByte());\n          upto++;\n        } else {\n          final int chunk = Math.min(\n              _TestUtil.nextInt(random, 1, bytes.length), size - upto);\n          out.copyBytes(in, chunk);\n          upto += chunk;\n        }\n      }\n      assertEquals(size, upto);\n      out.close();\n      in.close();\n      \n      // verify\n      IndexInput in2 = dir.openInput(\"test2\", newIOContext(random));\n      upto = 0;\n      while (upto < size) {\n        if (random.nextBoolean()) {\n          final byte v = in2.readByte();\n          assertEquals(value(upto), v);\n          upto++;\n        } else {\n          final int limit = Math.min(\n              _TestUtil.nextInt(random, 1, bytes.length), size - upto);\n          in2.readBytes(bytes, 0, limit);\n          for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n            assertEquals(value(upto), bytes[byteIdx]);\n            upto++;\n          }\n        }\n      }\n      in2.close();\n      \n      dir.deleteFile(\"test\");\n      dir.deleteFile(\"test2\");\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCopyBytes() throws Exception {\n    int num = atLeast(10);\n    for (int iter = 0; iter < num; iter++) {\n      Directory dir = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" dir=\" + dir);\n      }\n      \n      // make random file\n      IndexOutput out = dir.createOutput(\"test\", newIOContext(random));\n      byte[] bytes = new byte[_TestUtil.nextInt(random, 1, 77777)];\n      final int size = _TestUtil.nextInt(random, 1, 1777777);\n      int upto = 0;\n      int byteUpto = 0;\n      while (upto < size) {\n        bytes[byteUpto++] = value(upto);\n        upto++;\n        if (byteUpto == bytes.length) {\n          out.writeBytes(bytes, 0, bytes.length);\n          byteUpto = 0;\n        }\n      }\n      \n      out.writeBytes(bytes, 0, byteUpto);\n      assertEquals(size, out.getFilePointer());\n      out.close();\n      assertEquals(size, dir.fileLength(\"test\"));\n      \n      // copy from test -> test2\n      final IndexInput in = dir.openInput(\"test\", newIOContext(random));\n      \n      out = dir.createOutput(\"test2\", newIOContext(random));\n      \n      upto = 0;\n      while (upto < size) {\n        if (random.nextBoolean()) {\n          out.writeByte(in.readByte());\n          upto++;\n        } else {\n          final int chunk = Math.min(\n              _TestUtil.nextInt(random, 1, bytes.length), size - upto);\n          out.copyBytes(in, chunk);\n          upto += chunk;\n        }\n      }\n      assertEquals(size, upto);\n      out.close();\n      in.close();\n      \n      // verify\n      IndexInput in2 = dir.openInput(\"test2\", newIOContext(random));\n      upto = 0;\n      while (upto < size) {\n        if (random.nextBoolean()) {\n          final byte v = in2.readByte();\n          assertEquals(value(upto), v);\n          upto++;\n        } else {\n          final int limit = Math.min(\n              _TestUtil.nextInt(random, 1, bytes.length), size - upto);\n          in2.readBytes(bytes, 0, limit);\n          for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n            assertEquals(value(upto), bytes[byteIdx]);\n            upto++;\n          }\n        }\n      }\n      in2.close();\n      \n      dir.deleteFile(\"test\");\n      dir.deleteFile(\"test2\");\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytes().mjava","sourceNew":"  @Test\n  public void testCopyBytes() throws Exception {\n    int num = atLeast(10);\n    for (int iter = 0; iter < num; iter++) {\n      Directory dir = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" dir=\" + dir);\n      }\n      \n      // make random file\n      IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n      byte[] bytes = new byte[_TestUtil.nextInt(random(), 1, 77777)];\n      final int size = _TestUtil.nextInt(random(), 1, 1777777);\n      int upto = 0;\n      int byteUpto = 0;\n      while (upto < size) {\n        bytes[byteUpto++] = value(upto);\n        upto++;\n        if (byteUpto == bytes.length) {\n          out.writeBytes(bytes, 0, bytes.length);\n          byteUpto = 0;\n        }\n      }\n      \n      out.writeBytes(bytes, 0, byteUpto);\n      assertEquals(size, out.getFilePointer());\n      out.close();\n      assertEquals(size, dir.fileLength(\"test\"));\n      \n      // copy from test -> test2\n      final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n      out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n      upto = 0;\n      while (upto < size) {\n        if (random().nextBoolean()) {\n          out.writeByte(in.readByte());\n          upto++;\n        } else {\n          final int chunk = Math.min(\n              _TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n          out.copyBytes(in, chunk);\n          upto += chunk;\n        }\n      }\n      assertEquals(size, upto);\n      out.close();\n      in.close();\n      \n      // verify\n      IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n      upto = 0;\n      while (upto < size) {\n        if (random().nextBoolean()) {\n          final byte v = in2.readByte();\n          assertEquals(value(upto), v);\n          upto++;\n        } else {\n          final int limit = Math.min(\n              _TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n          in2.readBytes(bytes, 0, limit);\n          for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n            assertEquals(value(upto), bytes[byteIdx]);\n            upto++;\n          }\n        }\n      }\n      in2.close();\n      \n      dir.deleteFile(\"test\");\n      dir.deleteFile(\"test2\");\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCopyBytes() throws Exception {\n    int num = atLeast(10);\n    for (int iter = 0; iter < num; iter++) {\n      Directory dir = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" dir=\" + dir);\n      }\n      \n      // make random file\n      IndexOutput out = dir.createOutput(\"test\", newIOContext(random));\n      byte[] bytes = new byte[_TestUtil.nextInt(random, 1, 77777)];\n      final int size = _TestUtil.nextInt(random, 1, 1777777);\n      int upto = 0;\n      int byteUpto = 0;\n      while (upto < size) {\n        bytes[byteUpto++] = value(upto);\n        upto++;\n        if (byteUpto == bytes.length) {\n          out.writeBytes(bytes, 0, bytes.length);\n          byteUpto = 0;\n        }\n      }\n      \n      out.writeBytes(bytes, 0, byteUpto);\n      assertEquals(size, out.getFilePointer());\n      out.close();\n      assertEquals(size, dir.fileLength(\"test\"));\n      \n      // copy from test -> test2\n      final IndexInput in = dir.openInput(\"test\", newIOContext(random));\n      \n      out = dir.createOutput(\"test2\", newIOContext(random));\n      \n      upto = 0;\n      while (upto < size) {\n        if (random.nextBoolean()) {\n          out.writeByte(in.readByte());\n          upto++;\n        } else {\n          final int chunk = Math.min(\n              _TestUtil.nextInt(random, 1, bytes.length), size - upto);\n          out.copyBytes(in, chunk);\n          upto += chunk;\n        }\n      }\n      assertEquals(size, upto);\n      out.close();\n      in.close();\n      \n      // verify\n      IndexInput in2 = dir.openInput(\"test2\", newIOContext(random));\n      upto = 0;\n      while (upto < size) {\n        if (random.nextBoolean()) {\n          final byte v = in2.readByte();\n          assertEquals(value(upto), v);\n          upto++;\n        } else {\n          final int limit = Math.min(\n              _TestUtil.nextInt(random, 1, bytes.length), size - upto);\n          in2.readBytes(bytes, 0, limit);\n          for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n            assertEquals(value(upto), bytes[byteIdx]);\n            upto++;\n          }\n        }\n      }\n      in2.close();\n      \n      dir.deleteFile(\"test\");\n      dir.deleteFile(\"test2\");\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytes().mjava","sourceNew":"  @Test\n  public void testCopyBytes() throws Exception {\n    int num = atLeast(10);\n    for (int iter = 0; iter < num; iter++) {\n      Directory dir = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" dir=\" + dir);\n      }\n      \n      // make random file\n      IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n      final int size = TestUtil.nextInt(random(), 1, 1777777);\n      int upto = 0;\n      int byteUpto = 0;\n      while (upto < size) {\n        bytes[byteUpto++] = value(upto);\n        upto++;\n        if (byteUpto == bytes.length) {\n          out.writeBytes(bytes, 0, bytes.length);\n          byteUpto = 0;\n        }\n      }\n      \n      out.writeBytes(bytes, 0, byteUpto);\n      assertEquals(size, out.getFilePointer());\n      out.close();\n      assertEquals(size, dir.fileLength(\"test\"));\n      \n      // copy from test -> test2\n      final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n      out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n      upto = 0;\n      while (upto < size) {\n        if (random().nextBoolean()) {\n          out.writeByte(in.readByte());\n          upto++;\n        } else {\n          final int chunk = Math.min(\n              TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n          out.copyBytes(in, chunk);\n          upto += chunk;\n        }\n      }\n      assertEquals(size, upto);\n      out.close();\n      in.close();\n      \n      // verify\n      IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n      upto = 0;\n      while (upto < size) {\n        if (random().nextBoolean()) {\n          final byte v = in2.readByte();\n          assertEquals(value(upto), v);\n          upto++;\n        } else {\n          final int limit = Math.min(\n              TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n          in2.readBytes(bytes, 0, limit);\n          for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n            assertEquals(value(upto), bytes[byteIdx]);\n            upto++;\n          }\n        }\n      }\n      in2.close();\n      \n      dir.deleteFile(\"test\");\n      dir.deleteFile(\"test2\");\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCopyBytes() throws Exception {\n    int num = atLeast(10);\n    for (int iter = 0; iter < num; iter++) {\n      Directory dir = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" dir=\" + dir);\n      }\n      \n      // make random file\n      IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n      byte[] bytes = new byte[_TestUtil.nextInt(random(), 1, 77777)];\n      final int size = _TestUtil.nextInt(random(), 1, 1777777);\n      int upto = 0;\n      int byteUpto = 0;\n      while (upto < size) {\n        bytes[byteUpto++] = value(upto);\n        upto++;\n        if (byteUpto == bytes.length) {\n          out.writeBytes(bytes, 0, bytes.length);\n          byteUpto = 0;\n        }\n      }\n      \n      out.writeBytes(bytes, 0, byteUpto);\n      assertEquals(size, out.getFilePointer());\n      out.close();\n      assertEquals(size, dir.fileLength(\"test\"));\n      \n      // copy from test -> test2\n      final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n      out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n      upto = 0;\n      while (upto < size) {\n        if (random().nextBoolean()) {\n          out.writeByte(in.readByte());\n          upto++;\n        } else {\n          final int chunk = Math.min(\n              _TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n          out.copyBytes(in, chunk);\n          upto += chunk;\n        }\n      }\n      assertEquals(size, upto);\n      out.close();\n      in.close();\n      \n      // verify\n      IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n      upto = 0;\n      while (upto < size) {\n        if (random().nextBoolean()) {\n          final byte v = in2.readByte();\n          assertEquals(value(upto), v);\n          upto++;\n        } else {\n          final int limit = Math.min(\n              _TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n          in2.readBytes(bytes, 0, limit);\n          for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n            assertEquals(value(upto), bytes[byteIdx]);\n            upto++;\n          }\n        }\n      }\n      in2.close();\n      \n      dir.deleteFile(\"test\");\n      dir.deleteFile(\"test2\");\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestCopyBytes#testCopyBytes().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCopyBytes() throws Exception {\n    int num = atLeast(10);\n    for (int iter = 0; iter < num; iter++) {\n      Directory dir = newDirectory();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + iter + \" dir=\" + dir);\n      }\n      \n      // make random file\n      IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n      final int size = TestUtil.nextInt(random(), 1, 1777777);\n      int upto = 0;\n      int byteUpto = 0;\n      while (upto < size) {\n        bytes[byteUpto++] = value(upto);\n        upto++;\n        if (byteUpto == bytes.length) {\n          out.writeBytes(bytes, 0, bytes.length);\n          byteUpto = 0;\n        }\n      }\n      \n      out.writeBytes(bytes, 0, byteUpto);\n      assertEquals(size, out.getFilePointer());\n      out.close();\n      assertEquals(size, dir.fileLength(\"test\"));\n      \n      // copy from test -> test2\n      final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n      \n      out = dir.createOutput(\"test2\", newIOContext(random()));\n      \n      upto = 0;\n      while (upto < size) {\n        if (random().nextBoolean()) {\n          out.writeByte(in.readByte());\n          upto++;\n        } else {\n          final int chunk = Math.min(\n              TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n          out.copyBytes(in, chunk);\n          upto += chunk;\n        }\n      }\n      assertEquals(size, upto);\n      out.close();\n      in.close();\n      \n      // verify\n      IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n      upto = 0;\n      while (upto < size) {\n        if (random().nextBoolean()) {\n          final byte v = in2.readByte();\n          assertEquals(value(upto), v);\n          upto++;\n        } else {\n          final int limit = Math.min(\n              TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n          in2.readBytes(bytes, 0, limit);\n          for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n            assertEquals(value(upto), bytes[byteIdx]);\n            upto++;\n          }\n        }\n      }\n      in2.close();\n      \n      dir.deleteFile(\"test\");\n      dir.deleteFile(\"test2\");\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c15a75016387504d70a40cba6e9314b8885307f0":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c15a75016387504d70a40cba6e9314b8885307f0"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["c15a75016387504d70a40cba6e9314b8885307f0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c15a75016387504d70a40cba6e9314b8885307f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}