{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getConcatenated(SolrDocument,String).mjava","commits":[{"id":"f25fe5576647e3bdd2a797a9900982532d5e2e97","date":1323446322,"type":0,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getConcatenated(SolrDocument,String).mjava","pathOld":"/dev/null","sourceNew":"  private String getConcatenated(SolrDocument sdoc, String fieldsSpec) {\n    StringBuilder result = new StringBuilder();\n    for (String field : fieldsSpec.split(\"[, ]\")) {\n      Collection<Object> vals = sdoc.getFieldValues(field);\n      if (vals == null) continue;\n      Iterator<Object> ite = vals.iterator();\n      while(ite.hasNext()){\n        // Join multiple values with a period so that Carrot2 does not pick up\n        // phrases that cross field value boundaries (in most cases it would\n        // create useless phrases).\n        result.append((String)ite.next()).append(\" . \");\n      }\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3c89f80265f6c2148bf8702b01724ca046efdf07"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c89f80265f6c2148bf8702b01724ca046efdf07","date":1323446698,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getConcatenated(SolrDocument,String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getConcatenated(SolrDocument,String).mjava","sourceNew":"  private String getConcatenated(SolrDocument sdoc, String fieldsSpec) {\n    StringBuilder result = new StringBuilder();\n    for (String field : fieldsSpec.split(\"[, ]\")) {\n      Collection<Object> vals = sdoc.getFieldValues(field);\n      if (vals == null) continue;\n      Iterator<Object> ite = vals.iterator();\n      while(ite.hasNext()){\n        // Join multiple values with a period so that Carrot2 does not pick up\n        // phrases that cross field value boundaries (in most cases it would\n        // create useless phrases).\n        result.append(ObjectUtils.toString(ite.next())).append(\" . \");\n      }\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":"  private String getConcatenated(SolrDocument sdoc, String fieldsSpec) {\n    StringBuilder result = new StringBuilder();\n    for (String field : fieldsSpec.split(\"[, ]\")) {\n      Collection<Object> vals = sdoc.getFieldValues(field);\n      if (vals == null) continue;\n      Iterator<Object> ite = vals.iterator();\n      while(ite.hasNext()){\n        // Join multiple values with a period so that Carrot2 does not pick up\n        // phrases that cross field value boundaries (in most cases it would\n        // create useless phrases).\n        result.append((String)ite.next()).append(\" . \");\n      }\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":["f25fe5576647e3bdd2a797a9900982532d5e2e97"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getConcatenated(SolrDocument,String).mjava","pathOld":"/dev/null","sourceNew":"  private String getConcatenated(SolrDocument sdoc, String fieldsSpec) {\n    StringBuilder result = new StringBuilder();\n    for (String field : fieldsSpec.split(\"[, ]\")) {\n      Collection<Object> vals = sdoc.getFieldValues(field);\n      if (vals == null) continue;\n      Iterator<Object> ite = vals.iterator();\n      while(ite.hasNext()){\n        // Join multiple values with a period so that Carrot2 does not pick up\n        // phrases that cross field value boundaries (in most cases it would\n        // create useless phrases).\n        result.append(ObjectUtils.toString(ite.next())).append(\" . \");\n      }\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ac6494315d04f68950d2f00f5436b4861bcd467","date":1553125039,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getConcatenated(SolrDocument,String).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getConcatenated(SolrDocument,String).mjava","sourceNew":"  private String getConcatenated(SolrDocument sdoc, String fieldsSpec) {\n    StringBuilder result = new StringBuilder();\n    for (String field : fieldsSpec.split(\"[, ]\")) {\n      Collection<Object> vals = sdoc.getFieldValues(field);\n      if (vals == null) continue;\n      Iterator<Object> ite = vals.iterator();\n      while(ite.hasNext()){\n        // Join multiple values with a period so that Carrot2 does not pick up\n        // phrases that cross field value boundaries (in most cases it would\n        // create useless phrases).\n        result.append(Objects.toString(ite.next(), \"\")).append(\" . \");\n      }\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":"  private String getConcatenated(SolrDocument sdoc, String fieldsSpec) {\n    StringBuilder result = new StringBuilder();\n    for (String field : fieldsSpec.split(\"[, ]\")) {\n      Collection<Object> vals = sdoc.getFieldValues(field);\n      if (vals == null) continue;\n      Iterator<Object> ite = vals.iterator();\n      while(ite.hasNext()){\n        // Join multiple values with a period so that Carrot2 does not pick up\n        // phrases that cross field value boundaries (in most cases it would\n        // create useless phrases).\n        result.append(ObjectUtils.toString(ite.next())).append(\" . \");\n      }\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ac6494315d04f68950d2f00f5436b4861bcd467":["3c89f80265f6c2148bf8702b01724ca046efdf07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c89f80265f6c2148bf8702b01724ca046efdf07":["f25fe5576647e3bdd2a797a9900982532d5e2e97"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3c89f80265f6c2148bf8702b01724ca046efdf07"],"f25fe5576647e3bdd2a797a9900982532d5e2e97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ac6494315d04f68950d2f00f5436b4861bcd467"]},"commit2Childs":{"0ac6494315d04f68950d2f00f5436b4861bcd467":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","f25fe5576647e3bdd2a797a9900982532d5e2e97"],"3c89f80265f6c2148bf8702b01724ca046efdf07":["0ac6494315d04f68950d2f00f5436b4861bcd467","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"f25fe5576647e3bdd2a797a9900982532d5e2e97":["3c89f80265f6c2148bf8702b01724ca046efdf07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}