{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, acceptDocs, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomInts.randomIntBetween(random, max, next);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomInts.randomIntBetween(random, max, next);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, acceptDocs, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomNumbers.randomIntBetween(random, max, next);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, acceptDocs, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomInts.randomIntBetween(random, max, next);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, acceptDocs, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomNumbers.randomIntBetween(random, max, next);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, acceptDocs, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomInts.randomIntBetween(random, max, next);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max, scoreMode);\n    final int next = in.score(collector, acceptDocs, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomNumbers.randomIntBetween(random, max, next);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, acceptDocs, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomNumbers.randomIntBetween(random, max, next);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max, scoreMode);\n    final int next = in.score(collector, acceptDocs, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomNumbers.randomIntBetween(random, max, next);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max);\n    final int next = in.score(collector, acceptDocs, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomNumbers.randomIntBetween(random, max, next);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingBulkScorer#score(LeafCollector,Bits,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(collector, min, max);\n    final int next = in.score(collector, acceptDocs, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomNumbers.randomIntBetween(random, max, next);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, final int max) throws IOException {\n    assert min >= this.max: \"Scoring backward: min=\" + min + \" while previous max was max=\" + this.max;\n    assert min <= max : \"max must be greater than min, got min=\" + min + \", and max=\" + max;\n    this.max = max;\n    collector = new AssertingLeafCollector(random, collector, min, max, scoreMode);\n    final int next = in.score(collector, acceptDocs, min, max);\n    assert next >= max;\n    if (max >= maxDoc || next >= maxDoc) {\n      assert next == DocIdSetIterator.NO_MORE_DOCS;\n      return DocIdSetIterator.NO_MORE_DOCS;\n    } else {\n      return RandomNumbers.randomIntBetween(random, max, next);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["417142ff08fda9cf0b72d5133e63097a166c6458"],"6448f67be45147de82a85cd903fec34e8930da75":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["0f4464508ee83288c8c4585b533f9faaa93aa314","6448f67be45147de82a85cd903fec34e8930da75"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["6448f67be45147de82a85cd903fec34e8930da75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6448f67be45147de82a85cd903fec34e8930da75","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"6448f67be45147de82a85cd903fec34e8930da75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}