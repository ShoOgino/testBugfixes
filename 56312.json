{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5551d21c759979ad637581208f5ff5bd7497b5d7","date":1447783672,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          \"/overseer_elect/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() == KeeperException.Code.SESSIONEXPIRED) {\n        log.info(\"\", e);\n      } else {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    TimerContext timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          OverseerElectionContext.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(ID))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(ID))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(\"id\"))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27e471964e04aba0265130e510f878b1a91d4c7a","date":1531854971,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    String propsId = null;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      propsId = props.getStr(ID);\n      if (myId.equals(propsId)) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      } else {\n        log.debug(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id={}) am no longer a leader. propsId={}\", myId, propsId);\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(ID))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor#amILeader().mjava","sourceNew":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    String propsId = null;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      propsId = props.getStr(ID);\n      if (myId.equals(propsId)) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      } else {\n        log.debug(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id={}) am no longer a leader. propsId={}\", myId, propsId);\n    return LeaderStatus.NO;\n  }\n\n","sourceOld":"  protected LeaderStatus amILeader() {\n    String statsName = \"collection_am_i_leader\";\n    Timer.Context timerContext = stats.time(statsName);\n    boolean success = true;\n    try {\n      ZkNodeProps props = ZkNodeProps.load(zkStateReader.getZkClient().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\", null, null, true));\n      if (myId.equals(props.getStr(ID))) {\n        return LeaderStatus.YES;\n      }\n    } catch (KeeperException e) {\n      success = false;\n      if (e.code() == KeeperException.Code.CONNECTIONLOSS) {\n        log.error(\"\", e);\n        return LeaderStatus.DONT_KNOW;\n      } else if (e.code() != KeeperException.Code.SESSIONEXPIRED) {\n        log.warn(\"\", e);\n      }\n    } catch (InterruptedException e) {\n      success = false;\n      Thread.currentThread().interrupt();\n    } finally {\n      timerContext.stop();\n      if (success)  {\n        stats.success(statsName);\n      } else  {\n        stats.error(statsName);\n      }\n    }\n    log.info(\"According to ZK I (id=\" + myId + \") am no longer a leader.\");\n    return LeaderStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5551d21c759979ad637581208f5ff5bd7497b5d7":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"962cd4f5e313777f35da8f521265323e84184929":["5551d21c759979ad637581208f5ff5bd7497b5d7"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5551d21c759979ad637581208f5ff5bd7497b5d7","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6d2dadc1f5ca8703d8659f4964961f9967935d75","27e471964e04aba0265130e510f878b1a91d4c7a"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"27e471964e04aba0265130e510f878b1a91d4c7a":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5551d21c759979ad637581208f5ff5bd7497b5d7","962cd4f5e313777f35da8f521265323e84184929"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27e471964e04aba0265130e510f878b1a91d4c7a"]},"commit2Childs":{"5551d21c759979ad637581208f5ff5bd7497b5d7":["962cd4f5e313777f35da8f521265323e84184929","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["727bb765ff2542275f6d31f67be18d7104bae148","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["5551d21c759979ad637581208f5ff5bd7497b5d7"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","27e471964e04aba0265130e510f878b1a91d4c7a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"27e471964e04aba0265130e510f878b1a91d4c7a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["6d2dadc1f5ca8703d8659f4964961f9967935d75","e5fa6615014cd2288fe930f8c8bb726f9504961d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}