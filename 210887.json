{"path":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#writeDocs(SolrQueryRequest,IteratorWriter.ItemWriter,Sort).mjava","commits":[{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#writeDocs(SolrQueryRequest,IteratorWriter.ItemWriter,Sort).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter#writeDocs(SolrQueryRequest,IteratorWriter.ItemWriter,Sort).mjava","sourceNew":"  protected void writeDocs(SolrQueryRequest req, IteratorWriter.ItemWriter writer, Sort sort) throws IOException {\n    //Write the data.\n    List<LeafReaderContext> leaves = req.getSearcher().getTopReaderContext().leaves();\n    SortDoc sortDoc = getSortDoc(req.getSearcher(), sort.getSort());\n    int count = 0;\n    int queueSize = 30000;\n    if (totalHits < 30000) {\n      queueSize = totalHits;\n    }\n    SortQueue queue = new SortQueue(queueSize, sortDoc);\n    SortDoc[] outDocs = new SortDoc[queueSize];\n\n    while (count < totalHits) {\n      //long begin = System.nanoTime();\n      queue.reset();\n      SortDoc top = queue.top();\n      for (int i = 0; i < leaves.size(); i++) {\n        sortDoc.setNextReader(leaves.get(i));\n        DocIdSetIterator it = new BitSetIterator(sets[i], 0); // cost is not useful here\n        int docId;\n        while ((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          sortDoc.setValues(docId);\n          if (top.lessThan(sortDoc)) {\n            top.setValues(sortDoc);\n            top = queue.updateTop();\n          }\n        }\n      }\n\n      int outDocsIndex = -1;\n\n      for (int i = 0; i < queueSize; i++) {\n        SortDoc s = queue.pop();\n        if (s.docId > -1) {\n          outDocs[++outDocsIndex] = s;\n        }\n      }\n\n      //long end = System.nanoTime();\n\n      count += (outDocsIndex + 1);\n\n      try {\n        for (int i = outDocsIndex; i >= 0; --i) {\n          SortDoc s = outDocs[i];\n          writer.add((MapWriter) ew -> {\n            writeDoc(s, leaves, ew);\n            s.reset();\n          });\n        }\n      } catch (Throwable e) {\n        Throwable ex = e;\n        while (ex != null) {\n          String m = ex.getMessage();\n          if (m != null && m.contains(\"Broken pipe\")) {\n            throw new IgnoreException();\n          }\n          ex = ex.getCause();\n        }\n\n        if (e instanceof IOException) {\n          throw ((IOException) e);\n        } else {\n          throw new IOException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void writeDocs(SolrQueryRequest req, IteratorWriter.ItemWriter writer, Sort sort) throws IOException {\n    //Write the data.\n    List<LeafReaderContext> leaves = req.getSearcher().getTopReaderContext().leaves();\n    SortDoc sortDoc = getSortDoc(req.getSearcher(), sort.getSort());\n    int count = 0;\n    int queueSize = 30000;\n    SortQueue queue = new SortQueue(queueSize, sortDoc);\n    SortDoc[] outDocs = new SortDoc[queueSize];\n\n    while(count < totalHits) {\n      //long begin = System.nanoTime();\n      queue.reset();\n      SortDoc top = queue.top();\n      for(int i=0; i<leaves.size(); i++) {\n        sortDoc.setNextReader(leaves.get(i));\n        DocIdSetIterator it = new BitSetIterator(sets[i], 0); // cost is not useful here\n        int docId = -1;\n        while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          sortDoc.setValues(docId);\n          if(top.lessThan(sortDoc)) {\n            top.setValues(sortDoc);\n            top = queue.updateTop();\n          }\n        }\n      }\n\n      int outDocsIndex = -1;\n\n      for(int i=0; i<queueSize; i++) {\n        SortDoc s = queue.pop();\n        if(s.docId > -1) {\n          outDocs[++outDocsIndex] = s;\n        }\n      }\n\n      //long end = System.nanoTime();\n\n      count += (outDocsIndex+1);\n\n      try {\n        for(int i=outDocsIndex; i>=0; --i) {\n          SortDoc s = outDocs[i];\n          writer.add((MapWriter) ew -> {\n            writeDoc(s, leaves, ew);\n            s.reset();\n          });\n        }\n      } catch(Throwable e) {\n        Throwable ex = e;\n        while(ex != null) {\n          String m = ex.getMessage();\n          if(m != null && m.contains(\"Broken pipe\")) {\n            throw new IgnoreException();\n          }\n          ex = ex.getCause();\n        }\n\n        if(e instanceof IOException) {\n          throw ((IOException)e);\n        } else {\n          throw new IOException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d36bc9cece6e1287852808de22ef7aa07c2e716","date":1550783148,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#writeDocs(SolrQueryRequest,IteratorWriter.ItemWriter,Sort).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#writeDocs(SolrQueryRequest,IteratorWriter.ItemWriter,Sort).mjava","sourceNew":"  protected void writeDocs(SolrQueryRequest req, IteratorWriter.ItemWriter writer, Sort sort) throws IOException {\n    List<LeafReaderContext> leaves = req.getSearcher().getTopReaderContext().leaves();\n    SortDoc sortDoc = getSortDoc(req.getSearcher(), sort.getSort());\n    int count = 0;\n    final int queueSize = Math.min(DOCUMENT_BATCH_SIZE, totalHits);\n\n    SortQueue queue = new SortQueue(queueSize, sortDoc);\n    SortDoc[] outDocs = new SortDoc[queueSize];\n\n    while (count < totalHits) {\n      identifyLowestSortingUnexportedDocs(leaves, sortDoc, queue);\n      int outDocsIndex = transferBatchToArrayForOutput(queue, outDocs);\n\n      count += (outDocsIndex + 1);\n      addDocsToItemWriter(leaves, writer, outDocs, outDocsIndex);\n    }\n  }\n\n","sourceOld":"  protected void writeDocs(SolrQueryRequest req, IteratorWriter.ItemWriter writer, Sort sort) throws IOException {\n    //Write the data.\n    List<LeafReaderContext> leaves = req.getSearcher().getTopReaderContext().leaves();\n    SortDoc sortDoc = getSortDoc(req.getSearcher(), sort.getSort());\n    int count = 0;\n    int queueSize = 30000;\n    if (totalHits < 30000) {\n      queueSize = totalHits;\n    }\n    SortQueue queue = new SortQueue(queueSize, sortDoc);\n    SortDoc[] outDocs = new SortDoc[queueSize];\n\n    while (count < totalHits) {\n      //long begin = System.nanoTime();\n      queue.reset();\n      SortDoc top = queue.top();\n      for (int i = 0; i < leaves.size(); i++) {\n        sortDoc.setNextReader(leaves.get(i));\n        DocIdSetIterator it = new BitSetIterator(sets[i], 0); // cost is not useful here\n        int docId;\n        while ((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          sortDoc.setValues(docId);\n          if (top.lessThan(sortDoc)) {\n            top.setValues(sortDoc);\n            top = queue.updateTop();\n          }\n        }\n      }\n\n      int outDocsIndex = -1;\n\n      for (int i = 0; i < queueSize; i++) {\n        SortDoc s = queue.pop();\n        if (s.docId > -1) {\n          outDocs[++outDocsIndex] = s;\n        }\n      }\n\n      //long end = System.nanoTime();\n\n      count += (outDocsIndex + 1);\n\n      try {\n        for (int i = outDocsIndex; i >= 0; --i) {\n          SortDoc s = outDocs[i];\n          writer.add((MapWriter) ew -> {\n            writeDoc(s, leaves, ew);\n            s.reset();\n          });\n        }\n      } catch (Throwable e) {\n        Throwable ex = e;\n        while (ex != null) {\n          String m = ex.getMessage();\n          if (m != null && m.contains(\"Broken pipe\")) {\n            throw new IgnoreException();\n          }\n          ex = ex.getCause();\n        }\n\n        if (e instanceof IOException) {\n          throw ((IOException) e);\n        } else {\n          throw new IOException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#writeDocs(SolrQueryRequest,IteratorWriter.ItemWriter,Sort).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#writeDocs(SolrQueryRequest,IteratorWriter.ItemWriter,Sort).mjava","sourceNew":"  protected void writeDocs(SolrQueryRequest req, IteratorWriter.ItemWriter writer, Sort sort) throws IOException {\n    List<LeafReaderContext> leaves = req.getSearcher().getTopReaderContext().leaves();\n    SortDoc sortDoc = getSortDoc(req.getSearcher(), sort.getSort());\n    int count = 0;\n    final int queueSize = Math.min(DOCUMENT_BATCH_SIZE, totalHits);\n\n    SortQueue queue = new SortQueue(queueSize, sortDoc);\n    SortDoc[] outDocs = new SortDoc[queueSize];\n\n    while (count < totalHits) {\n      identifyLowestSortingUnexportedDocs(leaves, sortDoc, queue);\n      int outDocsIndex = transferBatchToArrayForOutput(queue, outDocs);\n\n      count += (outDocsIndex + 1);\n      addDocsToItemWriter(leaves, writer, outDocs, outDocsIndex);\n    }\n  }\n\n","sourceOld":"  protected void writeDocs(SolrQueryRequest req, IteratorWriter.ItemWriter writer, Sort sort) throws IOException {\n    //Write the data.\n    List<LeafReaderContext> leaves = req.getSearcher().getTopReaderContext().leaves();\n    SortDoc sortDoc = getSortDoc(req.getSearcher(), sort.getSort());\n    int count = 0;\n    int queueSize = 30000;\n    if (totalHits < 30000) {\n      queueSize = totalHits;\n    }\n    SortQueue queue = new SortQueue(queueSize, sortDoc);\n    SortDoc[] outDocs = new SortDoc[queueSize];\n\n    while (count < totalHits) {\n      //long begin = System.nanoTime();\n      queue.reset();\n      SortDoc top = queue.top();\n      for (int i = 0; i < leaves.size(); i++) {\n        sortDoc.setNextReader(leaves.get(i));\n        DocIdSetIterator it = new BitSetIterator(sets[i], 0); // cost is not useful here\n        int docId;\n        while ((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          sortDoc.setValues(docId);\n          if (top.lessThan(sortDoc)) {\n            top.setValues(sortDoc);\n            top = queue.updateTop();\n          }\n        }\n      }\n\n      int outDocsIndex = -1;\n\n      for (int i = 0; i < queueSize; i++) {\n        SortDoc s = queue.pop();\n        if (s.docId > -1) {\n          outDocs[++outDocsIndex] = s;\n        }\n      }\n\n      //long end = System.nanoTime();\n\n      count += (outDocsIndex + 1);\n\n      try {\n        for (int i = outDocsIndex; i >= 0; --i) {\n          SortDoc s = outDocs[i];\n          writer.add((MapWriter) ew -> {\n            writeDoc(s, leaves, ew);\n            s.reset();\n          });\n        }\n      } catch (Throwable e) {\n        Throwable ex = e;\n        while (ex != null) {\n          String m = ex.getMessage();\n          if (m != null && m.contains(\"Broken pipe\")) {\n            throw new IgnoreException();\n          }\n          ex = ex.getCause();\n        }\n\n        if (e instanceof IOException) {\n          throw ((IOException) e);\n        } else {\n          throw new IOException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#writeDocs(SolrQueryRequest,IteratorWriter.ItemWriter,Sort).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#writeDocs(SolrQueryRequest,IteratorWriter.ItemWriter,Sort).mjava","sourceNew":"  protected void writeDocs(SolrQueryRequest req, IteratorWriter.ItemWriter writer, Sort sort) throws IOException {\n    List<LeafReaderContext> leaves = req.getSearcher().getTopReaderContext().leaves();\n    SortDoc sortDoc = getSortDoc(req.getSearcher(), sort.getSort());\n    final int queueSize = Math.min(DOCUMENT_BATCH_SIZE, totalHits);\n\n    SortQueue queue = new SortQueue(queueSize, sortDoc);\n    SortDoc[] outDocs = new SortDoc[queueSize];\n\n    if (streamExpression != null) {\n      streamContext.put(SORT_DOCS_KEY, outDocs);\n      streamContext.put(SORT_QUEUE_KEY, queue);\n      streamContext.put(SORT_DOC_KEY, sortDoc);\n      streamContext.put(TOTAL_HITS_KEY, totalHits);\n      streamContext.put(EXPORT_WRITER_KEY, this);\n      streamContext.put(LEAF_READERS_KEY, leaves);\n      TupleStream tupleStream = createTupleStream();\n      tupleStream.open();\n      for (;;) {\n        final Tuple t = tupleStream.read();\n        if (t == null) {\n          break;\n        }\n        if (t.EOF) {\n          break;\n        }\n        writer.add((MapWriter) ew -> t.writeMap(ew));\n      }\n      tupleStream.close();\n    } else {\n      for (int count = 0; count < totalHits; ) {\n        int outDocsIndex = fillOutDocs(leaves, sortDoc, queue, outDocs);\n        count += (outDocsIndex + 1);\n        addDocsToItemWriter(leaves, writer, outDocs, outDocsIndex);\n      }\n    }\n  }\n\n","sourceOld":"  protected void writeDocs(SolrQueryRequest req, IteratorWriter.ItemWriter writer, Sort sort) throws IOException {\n    List<LeafReaderContext> leaves = req.getSearcher().getTopReaderContext().leaves();\n    SortDoc sortDoc = getSortDoc(req.getSearcher(), sort.getSort());\n    int count = 0;\n    final int queueSize = Math.min(DOCUMENT_BATCH_SIZE, totalHits);\n\n    SortQueue queue = new SortQueue(queueSize, sortDoc);\n    SortDoc[] outDocs = new SortDoc[queueSize];\n\n    while (count < totalHits) {\n      identifyLowestSortingUnexportedDocs(leaves, sortDoc, queue);\n      int outDocsIndex = transferBatchToArrayForOutput(queue, outDocs);\n\n      count += (outDocsIndex + 1);\n      addDocsToItemWriter(leaves, writer, outDocs, outDocsIndex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee","date":1593704090,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#writeDocs(SolrQueryRequest,IteratorWriter.ItemWriter,Sort).mjava","sourceNew":null,"sourceOld":"  protected void writeDocs(SolrQueryRequest req, IteratorWriter.ItemWriter writer, Sort sort) throws IOException {\n    List<LeafReaderContext> leaves = req.getSearcher().getTopReaderContext().leaves();\n    SortDoc sortDoc = getSortDoc(req.getSearcher(), sort.getSort());\n    final int queueSize = Math.min(DOCUMENT_BATCH_SIZE, totalHits);\n\n    SortQueue queue = new SortQueue(queueSize, sortDoc);\n    SortDoc[] outDocs = new SortDoc[queueSize];\n\n    if (streamExpression != null) {\n      streamContext.put(SORT_DOCS_KEY, outDocs);\n      streamContext.put(SORT_QUEUE_KEY, queue);\n      streamContext.put(SORT_DOC_KEY, sortDoc);\n      streamContext.put(TOTAL_HITS_KEY, totalHits);\n      streamContext.put(EXPORT_WRITER_KEY, this);\n      streamContext.put(LEAF_READERS_KEY, leaves);\n      TupleStream tupleStream = createTupleStream();\n      tupleStream.open();\n      for (;;) {\n        final Tuple t = tupleStream.read();\n        if (t == null) {\n          break;\n        }\n        if (t.EOF) {\n          break;\n        }\n        writer.add((MapWriter) ew -> t.writeMap(ew));\n      }\n      tupleStream.close();\n    } else {\n      for (int count = 0; count < totalHits; ) {\n        int outDocsIndex = fillOutDocs(leaves, sortDoc, queue, outDocs);\n        count += (outDocsIndex + 1);\n        addDocsToItemWriter(leaves, writer, outDocs, outDocsIndex);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["804a8d5358fe7b7563b85ee7838714d720b89272"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d36bc9cece6e1287852808de22ef7aa07c2e716":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"804a8d5358fe7b7563b85ee7838714d720b89272":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","6d36bc9cece6e1287852808de22ef7aa07c2e716"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"]},"commit2Childs":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["6d36bc9cece6e1287852808de22ef7aa07c2e716","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"6d36bc9cece6e1287852808de22ef7aa07c2e716":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"804a8d5358fe7b7563b85ee7838714d720b89272":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["804a8d5358fe7b7563b85ee7838714d720b89272"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}