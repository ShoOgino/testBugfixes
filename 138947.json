{"path":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","commits":[{"id":"5ef0a91e147ef5c263ff965642f847b554b13ba2","date":1386676110,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","sourceNew":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrServer client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","sourceOld":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","sourceNew":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrClient client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","sourceOld":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrServer client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","sourceNew":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","sourceOld":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrClient client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","sourceNew":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","sourceOld":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","sourceNew":null,"sourceOld":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","sourceNew":null,"sourceOld":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/MigrateRouteKeyTest#createCollection(String).mjava","sourceNew":null,"sourceOld":"  private void createCollection(String targetCollection) throws Exception {\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 1);\n\n      createCollection(collectionInfos, targetCollection, props, client);\n    }\n\n    List<Integer> list = collectionInfos.get(targetCollection);\n    checkForCollection(targetCollection, list, null);\n\n    waitForRecoveriesToFinish(targetCollection, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5ef0a91e147ef5c263ff965642f847b554b13ba2"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["b693a83132c9e45afcd564fd65a25b60ed80388b","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ef0a91e147ef5c263ff965642f847b554b13ba2"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b693a83132c9e45afcd564fd65a25b60ed80388b","1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"5ef0a91e147ef5c263ff965642f847b554b13ba2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","5ef0a91e147ef5c263ff965642f847b554b13ba2"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"5ef0a91e147ef5c263ff965642f847b554b13ba2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}