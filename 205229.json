{"path":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#BM25NBClassifier(IndexReader,Analyzer,Query,String,String...).mjava","commits":[{"id":"37dc4585237301aef478cc54a24c7188a28ab2e6","date":1494512792,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#BM25NBClassifier(IndexReader,Analyzer,Query,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new NaiveBayes classifier.\n   *\n   * @param indexReader    the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier NOTE: must not be havely analyzed\n   *                       as the returned class will be a token indexed for this field\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, NO boosting supported per field\n   */\n  public BM25NBClassifier(IndexReader indexReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.indexReader = indexReader;\n    this.indexSearcher = new IndexSearcher(this.indexReader);\n    this.indexSearcher.setSimilarity(new BM25Similarity());\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360b3962efc30aa8b2c39c3087aa36069674bbe7","date":1494557674,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#BM25NBClassifier(IndexReader,Analyzer,Query,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new NaiveBayes classifier.\n   *\n   * @param indexReader    the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier NOTE: must not be havely analyzed\n   *                       as the returned class will be a token indexed for this field\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, NO boosting supported per field\n   */\n  public BM25NBClassifier(IndexReader indexReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.indexReader = indexReader;\n    this.indexSearcher = new IndexSearcher(this.indexReader);\n    this.indexSearcher.setSimilarity(new BM25Similarity());\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#BM25NBClassifier(IndexReader,Analyzer,Query,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new NaiveBayes classifier.\n   *\n   * @param indexReader    the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier NOTE: must not be havely analyzed\n   *                       as the returned class will be a token indexed for this field\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, NO boosting supported per field\n   */\n  public BM25NBClassifier(IndexReader indexReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.indexReader = indexReader;\n    this.indexSearcher = new IndexSearcher(this.indexReader);\n    this.indexSearcher.setSimilarity(new BM25Similarity());\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#BM25NBClassifier(IndexReader,Analyzer,Query,String,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BM25NBClassifier#BM25NBClassifier(IndexReader,Analyzer,Query,String,String...).mjava","sourceNew":"  /**\n   * Creates a new NaiveBayes classifier.\n   *\n   * @param indexReader    the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier NOTE: must not be heavely analyzed\n   *                       as the returned class will be a token indexed for this field\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, NO boosting supported per field\n   */\n  public BM25NBClassifier(IndexReader indexReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.indexReader = indexReader;\n    this.indexSearcher = new IndexSearcher(this.indexReader);\n    this.indexSearcher.setSimilarity(new BM25Similarity());\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","sourceOld":"  /**\n   * Creates a new NaiveBayes classifier.\n   *\n   * @param indexReader    the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param classFieldName the name of the field used as the output for the classifier NOTE: must not be havely analyzed\n   *                       as the returned class will be a token indexed for this field\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, NO boosting supported per field\n   */\n  public BM25NBClassifier(IndexReader indexReader, Analyzer analyzer, Query query, String classFieldName, String... textFieldNames) {\n    this.indexReader = indexReader;\n    this.indexSearcher = new IndexSearcher(this.indexReader);\n    this.indexSearcher.setSimilarity(new BM25Similarity());\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.query = query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","360b3962efc30aa8b2c39c3087aa36069674bbe7"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["360b3962efc30aa8b2c39c3087aa36069674bbe7"],"360b3962efc30aa8b2c39c3087aa36069674bbe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","37dc4585237301aef478cc54a24c7188a28ab2e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"37dc4585237301aef478cc54a24c7188a28ab2e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"360b3962efc30aa8b2c39c3087aa36069674bbe7":["e9017cf144952056066919f1ebc7897ff9bd71b1","d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","360b3962efc30aa8b2c39c3087aa36069674bbe7","37dc4585237301aef478cc54a24c7188a28ab2e6"],"37dc4585237301aef478cc54a24c7188a28ab2e6":["360b3962efc30aa8b2c39c3087aa36069674bbe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}