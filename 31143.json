{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter,boolean).mjava","commits":[{"id":"33dd2fc33a7c6ae46d3decff17689539385ef33f","date":1364971259,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter).mjava","sourceNew":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   * \n   * <p>This method will quietly ignore missing or non-directory <code>baseDir</code>\n   *  folder. \n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   * @param quiet  Be quiet if baseDir does not point to a directory or if no file is \n   *               left after applying the filter. \n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter, boolean quiet) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    if (base != null && base.exists() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      if (!quiet && (files == null || files.length == 0)) {\n        log.warn(\"No files added to classloader from lib: \"\n            + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n      } else {\n        this.classLoader = replaceClassLoader(classLoader, base, filter);\n      }\n    } else {\n      if (!quiet) {\n        log.warn(\"Can't find (or read) directory to add to classloader: \"\n            + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    this.classLoader = replaceClassLoader(classLoader, base, filter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5268b3b46fa91a88e4d8fdd00f16f42577e6da11","date":1368012863,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter,boolean).mjava","sourceNew":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   * \n   * <p>This method will quietly ignore missing or non-directory <code>baseDir</code>\n   *  folder. \n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   * @param quiet  Be quiet if baseDir does not point to a directory or if no file is \n   *               left after applying the filter. \n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter, boolean quiet) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    if (base != null && base.exists() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      if (files == null || files.length == 0) {\n        if (!quiet) {\n          log.warn(\"No files added to classloader from lib: \"\n                   + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n        }\n      } else {\n        this.classLoader = replaceClassLoader(classLoader, base, filter);\n      }\n    } else {\n      if (!quiet) {\n        log.warn(\"Can't find (or read) directory to add to classloader: \"\n            + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   * \n   * <p>This method will quietly ignore missing or non-directory <code>baseDir</code>\n   *  folder. \n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   * @param quiet  Be quiet if baseDir does not point to a directory or if no file is \n   *               left after applying the filter. \n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter, boolean quiet) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    if (base != null && base.exists() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      if (!quiet && (files == null || files.length == 0)) {\n        log.warn(\"No files added to classloader from lib: \"\n            + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n      } else {\n        this.classLoader = replaceClassLoader(classLoader, base, filter);\n      }\n    } else {\n      if (!quiet) {\n        log.warn(\"Can't find (or read) directory to add to classloader: \"\n            + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter,boolean).mjava","sourceNew":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   * \n   * <p>This method will quietly ignore missing or non-directory <code>baseDir</code>\n   *  folder. \n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   * @param quiet  Be quiet if baseDir does not point to a directory or if no file is \n   *               left after applying the filter. \n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter, boolean quiet) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    if (base != null && base.exists() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      if (files == null || files.length == 0) {\n        if (!quiet) {\n          log.warn(\"No files added to classloader from lib: \"\n                   + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n        }\n      } else {\n        this.classLoader = replaceClassLoader(classLoader, base, filter);\n      }\n    } else {\n      if (!quiet) {\n        log.warn(\"Can't find (or read) directory to add to classloader: \"\n            + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * it's behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   * \n   * <p>This method will quietly ignore missing or non-directory <code>baseDir</code>\n   *  folder. \n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   * @param quiet  Be quiet if baseDir does not point to a directory or if no file is \n   *               left after applying the filter. \n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter, boolean quiet) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    if (base != null && base.exists() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      if (files == null || files.length == 0) {\n        if (!quiet) {\n          log.warn(\"No files added to classloader from lib: \"\n                   + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n        }\n      } else {\n        this.classLoader = replaceClassLoader(classLoader, base, filter);\n      }\n    } else {\n      if (!quiet) {\n        log.warn(\"Can't find (or read) directory to add to classloader: \"\n            + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#addToClassLoader(String,FileFilter,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds every file/dir found in the baseDir which passes the specified Filter\n   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>\n   * only be called prior to using this ResourceLoader to get any resources, otherwise\n   * its behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}\n   * before using this ResourceLoader.\n   * \n   * <p>This method will quietly ignore missing or non-directory <code>baseDir</code>\n   *  folder. \n   *\n   * @param baseDir base directory whose children (either jars or directories of\n   *                classes) will be in the classpath, will be resolved relative\n   *                the instance dir.\n   * @param filter The filter files must satisfy, if null all files will be accepted.\n   * @param quiet  Be quiet if baseDir does not point to a directory or if no file is \n   *               left after applying the filter. \n   */\n  void addToClassLoader(final String baseDir, final FileFilter filter, boolean quiet) {\n    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);\n    if (base != null && base.exists() && base.isDirectory()) {\n      File[] files = base.listFiles(filter);\n      if (files == null || files.length == 0) {\n        if (!quiet) {\n          log.warn(\"No files added to classloader from lib: \"\n                   + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n        }\n      } else {\n        this.classLoader = replaceClassLoader(classLoader, base, filter);\n      }\n    } else {\n      if (!quiet) {\n        log.warn(\"Can't find (or read) directory to add to classloader: \"\n            + baseDir + \" (resolved as: \" + base.getAbsolutePath() + \").\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["5268b3b46fa91a88e4d8fdd00f16f42577e6da11"],"5268b3b46fa91a88e4d8fdd00f16f42577e6da11":["33dd2fc33a7c6ae46d3decff17689539385ef33f"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"33dd2fc33a7c6ae46d3decff17689539385ef33f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a626ec4d1c92e59fe390724d6220081047b03ce7"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"5268b3b46fa91a88e4d8fdd00f16f42577e6da11":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33dd2fc33a7c6ae46d3decff17689539385ef33f":["5268b3b46fa91a88e4d8fdd00f16f42577e6da11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33dd2fc33a7c6ae46d3decff17689539385ef33f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}