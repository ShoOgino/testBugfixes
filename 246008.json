{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testHaversinOpto().mjava","commits":[{"id":"ed05bb51ea0663dafe0ae9b600553ef0e851f0e5","date":1458616189,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testHaversinOpto().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceQuery#testHaversinOpto().mjava","sourceNew":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoUtils.circleToBBox(lon, lat, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n      \n        for (int j = 0; j < 10000; j++) {\n          double lat2 = -90 + 180.0 * random().nextDouble();\n          double lon2 = -180 + 360.0 * random().nextDouble();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoUtils.circleToBBox(lon, lat, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n      \n        for (int j = 0; j < 10000; j++) {\n          double lat2 = -90 + 180.0 * random().nextDouble();\n          double lon2 = -180 + 360.0 * random().nextDouble();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testHaversinOpto().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testHaversinOpto().mjava","sourceNew":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoUtils.circleToBBox(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n      \n        for (int j = 0; j < 10000; j++) {\n          double lat2 = -90 + 180.0 * random().nextDouble();\n          double lon2 = -180 + 360.0 * random().nextDouble();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoUtils.circleToBBox(lon, lat, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n      \n        for (int j = 0; j < 10000; j++) {\n          double lat2 = -90 + 180.0 * random().nextDouble();\n          double lon2 = -180 + 360.0 * random().nextDouble();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9","date":1459176843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testHaversinOpto().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testHaversinOpto().mjava","sourceNew":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoUtils.circleToBBox(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n      \n        for (int j = 0; j < 10000; j++) {\n          double lat2 = GeoTestUtil.nextLatitude();\n          double lon2 = GeoTestUtil.nextLongitude();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoUtils.circleToBBox(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n      \n        for (int j = 0; j < 10000; j++) {\n          double lat2 = -90 + 180.0 * random().nextDouble();\n          double lon2 = -180 + 360.0 * random().nextDouble();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43ddc1b7a872fafd838d3f3129984ca661e29b36","date":1459526591,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testHaversinOpto().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testHaversinOpto().mjava","sourceNew":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoRect.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n      \n        for (int j = 0; j < 10000; j++) {\n          double lat2 = GeoTestUtil.nextLatitude();\n          double lon2 = GeoTestUtil.nextLongitude();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoUtils.circleToBBox(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n      \n        for (int j = 0; j < 10000; j++) {\n          double lat2 = GeoTestUtil.nextLatitude();\n          double lon2 = GeoTestUtil.nextLongitude();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testHaversinOpto().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testHaversinOpto().mjava","sourceNew":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      Rectangle box = Rectangle.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n\n        for (int j = 0; j < 10000; j++) {\n          double lat2 = GeoTestUtil.nextLatitude();\n          double lon2 = GeoTestUtil.nextLongitude();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // test we can use haversinSortKey() for distance queries.\n  public void testHaversinOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoRect.fromPointDistance(lat, lon, radius);\n\n      if (box.maxLon - lon < 90 && lon - box.minLon < 90) {\n        double minPartialDistance = Math.max(SloppyMath.haversinSortKey(lat, lon, lat, box.maxLon),\n                                             SloppyMath.haversinSortKey(lat, lon, box.maxLat, lon));\n      \n        for (int j = 0; j < 10000; j++) {\n          double lat2 = GeoTestUtil.nextLatitude();\n          double lon2 = GeoTestUtil.nextLongitude();\n          // if the point is within radius, then it should be <= our sort key\n          if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n            assertTrue(SloppyMath.haversinSortKey(lat, lon, lat2, lon2) <= minPartialDistance);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ed05bb51ea0663dafe0ae9b600553ef0e851f0e5"],"6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["43ddc1b7a872fafd838d3f3129984ca661e29b36"],"43ddc1b7a872fafd838d3f3129984ca661e29b36":["6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9"],"ed05bb51ea0663dafe0ae9b600553ef0e851f0e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"]},"commit2Childs":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9"],"6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9":["43ddc1b7a872fafd838d3f3129984ca661e29b36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ed05bb51ea0663dafe0ae9b600553ef0e851f0e5"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43ddc1b7a872fafd838d3f3129984ca661e29b36":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"ed05bb51ea0663dafe0ae9b600553ef0e851f0e5":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}