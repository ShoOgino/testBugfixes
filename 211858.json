{"path":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testMaxIdleTimeEviction().mjava","commits":[{"id":"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","date":1568645407,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testMaxIdleTimeEviction().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMaxIdleTimeEviction() throws Exception {\n    int IDLE_TIME_SEC = 5;\n    long IDLE_TIME_NS = TimeUnit.NANOSECONDS.convert(IDLE_TIME_SEC, TimeUnit.SECONDS);\n    CountDownLatch sweepFinished = new CountDownLatch(1);\n    final AtomicLong numSweepsStarted = new AtomicLong(0);\n    ConcurrentLFUCache<String, String> cache = new ConcurrentLFUCache<>(6, 5, 5, 6, false, false, null, false, IDLE_TIME_SEC) {\n      @Override\n      public void markAndSweep() {\n        numSweepsStarted.incrementAndGet();\n        super.markAndSweep();\n        sweepFinished.countDown();\n      }\n    };\n    for (int i = 0; i < 4; i++) {\n      cache.put(\"\" + i, \"foo \" + i);\n    }\n    // no evictions yet\n    assertEquals(4, cache.size());\n    assertEquals(\"markAndSweep spurious run\", 0, numSweepsStarted.get());\n    long currentTime = TimeSource.NANO_TIME.getEpochTimeNs();\n    cache.putCacheEntry(new ConcurrentLFUCache.CacheEntry<>(\"4\", \"foo5\",\n        currentTime - IDLE_TIME_NS * 2));\n    boolean await = sweepFinished.await(10, TimeUnit.SECONDS);\n    assertTrue(\"did not evict entries in time\", await);\n    assertEquals(4, cache.size());\n    assertNull(cache.get(\"4\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testMaxIdleTimeEviction().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testMaxIdleTimeEviction() throws Exception {\n    int IDLE_TIME_SEC = 5;\n    long IDLE_TIME_NS = TimeUnit.NANOSECONDS.convert(IDLE_TIME_SEC, TimeUnit.SECONDS);\n    CountDownLatch sweepFinished = new CountDownLatch(1);\n    final AtomicLong numSweepsStarted = new AtomicLong(0);\n    ConcurrentLFUCache<String, String> cache = new ConcurrentLFUCache<>(6, 5, 5, 6, false, false, null, false, IDLE_TIME_SEC) {\n      @Override\n      public void markAndSweep() {\n        numSweepsStarted.incrementAndGet();\n        super.markAndSweep();\n        sweepFinished.countDown();\n      }\n    };\n    for (int i = 0; i < 4; i++) {\n      cache.put(\"\" + i, \"foo \" + i);\n    }\n    // no evictions yet\n    assertEquals(4, cache.size());\n    assertEquals(\"markAndSweep spurious run\", 0, numSweepsStarted.get());\n    long currentTime = TimeSource.NANO_TIME.getEpochTimeNs();\n    cache.putCacheEntry(new ConcurrentLFUCache.CacheEntry<>(\"4\", \"foo5\",\n        currentTime - IDLE_TIME_NS * 2));\n    boolean await = sweepFinished.await(10, TimeUnit.SECONDS);\n    assertTrue(\"did not evict entries in time\", await);\n    assertEquals(4, cache.size());\n    assertNull(cache.get(\"4\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d7d3943904804560937e6239effeebda0f920e4":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["4d7d3943904804560937e6239effeebda0f920e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}