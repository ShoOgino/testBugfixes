{"path":"solr/core/src/test/org/apache/solr/search/join/TestNestedDocsSort#testCachehits().mjava","commits":[{"id":"5220c264531ed933424a495eb8ed8ada158961cc","date":1493367833,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestNestedDocsSort#testCachehits().mjava","pathOld":"/dev/null","sourceNew":"    public void testCachehits(){\n      final SolrQueryRequest req = req();\n      try {\n        final SolrCache cache = req.getSearcher().getCache(\"perSegFilter\");\n        assertNotNull(cache);\n        final Map<String,Object> state = cache.getMetricsSnapshot();\n        String lookupsKey = null;\n        for(String key : state.keySet()){\n          if(key.endsWith(\".lookups\")) {\n            lookupsKey = key;\n            break;\n          }\n        }\n        Number before = (Number) state.get(lookupsKey);\n        parse(\"childfield(name_s1,$q) asc\");\n        Number after = (Number) cache.getMetricsSnapshot().get(lookupsKey);\n        assertEquals(\"parsing bjq lookups parent filter,\"\n            + \"parsing sort spec lookups parent and child filters, \"\n            + \"hopefully for the purpose\",3, after.intValue()-before.intValue());\n      } finally {\n        req.close();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestNestedDocsSort#testCachehits().mjava","pathOld":"/dev/null","sourceNew":"    public void testCachehits(){\n      final SolrQueryRequest req = req();\n      try {\n        final SolrCache cache = req.getSearcher().getCache(\"perSegFilter\");\n        assertNotNull(cache);\n        final Map<String,Object> state = cache.getMetricsSnapshot();\n        String lookupsKey = null;\n        for(String key : state.keySet()){\n          if(key.endsWith(\".lookups\")) {\n            lookupsKey = key;\n            break;\n          }\n        }\n        Number before = (Number) state.get(lookupsKey);\n        parse(\"childfield(name_s1,$q) asc\");\n        Number after = (Number) cache.getMetricsSnapshot().get(lookupsKey);\n        assertEquals(\"parsing bjq lookups parent filter,\"\n            + \"parsing sort spec lookups parent and child filters, \"\n            + \"hopefully for the purpose\",3, after.intValue()-before.intValue());\n      } finally {\n        req.close();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestNestedDocsSort#testCachehits().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestNestedDocsSort#testCachehits().mjava","sourceNew":"    public void testCachehits(){\n      final SolrQueryRequest req = req();\n      try {\n        final SolrCache cache = req.getSearcher().getCache(\"perSegFilter\");\n        assertNotNull(cache);\n        final Map<String,Object> state = cache.getSolrMetricsContext().getMetricsSnapshot();\n        String lookupsKey = null;\n        for(String key : state.keySet()){\n          if(key.endsWith(\".lookups\")) {\n            lookupsKey = key;\n            break;\n          }\n        }\n        Number before = (Number) state.get(lookupsKey);\n        parse(\"childfield(name_s1,$q) asc\");\n        Number after = (Number) cache.getSolrMetricsContext().getMetricsSnapshot().get(lookupsKey);\n        assertEquals(\"parsing bjq lookups parent filter,\"\n            + \"parsing sort spec lookups parent and child filters, \"\n            + \"hopefully for the purpose\",3, after.intValue()-before.intValue());\n      } finally {\n        req.close();\n      }\n    }\n\n","sourceOld":"    public void testCachehits(){\n      final SolrQueryRequest req = req();\n      try {\n        final SolrCache cache = req.getSearcher().getCache(\"perSegFilter\");\n        assertNotNull(cache);\n        final Map<String,Object> state = cache.getMetricsSnapshot();\n        String lookupsKey = null;\n        for(String key : state.keySet()){\n          if(key.endsWith(\".lookups\")) {\n            lookupsKey = key;\n            break;\n          }\n        }\n        Number before = (Number) state.get(lookupsKey);\n        parse(\"childfield(name_s1,$q) asc\");\n        Number after = (Number) cache.getMetricsSnapshot().get(lookupsKey);\n        assertEquals(\"parsing bjq lookups parent filter,\"\n            + \"parsing sort spec lookups parent and child filters, \"\n            + \"hopefully for the purpose\",3, after.intValue()-before.intValue());\n      } finally {\n        req.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestNestedDocsSort#testCachehits().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestNestedDocsSort#testCachehits().mjava","sourceNew":"    public void testCachehits(){\n      final SolrQueryRequest req = req();\n      try {\n        @SuppressWarnings({\"rawtypes\"})\n        final SolrCache cache = req.getSearcher().getCache(\"perSegFilter\");\n        assertNotNull(cache);\n        final Map<String,Object> state = cache.getSolrMetricsContext().getMetricsSnapshot();\n        String lookupsKey = null;\n        for(String key : state.keySet()){\n          if(key.endsWith(\".lookups\")) {\n            lookupsKey = key;\n            break;\n          }\n        }\n        Number before = (Number) state.get(lookupsKey);\n        parse(\"childfield(name_s1,$q) asc\");\n        Number after = (Number) cache.getSolrMetricsContext().getMetricsSnapshot().get(lookupsKey);\n        assertEquals(\"parsing bjq lookups parent filter,\"\n            + \"parsing sort spec lookups parent and child filters, \"\n            + \"hopefully for the purpose\",3, after.intValue()-before.intValue());\n      } finally {\n        req.close();\n      }\n    }\n\n","sourceOld":"    public void testCachehits(){\n      final SolrQueryRequest req = req();\n      try {\n        final SolrCache cache = req.getSearcher().getCache(\"perSegFilter\");\n        assertNotNull(cache);\n        final Map<String,Object> state = cache.getSolrMetricsContext().getMetricsSnapshot();\n        String lookupsKey = null;\n        for(String key : state.keySet()){\n          if(key.endsWith(\".lookups\")) {\n            lookupsKey = key;\n            break;\n          }\n        }\n        Number before = (Number) state.get(lookupsKey);\n        parse(\"childfield(name_s1,$q) asc\");\n        Number after = (Number) cache.getSolrMetricsContext().getMetricsSnapshot().get(lookupsKey);\n        assertEquals(\"parsing bjq lookups parent filter,\"\n            + \"parsing sort spec lookups parent and child filters, \"\n            + \"hopefully for the purpose\",3, after.intValue()-before.intValue());\n      } finally {\n        req.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5220c264531ed933424a495eb8ed8ada158961cc"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["5220c264531ed933424a495eb8ed8ada158961cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5220c264531ed933424a495eb8ed8ada158961cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","5220c264531ed933424a495eb8ed8ada158961cc"],"5220c264531ed933424a495eb8ed8ada158961cc":["e9017cf144952056066919f1ebc7897ff9bd71b1","7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}