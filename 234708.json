{"path":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","commits":[{"id":"a88da65f7210ad629e64c0553232a63d5d1bdc7c","date":1285779929,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2,3,4)\",\"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1.0,2,3,4.0)\",\"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2)\",\"pt\",\"3,4\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2)\",\"pt\",\"3,4\", \"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(3,4)\",\"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist()\",\"pt\",\"3,4\",\"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist($a,$b)\",\"a\",\"3,4\",\"b\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2,3,4)\",\"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1.0,2,3,4.0)\",\"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2)\",\"pt\",\"3,4\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2)\",\"pt\",\"3,4\", \"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(3,4)\",\"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist()\",\"pt\",\"3,4\",\"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist($a,$b)\",\"a\",\"3,4\",\"b\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7395bdaa5646a7eb2087b1043b713b4bf3294a5c","date":1305324215,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2,3,4)\",\"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1.0,2,3,4.0)\",\"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2)\",\"pt\",\"3,4\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2)\",\"pt\",\"3,4\", \"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(3,4)\",\"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist()\",\"pt\",\"3,4\",\"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist($a,$b)\",\"a\",\"3,4\",\"b\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2,3,4)\",\"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1.0,2,3,4.0)\",\"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2)\",\"pt\",\"3,4\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2)\",\"pt\",\"3,4\", \"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(3,4)\",\"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist()\",\"pt\",\"3,4\",\"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist($a,$b)\",\"a\",\"3,4\",\"b\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2,3,4)\",\"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1.0,2,3,4.0)\",\"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2)\",\"pt\",\"3,4\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(1,2)\",\"pt\",\"3,4\", \"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist(3,4)\",\"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist()\",\"pt\",\"3,4\",\"sfield\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \"q\",\"geodist($a,$b)\",\"a\",\"3,4\",\"b\",\"store\", \"fq\",\"id:100\",\"fl\",\"id,score\")\n      ,\"/response/docs/[0]/score==314.40338\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testLatLon().mjava","sourceNew":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatLon() throws Exception {\n    assertU(adoc(\"id\", \"100\", \"store\", \"1,2\"));\n    assertU(commit());\n   \n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2,3,4)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // throw in some decimal points\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1.0,2,3,4.0)\",\n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // default to reading pt first\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(1,2)\",\n                 \"pt\",\"3,4\", \n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             , \"/response/docs/[0]/score==314.40338\"\n             );\n\n    // if pt missing, use sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist(3,4)\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n    \n    // read both pt and sfield\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist()\",\"pt\",\"3,4\",\n                 \"sfield\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n    // param substitution\n    assertJQ(req(\"defType\",\"func\", \n                 \"q\",\"geodist($a,$b)\",\n                 \"a\",\"3,4\",\n                 \"b\",\"store\", \n                 \"fq\",\"id:100\",\n                 \"fl\",\"id,score\")\n             , 1e-5\n             ,\"/response/docs/[0]/score==314.40338\"\n             );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7395bdaa5646a7eb2087b1043b713b4bf3294a5c":["a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a88da65f7210ad629e64c0553232a63d5d1bdc7c","7395bdaa5646a7eb2087b1043b713b4bf3294a5c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"c26f00b574427b55127e869b935845554afde1fa":["7395bdaa5646a7eb2087b1043b713b4bf3294a5c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a88da65f7210ad629e64c0553232a63d5d1bdc7c","7395bdaa5646a7eb2087b1043b713b4bf3294a5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7395bdaa5646a7eb2087b1043b713b4bf3294a5c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"a88da65f7210ad629e64c0553232a63d5d1bdc7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7395bdaa5646a7eb2087b1043b713b4bf3294a5c":["c3a8a449466c1ff7ce2274fe73dab487256964b4","c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a88da65f7210ad629e64c0553232a63d5d1bdc7c":["7395bdaa5646a7eb2087b1043b713b4bf3294a5c","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}