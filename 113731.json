{"path":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","commits":[{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getFactory());\n      this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n    }\n    initialize (size);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2cde89023a8de29c97ea8bb196d698011591bb5b","2275c46fba03d235b53596f1b08c77ad11a24459"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba534479820dee396d07f520ba2a55400a1b6e7d","date":1085439102,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getLocale(), fields[i].getFactory());\n      this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n    }\n    initialize (size);\n  }\n\n","sourceOld":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getFactory());\n      this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n    }\n    initialize (size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2cde89023a8de29c97ea8bb196d698011591bb5b","date":1138899326,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  public FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getLocale(), fields[i].getFactory());\n      this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n    }\n    initialize (size);\n  }\n\n","sourceOld":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getLocale(), fields[i].getFactory());\n      this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n    }\n    initialize (size);\n  }\n\n","bugFix":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2275c46fba03d235b53596f1b08c77ad11a24459","date":1144296129,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  public FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getLocale(), fields[i].getFactory());\n      \n      if (comparators[i].sortType() == SortField.STRING) {\n    \t  this.fields[i] = new SortField (fieldname, fields[i].getLocale(), fields[i].getReverse());\n      } else {\n    \t  this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n      }\n    }\n    initialize (size);\n  }\n\n","sourceOld":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  public FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getLocale(), fields[i].getFactory());\n      this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n    }\n    initialize (size);\n  }\n\n","bugFix":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Fieldable names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  public FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getLocale(), fields[i].getFactory());\n      \n      if (comparators[i].sortType() == SortField.STRING) {\n    \t  this.fields[i] = new SortField (fieldname, fields[i].getLocale(), fields[i].getReverse());\n      } else {\n    \t  this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n      }\n    }\n    initialize (size);\n  }\n\n","sourceOld":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  public FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getLocale(), fields[i].getFactory());\n      \n      if (comparators[i].sortType() == SortField.STRING) {\n    \t  this.fields[i] = new SortField (fieldname, fields[i].getLocale(), fields[i].getReverse());\n      } else {\n    \t  this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n      }\n    }\n    initialize (size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3766097c9c41a30d67e9b548c62d017abf8e07ac","date":1228770465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Fieldable names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  public FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getParser(), fields[i].getLocale(), fields[i].getFactory());\n      // new SortField instances must only be created when auto-detection is in use\n      if (fields[i].getType() == SortField.AUTO) {\n        if (comparators[i].sortType() == SortField.STRING) {\n          this.fields[i] = new SortField (fieldname, fields[i].getLocale(), fields[i].getReverse());\n        } else {\n          this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n        }\n      } else {\n        assert comparators[i].sortType() == fields[i].getType();\n        this.fields[i] = fields[i];\n      }\n    }\n    initialize (size);\n  }\n\n","sourceOld":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Fieldable names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  public FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getLocale(), fields[i].getFactory());\n      \n      if (comparators[i].sortType() == SortField.STRING) {\n    \t  this.fields[i] = new SortField (fieldname, fields[i].getLocale(), fields[i].getReverse());\n      } else {\n    \t  this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n      }\n    }\n    initialize (size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Fieldable names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  public FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      // AUTO is resolved before we are called\n      assert fields[i].getType() != SortField.AUTO;\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getParser(), fields[i].getLocale(), fields[i].getFactory());\n      this.fields[i] = fields[i];\n    }\n    initialize (size);\n  }\n\n","sourceOld":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Fieldable names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  public FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getParser(), fields[i].getLocale(), fields[i].getFactory());\n      // new SortField instances must only be created when auto-detection is in use\n      if (fields[i].getType() == SortField.AUTO) {\n        if (comparators[i].sortType() == SortField.STRING) {\n          this.fields[i] = new SortField (fieldname, fields[i].getLocale(), fields[i].getReverse());\n        } else {\n          this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n        }\n      } else {\n        assert comparators[i].sortType() == fields[i].getType();\n        this.fields[i] = fields[i];\n      }\n    }\n    initialize (size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e62a8c7e41b44cd847fdb555295e92c601615cd","date":1240576210,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Fieldable names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  public FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getParser(), fields[i].getLocale(), fields[i].getFactory());\n      // new SortField instances must only be created when auto-detection is in use\n      if (fields[i].getType() == SortField.AUTO) {\n        if (comparators[i].sortType() == SortField.STRING) {\n          this.fields[i] = new SortField (fieldname, fields[i].getLocale(), fields[i].getReverse());\n        } else {\n          this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n        }\n      } else {\n        assert comparators[i].sortType() == fields[i].getType();\n        this.fields[i] = fields[i];\n      }\n    }\n    initialize (size);\n  }\n\n","sourceOld":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Fieldable names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  public FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      // AUTO is resolved before we are called\n      assert fields[i].getType() != SortField.AUTO;\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getParser(), fields[i].getLocale(), fields[i].getFactory());\n      this.fields[i] = fields[i];\n    }\n    initialize (size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#FieldSortedHitQueue(IndexReader,SortField[],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * @param reader  Index to use.\n   * @param fields Fieldable names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.\n   * @param size  The number of hits to retain.  Must be greater than zero.\n   * @throws IOException\n   */\n  public FieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)\n  throws IOException {\n    final int n = fields.length;\n    comparators = new ScoreDocComparator[n];\n    this.fields = new SortField[n];\n    for (int i=0; i<n; ++i) {\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getParser(), fields[i].getLocale(), fields[i].getFactory());\n      // new SortField instances must only be created when auto-detection is in use\n      if (fields[i].getType() == SortField.AUTO) {\n        if (comparators[i].sortType() == SortField.STRING) {\n          this.fields[i] = new SortField (fieldname, fields[i].getLocale(), fields[i].getReverse());\n        } else {\n          this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());\n        }\n      } else {\n        assert comparators[i].sortType() == fields[i].getType();\n        this.fields[i] = fields[i];\n      }\n    }\n    initialize (size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e62a8c7e41b44cd847fdb555295e92c601615cd":["63bc3238545c6012bd44f5d294077997f236bc4e"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2cde89023a8de29c97ea8bb196d698011591bb5b":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["9e62a8c7e41b44cd847fdb555295e92c601615cd"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["2275c46fba03d235b53596f1b08c77ad11a24459"],"2275c46fba03d235b53596f1b08c77ad11a24459":["2cde89023a8de29c97ea8bb196d698011591bb5b"],"63bc3238545c6012bd44f5d294077997f236bc4e":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"]},"commit2Childs":{"9e62a8c7e41b44cd847fdb555295e92c601615cd":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["63bc3238545c6012bd44f5d294077997f236bc4e"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"2cde89023a8de29c97ea8bb196d698011591bb5b":["2275c46fba03d235b53596f1b08c77ad11a24459"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"2275c46fba03d235b53596f1b08c77ad11a24459":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"63bc3238545c6012bd44f5d294077997f236bc4e":["9e62a8c7e41b44cd847fdb555295e92c601615cd"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["2cde89023a8de29c97ea8bb196d698011591bb5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}