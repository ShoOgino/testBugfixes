{"path":"src/java/org/apache/lucene/search/Similarity#queryNorm(float).mjava","commits":[{"id":"6f5efa46fb27648cd98137d9898d819e115911bc","date":1036690287,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#queryNorm(float).mjava","pathOld":"/dev/null","sourceNew":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is then multipled into the\n   * weight of each query term.\n   *\n   * <p>This does not affect ranking, but rather just attempts to make scores\n   * from different queries comparable.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c68f8c7d87a73103757b46f85d9d84c9657b99ba","date":1252551770,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#queryNorm(float).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#queryNorm(float).mjava","sourceNew":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is multiplied into the\n   * weight of each query term. While the classic query normalization factor is\n   * computed as 1/sqrt(sumOfSquaredWeights), other implementations might\n   * completely ignore sumOfSquaredWeights (ie return 1).\n   *\n   * <p>This does not affect ranking, but the default implementation does make scores\n   * from different queries more comparable than they would be by eliminating the\n   * magnitude of the Query vector as a factor in the score.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","sourceOld":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is then multipled into the\n   * weight of each query term.\n   *\n   * <p>This does not affect ranking, but rather just attempts to make scores\n   * from different queries comparable.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#queryNorm(float).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#queryNorm(float).mjava","sourceNew":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is multiplied into the\n   * weight of each query term. While the classic query normalization factor is\n   * computed as 1/sqrt(sumOfSquaredWeights), other implementations might\n   * completely ignore sumOfSquaredWeights (ie return 1).\n   *\n   * <p>This does not affect ranking, but the default implementation does make scores\n   * from different queries more comparable than they would be by eliminating the\n   * magnitude of the Query vector as a factor in the score.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","sourceOld":"  /** Computes the normalization value for a query given the sum of the squared\n   * weights of each of the query terms.  This value is multiplied into the\n   * weight of each query term. While the classic query normalization factor is\n   * computed as 1/sqrt(sumOfSquaredWeights), other implementations might\n   * completely ignore sumOfSquaredWeights (ie return 1).\n   *\n   * <p>This does not affect ranking, but the default implementation does make scores\n   * from different queries more comparable than they would be by eliminating the\n   * magnitude of the Query vector as a factor in the score.\n   *\n   * @param sumOfSquaredWeights the sum of the squares of query term weights\n   * @return a normalization factor for query weights\n   */\n  public abstract float queryNorm(float sumOfSquaredWeights);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c68f8c7d87a73103757b46f85d9d84c9657b99ba":["6f5efa46fb27648cd98137d9898d819e115911bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f5efa46fb27648cd98137d9898d819e115911bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c68f8c7d87a73103757b46f85d9d84c9657b99ba"]},"commit2Childs":{"c68f8c7d87a73103757b46f85d9d84c9657b99ba":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f5efa46fb27648cd98137d9898d819e115911bc"],"6f5efa46fb27648cd98137d9898d819e115911bc":["c68f8c7d87a73103757b46f85d9d84c9657b99ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}