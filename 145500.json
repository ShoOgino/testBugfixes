{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"768c48159710aa63efa67c049db149c35c4f423a","date":1323797698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n      \n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n      \n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"065d530f7c7a67789e972c4611cd4b2bd28a07e9","date":1324000361,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    return newFSDirectory(f, lf, true);\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n      \n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f592e183306e8e4efabf3e7e08d3e709c9b97dbb","date":1324403520,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n      \n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, maybeNRTWrap(random, fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    return newFSDirectory(f, lf, true);\n  }\n\n","bugFix":["065d530f7c7a67789e972c4611cd4b2bd28a07e9"],"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n      \n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, maybeNRTWrap(random, fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n      \n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, maybeNRTWrap(random, fsdir));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f592e183306e8e4efabf3e7e08d3e709c9b97dbb":["065d530f7c7a67789e972c4611cd4b2bd28a07e9"],"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["7b91922b55d15444d554721b352861d028eb8278","768c48159710aa63efa67c049db149c35c4f423a"],"768c48159710aa63efa67c049db149c35c4f423a":["7b91922b55d15444d554721b352861d028eb8278"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"065d530f7c7a67789e972c4611cd4b2bd28a07e9":["768c48159710aa63efa67c049db149c35c4f423a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"f592e183306e8e4efabf3e7e08d3e709c9b97dbb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7b91922b55d15444d554721b352861d028eb8278":["4ceb6a6c707ada1df8bde804e25c98668e699a18","768c48159710aa63efa67c049db149c35c4f423a"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"768c48159710aa63efa67c049db149c35c4f423a":["4ceb6a6c707ada1df8bde804e25c98668e699a18","065d530f7c7a67789e972c4611cd4b2bd28a07e9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"065d530f7c7a67789e972c4611cd4b2bd28a07e9":["f592e183306e8e4efabf3e7e08d3e709c9b97dbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}