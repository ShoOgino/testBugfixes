{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","sourceNew":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","sourceNew":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","sourceNew":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","sourceNew":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","sourceNew":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","sourceNew":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    searcher.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/quality/TestQualityRun#testTrecQuality().mjava","sourceNew":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTrecQuality() throws Exception {\n    // first create the partial reuters index\n    createReutersIndex();\n    \n    int maxResults = 1000;\n    String docNameField = \"doctitle\"; // orig docID is in the linedoc format title \n    \n    PrintWriter logger = VERBOSE ? new PrintWriter(System.out,true) : null;\n   \n    // prepare topics\n    InputStream topics = getClass().getResourceAsStream(\"trecTopics.txt\");\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new InputStreamReader(topics, \"UTF-8\")));\n    \n    // prepare judge\n    InputStream qrels = getClass().getResourceAsStream(\"trecQRels.txt\");\n    Judge judge = new TrecJudge(new BufferedReader(new InputStreamReader(qrels, \"UTF-8\")));\n    \n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n    \n    Directory dir = newFSDirectory(new File(getWorkDir(),\"index\"));\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\",\"body\");\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    \n    SubmissionReport submitLog = VERBOSE ? new SubmissionReport(logger, \"TestRun\") : null;\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n    \n    // --------- verify by the way judgments were altered for this test:\n    // for some queries, depending on m = qnum % 8\n    // m==0: avg_precision and recall are hurt, by marking fake docs as relevant\n    // m==1: precision_at_n and avg_precision are hurt, by unmarking relevant docs\n    // m==2: all precision, precision_at_n and recall are hurt.\n    // m>=3: these queries remain perfect\n    for (int i = 0; i < stats.length; i++) {\n      QualityStats s = stats[i];\n      switch (i%8) {\n\n      case 0:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n        break;\n      \n      case 1:\n        assertTrue(\"avg-p should be hurt\", 1.0 > s.getAvp());\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      case 2:\n        assertTrue(\"avg-p should be hurt: \"+s.getAvp(), 1.0 > s.getAvp());\n        assertTrue(\"recall should be hurt: \"+s.getRecall(), 1.0 > s.getRecall());\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertTrue(\"p_at_\"+j+\" should be hurt: \"+s.getPrecisionAt(j), 1.0 > s.getPrecisionAt(j));\n        }\n        break;\n\n      default: {\n        assertEquals(\"avg-p should be perfect: \"+s.getAvp(), 1.0, s.getAvp(), 1E-2);\n        assertEquals(\"recall should be perfect: \"+s.getRecall(), 1.0, s.getRecall(), 1E-2);\n        for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n          assertEquals(\"p_at_\"+j+\" should be perfect: \"+s.getPrecisionAt(j), 1.0, s.getPrecisionAt(j), 1E-2);\n        }\n      }\n      \n      }\n    }\n    \n    QualityStats avg = QualityStats.average(stats);\n    if (logger!=null) {\n      avg.log(\"Average statistis:\",1,logger,\"  \");\n    }\n    \n    assertTrue(\"mean avg-p should be hurt: \"+avg.getAvp(), 1.0 > avg.getAvp());\n    assertTrue(\"avg recall should be hurt: \"+avg.getRecall(), 1.0 > avg.getRecall());\n    for (int j = 1; j <= QualityStats.MAX_POINTS; j++) {\n      assertTrue(\"avg p_at_\"+j+\" should be hurt: \"+avg.getPrecisionAt(j), 1.0 > avg.getPrecisionAt(j));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","a3a0403b45dfe384fae4a1b6e96c3265d000c498","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["b89678825b68eccaf09e6ab71675fc0b0af1e099","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}