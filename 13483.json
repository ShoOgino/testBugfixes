{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCovMatrix().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCovMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCovMatrix().mjava","sourceNew":"  @Test\n  public void testCovMatrix() throws Exception {\n    String cexpr = \"let(a=array(1,2,3), b=array(2,4,6), c=array(4, 8, 12), d=transpose(matrix(a, b, c)), f=cov(d))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cm = (List<List<Number>>)tuples.get(0).get(\"f\");\n    assertEquals(cm.size(), 3);\n    List<Number> row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).longValue(), 1);\n    assertEquals(row1.get(1).longValue(), 2);\n    assertEquals(row1.get(2).longValue(), 4);\n\n    List<Number> row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).longValue(), 2);\n    assertEquals(row2.get(1).longValue(), 4);\n    assertEquals(row2.get(2).longValue(), 8);\n\n    List<Number> row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).longValue(), 4);\n    assertEquals(row3.get(1).longValue(), 8);\n    assertEquals(row3.get(2).longValue(), 16);\n  }\n\n","sourceOld":"  @Test\n  public void testCovMatrix() throws Exception {\n    String cexpr = \"let(a=array(1,2,3), b=array(2,4,6), c=array(4, 8, 12), d=transpose(matrix(a, b, c)), f=cov(d))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cm = (List<List<Number>>)tuples.get(0).get(\"f\");\n    assertEquals(cm.size(), 3);\n    List<Number> row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).longValue(), 1);\n    assertEquals(row1.get(1).longValue(), 2);\n    assertEquals(row1.get(2).longValue(), 4);\n\n    List<Number> row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).longValue(), 2);\n    assertEquals(row2.get(1).longValue(), 4);\n    assertEquals(row2.get(2).longValue(), 8);\n\n    List<Number> row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).longValue(), 4);\n    assertEquals(row3.get(1).longValue(), 8);\n    assertEquals(row3.get(2).longValue(), 16);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCovMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCovMatrix().mjava","sourceNew":"  @Test\n  public void testCovMatrix() throws Exception {\n    String cexpr = \"let(a=array(1,2,3), b=array(2,4,6), c=array(4, 8, 12), d=transpose(matrix(a, b, c)), f=cov(d))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> cm = (List<List<Number>>)tuples.get(0).get(\"f\");\n    assertEquals(cm.size(), 3);\n    List<Number> row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).longValue(), 1);\n    assertEquals(row1.get(1).longValue(), 2);\n    assertEquals(row1.get(2).longValue(), 4);\n\n    List<Number> row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).longValue(), 2);\n    assertEquals(row2.get(1).longValue(), 4);\n    assertEquals(row2.get(2).longValue(), 8);\n\n    List<Number> row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).longValue(), 4);\n    assertEquals(row3.get(1).longValue(), 8);\n    assertEquals(row3.get(2).longValue(), 16);\n  }\n\n","sourceOld":"  @Test\n  public void testCovMatrix() throws Exception {\n    String cexpr = \"let(a=array(1,2,3), b=array(2,4,6), c=array(4, 8, 12), d=transpose(matrix(a, b, c)), f=cov(d))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cm = (List<List<Number>>)tuples.get(0).get(\"f\");\n    assertEquals(cm.size(), 3);\n    List<Number> row1 = cm.get(0);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).longValue(), 1);\n    assertEquals(row1.get(1).longValue(), 2);\n    assertEquals(row1.get(2).longValue(), 4);\n\n    List<Number> row2 = cm.get(1);\n    assertEquals(row2.size(), 3);\n    assertEquals(row2.get(0).longValue(), 2);\n    assertEquals(row2.get(1).longValue(), 4);\n    assertEquals(row2.get(2).longValue(), 8);\n\n    List<Number> row3 = cm.get(2);\n    assertEquals(row3.size(), 3);\n    assertEquals(row3.get(0).longValue(), 4);\n    assertEquals(row3.get(1).longValue(), 8);\n    assertEquals(row3.get(2).longValue(), 16);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}