{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.HavingTranslator#translateAnd(RexNode).mjava","commits":[{"id":"d5cb41f0427fb7a75b0bfefe992561738c11fd80","date":1486576891,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.HavingTranslator#translateAnd(RexNode).mjava","pathOld":"/dev/null","sourceNew":"    private String translateAnd(RexNode node0) {\n      List<String> andStrings = new ArrayList();\n      List<String> notStrings = new ArrayList();\n\n      List<RexNode> ands = new ArrayList();\n      List<RexNode> nots = new ArrayList();\n\n      RelOptUtil.decomposeConjunction(node0, ands, nots);\n\n      for (RexNode node : ands) {\n        andStrings.add(translateMatch(node));\n      }\n\n      StringBuilder builder = new StringBuilder();\n\n      builder.append(\"and(\");\n      for (int i = 0; i < andStrings.size(); i++) {\n        if (i > 0) {\n          builder.append(\",\");\n        }\n\n        builder.append(andStrings.get(i));\n      }\n      builder.append(\")\");\n\n\n      if (nots.size() > 0) {\n        for (RexNode node : nots) {\n          notStrings.add(translateMatch(node));\n        }\n\n        StringBuilder notBuilder = new StringBuilder();\n        for(int i=0; i< notStrings.size(); i++) {\n          if(i > 0) {\n            notBuilder.append(\",\");\n          }\n          notBuilder.append(\"not(\");\n          notBuilder.append(notStrings.get(i));\n          notBuilder.append(\")\");\n        }\n\n        return \"and(\" + builder.toString() + \",\"+ notBuilder.toString()+\")\";\n      } else {\n        return builder.toString();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.HavingTranslator#translateAnd(RexNode).mjava","pathOld":"/dev/null","sourceNew":"    private String translateAnd(RexNode node0) {\n      List<String> andStrings = new ArrayList();\n      List<String> notStrings = new ArrayList();\n\n      List<RexNode> ands = new ArrayList();\n      List<RexNode> nots = new ArrayList();\n\n      RelOptUtil.decomposeConjunction(node0, ands, nots);\n\n      for (RexNode node : ands) {\n        andStrings.add(translateMatch(node));\n      }\n\n      StringBuilder builder = new StringBuilder();\n\n      builder.append(\"and(\");\n      for (int i = 0; i < andStrings.size(); i++) {\n        if (i > 0) {\n          builder.append(\",\");\n        }\n\n        builder.append(andStrings.get(i));\n      }\n      builder.append(\")\");\n\n\n      if (nots.size() > 0) {\n        for (RexNode node : nots) {\n          notStrings.add(translateMatch(node));\n        }\n\n        StringBuilder notBuilder = new StringBuilder();\n        for(int i=0; i< notStrings.size(); i++) {\n          if(i > 0) {\n            notBuilder.append(\",\");\n          }\n          notBuilder.append(\"not(\");\n          notBuilder.append(notStrings.get(i));\n          notBuilder.append(\")\");\n        }\n\n        return \"and(\" + builder.toString() + \",\"+ notBuilder.toString()+\")\";\n      } else {\n        return builder.toString();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.HavingTranslator#translateAnd(RexNode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.HavingTranslator#translateAnd(RexNode).mjava","sourceNew":"    private String translateAnd(RexNode node0) {\n      List<String> andStrings = new ArrayList<>();\n      List<String> notStrings = new ArrayList<>();\n\n      List<RexNode> ands = new ArrayList<>();\n      List<RexNode> nots = new ArrayList<>();\n\n      RelOptUtil.decomposeConjunction(node0, ands, nots);\n\n      for (RexNode node : ands) {\n        andStrings.add(translateMatch(node));\n      }\n\n      StringBuilder builder = new StringBuilder();\n\n      builder.append(\"and(\");\n      for (int i = 0; i < andStrings.size(); i++) {\n        if (i > 0) {\n          builder.append(\",\");\n        }\n\n        builder.append(andStrings.get(i));\n      }\n      builder.append(\")\");\n\n\n      if (nots.size() > 0) {\n        for (RexNode node : nots) {\n          notStrings.add(translateMatch(node));\n        }\n\n        StringBuilder notBuilder = new StringBuilder();\n        for(int i=0; i< notStrings.size(); i++) {\n          if(i > 0) {\n            notBuilder.append(\",\");\n          }\n          notBuilder.append(\"not(\");\n          notBuilder.append(notStrings.get(i));\n          notBuilder.append(\")\");\n        }\n\n        return \"and(\" + builder.toString() + \",\"+ notBuilder.toString()+\")\";\n      } else {\n        return builder.toString();\n      }\n    }\n\n","sourceOld":"    private String translateAnd(RexNode node0) {\n      List<String> andStrings = new ArrayList();\n      List<String> notStrings = new ArrayList();\n\n      List<RexNode> ands = new ArrayList();\n      List<RexNode> nots = new ArrayList();\n\n      RelOptUtil.decomposeConjunction(node0, ands, nots);\n\n      for (RexNode node : ands) {\n        andStrings.add(translateMatch(node));\n      }\n\n      StringBuilder builder = new StringBuilder();\n\n      builder.append(\"and(\");\n      for (int i = 0; i < andStrings.size(); i++) {\n        if (i > 0) {\n          builder.append(\",\");\n        }\n\n        builder.append(andStrings.get(i));\n      }\n      builder.append(\")\");\n\n\n      if (nots.size() > 0) {\n        for (RexNode node : nots) {\n          notStrings.add(translateMatch(node));\n        }\n\n        StringBuilder notBuilder = new StringBuilder();\n        for(int i=0; i< notStrings.size(); i++) {\n          if(i > 0) {\n            notBuilder.append(\",\");\n          }\n          notBuilder.append(\"not(\");\n          notBuilder.append(notStrings.get(i));\n          notBuilder.append(\")\");\n        }\n\n        return \"and(\" + builder.toString() + \",\"+ notBuilder.toString()+\")\";\n      } else {\n        return builder.toString();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}