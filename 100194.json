{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, 0);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, 0);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, 0);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, 0);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, 0);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, 0);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, 0);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, 0);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640","a4d374b2bebd0d52acaa61038fbf23068620fba7"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","02331260bb246364779cb6f04919ca47900d01bb"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["f45457a742a53533c348c4b990b1c579ff364467"],"f45457a742a53533c348c4b990b1c579ff364467":["02331260bb246364779cb6f04919ca47900d01bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"02331260bb246364779cb6f04919ca47900d01bb":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"f45457a742a53533c348c4b990b1c579ff364467":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"02331260bb246364779cb6f04919ca47900d01bb":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","f45457a742a53533c348c4b990b1c579ff364467"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}