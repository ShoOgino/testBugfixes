{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","commits":[{"id":"709714c6ee47950678dd2d2ef4e0473886909226","date":1407339661,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass)) {\n          toolClasses.add((Class<Tool>) theClass);\n        }\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      //e.printStackTrace();\n    }\n    return toolClasses;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6985d2d06f6096c93a00bb73a94e89ae28431be1","date":1411398680,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass)) {\n          toolClasses.add((Class<Tool>) theClass);\n        }\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      //e.printStackTrace();\n    }\n    return toolClasses;\n  }\n\n","sourceOld":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass)) {\n          toolClasses.add((Class<Tool>) theClass);\n        }\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      //e.printStackTrace();\n    }\n    return toolClasses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"209c0259a9b7087b2111411ec790d6557ef86307","date":1419393649,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      //e.printStackTrace();\n    }\n    return toolClasses;\n  }\n\n","sourceOld":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass)) {\n          toolClasses.add((Class<Tool>) theClass);\n        }\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      //e.printStackTrace();\n    }\n    return toolClasses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","sourceOld":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      //e.printStackTrace();\n    }\n    return toolClasses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a2748831fb25b0e9d5a4c315047bf877c887460","date":1498155650,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","sourceOld":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","sourceOld":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","sourceOld":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","sourceOld":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","sourceOld":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","sourceOld":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n\n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","sourceOld":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n      \n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n\n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in {}, due to: \", packageName, e);\n    }\n    return toolClasses;\n  }\n\n","sourceOld":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n\n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in \"+packageName+\" due to: \"+e);\n    }\n    return toolClasses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee8fbffa595c312bc0437f2c9bb6376a29c1b427","date":1589412657,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#findToolClassesInPackage(String).mjava","sourceNew":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n\n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in {}, due to: \", packageName, e);\n    }\n    return toolClasses;\n  }\n\n","sourceOld":"  /**\n   * Scans Jar files on the classpath for Tool implementations to activate.\n   */\n  @SuppressWarnings(\"unchecked\")\n  private static List<Class<Tool>> findToolClassesInPackage(String packageName) {\n    List<Class<Tool>> toolClasses = new ArrayList<Class<Tool>>();\n    try {\n      ClassLoader classLoader = SolrCLI.class.getClassLoader();\n      String path = packageName.replace('.', '/');\n      Enumeration<URL> resources = classLoader.getResources(path);\n      Set<String> classes = new TreeSet<String>();\n      while (resources.hasMoreElements()) {\n        URL resource = (URL) resources.nextElement();\n        classes.addAll(findClasses(resource.getFile(), packageName));\n      }\n\n      for (String classInPackage : classes) {\n        Class<?> theClass = Class.forName(classInPackage);\n        if (Tool.class.isAssignableFrom(theClass))\n          toolClasses.add((Class<Tool>) theClass);\n      }\n    } catch (Exception e) {\n      // safe to squelch this as it's just looking for tools to run\n      log.debug(\"Failed to find Tool impl classes in {}, due to: \", packageName, e);\n    }\n    return toolClasses;\n  }\n\n","bugFix":["709714c6ee47950678dd2d2ef4e0473886909226"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["4ca20be81c9284c840498143264e583ccbb8525a","5a2748831fb25b0e9d5a4c315047bf877c887460"],"28288370235ed02234a64753cdbf0c6ec096304a":["4ca20be81c9284c840498143264e583ccbb8525a","5a2748831fb25b0e9d5a4c315047bf877c887460"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["28288370235ed02234a64753cdbf0c6ec096304a"],"4ca20be81c9284c840498143264e583ccbb8525a":["209c0259a9b7087b2111411ec790d6557ef86307"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28288370235ed02234a64753cdbf0c6ec096304a","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"709714c6ee47950678dd2d2ef4e0473886909226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a2748831fb25b0e9d5a4c315047bf877c887460":["4ca20be81c9284c840498143264e583ccbb8525a"],"209c0259a9b7087b2111411ec790d6557ef86307":["6985d2d06f6096c93a00bb73a94e89ae28431be1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"6985d2d06f6096c93a00bb73a94e89ae28431be1":["709714c6ee47950678dd2d2ef4e0473886909226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["28288370235ed02234a64753cdbf0c6ec096304a","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["b79a5db147a1c6f95d1625ddbc3561ef56955225","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4ca20be81c9284c840498143264e583ccbb8525a":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","5a2748831fb25b0e9d5a4c315047bf877c887460"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5a2748831fb25b0e9d5a4c315047bf877c887460":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"709714c6ee47950678dd2d2ef4e0473886909226":["6985d2d06f6096c93a00bb73a94e89ae28431be1"],"209c0259a9b7087b2111411ec790d6557ef86307":["4ca20be81c9284c840498143264e583ccbb8525a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["709714c6ee47950678dd2d2ef4e0473886909226"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"6985d2d06f6096c93a00bb73a94e89ae28431be1":["209c0259a9b7087b2111411ec790d6557ef86307"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}