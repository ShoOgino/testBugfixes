{"path":"modules/spatial/src/test/org/apache/lucene/spatial/base/prefix/SpatialPrefixTreeTest#testNodeTraverse().mjava","commits":[{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/org/apache/lucene/spatial/base/prefix/SpatialPrefixTreeTest#testNodeTraverse().mjava","pathOld":"modules/spatial/src/test/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTreeTest#testNodeTraverse().mjava","sourceNew":"  @Test\n  public void testNodeTraverse() {\n    Node prevN = null;\n    Node n = trie.getWorldNode();\n    assertEquals(0,n.getLevel());\n    assertEquals(ctx.getWorldBounds(),n.getShape());\n    while(n.getLevel() < trie.getMaxLevels()) {\n      prevN = n;\n      n = n.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevN.getLevel()+1,n.getLevel());\n      Rectangle prevNShape = (Rectangle) prevN.getShape();\n      Shape s = n.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeTraverse() {\n    Node prevN = null;\n    Node n = trie.getWorldNode();\n    assertEquals(0,n.getLevel());\n    assertEquals(ctx.getWorldBounds(),n.getShape());\n    while(n.getLevel() < trie.getMaxLevels()) {\n      prevN = n;\n      n = n.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevN.getLevel()+1,n.getLevel());\n      Rectangle prevNShape = (Rectangle) prevN.getShape();\n      Shape s = n.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ee89d976c91275e5be5da438ca0977b1c5b90f","date":1329808149,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/base/prefix/SpatialPrefixTreeTest#testNodeTraverse().mjava","pathOld":"modules/spatial/src/test/org/apache/lucene/spatial/base/prefix/SpatialPrefixTreeTest#testNodeTraverse().mjava","sourceNew":"  @Test\n  public void testNodeTraverse() {\n    Node prevN = null;\n    Node n = trie.getWorldNode();\n    assertEquals(0,n.getLevel());\n    assertEquals(ctx.getWorldBounds(),n.getShape());\n    while(n.getLevel() < trie.getMaxLevels()) {\n      prevN = n;\n      n = n.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevN.getLevel()+1,n.getLevel());\n      Rectangle prevNShape = (Rectangle) prevN.getShape();\n      Shape s = n.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeTraverse() {\n    Node prevN = null;\n    Node n = trie.getWorldNode();\n    assertEquals(0,n.getLevel());\n    assertEquals(ctx.getWorldBounds(),n.getShape());\n    while(n.getLevel() < trie.getMaxLevels()) {\n      prevN = n;\n      n = n.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevN.getLevel()+1,n.getLevel());\n      Rectangle prevNShape = (Rectangle) prevN.getShape();\n      Shape s = n.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["33ee89d976c91275e5be5da438ca0977b1c5b90f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33ee89d976c91275e5be5da438ca0977b1c5b90f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["33ee89d976c91275e5be5da438ca0977b1c5b90f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}