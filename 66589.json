{"path":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map).mjava","commits":[{"id":"d3ab91f3bb602daf6393fa7f78b11afd3400d669","date":1243282044,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(String).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit.  You can only call this\n   *  when autoCommit is false.  This method does all steps\n   *  necessary to commit changes since this writer was\n   *  opened: flushes pending added and deleted docs, syncs\n   *  the index files, writes most of next segments_N file.\n   *  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself, for example if open with\n   *  autoCommit=true, or, during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.  Therefore it's best to use this\n   *  feature only when autoCommit is false.\n   */\n  public final void prepareCommit(Map commitUserData) throws CorruptIndexException, IOException {\n    prepareCommit(commitUserData, false);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData String.  This does the first phase of\n   *  2-phase commit.  You can only call this when\n   *  autoCommit is false.  This method does all steps\n   *  necessary to commit changes since this writer was\n   *  opened: flushes pending added and deleted docs, syncs\n   *  the index files, writes most of next segments_N file.\n   *  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(String)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque String that's recorded\n   *  into the segments file in the index, and retrievable\n   *  by {@link IndexReader#getCommitUserData}.  Note that\n   *  when IndexWriter commits itself, for example if open\n   *  with autoCommit=true, or, during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.  Therefore it's best to use this\n   *  feature only when autoCommit is false.\n   */\n  public final void prepareCommit(String commitUserData) throws CorruptIndexException, IOException {\n    prepareCommit(commitUserData, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map commitUserData) throws CorruptIndexException, IOException {\n    prepareCommit(commitUserData, false);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit.  You can only call this\n   *  when autoCommit is false.  This method does all steps\n   *  necessary to commit changes since this writer was\n   *  opened: flushes pending added and deleted docs, syncs\n   *  the index files, writes most of next segments_N file.\n   *  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself, for example if open with\n   *  autoCommit=true, or, during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.  Therefore it's best to use this\n   *  feature only when autoCommit is false.\n   */\n  public final void prepareCommit(Map commitUserData) throws CorruptIndexException, IOException {\n    prepareCommit(commitUserData, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8","date":1255049357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true, true);\n\n    startCommit(0, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map commitUserData) throws CorruptIndexException, IOException {\n    prepareCommit(commitUserData, false);\n  }\n\n","bugFix":null,"bugIntro":["f241b963c5bcd6c2293a928059dd2d64988a6042","c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map[String,String]).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#prepareCommit(Map).mjava","sourceNew":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map<String,String> commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true, true);\n\n    startCommit(0, commitUserData);\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit, specifying\n   *  commitUserData Map (String -> String).  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   * \n   *  You can also just call {@link #commit(Map)} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   *\n   *  @param commitUserData Opaque Map (String->String)\n   *  that's recorded into the segments file in the index,\n   *  and retrievable by {@link\n   *  IndexReader#getCommitUserData}.  Note that when\n   *  IndexWriter commits itself during {@link #close}, the\n   *  commitUserData is unchanged (just carried over from\n   *  the prior commit).  If this is null then the previous\n   *  commitUserData is kept.  Also, the commitUserData will\n   *  only \"stick\" if there are actually changes in the\n   *  index to commit.\n   */\n  public final void prepareCommit(Map commitUserData) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    if (pendingCommit != null)\n      throw new IllegalStateException(\"prepareCommit was already called with no corresponding call to commit\");\n\n    if (infoStream != null)\n      message(\"prepareCommit: flush\");\n\n    flush(true, true, true);\n\n    startCommit(0, commitUserData);\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ef82ff03e4016c705811b2658e81471a645c0e49":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["87c966e9308847938a7c905c2e46a56d8df788b8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"ef82ff03e4016c705811b2658e81471a645c0e49":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["ef82ff03e4016c705811b2658e81471a645c0e49"],"87c966e9308847938a7c905c2e46a56d8df788b8":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}