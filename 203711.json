{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseScorer#twoPhaseIterator().mjava","commits":[{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseScorer#twoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#twoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    return new TwoPhaseIterator(matcher.approximation) {\n      @Override\n      public boolean matches() throws IOException {\n        matcher.reset();\n        if (scoreMode == ScoreMode.TOP_SCORES && minCompetitiveScore > 0) {\n          float maxFreq = matcher.maxFreq();\n          if (simScorer.score(docID(), maxFreq) < minCompetitiveScore) {\n            // The maximum score we could get is less than the min competitive score\n            return false;\n          }\n        }\n        freq = 0;\n        return matcher.nextMatch();\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    return new TwoPhaseIterator(conjunction) {\n      @Override\n      public boolean matches() throws IOException {\n        if (needsTotalHitCount == false && minCompetitiveScore > 0) {\n          int minFreq = postings[0].postings.freq();\n          for (int i = 1; i < postings.length; ++i) {\n            minFreq = Math.min(postings[i].postings.freq(), minFreq);\n          }\n          if (docScorer.score(docID(), minFreq) < minCompetitiveScore) {\n            // The maximum score we could get is less than the min competitive score\n            return false;\n          }\n        }\n        return phraseFreq() > 0;\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8dd25829321d66cd54ea7d40a4130e0d2a29bec","date":1562680889,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseScorer#twoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseScorer#twoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    return new TwoPhaseIterator(approximation) {\n      @Override\n      public boolean matches() throws IOException {\n        matcher.reset();\n        if (scoreMode == ScoreMode.TOP_SCORES && minCompetitiveScore > 0) {\n          float maxFreq = matcher.maxFreq();\n          if (simScorer.score(docID(), maxFreq) < minCompetitiveScore) {\n            // The maximum score we could get is less than the min competitive score\n            return false;\n          }\n        }\n        freq = 0;\n        return matcher.nextMatch();\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    return new TwoPhaseIterator(matcher.approximation) {\n      @Override\n      public boolean matches() throws IOException {\n        matcher.reset();\n        if (scoreMode == ScoreMode.TOP_SCORES && minCompetitiveScore > 0) {\n          float maxFreq = matcher.maxFreq();\n          if (simScorer.score(docID(), maxFreq) < minCompetitiveScore) {\n            // The maximum score we could get is less than the min competitive score\n            return false;\n          }\n        }\n        freq = 0;\n        return matcher.nextMatch();\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b11b9d5eaf9707760ca5151530830a825197023":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["3b11b9d5eaf9707760ca5151530830a825197023"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"]},"commit2Childs":{"3b11b9d5eaf9707760ca5151530830a825197023":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b11b9d5eaf9707760ca5151530830a825197023"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}