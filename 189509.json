{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testCrashPrimary3().mjava","commits":[{"id":"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","date":1454767455,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testCrashPrimary3().mjava","pathOld":"/dev/null","sourceNew":"  // Crash primary and then restart it, while a replica node is down, then bring replica node back up and make sure it properly \"unforks\" itself\n  public void testCrashPrimary3() throws Exception {\n\n    Path path1 = createTempDir(\"1\");\n    NodeProcess primary = startNode(-1, 0, path1, -1, true);\n\n    Path path2 = createTempDir(\"2\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, path2, -1, true);\n\n    sendReplicasToPrimary(primary, replica);\n\n    // Index 10 docs into primary:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n      for(int i=0;i<10;i++) {\n        Document doc = docs.nextDoc();\n        primary.addOrUpdateDocument(c, doc, false);\n      }\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Wait for replica to sync up:\n    waitForVersionAndHits(replica, primaryVersion1, 10);\n\n    replica.commit();\n\n    replica.close();\n    primary.crash();\n\n    // At this point replica is \"in the future\": it has 10 docs committed, but the primary crashed before committing so it has 0 docs\n\n    // Restart primary:\n    primary = startNode(-1, 0, path1, -1, true);\n\n    // Index 20 docs into primary:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n      for(int i=0;i<20;i++) {\n        Document doc = docs.nextDoc();\n        primary.addOrUpdateDocument(c, doc, false);\n      }\n    }\n\n    // Flush primary, but there are no replicas to sync to:\n    long primaryVersion2 = primary.flush(0);\n\n    // Now restart replica, which on init should detect on a \"lost branch\" because its 10 docs that were committed came from a different\n    // primary node:\n    replica = startNode(primary.tcpPort, 1, path2, -1, true);\n\n    assertVersionAndHits(replica, primaryVersion2, 20);\n\n    primary.close();\n    replica.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1883fc56f404231ea9b9a6b841afe9d3ec00f8e","date":1455182738,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testCrashPrimary3().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testCrashPrimary3().mjava","sourceNew":"  // Crash primary and then restart it, while a replica node is down, then bring replica node back up and make sure it properly \"unforks\" itself\n  @Nightly\n  public void testCrashPrimary3() throws Exception {\n\n    Path path1 = createTempDir(\"1\");\n    NodeProcess primary = startNode(-1, 0, path1, -1, true);\n\n    Path path2 = createTempDir(\"2\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, path2, -1, true);\n\n    sendReplicasToPrimary(primary, replica);\n\n    // Index 10 docs into primary:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n      for(int i=0;i<10;i++) {\n        Document doc = docs.nextDoc();\n        primary.addOrUpdateDocument(c, doc, false);\n      }\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Wait for replica to sync up:\n    waitForVersionAndHits(replica, primaryVersion1, 10);\n\n    replica.commit();\n\n    replica.close();\n    primary.crash();\n\n    // At this point replica is \"in the future\": it has 10 docs committed, but the primary crashed before committing so it has 0 docs\n\n    // Restart primary:\n    primary = startNode(-1, 0, path1, -1, true);\n\n    // Index 20 docs into primary:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n      for(int i=0;i<20;i++) {\n        Document doc = docs.nextDoc();\n        primary.addOrUpdateDocument(c, doc, false);\n      }\n    }\n\n    // Flush primary, but there are no replicas to sync to:\n    long primaryVersion2 = primary.flush(0);\n\n    // Now restart replica, which on init should detect on a \"lost branch\" because its 10 docs that were committed came from a different\n    // primary node:\n    replica = startNode(primary.tcpPort, 1, path2, -1, true);\n\n    assertVersionAndHits(replica, primaryVersion2, 20);\n\n    primary.close();\n    replica.close();\n  }\n\n","sourceOld":"  // Crash primary and then restart it, while a replica node is down, then bring replica node back up and make sure it properly \"unforks\" itself\n  public void testCrashPrimary3() throws Exception {\n\n    Path path1 = createTempDir(\"1\");\n    NodeProcess primary = startNode(-1, 0, path1, -1, true);\n\n    Path path2 = createTempDir(\"2\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, path2, -1, true);\n\n    sendReplicasToPrimary(primary, replica);\n\n    // Index 10 docs into primary:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n      for(int i=0;i<10;i++) {\n        Document doc = docs.nextDoc();\n        primary.addOrUpdateDocument(c, doc, false);\n      }\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Wait for replica to sync up:\n    waitForVersionAndHits(replica, primaryVersion1, 10);\n\n    replica.commit();\n\n    replica.close();\n    primary.crash();\n\n    // At this point replica is \"in the future\": it has 10 docs committed, but the primary crashed before committing so it has 0 docs\n\n    // Restart primary:\n    primary = startNode(-1, 0, path1, -1, true);\n\n    // Index 20 docs into primary:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n      for(int i=0;i<20;i++) {\n        Document doc = docs.nextDoc();\n        primary.addOrUpdateDocument(c, doc, false);\n      }\n    }\n\n    // Flush primary, but there are no replicas to sync to:\n    long primaryVersion2 = primary.flush(0);\n\n    // Now restart replica, which on init should detect on a \"lost branch\" because its 10 docs that were committed came from a different\n    // primary node:\n    replica = startNode(primary.tcpPort, 1, path2, -1, true);\n\n    assertVersionAndHits(replica, primaryVersion2, 20);\n\n    primary.close();\n    replica.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#testCrashPrimary3().mjava","pathOld":"/dev/null","sourceNew":"  // Crash primary and then restart it, while a replica node is down, then bring replica node back up and make sure it properly \"unforks\" itself\n  @Nightly\n  public void testCrashPrimary3() throws Exception {\n\n    Path path1 = createTempDir(\"1\");\n    NodeProcess primary = startNode(-1, 0, path1, -1, true);\n\n    Path path2 = createTempDir(\"2\");\n    NodeProcess replica = startNode(primary.tcpPort, 1, path2, -1, true);\n\n    sendReplicasToPrimary(primary, replica);\n\n    // Index 10 docs into primary:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n      for(int i=0;i<10;i++) {\n        Document doc = docs.nextDoc();\n        primary.addOrUpdateDocument(c, doc, false);\n      }\n    }\n\n    // Refresh primary, which also pushes to replica:\n    long primaryVersion1 = primary.flush(0);\n    assertTrue(primaryVersion1 > 0);\n\n    // Wait for replica to sync up:\n    waitForVersionAndHits(replica, primaryVersion1, 10);\n\n    replica.commit();\n\n    replica.close();\n    primary.crash();\n\n    // At this point replica is \"in the future\": it has 10 docs committed, but the primary crashed before committing so it has 0 docs\n\n    // Restart primary:\n    primary = startNode(-1, 0, path1, -1, true);\n\n    // Index 20 docs into primary:\n    try (Connection c = new Connection(primary.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_INDEXING);\n      for(int i=0;i<20;i++) {\n        Document doc = docs.nextDoc();\n        primary.addOrUpdateDocument(c, doc, false);\n      }\n    }\n\n    // Flush primary, but there are no replicas to sync to:\n    long primaryVersion2 = primary.flush(0);\n\n    // Now restart replica, which on init should detect on a \"lost branch\" because its 10 docs that were committed came from a different\n    // primary node:\n    replica = startNode(primary.tcpPort, 1, path2, -1, true);\n\n    assertVersionAndHits(replica, primaryVersion2, 20);\n\n    primary.close();\n    replica.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1883fc56f404231ea9b9a6b841afe9d3ec00f8e":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1883fc56f404231ea9b9a6b841afe9d3ec00f8e"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"]},"commit2Childs":{"b1883fc56f404231ea9b9a6b841afe9d3ec00f8e":["68496c2200e559fb7802f7575427b7a482659afb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","38cf1409ac117286eb0df7d6ef31d9cfdad8cfec"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["b1883fc56f404231ea9b9a6b841afe9d3ec00f8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}