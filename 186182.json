{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, ParseException {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetDateCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.date of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, ParseException {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetDateCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.date of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, ParseException {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetDateCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.date of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, ParseException {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetDateCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.date of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, ParseException {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetDateCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.date of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, ParseException {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetDateCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.date of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7a2fb72910dc110efb34c773de307e5cbe4305a","date":1312025755,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, ParseException {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      getFacetDateCounts(f, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, ParseException {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetDateCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.date of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, SyntaxError {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      getFacetDateCounts(f, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, ParseException {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      getFacetDateCounts(f, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, SyntaxError {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      getFacetDateCounts(f, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, ParseException {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      getFacetDateCounts(f, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, SyntaxError {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      getFacetDateCounts(f, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, SyntaxError {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      getFacetDateCounts(f, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa62c79a7afa4d7f22e1f71b883659f3213d7db1","date":1435334422,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, SyntaxError {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<>();\n    final String[] fields = global.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      getFacetDateCounts(f, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, SyntaxError {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<>();\n    final String[] fields = params.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      getFacetDateCounts(f, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","bugFix":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DateFacetProcessor#getFacetDateCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts\n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n      throws IOException {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<>();\n    final String[] fields = global.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      getFacetDateCounts(f, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts \n   * for each facet date field, range, and interval specified in the\n   * SolrParams\n   *\n   * @see FacetParams#FACET_DATE\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public NamedList<Object> getFacetDateCounts()\n    throws IOException, SyntaxError {\n\n    final NamedList<Object> resOuter = new SimpleOrderedMap<>();\n    final String[] fields = global.getParams(FacetParams.FACET_DATE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      getFacetDateCounts(f, resOuter);\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cdb67100dc016748799a77218aa409478372d79"],"3cdb67100dc016748799a77218aa409478372d79":["d7a2fb72910dc110efb34c773de307e5cbe4305a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d7a2fb72910dc110efb34c773de307e5cbe4305a","3cdb67100dc016748799a77218aa409478372d79"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d7a2fb72910dc110efb34c773de307e5cbe4305a":["c26f00b574427b55127e869b935845554afde1fa"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"3cdb67100dc016748799a77218aa409478372d79":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d7a2fb72910dc110efb34c773de307e5cbe4305a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d7a2fb72910dc110efb34c773de307e5cbe4305a":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}