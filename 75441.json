{"path":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","commits":[{"id":"5582ac681e0def83075f05006fc43f34052fe7a9","date":1500400581,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void doGraph(SolrParams p) throws Exception {\n    String node_id = p.get(\"node_id\");\n    String edge_id = p.get(\"edge_id\");\n    \n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\", \"title\", \"foo10\" ));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", \"text\", \"foo\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", node_id, \"3\", edge_id, \"4\", edge_id, \"5\"));\n    assertU(adoc(\"id\", \"doc_4\", node_id, \"4\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", node_id, \"5\", edge_id, \"7\" ));\n    assertU(adoc(\"id\", \"doc_6\", node_id, \"6\", edge_id, \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", node_id, \"7\", edge_id, \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", node_id, \"8\", edge_id, \"1\", edge_id, \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", node_id, \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", edge_id, \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", node_id, \"10\", edge_id, \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", node_id, \"11\", edge_id, \"12\", edge_id, \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", node_id, \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", node_id, \"13\", edge_id, \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n\n    // TODO: assert which documents actually come back\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id}}id:doc_1\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==8\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false traversalFilter='text:foo11'}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=0}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==3\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=true maxDepth=2}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false maxDepth=1}id:doc_1\")\n        , \"/response/numFound==1\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["487de3f55283f58d7e02a16993f8be55bbe32061"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  public void doGraph(SolrParams p) throws Exception {\n    String node_id = p.get(\"node_id\");\n    String edge_id = p.get(\"edge_id\");\n    \n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\", \"title\", \"foo10\" ));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", \"text\", \"foo\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", node_id, \"3\", edge_id, \"4\", edge_id, \"5\"));\n    assertU(adoc(\"id\", \"doc_4\", node_id, \"4\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", node_id, \"5\", edge_id, \"7\" ));\n    assertU(adoc(\"id\", \"doc_6\", node_id, \"6\", edge_id, \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", node_id, \"7\", edge_id, \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", node_id, \"8\", edge_id, \"1\", edge_id, \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", node_id, \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", edge_id, \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", node_id, \"10\", edge_id, \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", node_id, \"11\", edge_id, \"12\", edge_id, \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", node_id, \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", node_id, \"13\", edge_id, \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n\n    // TODO: assert which documents actually come back\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id}}id:doc_1\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==8\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false traversalFilter='text:foo11'}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=0}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==3\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=true maxDepth=2}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false maxDepth=1}id:doc_1\")\n        , \"/response/numFound==1\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","date":1500994164,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","sourceNew":"  public void doGraph(SolrParams p) throws Exception {\n    String node_id = p.get(\"node_id\");\n    String edge_id = p.get(\"edge_id\");\n\n    // NOTE: from/to fields are reversed from {!join}... values are looked up in the \"toField\" and then matched on the \"fromField\"\n    // 1->2->(3,9)->(4,5)->7\n    // 8->(1,2)->...\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\", \"title\", \"foo10\" ));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", \"text\", \"foo\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", node_id, \"3\", edge_id, \"4\", edge_id, \"5\"));\n    assertU(adoc(\"id\", \"doc_4\", node_id, \"4\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", node_id, \"5\", edge_id, \"7\" ));\n    assertU(adoc(\"id\", \"doc_6\", node_id, \"6\", edge_id, \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", node_id, \"7\", edge_id, \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", node_id, \"8\", edge_id, \"1\", edge_id, \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", node_id, \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", edge_id, \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", node_id, \"10\", edge_id, \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", node_id, \"11\", edge_id, \"12\", edge_id, \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", node_id, \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", node_id, \"13\", edge_id, \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n\n    // TODO: assert which documents actually come back\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id}}id:doc_1\")\n        , \"/response/numFound==7\"\n    );\n\n    // reverse the order to test single/multi-valued on the opposite fields\n    // start with doc1, look up node_id (1) and match to edge_id (docs 7 and 8)\n    assertJQ(req(p, \"q\",\"{!graph from=${edge_id} to=${node_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==3\"\n    );\n\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==8\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false traversalFilter='text:foo11'}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=0}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==3\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=true maxDepth=2}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false maxDepth=1}id:doc_1\")\n        , \"/response/numFound==1\"\n    );\n  }\n\n","sourceOld":"  public void doGraph(SolrParams p) throws Exception {\n    String node_id = p.get(\"node_id\");\n    String edge_id = p.get(\"edge_id\");\n    \n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\", \"title\", \"foo10\" ));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", \"text\", \"foo\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", node_id, \"3\", edge_id, \"4\", edge_id, \"5\"));\n    assertU(adoc(\"id\", \"doc_4\", node_id, \"4\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", node_id, \"5\", edge_id, \"7\" ));\n    assertU(adoc(\"id\", \"doc_6\", node_id, \"6\", edge_id, \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", node_id, \"7\", edge_id, \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", node_id, \"8\", edge_id, \"1\", edge_id, \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", node_id, \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", edge_id, \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", node_id, \"10\", edge_id, \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", node_id, \"11\", edge_id, \"12\", edge_id, \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", node_id, \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", node_id, \"13\", edge_id, \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n\n    // TODO: assert which documents actually come back\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id}}id:doc_1\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==8\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false traversalFilter='text:foo11'}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=0}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==3\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=true maxDepth=2}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false maxDepth=1}id:doc_1\")\n        , \"/response/numFound==1\"\n    );\n  }\n\n","bugFix":null,"bugIntro":["487de3f55283f58d7e02a16993f8be55bbe32061"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","sourceNew":"  public void doGraph(SolrParams p) throws Exception {\n    String node_id = p.get(\"node_id\");\n    String edge_id = p.get(\"edge_id\");\n\n    // NOTE: from/to fields are reversed from {!join}... values are looked up in the \"toField\" and then matched on the \"fromField\"\n    // 1->2->(3,9)->(4,5)->7\n    // 8->(1,2)->...\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\", \"title\", \"foo10\" ));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", \"text\", \"foo\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", node_id, \"3\", edge_id, \"4\", edge_id, \"5\"));\n    assertU(adoc(\"id\", \"doc_4\", node_id, \"4\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", node_id, \"5\", edge_id, \"7\" ));\n    assertU(adoc(\"id\", \"doc_6\", node_id, \"6\", edge_id, \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", node_id, \"7\", edge_id, \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", node_id, \"8\", edge_id, \"1\", edge_id, \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", node_id, \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", edge_id, \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", node_id, \"10\", edge_id, \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", node_id, \"11\", edge_id, \"12\", edge_id, \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", node_id, \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", node_id, \"13\", edge_id, \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n\n    // TODO: assert which documents actually come back\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id}}id:doc_1\")\n        , \"/response/numFound==7\"\n    );\n\n    // reverse the order to test single/multi-valued on the opposite fields\n    // start with doc1, look up node_id (1) and match to edge_id (docs 7 and 8)\n    assertJQ(req(p, \"q\",\"{!graph from=${edge_id} to=${node_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==3\"\n    );\n\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==8\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false traversalFilter='text:foo11'}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=0}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==3\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=true maxDepth=2}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false maxDepth=1}id:doc_1\")\n        , \"/response/numFound==1\"\n    );\n  }\n\n","sourceOld":"  public void doGraph(SolrParams p) throws Exception {\n    String node_id = p.get(\"node_id\");\n    String edge_id = p.get(\"edge_id\");\n    \n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\", \"title\", \"foo10\" ));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", \"text\", \"foo\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", node_id, \"3\", edge_id, \"4\", edge_id, \"5\"));\n    assertU(adoc(\"id\", \"doc_4\", node_id, \"4\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", node_id, \"5\", edge_id, \"7\" ));\n    assertU(adoc(\"id\", \"doc_6\", node_id, \"6\", edge_id, \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", node_id, \"7\", edge_id, \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", node_id, \"8\", edge_id, \"1\", edge_id, \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", node_id, \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", edge_id, \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", node_id, \"10\", edge_id, \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", node_id, \"11\", edge_id, \"12\", edge_id, \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", node_id, \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", node_id, \"13\", edge_id, \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n\n    // TODO: assert which documents actually come back\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id}}id:doc_1\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==8\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false traversalFilter='text:foo11'}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=0}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==3\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=true maxDepth=2}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false maxDepth=1}id:doc_1\")\n        , \"/response/numFound==1\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"487de3f55283f58d7e02a16993f8be55bbe32061","date":1502123368,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","sourceNew":"  public void doGraph(SolrParams p) throws Exception {\n    String node_id = p.get(\"node_id\");\n    String edge_id = p.get(\"edge_id\");\n\n    // NOTE: from/to fields are reversed from {!join}... values are looked up in the \"toField\" and then matched on the \"fromField\"\n    // 1->-2->(3,9)->(4,5)->7\n    // 8->(1,-2)->...\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"-2\", \"text\", \"foo\", \"title\", \"foo10\" ));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"-2\", edge_id, \"3\", \"text\", \"foo\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", node_id, \"3\", edge_id, \"4\", edge_id, \"5\"));\n    assertU(adoc(\"id\", \"doc_4\", node_id, \"4\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", node_id, \"5\", edge_id, \"7\" ));\n    assertU(adoc(\"id\", \"doc_6\", node_id, \"6\", edge_id, \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", node_id, \"7\", edge_id, \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", node_id, \"8\", edge_id, \"1\", edge_id, \"-2\" ));\n    assertU(adoc(\"id\", \"doc_9\", node_id, \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"-2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"-2\", edge_id, \"3\", edge_id, \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", node_id, \"10\", edge_id, \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", node_id, \"11\", edge_id, \"12\", edge_id, \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", node_id, \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", node_id, \"13\", edge_id, \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n\n    // TODO: assert which documents actually come back\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id}}id:doc_1\")\n        , \"/response/numFound==7\"\n    );\n\n    // reverse the order to test single/multi-valued on the opposite fields\n    // start with doc1, look up node_id (1) and match to edge_id (docs 7 and 8)\n    assertJQ(req(p, \"q\",\"{!graph from=${edge_id} to=${node_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==3\"\n    );\n\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==8\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false traversalFilter='text:foo11'}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=0}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==3\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=true maxDepth=2}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false maxDepth=1}id:doc_1\")\n        , \"/response/numFound==1\"\n    );\n  }\n\n","sourceOld":"  public void doGraph(SolrParams p) throws Exception {\n    String node_id = p.get(\"node_id\");\n    String edge_id = p.get(\"edge_id\");\n\n    // NOTE: from/to fields are reversed from {!join}... values are looked up in the \"toField\" and then matched on the \"fromField\"\n    // 1->2->(3,9)->(4,5)->7\n    // 8->(1,2)->...\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\", \"title\", \"foo10\" ));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", \"text\", \"foo\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", node_id, \"3\", edge_id, \"4\", edge_id, \"5\"));\n    assertU(adoc(\"id\", \"doc_4\", node_id, \"4\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", node_id, \"5\", edge_id, \"7\" ));\n    assertU(adoc(\"id\", \"doc_6\", node_id, \"6\", edge_id, \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", node_id, \"7\", edge_id, \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", node_id, \"8\", edge_id, \"1\", edge_id, \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", node_id, \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", edge_id, \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", node_id, \"10\", edge_id, \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", node_id, \"11\", edge_id, \"12\", edge_id, \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", node_id, \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", node_id, \"13\", edge_id, \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n\n    // TODO: assert which documents actually come back\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id}}id:doc_1\")\n        , \"/response/numFound==7\"\n    );\n\n    // reverse the order to test single/multi-valued on the opposite fields\n    // start with doc1, look up node_id (1) and match to edge_id (docs 7 and 8)\n    assertJQ(req(p, \"q\",\"{!graph from=${edge_id} to=${node_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==3\"\n    );\n\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==8\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false traversalFilter='text:foo11'}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=0}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==3\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=true maxDepth=2}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false maxDepth=1}id:doc_1\")\n        , \"/response/numFound==1\"\n    );\n  }\n\n","bugFix":["a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","5582ac681e0def83075f05006fc43f34052fe7a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","sourceNew":"  public void doGraph(SolrParams p) throws Exception {\n    String node_id = p.get(\"node_id\");\n    String edge_id = p.get(\"edge_id\");\n\n    // NOTE: from/to fields are reversed from {!join}... values are looked up in the \"toField\" and then matched on the \"fromField\"\n    // 1->-2->(3,9)->(4,5)->7\n    // 8->(1,-2)->...\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"-2\", \"text\", \"foo\", \"title\", \"foo10\" ));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"-2\", edge_id, \"3\", \"text\", \"foo\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", node_id, \"3\", edge_id, \"4\", edge_id, \"5\"));\n    assertU(adoc(\"id\", \"doc_4\", node_id, \"4\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", node_id, \"5\", edge_id, \"7\" ));\n    assertU(adoc(\"id\", \"doc_6\", node_id, \"6\", edge_id, \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", node_id, \"7\", edge_id, \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", node_id, \"8\", edge_id, \"1\", edge_id, \"-2\" ));\n    assertU(adoc(\"id\", \"doc_9\", node_id, \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"-2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"-2\", edge_id, \"3\", edge_id, \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", node_id, \"10\", edge_id, \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", node_id, \"11\", edge_id, \"12\", edge_id, \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", node_id, \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", node_id, \"13\", edge_id, \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n\n    // TODO: assert which documents actually come back\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id}}id:doc_1\")\n        , \"/response/numFound==7\"\n    );\n\n    // reverse the order to test single/multi-valued on the opposite fields\n    // start with doc1, look up node_id (1) and match to edge_id (docs 7 and 8)\n    assertJQ(req(p, \"q\",\"{!graph from=${edge_id} to=${node_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==3\"\n    );\n\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==8\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false traversalFilter='text:foo11'}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=0}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==3\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=true maxDepth=2}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false maxDepth=1}id:doc_1\")\n        , \"/response/numFound==1\"\n    );\n  }\n\n","sourceOld":"  public void doGraph(SolrParams p) throws Exception {\n    String node_id = p.get(\"node_id\");\n    String edge_id = p.get(\"edge_id\");\n    \n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\", \"title\", \"foo10\" ));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", \"text\", \"foo\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", node_id, \"3\", edge_id, \"4\", edge_id, \"5\"));\n    assertU(adoc(\"id\", \"doc_4\", node_id, \"4\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", node_id, \"5\", edge_id, \"7\" ));\n    assertU(adoc(\"id\", \"doc_6\", node_id, \"6\", edge_id, \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", node_id, \"7\", edge_id, \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", node_id, \"8\", edge_id, \"1\", edge_id, \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", node_id, \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", edge_id, \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", node_id, \"10\", edge_id, \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", node_id, \"11\", edge_id, \"12\", edge_id, \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", node_id, \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", node_id, \"13\", edge_id, \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n\n    // TODO: assert which documents actually come back\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id}}id:doc_1\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==8\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false traversalFilter='text:foo11'}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=0}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==3\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=true maxDepth=2}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false maxDepth=1}id:doc_1\")\n        , \"/response/numFound==1\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#doGraph(SolrParams).mjava","sourceNew":"  public void doGraph(SolrParams p) throws Exception {\n    String node_id = p.get(\"node_id\");\n    String edge_id = p.get(\"edge_id\");\n\n    // NOTE: from/to fields are reversed from {!join}... values are looked up in the \"toField\" and then matched on the \"fromField\"\n    // 1->-2->(3,9)->(4,5)->7\n    // 8->(1,-2)->...\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"-2\", \"text\", \"foo\", \"title\", \"foo10\" ));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"-2\", edge_id, \"3\", \"text\", \"foo\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", node_id, \"3\", edge_id, \"4\", edge_id, \"5\"));\n    assertU(adoc(\"id\", \"doc_4\", node_id, \"4\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", node_id, \"5\", edge_id, \"7\" ));\n    assertU(adoc(\"id\", \"doc_6\", node_id, \"6\", edge_id, \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", node_id, \"7\", edge_id, \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", node_id, \"8\", edge_id, \"1\", edge_id, \"-2\" ));\n    assertU(adoc(\"id\", \"doc_9\", node_id, \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"-2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"-2\", edge_id, \"3\", edge_id, \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", node_id, \"10\", edge_id, \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", node_id, \"11\", edge_id, \"12\", edge_id, \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", node_id, \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", node_id, \"13\", edge_id, \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n\n    // TODO: assert which documents actually come back\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id}}id:doc_1\")\n        , \"/response/numFound==7\"\n    );\n\n    // reverse the order to test single/multi-valued on the opposite fields\n    // start with doc1, look up node_id (1) and match to edge_id (docs 7 and 8)\n    assertJQ(req(p, \"q\",\"{!graph from=${edge_id} to=${node_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==3\"\n    );\n\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==8\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false traversalFilter='text:foo11'}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=0}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==3\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=true maxDepth=2}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false maxDepth=1}id:doc_1\")\n        , \"/response/numFound==1\"\n    );\n  }\n\n","sourceOld":"  public void doGraph(SolrParams p) throws Exception {\n    String node_id = p.get(\"node_id\");\n    String edge_id = p.get(\"edge_id\");\n\n    // NOTE: from/to fields are reversed from {!join}... values are looked up in the \"toField\" and then matched on the \"fromField\"\n    // 1->2->(3,9)->(4,5)->7\n    // 8->(1,2)->...\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\", \"title\", \"foo10\" ));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", \"text\", \"foo\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", node_id, \"3\", edge_id, \"4\", edge_id, \"5\"));\n    assertU(adoc(\"id\", \"doc_4\", node_id, \"4\" ));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", node_id, \"5\", edge_id, \"7\" ));\n    assertU(adoc(\"id\", \"doc_6\", node_id, \"6\", edge_id, \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", node_id, \"7\", edge_id, \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", node_id, \"8\", edge_id, \"1\", edge_id, \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", node_id, \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", node_id, \"1\", edge_id, \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", node_id, \"2\", edge_id, \"3\", edge_id, \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", node_id, \"10\", edge_id, \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", node_id, \"11\", edge_id, \"12\", edge_id, \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", node_id, \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", node_id, \"13\", edge_id, \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n\n    // TODO: assert which documents actually come back\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id}}id:doc_1\")\n        , \"/response/numFound==7\"\n    );\n\n    // reverse the order to test single/multi-valued on the opposite fields\n    // start with doc1, look up node_id (1) and match to edge_id (docs 7 and 8)\n    assertJQ(req(p, \"q\",\"{!graph from=${edge_id} to=${node_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==3\"\n    );\n\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==8\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false}id:doc_8\")\n        , \"/response/numFound==7\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false traversalFilter='text:foo11'}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=0}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=true returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==3\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=false maxDepth=1}id:doc_8\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false returnOnlyLeaf=true maxDepth=2}id:doc_8\")\n        , \"/response/numFound==1\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} maxDepth=1}id:doc_1\")\n        , \"/response/numFound==2\"\n    );\n    assertJQ(req(p, \"q\",\"{!graph from=${node_id} to=${edge_id} returnRoot=false maxDepth=1}id:doc_1\")\n        , \"/response/numFound==1\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5582ac681e0def83075f05006fc43f34052fe7a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["5582ac681e0def83075f05006fc43f34052fe7a9"],"a52341299179de5479672f7cf518bf4b173f34b3":["5582ac681e0def83075f05006fc43f34052fe7a9","a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["a52341299179de5479672f7cf518bf4b173f34b3","487de3f55283f58d7e02a16993f8be55bbe32061"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["936cdd5882761db3b844afd6f84ab81cbb011a75","487de3f55283f58d7e02a16993f8be55bbe32061"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5582ac681e0def83075f05006fc43f34052fe7a9"],"487de3f55283f58d7e02a16993f8be55bbe32061":["a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["487de3f55283f58d7e02a16993f8be55bbe32061"]},"commit2Childs":{"5582ac681e0def83075f05006fc43f34052fe7a9":["a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["58884af1f68e9d61c217c753fbd6266d86a63b14","487de3f55283f58d7e02a16993f8be55bbe32061"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5582ac681e0def83075f05006fc43f34052fe7a9","936cdd5882761db3b844afd6f84ab81cbb011a75"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"487de3f55283f58d7e02a16993f8be55bbe32061":["58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}