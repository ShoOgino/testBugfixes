{"path":"src/webapp/src/org/apache/solr/servlet/SolrServlet#sendErr(int,String,HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrServlet#sendErr(int,String,HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"  final void sendErr(int rc, String msg, HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // hmmm, what if this was already set to text/xml?\n      try{\n        response.setContentType(CONTENT_TYPE);\n        // response.setCharacterEncoding(\"UTF-8\");\n      } catch (Exception e) {}\n      try{response.setStatus(rc);} catch (Exception e) {}\n      PrintWriter writer = response.getWriter();\n      writer.write(msg);\n    } catch (IOException e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a9762f04172109efeb2e7190066381b767bbdf2","date":1152811341,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrServlet#sendErr(int,String,HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrServlet#sendErr(int,String,HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  final void sendErr(int rc, String msg, HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // hmmm, what if this was already set to text/xml?\n      try{\n        response.setContentType(QueryResponseWriter.CONTENT_TYPE_TEXT_UTF8);\n        // response.setCharacterEncoding(\"UTF-8\");\n      } catch (Exception e) {}\n      try{response.setStatus(rc);} catch (Exception e) {}\n      PrintWriter writer = response.getWriter();\n      writer.write(msg);\n    } catch (IOException e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","sourceOld":"  final void sendErr(int rc, String msg, HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // hmmm, what if this was already set to text/xml?\n      try{\n        response.setContentType(CONTENT_TYPE);\n        // response.setCharacterEncoding(\"UTF-8\");\n      } catch (Exception e) {}\n      try{response.setStatus(rc);} catch (Exception e) {}\n      PrintWriter writer = response.getWriter();\n      writer.write(msg);\n    } catch (IOException e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrServlet#sendErr(int,String,HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrServlet#sendErr(int,String,HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  final void sendErr(int rc, String msg, HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // hmmm, what if this was already set to text/xml?\n      try{\n        response.setContentType(QueryResponseWriter.CONTENT_TYPE_TEXT_UTF8);\n        // response.setCharacterEncoding(\"UTF-8\");\n      } catch (Exception e) {}\n      try{response.setStatus(rc);} catch (Exception e) {}\n      PrintWriter writer = response.getWriter();\n      writer.write(msg);\n    } catch (IOException e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","sourceOld":"  final void sendErr(int rc, String msg, HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // hmmm, what if this was already set to text/xml?\n      try{\n        response.setContentType(QueryResponseWriter.CONTENT_TYPE_TEXT_UTF8);\n        // response.setCharacterEncoding(\"UTF-8\");\n      } catch (Exception e) {}\n      try{response.setStatus(rc);} catch (Exception e) {}\n      PrintWriter writer = response.getWriter();\n      writer.write(msg);\n    } catch (IOException e) {\n      SolrException.log(log,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7a9762f04172109efeb2e7190066381b767bbdf2"],"7a9762f04172109efeb2e7190066381b767bbdf2":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["7a9762f04172109efeb2e7190066381b767bbdf2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7a9762f04172109efeb2e7190066381b767bbdf2":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}