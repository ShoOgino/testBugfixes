{"path":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","sourceNew":"  public void testTermRemoteFilter() throws Exception {\n    CachingWrapperFilterHelper cwfh = new CachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))));\n    \n    // This is what we are fixing - if one uses a CachingWrapperFilter(Helper) it will never \n    // cache the filter on the remote site\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    \n    // This is how we fix caching - we wrap a Filter in the RemoteCachingWrapperFilter(Handler - for testing)\n    // to cache the Filter on the searcher (remote) side\n    RemoteCachingWrapperFilterHelper rcwfh = new RemoteCachingWrapperFilterHelper(cwfh, false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // 2nd time we do the search, we should be using the cached Filter\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get the same cached Filter, even if we create a new instance of RemoteCachingWrapperFilter(Helper)\n    // this should pass because the Filter parameters are the same, and the cache uses Filter's hashCode() as cache keys,\n    // and Filters' hashCode() builds on Filter parameters, not the Filter instance itself\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get a non-cached version of the Filter because this is a new Query (type:b)\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"b\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"type\", \"b\")), rcwfh, 0, \"B\");\n  }\n\n","sourceOld":"  public void testTermRemoteFilter() throws Exception {\n    CachingWrapperFilterHelper cwfh = new CachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))));\n    \n    // This is what we are fixing - if one uses a CachingWrapperFilter(Helper) it will never \n    // cache the filter on the remote site\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    \n    // This is how we fix caching - we wrap a Filter in the RemoteCachingWrapperFilter(Handler - for testing)\n    // to cache the Filter on the searcher (remote) side\n    RemoteCachingWrapperFilterHelper rcwfh = new RemoteCachingWrapperFilterHelper(cwfh, false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // 2nd time we do the search, we should be using the cached Filter\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get the same cached Filter, even if we create a new instance of RemoteCachingWrapperFilter(Helper)\n    // this should pass because the Filter parameters are the same, and the cache uses Filter's hashCode() as cache keys,\n    // and Filters' hashCode() builds on Filter parameters, not the Filter instance itself\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get a non-cached version of the Filter because this is a new Query (type:b)\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"b\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"type\", \"b\")), rcwfh, 0, \"B\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"084b18e2b1c84d66746d1a94b6668766d357c2d4","date":1270935846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","sourceNew":"  @Test\n  public void testTermRemoteFilter() throws Exception {\n    CachingWrapperFilterHelper cwfh = new CachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))));\n    \n    // This is what we are fixing - if one uses a CachingWrapperFilter(Helper) it will never \n    // cache the filter on the remote site\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    \n    // This is how we fix caching - we wrap a Filter in the RemoteCachingWrapperFilter(Handler - for testing)\n    // to cache the Filter on the searcher (remote) side\n    RemoteCachingWrapperFilterHelper rcwfh = new RemoteCachingWrapperFilterHelper(cwfh, false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // 2nd time we do the search, we should be using the cached Filter\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get the same cached Filter, even if we create a new instance of RemoteCachingWrapperFilter(Helper)\n    // this should pass because the Filter parameters are the same, and the cache uses Filter's hashCode() as cache keys,\n    // and Filters' hashCode() builds on Filter parameters, not the Filter instance itself\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get a non-cached version of the Filter because this is a new Query (type:b)\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"b\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"type\", \"b\")), rcwfh, 0, \"B\");\n  }\n\n","sourceOld":"  public void testTermRemoteFilter() throws Exception {\n    CachingWrapperFilterHelper cwfh = new CachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))));\n    \n    // This is what we are fixing - if one uses a CachingWrapperFilter(Helper) it will never \n    // cache the filter on the remote site\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    \n    // This is how we fix caching - we wrap a Filter in the RemoteCachingWrapperFilter(Handler - for testing)\n    // to cache the Filter on the searcher (remote) side\n    RemoteCachingWrapperFilterHelper rcwfh = new RemoteCachingWrapperFilterHelper(cwfh, false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // 2nd time we do the search, we should be using the cached Filter\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get the same cached Filter, even if we create a new instance of RemoteCachingWrapperFilter(Helper)\n    // this should pass because the Filter parameters are the same, and the cache uses Filter's hashCode() as cache keys,\n    // and Filters' hashCode() builds on Filter parameters, not the Filter instance itself\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get a non-cached version of the Filter because this is a new Query (type:b)\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"b\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"type\", \"b\")), rcwfh, 0, \"B\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTermRemoteFilter() throws Exception {\n    CachingWrapperFilterHelper cwfh = new CachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))));\n    \n    // This is what we are fixing - if one uses a CachingWrapperFilter(Helper) it will never \n    // cache the filter on the remote site\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    \n    // This is how we fix caching - we wrap a Filter in the RemoteCachingWrapperFilter(Handler - for testing)\n    // to cache the Filter on the searcher (remote) side\n    RemoteCachingWrapperFilterHelper rcwfh = new RemoteCachingWrapperFilterHelper(cwfh, false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // 2nd time we do the search, we should be using the cached Filter\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get the same cached Filter, even if we create a new instance of RemoteCachingWrapperFilter(Helper)\n    // this should pass because the Filter parameters are the same, and the cache uses Filter's hashCode() as cache keys,\n    // and Filters' hashCode() builds on Filter parameters, not the Filter instance itself\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get a non-cached version of the Filter because this is a new Query (type:b)\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"b\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"type\", \"b\")), rcwfh, 0, \"B\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTermRemoteFilter() throws Exception {\n    CachingWrapperFilterHelper cwfh = new CachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))));\n    \n    // This is what we are fixing - if one uses a CachingWrapperFilter(Helper) it will never \n    // cache the filter on the remote site\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    \n    // This is how we fix caching - we wrap a Filter in the RemoteCachingWrapperFilter(Handler - for testing)\n    // to cache the Filter on the searcher (remote) side\n    RemoteCachingWrapperFilterHelper rcwfh = new RemoteCachingWrapperFilterHelper(cwfh, false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // 2nd time we do the search, we should be using the cached Filter\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get the same cached Filter, even if we create a new instance of RemoteCachingWrapperFilter(Helper)\n    // this should pass because the Filter parameters are the same, and the cache uses Filter's hashCode() as cache keys,\n    // and Filters' hashCode() builds on Filter parameters, not the Filter instance itself\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get a non-cached version of the Filter because this is a new Query (type:b)\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"b\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"type\", \"b\")), rcwfh, 0, \"B\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTermRemoteFilter() throws Exception {\n    CachingWrapperFilterHelper cwfh = new CachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))));\n    \n    // This is what we are fixing - if one uses a CachingWrapperFilter(Helper) it will never \n    // cache the filter on the remote site\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    \n    // This is how we fix caching - we wrap a Filter in the RemoteCachingWrapperFilter(Handler - for testing)\n    // to cache the Filter on the searcher (remote) side\n    RemoteCachingWrapperFilterHelper rcwfh = new RemoteCachingWrapperFilterHelper(cwfh, false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // 2nd time we do the search, we should be using the cached Filter\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get the same cached Filter, even if we create a new instance of RemoteCachingWrapperFilter(Helper)\n    // this should pass because the Filter parameters are the same, and the cache uses Filter's hashCode() as cache keys,\n    // and Filters' hashCode() builds on Filter parameters, not the Filter instance itself\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get a non-cached version of the Filter because this is a new Query (type:b)\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"b\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"type\", \"b\")), rcwfh, 0, \"B\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["084b18e2b1c84d66746d1a94b6668766d357c2d4","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["084b18e2b1c84d66746d1a94b6668766d357c2d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"084b18e2b1c84d66746d1a94b6668766d357c2d4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["084b18e2b1c84d66746d1a94b6668766d357c2d4","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"084b18e2b1c84d66746d1a94b6668766d357c2d4":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["084b18e2b1c84d66746d1a94b6668766d357c2d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}