{"path":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#doTestSelect().mjava","commits":[{"id":"e533fe5a9b29e5ca780ca7611d1500dc9eddf04b","date":1464795186,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#doTestSelect().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSelect() {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int max = random().nextBoolean() ? random().nextInt(100) : random().nextInt(100000);\n    Integer[] arr = new Integer[from + to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = TestUtil.nextInt(random(), 0, max);\n    }\n    final int k = TestUtil.nextInt(random(), from, to - 1);\n\n    Integer[] expected = arr.clone();\n    Arrays.sort(expected, from, to);\n\n    Integer[] actual = arr.clone();\n    ArrayUtil.select(actual, from, to, k, Comparator.naturalOrder());\n\n    assertEquals(expected[k], actual[k]);\n    for (int i = 0; i < actual.length; ++i) {\n      if (i < from || i >= to) {\n        assertSame(arr[i], actual[i]);\n      } else if (i <= k) {\n        assertTrue(actual[i].intValue() <= actual[k].intValue());\n      } else {\n        assertTrue(actual[i].intValue() >= actual[k].intValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#doTestSelect().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSelect() {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int max = random().nextBoolean() ? random().nextInt(100) : random().nextInt(100000);\n    Integer[] arr = new Integer[from + to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = TestUtil.nextInt(random(), 0, max);\n    }\n    final int k = TestUtil.nextInt(random(), from, to - 1);\n\n    Integer[] expected = arr.clone();\n    Arrays.sort(expected, from, to);\n\n    Integer[] actual = arr.clone();\n    ArrayUtil.select(actual, from, to, k, Comparator.naturalOrder());\n\n    assertEquals(expected[k], actual[k]);\n    for (int i = 0; i < actual.length; ++i) {\n      if (i < from || i >= to) {\n        assertSame(arr[i], actual[i]);\n      } else if (i <= k) {\n        assertTrue(actual[i].intValue() <= actual[k].intValue());\n      } else {\n        assertTrue(actual[i].intValue() >= actual[k].intValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#doTestSelect().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSelect() {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int max = random().nextBoolean() ? random().nextInt(100) : random().nextInt(100000);\n    Integer[] arr = new Integer[from + to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = TestUtil.nextInt(random(), 0, max);\n    }\n    final int k = TestUtil.nextInt(random(), from, to - 1);\n\n    Integer[] expected = arr.clone();\n    Arrays.sort(expected, from, to);\n\n    Integer[] actual = arr.clone();\n    ArrayUtil.select(actual, from, to, k, Comparator.naturalOrder());\n\n    assertEquals(expected[k], actual[k]);\n    for (int i = 0; i < actual.length; ++i) {\n      if (i < from || i >= to) {\n        assertSame(arr[i], actual[i]);\n      } else if (i <= k) {\n        assertTrue(actual[i].intValue() <= actual[k].intValue());\n      } else {\n        assertTrue(actual[i].intValue() >= actual[k].intValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#doTestSelect().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSelect() {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int max = random().nextBoolean() ? random().nextInt(100) : random().nextInt(100000);\n    Integer[] arr = new Integer[from + to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = TestUtil.nextInt(random(), 0, max);\n    }\n    final int k = TestUtil.nextInt(random(), from, to - 1);\n\n    Integer[] expected = arr.clone();\n    Arrays.sort(expected, from, to);\n\n    Integer[] actual = arr.clone();\n    ArrayUtil.select(actual, from, to, k, Comparator.naturalOrder());\n\n    assertEquals(expected[k], actual[k]);\n    for (int i = 0; i < actual.length; ++i) {\n      if (i < from || i >= to) {\n        assertSame(arr[i], actual[i]);\n      } else if (i <= k) {\n        assertTrue(actual[i].intValue() <= actual[k].intValue());\n      } else {\n        assertTrue(actual[i].intValue() >= actual[k].intValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#doTestSelect().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSelect() {\n    final int from = random().nextInt(5);\n    final int to = from + TestUtil.nextInt(random(), 1, 10000);\n    final int max = random().nextBoolean() ? random().nextInt(100) : random().nextInt(100000);\n    Integer[] arr = new Integer[from + to + random().nextInt(5)];\n    for (int i = 0; i < arr.length; ++i) {\n      arr[i] = TestUtil.nextInt(random(), 0, max);\n    }\n    final int k = TestUtil.nextInt(random(), from, to - 1);\n\n    Integer[] expected = arr.clone();\n    Arrays.sort(expected, from, to);\n\n    Integer[] actual = arr.clone();\n    ArrayUtil.select(actual, from, to, k, Comparator.naturalOrder());\n\n    assertEquals(expected[k], actual[k]);\n    for (int i = 0; i < actual.length; ++i) {\n      if (i < from || i >= to) {\n        assertSame(arr[i], actual[i]);\n      } else if (i <= k) {\n        assertTrue(actual[i].intValue() <= actual[k].intValue());\n      } else {\n        assertTrue(actual[i].intValue() >= actual[k].intValue());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e533fe5a9b29e5ca780ca7611d1500dc9eddf04b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f69e96b07e265f3e18957be540909b01fae36f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e533fe5a9b29e5ca780ca7611d1500dc9eddf04b"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e533fe5a9b29e5ca780ca7611d1500dc9eddf04b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f69e96b07e265f3e18957be540909b01fae36f8"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f69e96b07e265f3e18957be540909b01fae36f8"]},"commit2Childs":{"e533fe5a9b29e5ca780ca7611d1500dc9eddf04b":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e533fe5a9b29e5ca780ca7611d1500dc9eddf04b","1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"1f69e96b07e265f3e18957be540909b01fae36f8":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}