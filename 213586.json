{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArraySet#iterator().mjava","commits":[{"id":"9dd42aeb8984bdfef80056722e7c1c239b7e3c07","date":1274826512,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArraySet#iterator().mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/CharArraySet#iterator().mjava","sourceNew":"  /** Returns an {@link Iterator} depending on the version used:\n   * <ul>\n   * <li>if {@code matchVersion} &ge; 3.1, it returns {@code char[]} instances in this set.</li>\n   * <li>if {@code matchVersion} is 3.0 or older, it returns new\n   * allocated Strings, so this method violates the Set interface.\n   * It is kept this way for backwards compatibility, normally it should\n   * return {@code char[]} on {@code next()}</li>\n   * </ul>\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.matchVersion.onOrAfter(Version.LUCENE_31) ?\n      map.originalKeySet().iterator() : (Iterator) stringIterator();\n  }\n\n","sourceOld":"  /** Returns an {@link Iterator} depending on the version used:\n   * <ul>\n   * <li>if {@code matchVersion} &ge; 3.1, it returns {@code char[]} instances in this set.</li>\n   * <li>if {@code matchVersion} is 3.0 or older, it returns new\n   * allocated Strings, so this method violates the Set interface.\n   * It is kept this way for backwards compatibility, normally it should\n   * return {@code char[]} on {@code next()}</li>\n   * </ul>\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.matchVersion.onOrAfter(Version.LUCENE_31) ?\n      map.originalKeySet().iterator() : (Iterator) stringIterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArraySet#iterator().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArraySet#iterator().mjava","sourceNew":"  /**\n   * Returns an {@link Iterator} for {@code char[]} instances in this set.\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.originalKeySet().iterator();\n  }\n\n","sourceOld":"  /** Returns an {@link Iterator} depending on the version used:\n   * <ul>\n   * <li>if {@code matchVersion} &ge; 3.1, it returns {@code char[]} instances in this set.</li>\n   * <li>if {@code matchVersion} is 3.0 or older, it returns new\n   * allocated Strings, so this method violates the Set interface.\n   * It is kept this way for backwards compatibility, normally it should\n   * return {@code char[]} on {@code next()}</li>\n   * </ul>\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.matchVersion.onOrAfter(Version.LUCENE_31) ?\n      map.originalKeySet().iterator() : (Iterator) stringIterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArraySet#iterator().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArraySet#iterator().mjava","sourceNew":"  /**\n   * Returns an {@link Iterator} for {@code char[]} instances in this set.\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.originalKeySet().iterator();\n  }\n\n","sourceOld":"  /** Returns an {@link Iterator} depending on the version used:\n   * <ul>\n   * <li>if {@code matchVersion} &ge; 3.1, it returns {@code char[]} instances in this set.</li>\n   * <li>if {@code matchVersion} is 3.0 or older, it returns new\n   * allocated Strings, so this method violates the Set interface.\n   * It is kept this way for backwards compatibility, normally it should\n   * return {@code char[]} on {@code next()}</li>\n   * </ul>\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.matchVersion.onOrAfter(Version.LUCENE_31) ?\n      map.originalKeySet().iterator() : (Iterator) stringIterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArraySet#iterator().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArraySet#iterator().mjava","sourceNew":"  /**\n   * Returns an {@link Iterator} for {@code char[]} instances in this set.\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.originalKeySet().iterator();\n  }\n\n","sourceOld":"  /** Returns an {@link Iterator} depending on the version used:\n   * <ul>\n   * <li>if {@code matchVersion} &ge; 3.1, it returns {@code char[]} instances in this set.</li>\n   * <li>if {@code matchVersion} is 3.0 or older, it returns new\n   * allocated Strings, so this method violates the Set interface.\n   * It is kept this way for backwards compatibility, normally it should\n   * return {@code char[]} on {@code next()}</li>\n   * </ul>\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.matchVersion.onOrAfter(Version.LUCENE_31) ?\n      map.originalKeySet().iterator() : (Iterator) stringIterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharArraySet#iterator().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharArraySet#iterator().mjava","sourceNew":"  /**\n   * Returns an {@link Iterator} for {@code char[]} instances in this set.\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.originalKeySet().iterator();\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link Iterator} for {@code char[]} instances in this set.\n   */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Iterator<Object> iterator() {\n    // use the AbstractSet#keySet()'s iterator (to not produce endless recursion)\n    return map.originalKeySet().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}