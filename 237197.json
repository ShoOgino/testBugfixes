{"path":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#lessThan(ShardDoc,ShardDoc).mjava","commits":[{"id":"35d59689803f4ad27f96148bb7c7167e373c6770","date":1454297137,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#lessThan(ShardDoc,ShardDoc).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#lessThan(ShardDoc,ShardDoc).mjava","sourceNew":"  @Override\n  protected boolean lessThan(ShardDoc docA, ShardDoc docB) {\n    // If these docs are from the same shard, then the relative order\n    // is how they appeared in the response from that shard.    \n    if (docA.shard == docB.shard) {\n      // if docA has a smaller position, it should be \"larger\" so it\n      // comes before docB.\n      // This will handle sorting by docid within the same shard\n\n      // comment this out to test comparators.\n      return !(docA.orderInShard < docB.orderInShard);\n    }\n\n\n    // run comparators\n    final int n = comparators.length;\n    int c = 0;\n    for (int i = 0; i < n && c == 0; i++) {\n      c = (fields[i].getReverse()) ? comparators[i].compare(docB, docA)\n          : comparators[i].compare(docA, docB);\n    }\n\n    // solve tiebreaks by comparing shards (similar to using docid)\n    // smaller docid's beat larger ids, so reverse the natural ordering\n    if (c == 0) {\n      c = -docA.shard.compareTo(docB.shard);\n    }\n\n    return c < 0;\n  }\n\n","sourceOld":"  @Override\n  protected boolean lessThan(ShardDoc docA, ShardDoc docB) {\n    // If these docs are from the same shard, then the relative order\n    // is how they appeared in the response from that shard.    \n    if (docA.shard == docB.shard) {\n      // if docA has a smaller position, it should be \"larger\" so it\n      // comes before docB.\n      // This will handle sorting by docid within the same shard\n\n      // comment this out to test comparators.\n      return !(docA.orderInShard < docB.orderInShard);\n    }\n\n\n    // run comparators\n    final int n = comparators.length;\n    int c = 0;\n    for (int i = 0; i < n && c == 0; i++) {\n      c = (fields[i].getReverse()) ? comparators[i].compare(docB, docA)\n          : comparators[i].compare(docA, docB);\n    }\n\n    // solve tiebreaks by comparing shards (similar to using docid)\n    // smaller docid's beat larger ids, so reverse the natural ordering\n    if (c == 0) {\n      c = -docA.shard.compareTo(docB.shard);\n    }\n\n    return c < 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#lessThan(ShardDoc,ShardDoc).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#lessThan(ShardDoc,ShardDoc).mjava","sourceNew":"  @Override\n  protected boolean lessThan(ShardDoc docA, ShardDoc docB) {\n    // If these docs are from the same shard, then the relative order\n    // is how they appeared in the response from that shard.    \n    if (docA.shard == docB.shard) {\n      // if docA has a smaller position, it should be \"larger\" so it\n      // comes before docB.\n      // This will handle sorting by docid within the same shard\n\n      // comment this out to test comparators.\n      return !(docA.orderInShard < docB.orderInShard);\n    }\n\n\n    // run comparators\n    final int n = comparators.length;\n    int c = 0;\n    for (int i = 0; i < n && c == 0; i++) {\n      c = (fields[i].getReverse()) ? comparators[i].compare(docB, docA)\n          : comparators[i].compare(docA, docB);\n    }\n\n    // solve tiebreaks by comparing shards (similar to using docid)\n    // smaller docid's beat larger ids, so reverse the natural ordering\n    if (c == 0) {\n      c = -docA.shard.compareTo(docB.shard);\n    }\n\n    return c < 0;\n  }\n\n","sourceOld":"  @Override\n  protected boolean lessThan(ShardDoc docA, ShardDoc docB) {\n    // If these docs are from the same shard, then the relative order\n    // is how they appeared in the response from that shard.    \n    if (docA.shard == docB.shard) {\n      // if docA has a smaller position, it should be \"larger\" so it\n      // comes before docB.\n      // This will handle sorting by docid within the same shard\n\n      // comment this out to test comparators.\n      return !(docA.orderInShard < docB.orderInShard);\n    }\n\n\n    // run comparators\n    final int n = comparators.length;\n    int c = 0;\n    for (int i = 0; i < n && c == 0; i++) {\n      c = (fields[i].getReverse()) ? comparators[i].compare(docB, docA)\n          : comparators[i].compare(docA, docB);\n    }\n\n    // solve tiebreaks by comparing shards (similar to using docid)\n    // smaller docid's beat larger ids, so reverse the natural ordering\n    if (c == 0) {\n      c = -docA.shard.compareTo(docB.shard);\n    }\n\n    return c < 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","35d59689803f4ad27f96148bb7c7167e373c6770"],"35d59689803f4ad27f96148bb7c7167e373c6770":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35d59689803f4ad27f96148bb7c7167e373c6770"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","35d59689803f4ad27f96148bb7c7167e373c6770"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"35d59689803f4ad27f96148bb7c7167e373c6770":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}