{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testSmallerFragSizeThanPhraseQuery().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testSmallerFragSizeThanPhraseQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testSmallerFragSizeThanPhraseQuery().mjava","sourceNew":"  public void testSmallerFragSizeThanPhraseQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"abcdefgh\"));\n    phraseQuery.add(new Term(F, \"jklmnopqrs\"));\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(phraseQuery, \"abcdefgh   jklmnopqrs\" ), sflb.minFragCharSize );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    if (VERBOSE) System.out.println( ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(abcdefghjklmnopqrs((0,21)))/1.0(0,21)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","sourceOld":"  public void testSmallerFragSizeThanPhraseQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"abcdefgh\"));\n    phraseQuery.add(new Term(F, \"jklmnopqrs\"));\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(phraseQuery, \"abcdefgh   jklmnopqrs\" ), sflb.minFragCharSize );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    if (VERBOSE) System.out.println( ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(abcdefghjklmnopqrs((0,21)))/1.0(0,21)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"335fa85a41a431b929ff93a0eb831abfc7b91e63","date":1349750333,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testSmallerFragSizeThanPhraseQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testSmallerFragSizeThanPhraseQuery().mjava","sourceNew":"  public void testSmallerFragSizeThanPhraseQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"abcdefgh\"));\n    phraseQuery.add(new Term(F, \"jklmnopqrs\"));\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(phraseQuery, \"abcdefgh   jklmnopqrs\" ), sflb.minFragCharSize );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    if (VERBOSE) System.out.println( ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(abcdefghjklmnopqrs((0,21)))/1.0(1,19)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","sourceOld":"  public void testSmallerFragSizeThanPhraseQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"abcdefgh\"));\n    phraseQuery.add(new Term(F, \"jklmnopqrs\"));\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(phraseQuery, \"abcdefgh   jklmnopqrs\" ), sflb.minFragCharSize );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    if (VERBOSE) System.out.println( ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(abcdefghjklmnopqrs((0,21)))/1.0(0,21)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":["4de9b9325d973e4bc4c97eb91fe119eafa6caa99"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4de9b9325d973e4bc4c97eb91fe119eafa6caa99","date":1365179986,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testSmallerFragSizeThanPhraseQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testSmallerFragSizeThanPhraseQuery().mjava","sourceNew":"  public void testSmallerFragSizeThanPhraseQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"abcdefgh\"));\n    phraseQuery.add(new Term(F, \"jklmnopqrs\"));\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(phraseQuery, \"abcdefgh   jklmnopqrs\" ), sflb.minFragCharSize );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    if (VERBOSE) System.out.println( ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(abcdefghjklmnopqrs((0,21)))/1.0(0,21)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","sourceOld":"  public void testSmallerFragSizeThanPhraseQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"abcdefgh\"));\n    phraseQuery.add(new Term(F, \"jklmnopqrs\"));\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(phraseQuery, \"abcdefgh   jklmnopqrs\" ), sflb.minFragCharSize );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    if (VERBOSE) System.out.println( ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(abcdefghjklmnopqrs((0,21)))/1.0(1,19)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","bugFix":["335fa85a41a431b929ff93a0eb831abfc7b91e63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testSmallerFragSizeThanPhraseQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#testSmallerFragSizeThanPhraseQuery().mjava","sourceNew":"  public void testSmallerFragSizeThanPhraseQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    PhraseQuery phraseQuery = new PhraseQuery(F, \"abcdefgh\", \"jklmnopqrs\");\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(phraseQuery, \"abcdefgh   jklmnopqrs\" ), sflb.minFragCharSize );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    if (VERBOSE) System.out.println( ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(abcdefghjklmnopqrs((0,21)))/1.0(0,21)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","sourceOld":"  public void testSmallerFragSizeThanPhraseQuery() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(F, \"abcdefgh\"));\n    phraseQuery.add(new Term(F, \"jklmnopqrs\"));\n\n    FieldFragList ffl = sflb.createFieldFragList( fpl(phraseQuery, \"abcdefgh   jklmnopqrs\" ), sflb.minFragCharSize );\n    assertEquals( 1, ffl.getFragInfos().size() );\n    if (VERBOSE) System.out.println( ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(abcdefghjklmnopqrs((0,21)))/1.0(0,21)\", ffl.getFragInfos().get( 0 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"335fa85a41a431b929ff93a0eb831abfc7b91e63":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9e1499c5d26c936238506df90a3c02c76707722":["4de9b9325d973e4bc4c97eb91fe119eafa6caa99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4de9b9325d973e4bc4c97eb91fe119eafa6caa99":["335fa85a41a431b929ff93a0eb831abfc7b91e63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"335fa85a41a431b929ff93a0eb831abfc7b91e63":["4de9b9325d973e4bc4c97eb91fe119eafa6caa99"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["335fa85a41a431b929ff93a0eb831abfc7b91e63"],"e9e1499c5d26c936238506df90a3c02c76707722":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4de9b9325d973e4bc4c97eb91fe119eafa6caa99":["e9e1499c5d26c936238506df90a3c02c76707722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}