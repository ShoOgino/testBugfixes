{"path":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricsContext,String).mjava","commits":[{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    commitCommands = solrMetricsContext.meter(this, \"commits\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      solrMetricsContext.gauge(this, () -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      solrMetricsContext.gauge(this, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTLogFileSizeUpperBound() > 0) {\n      solrMetricsContext.gauge(this, () -> commitTracker.getTLogFileSizeUpperBound(), true, \"autoCommitMaxSize\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      solrMetricsContext.gauge(this, () -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      solrMetricsContext.gauge(this, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = solrMetricsContext.meter(this, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = solrMetricsContext.meter(this, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = solrMetricsContext.meter(this, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = solrMetricsContext.meter(this, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = solrMetricsContext.meter(this, \"expungeDeletes\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = solrMetricsContext.meter(this, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = solrMetricsContext.meter(this, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = solrMetricsContext.meter(this, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = solrMetricsContext.meter(this, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    commitCommands = solrMetricsContext.meter(\"commits\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      solrMetricsContext.gauge(() -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      solrMetricsContext.gauge(() -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTLogFileSizeUpperBound() > 0) {\n      solrMetricsContext.gauge(() -> commitTracker.getTLogFileSizeUpperBound(), true, \"autoCommitMaxSize\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      solrMetricsContext.gauge(() -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      solrMetricsContext.gauge(() -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = solrMetricsContext.meter(\"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = solrMetricsContext.meter(\"rollbacks\", getCategory().toString(), scope);\n    splitCommands = solrMetricsContext.meter(\"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = solrMetricsContext.meter(\"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = solrMetricsContext.meter(\"expungeDeletes\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = solrMetricsContext.meter(\"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = solrMetricsContext.meter(\"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = solrMetricsContext.meter(\"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = solrMetricsContext.meter(\"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    commitCommands = solrMetricsContext.meter(this, \"commits\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      solrMetricsContext.gauge(this, () -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      solrMetricsContext.gauge(this, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTLogFileSizeUpperBound() > 0) {\n      solrMetricsContext.gauge(this, () -> commitTracker.getTLogFileSizeUpperBound(), true, \"autoCommitMaxSize\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      solrMetricsContext.gauge(this, () -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      solrMetricsContext.gauge(this, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = solrMetricsContext.meter(this, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = solrMetricsContext.meter(this, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = solrMetricsContext.meter(this, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = solrMetricsContext.meter(this, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = solrMetricsContext.meter(this, \"expungeDeletes\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = solrMetricsContext.meter(this, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = solrMetricsContext.meter(this, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = solrMetricsContext.meter(this, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = solrMetricsContext.meter(this, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"]},"commit2Childs":{"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}