{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#[T]_checkMultiFieldValues(Map[String,Map[T,Integer]],Map[String,Map[T,Integer]],Set[String],boolean).mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#[T]_checkMultiFieldValues(Map[String,Map[T,Integer]],Map[String,Map[T,Integer]],Set[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected <T> void checkMultiFieldValues(Map<String,Map<T,Integer>> expected, Map<String,Map<T,Integer>> found, Set<String> missing, boolean deduplicated) {\n    expected.forEach( (id, expectedValues) -> {\n      assertTrue(\"Field does not contain values for id '\" + id + \"'.\", found.containsKey(id));\n      Map<T,Integer> foundValues = found.get(id);\n      expectedValues.forEach( (value, count) -> {\n        assertTrue(\"Value '\" + value + \"' not found for document with id '\" + id + \"'.\", foundValues.containsKey(value));\n        if (deduplicated) {\n          assertEquals(1, foundValues.get(value).intValue());\n        } else {\n          assertEquals(count, foundValues.get(value));\n        }\n      });\n      assertEquals(expectedValues.size(), foundValues.size());\n    });\n    assertEquals(expected.size(), found.size());\n    \n    missingDocuments.forEach( id -> assertTrue(\"Field does not have correct information for missing id '\" + id + \"'.\", missing.contains(id)));\n    assertEquals(missingDocuments.size(), missing.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#[T]_checkMultiFieldValues(Map[String,Map[T,Integer]],Map[String,Map[T,Integer]],Set[String],boolean).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#[T]_checkMultiFieldValues(Map[String,Map[T,Integer]],Map[String,Map[T,Integer]],Set[String],boolean).mjava","sourceNew":"  protected <T> void checkMultiFieldValues(Map<String,Map<T,Integer>> expected, Map<String,Map<T,Integer>> found, Set<String> missing, boolean deduplicated) {\n    expected.forEach( (id, expectedValues) -> {\n      assertTrue(\"Field does not contain values for id '\" + id + \"'.\", found.containsKey(id));\n      Map<T,Integer> foundValues = found.get(id);\n      expectedValues.forEach( (value, count) -> {\n        assertTrue(\"Value '\" + value + \"' not found for document with id '\" + id + \"'.\", foundValues.containsKey(value));\n        if (deduplicated) {\n          assertEquals(1, foundValues.get(value).intValue());\n        } else {\n          assertEquals(count, foundValues.get(value));\n        }\n      });\n      assertEquals(expectedValues.size(), foundValues.size());\n    });\n    assertEquals(expected.size(), found.size());\n\n    missingDocuments.forEach( id -> assertTrue(\"Field does not have correct information for missing id '\" + id + \"'.\", missing.contains(id)));\n    assertEquals(missingDocuments.size(), missing.size());\n  }\n\n","sourceOld":"  protected <T> void checkMultiFieldValues(Map<String,Map<T,Integer>> expected, Map<String,Map<T,Integer>> found, Set<String> missing, boolean deduplicated) {\n    expected.forEach( (id, expectedValues) -> {\n      assertTrue(\"Field does not contain values for id '\" + id + \"'.\", found.containsKey(id));\n      Map<T,Integer> foundValues = found.get(id);\n      expectedValues.forEach( (value, count) -> {\n        assertTrue(\"Value '\" + value + \"' not found for document with id '\" + id + \"'.\", foundValues.containsKey(value));\n        if (deduplicated) {\n          assertEquals(1, foundValues.get(value).intValue());\n        } else {\n          assertEquals(count, foundValues.get(value));\n        }\n      });\n      assertEquals(expectedValues.size(), foundValues.size());\n    });\n    assertEquals(expected.size(), found.size());\n    \n    missingDocuments.forEach( id -> assertTrue(\"Field does not have correct information for missing id '\" + id + \"'.\", missing.contains(id)));\n    assertEquals(missingDocuments.size(), missing.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#[T]_checkMultiFieldValues(Map[String,Map[T,Integer]],Map[String,Map[T,Integer]],Set[String],boolean).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#[T]_checkMultiFieldValues(Map[String,Map[T,Integer]],Map[String,Map[T,Integer]],Set[String],boolean).mjava","sourceNew":"  protected <T> void checkMultiFieldValues(Map<String,Map<T,Integer>> expected, Map<String,Map<T,Integer>> found, Set<String> missing, boolean deduplicated) {\n    expected.forEach( (id, expectedValues) -> {\n      assertTrue(\"Field does not contain values for id '\" + id + \"'.\", found.containsKey(id));\n      Map<T,Integer> foundValues = found.get(id);\n      expectedValues.forEach( (value, count) -> {\n        assertTrue(\"Value '\" + value + \"' not found for document with id '\" + id + \"'.\", foundValues.containsKey(value));\n        if (deduplicated) {\n          assertEquals(1, foundValues.get(value).intValue());\n        } else {\n          assertEquals(count, foundValues.get(value));\n        }\n      });\n      assertEquals(expectedValues.size(), foundValues.size());\n    });\n    assertEquals(expected.size(), found.size());\n\n    missingDocuments.forEach( id -> assertTrue(\"Field does not have correct information for missing id '\" + id + \"'.\", missing.contains(id)));\n    assertEquals(missingDocuments.size(), missing.size());\n  }\n\n","sourceOld":"  protected <T> void checkMultiFieldValues(Map<String,Map<T,Integer>> expected, Map<String,Map<T,Integer>> found, Set<String> missing, boolean deduplicated) {\n    expected.forEach( (id, expectedValues) -> {\n      assertTrue(\"Field does not contain values for id '\" + id + \"'.\", found.containsKey(id));\n      Map<T,Integer> foundValues = found.get(id);\n      expectedValues.forEach( (value, count) -> {\n        assertTrue(\"Value '\" + value + \"' not found for document with id '\" + id + \"'.\", foundValues.containsKey(value));\n        if (deduplicated) {\n          assertEquals(1, foundValues.get(value).intValue());\n        } else {\n          assertEquals(count, foundValues.get(value));\n        }\n      });\n      assertEquals(expectedValues.size(), foundValues.size());\n    });\n    assertEquals(expected.size(), found.size());\n    \n    missingDocuments.forEach( id -> assertTrue(\"Field does not have correct information for missing id '\" + id + \"'.\", missing.contains(id)));\n    assertEquals(missingDocuments.size(), missing.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}