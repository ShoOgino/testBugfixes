{"path":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *   \n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null)) \n          fieldFilter.add(field);        \n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());  \n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *   \n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null)) \n          fieldFilter.add(field);        \n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());  \n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *   \n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null)) \n          fieldFilter.add(field);        \n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());  \n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *   \n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null)) \n          fieldFilter.add(field);        \n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());  \n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *   \n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null)) \n          fieldFilter.add(field);        \n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());  \n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd00dd91853514614379b0e680d65bd19cac0f30","date":1283087816,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());\n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *   \n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null)) \n          fieldFilter.add(field);        \n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());  \n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());\n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *   \n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null)) \n          fieldFilter.add(field);        \n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());  \n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"863f5f4b9cd4134d4bd9d6528419bf72ddbe4433","date":1293817845,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> returnFields = res.getReturnFields();\n    Set<String> fieldFilter = returnFields;\n\n    if(returnFields != null) {\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(returnFields);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());\n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> returnFields = res.getReturnFields();\n    Set<String> fieldFilter = returnFields;\n\n    if(returnFields != null) {\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(returnFields);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());\n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());\n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70ad682703b8585f5d0a637efec044d57ec05efb":["cd00dd91853514614379b0e680d65bd19cac0f30","863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"863f5f4b9cd4134d4bd9d6528419bf72ddbe4433":["cd00dd91853514614379b0e680d65bd19cac0f30"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","cd00dd91853514614379b0e680d65bd19cac0f30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"cd00dd91853514614379b0e680d65bd19cac0f30":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd00dd91853514614379b0e680d65bd19cac0f30"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"863f5f4b9cd4134d4bd9d6528419bf72ddbe4433":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"cd00dd91853514614379b0e680d65bd19cac0f30":["70ad682703b8585f5d0a637efec044d57ec05efb","863f5f4b9cd4134d4bd9d6528419bf72ddbe4433","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}