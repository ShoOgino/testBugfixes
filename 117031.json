{"path":"backwards/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/FieldCacheSanityChecker#getAllDecendentReaderKeys(Object).mjava","sourceNew":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","sourceOld":"  /**\n   * Checks if the seed is an IndexReader, and if so will walk\n   * the hierarchy of subReaders building up a list of the objects \n   * returned by obj.getFieldCacheKey()\n   */\n  private List getAllDecendentReaderKeys(Object seed) {\n    List<Object> all = new ArrayList<Object>(17); // will grow as we iter\n    all.add(seed);\n    for (int i = 0; i < all.size(); i++) {\n      Object obj = all.get(i);\n      if (obj instanceof IndexReader) {\n        IndexReader[] subs = ((IndexReader)obj).getSequentialSubReaders();\n        for (int j = 0; (null != subs) && (j < subs.length); j++) {\n          all.add(subs[j].getFieldCacheKey());\n        }\n      }\n      \n    }\n    // need to skip the first, because it was the seed\n    return all.subList(1, all.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}