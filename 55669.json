{"path":"lucene/src/test-framework/java/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToOptimize.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToOptimize.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToOptimize.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToOptimize.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToOptimize.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToOptimize.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}