{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http://localhost/?core=xxx\";\n      CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http://localhost/?core=xxx\";\n      CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http://localhost/?core=xxx\";\n      CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http://localhost/?core=xxx\";\n      CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http://localhost/?core=xxx\";\n      CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http://localhost/?core=xxx\";\n      CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http://localhost/?core=xxx\";\n      HttpSolrServer s = new HttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http://localhost/?core=xxx\";\n      CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47c952a4f0f0e9b74763a0609a3726dbb217164a","date":1347968413,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http://127.0.0.1/?core=xxx\";\n      HttpSolrServer s = new HttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http://localhost/?core=xxx\";\n      HttpSolrServer s = new HttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrServer s = new HttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http://127.0.0.1/?core=xxx\";\n      HttpSolrServer s = new HttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a018990398b6f88e3770ee15e67c5ec6b1bb0b23","date":1398614730,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrServer s = new HttpSolrServer( url );\n      Assert.fail(\"HttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrServer s = new HttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrServer s = new HttpSolrServer( url );\n      Assert.fail(\"HttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrServer s = new HttpSolrServer( url );\n      Assert.fail( \"CommonsHttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      Assert.fail(\"HttpSolrServer should not allow a path with a parameter: \" + client.getBaseURL());\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrServer s = new HttpSolrServer( url );\n      Assert.fail(\"HttpSolrServer should not allow a path with a parameter: \"+s.getBaseURL() );\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      Assert.fail(\"HttpSolrServer should not allow a path with a parameter: \" + client.getBaseURL());\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      Assert.fail(\"HttpSolrServer should not allow a path with a parameter: \" + client.getBaseURL());\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      Assert.fail(\"HttpSolrServer should not allow a path with a parameter: \" + client.getBaseURL());\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrClient client = new HttpSolrClient(url);\n      Assert.fail(\"HttpSolrServer should not allow a path with a parameter: \" + client.getBaseURL());\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup() {\n    // setup the server...\n    String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n    expectThrows(Exception.class, () -> getHttpSolrClient(url));\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      Assert.fail(\"HttpSolrServer should not allow a path with a parameter: \" + client.getBaseURL());\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup() {\n    // setup the server...\n    String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n    expectThrows(Exception.class, () -> getHttpSolrClient(url));\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      Assert.fail(\"HttpSolrServer should not allow a path with a parameter: \" + client.getBaseURL());\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest#testBadSetup().mjava","sourceNew":"  @Test\n  public void testBadSetup() {\n    // setup the server...\n    String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n    expectThrows(Exception.class, () -> getHttpSolrClient(url));\n  }\n\n","sourceOld":"  @Test\n  public void testBadSetup()\n  {\n    try {\n      // setup the server...\n      String url = \"http\" + (isSSLMode() ? \"s\" : \"\") +  \"://127.0.0.1/?core=xxx\";\n      HttpSolrClient client = getHttpSolrClient(url);\n      Assert.fail(\"HttpSolrServer should not allow a path with a parameter: \" + client.getBaseURL());\n    }\n    catch( Exception ex ) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","a018990398b6f88e3770ee15e67c5ec6b1bb0b23"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["bafca15d8e408346a67f4282ad1143b88023893b"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["c26f00b574427b55127e869b935845554afde1fa"],"bafca15d8e408346a67f4282ad1143b88023893b":["a018990398b6f88e3770ee15e67c5ec6b1bb0b23"],"f8061ddd97f3352007d927dae445884a6f3d857b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"47c952a4f0f0e9b74763a0609a3726dbb217164a":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["47c952a4f0f0e9b74763a0609a3726dbb217164a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["bafca15d8e408346a67f4282ad1143b88023893b","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"a018990398b6f88e3770ee15e67c5ec6b1bb0b23":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"]},"commit2Childs":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"c26f00b574427b55127e869b935845554afde1fa":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["47c952a4f0f0e9b74763a0609a3726dbb217164a"],"bafca15d8e408346a67f4282ad1143b88023893b":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"47c952a4f0f0e9b74763a0609a3726dbb217164a":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","a018990398b6f88e3770ee15e67c5ec6b1bb0b23"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["f8061ddd97f3352007d927dae445884a6f3d857b","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f8061ddd97f3352007d927dae445884a6f3d857b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"a018990398b6f88e3770ee15e67c5ec6b1bb0b23":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","f8061ddd97f3352007d927dae445884a6f3d857b","a258fbb26824fd104ed795e5d9033d2d040049ee","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}