{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,ClusterDataProvider).mjava","commits":[{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,ClusterDataProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(ZkController).mjava","sourceNew":"  public ScheduledTriggers(SolrResourceLoader loader, ClusterDataProvider clusterDataProvider) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    this.clusterDataProvider = clusterDataProvider;\n    this.loader = loader;\n    queueStats = new Overseer.Stats();\n    listeners = new TriggerListeners();\n  }\n\n","sourceOld":"  public ScheduledTriggers(ZkController zkController) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    coreContainer = zkController.getCoreContainer();\n    zkClient = zkController.getZkClient();\n    queueStats = new Overseer.Stats();\n    listeners = new TriggerListeners();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrResourceLoader,ClusterDataProvider).mjava","sourceNew":"  public ScheduledTriggers(ZkController zkController) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    coreContainer = zkController.getCoreContainer();\n    zkClient = zkController.getZkClient();\n    queueStats = new Overseer.Stats();\n    listeners = new TriggerListeners();\n  }\n\n","sourceOld":"  public ScheduledTriggers(SolrResourceLoader loader, ClusterDataProvider clusterDataProvider) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    this.clusterDataProvider = clusterDataProvider;\n    this.loader = loader;\n    queueStats = new Overseer.Stats();\n    listeners = new TriggerListeners();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b869898f50ca80263bac2e3ae0949f7700e5c977","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}