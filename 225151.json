{"path":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","commits":[{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221f4466c3d651221b8ed1ee82fea94dd0df7fa2","date":1399637078,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10005c6013abbd1102f2463cf95604d4c8774c99","date":1469460814,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before beginning to flush them to the Directory.  For\n   * faster indexing performance it's best to use as large a RAM buffer as you can.\n   * <p>\n   * Note that this setting is not a hard limit on memory usage during indexing, as\n   * transient and non-trivial memory well beyond this buffer size may be used,\n   * for example due to segment merges or writing points to new segments.\n   * For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08973aa47f2cf98a588293a53af4e948952ccfb","date":1469518724,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before beginning to flush them to the Directory.  For\n   * faster indexing performance it's best to use as large a RAM buffer as you can.\n   * <p>\n   * Note that this setting is not a hard limit on memory usage during indexing, as\n   * transient and non-trivial memory well beyond this buffer size may be used,\n   * for example due to segment merges or writing points to new segments.\n   * For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0567940defa1ea6eb8a039d9d36e3682063f8a4","date":1469815320,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before beginning to flush them to the Directory.  For\n   * faster indexing performance it's best to use as large a RAM buffer as you can.\n   * <p>\n   * Note that this setting is not a hard limit on memory usage during indexing, as\n   * transient and non-trivial memory well beyond this buffer size may be used,\n   * for example due to segment merges or writing points to new segments.\n   * For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before beginning to flush them to the Directory.  For\n   * faster indexing performance it's best to use as large a RAM buffer as you can.\n   * <p>\n   * Note that this setting is not a hard limit on memory usage during indexing, as\n   * transient and non-trivial memory well beyond this buffer size may be used,\n   * for example due to segment merges or writing points to new segments.\n   * For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit() or refresh()\n   * periodically yourself.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit() or refresh()\n   * periodically yourself.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setRAMBufferSizeMB(double).mjava","sourceNew":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit() or refresh()\n   * periodically yourself.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the amount of RAM that may be used for buffering added documents\n   * and deletions before they are flushed to the Directory. Generally for\n   * faster indexing performance it's best to flush by RAM usage instead of\n   * document count and use as large a RAM buffer as you can.\n   * <p>\n   * When this is set, the writer will flush whenever buffered documents and\n   * deletions use this much RAM. Pass in\n   * {@link IndexWriterConfig#DISABLE_AUTO_FLUSH} to prevent triggering a flush\n   * due to RAM usage. Note that if flushing by document count is also enabled,\n   * then the flush will be triggered by whichever comes first.\n   * <p>\n   * The maximum RAM limit is inherently determined by the JVMs available\n   * memory. Yet, an {@link IndexWriter} session can consume a significantly\n   * larger amount of memory than the given RAM limit since this limit is just\n   * an indicator when to flush memory resident documents to the Directory.\n   * Flushes are likely happen concurrently while other threads adding documents\n   * to the writer. For application stability the available memory in the JVM\n   * should be significantly larger than the RAM buffer used for indexing.\n   * <p>\n   * <b>NOTE</b>: the account of RAM usage for pending deletions is only\n   * approximate. Specifically, if you delete by Query, Lucene currently has no\n   * way to measure the RAM usage of individual Queries so the accounting will\n   * under-estimate and you should compensate by either calling commit()\n   * periodically yourself, or by using {@link #setMaxBufferedDeleteTerms(int)}\n   * to flush and apply buffered deletes by count instead of RAM usage (for each\n   * buffered delete Query a constant number of bytes is used to estimate RAM\n   * usage). Note that enabling {@link #setMaxBufferedDeleteTerms(int)} will not\n   * trigger any segment flushes.\n   * <p>\n   * <b>NOTE</b>: It's not guaranteed that all memory resident documents are\n   * flushed once this limit is exceeded. Depending on the configured\n   * {@link FlushPolicy} only a subset of the buffered documents are flushed and\n   * therefore only parts of the RAM buffer is released.\n   * <p>\n   * \n   * The default value is {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB}.\n   * \n   * <p>\n   * Takes effect immediately, but only the next time a document is added,\n   * updated or deleted.\n   * \n   * @see IndexWriterConfig#setRAMPerThreadHardLimitMB(int)\n   * \n   * @throws IllegalArgumentException\n   *           if ramBufferSize is enabled but non-positive, or it disables\n   *           ramBufferSize when maxBufferedDocs is already disabled\n   */\n  public synchronized LiveIndexWriterConfig setRAMBufferSizeMB(double ramBufferSizeMB) {\n    if (ramBufferSizeMB != IndexWriterConfig.DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {\n      throw new IllegalArgumentException(\"ramBufferSize should be > 0.0 MB when enabled\");\n    }\n    if (ramBufferSizeMB == IndexWriterConfig.DISABLE_AUTO_FLUSH\n        && maxBufferedDocs == IndexWriterConfig.DISABLE_AUTO_FLUSH) {\n      throw new IllegalArgumentException(\"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    }\n    this.ramBufferSizeMB = ramBufferSizeMB;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0567940defa1ea6eb8a039d9d36e3682063f8a4":["d08973aa47f2cf98a588293a53af4e948952ccfb"],"221f4466c3d651221b8ed1ee82fea94dd0df7fa2":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b0567940defa1ea6eb8a039d9d36e3682063f8a4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"10005c6013abbd1102f2463cf95604d4c8774c99":["221f4466c3d651221b8ed1ee82fea94dd0df7fa2"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["b0567940defa1ea6eb8a039d9d36e3682063f8a4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["b0567940defa1ea6eb8a039d9d36e3682063f8a4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4e54ed7cef46f86888b5fb547594f62160395c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"d08973aa47f2cf98a588293a53af4e948952ccfb":["221f4466c3d651221b8ed1ee82fea94dd0df7fa2","10005c6013abbd1102f2463cf95604d4c8774c99"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["d08973aa47f2cf98a588293a53af4e948952ccfb","b0567940defa1ea6eb8a039d9d36e3682063f8a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"b0567940defa1ea6eb8a039d9d36e3682063f8a4":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"221f4466c3d651221b8ed1ee82fea94dd0df7fa2":["10005c6013abbd1102f2463cf95604d4c8774c99","d08973aa47f2cf98a588293a53af4e948952ccfb"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["221f4466c3d651221b8ed1ee82fea94dd0df7fa2"],"10005c6013abbd1102f2463cf95604d4c8774c99":["d08973aa47f2cf98a588293a53af4e948952ccfb"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d08973aa47f2cf98a588293a53af4e948952ccfb":["b0567940defa1ea6eb8a039d9d36e3682063f8a4","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}