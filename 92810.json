{"path":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","commits":[{"id":"29887daf839649150d96855b142b76f5c45d60d2","date":1482160504,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    // Workaround until HADOOP-13346 is fixed.\n    HttpServletResponse rspCloseShield = new HttpServletResponseWrapper(frsp) {\n      @SuppressForbidden(reason = \"Hadoop DelegationTokenAuthenticationFilter uses response writer, this\" +\n          \"is providing a CloseShield on top of that\")\n      @Override\n      public PrintWriter getWriter() throws IOException {\n        final PrintWriter pw = new PrintWriterWrapper(frsp.getWriter()) {\n          @Override\n          public void close() {};\n        };\n        return pw;\n      }\n    };\n    authFilter.doFilter(request, rspCloseShield, filterChain);\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find \" + REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    // Workaround until HADOOP-13346 is fixed.\n    HttpServletResponse rspCloseShield = new HttpServletResponseWrapper(frsp) {\n      @SuppressForbidden(reason = \"Hadoop DelegationTokenAuthenticationFilter uses response writer, this\" +\n          \"is providing a CloseShield on top of that\")\n      @Override\n      public PrintWriter getWriter() throws IOException {\n        final PrintWriter pw = new PrintWriterWrapper(frsp.getWriter()) {\n          @Override\n          public void close() {};\n        };\n        return pw;\n      }\n    };\n    authFilter.doFilter(request, rspCloseShield, filterChain);\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find \" + REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd225c382b8919214f3db79af4c842f893b871","date":1486491351,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    if (TRACE_HTTP) {\n      HttpServletRequest req = (HttpServletRequest) request;\n      log.info(\"----------HTTP Request---------\");\n      log.info(\"{} : {}\", req.getMethod(), req.getRequestURI());\n      log.info(\"Query : {}\", req.getQueryString());\n      log.info(\"Headers :\");\n      Enumeration<String> headers = req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = req.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          log.info(\"{} : {}\", name, hvals.nextElement());\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    // Workaround until HADOOP-13346 is fixed.\n    HttpServletResponse rspCloseShield = new HttpServletResponseWrapper(frsp) {\n      @SuppressForbidden(reason = \"Hadoop DelegationTokenAuthenticationFilter uses response writer, this\" +\n          \"is providing a CloseShield on top of that\")\n      @Override\n      public PrintWriter getWriter() throws IOException {\n        final PrintWriter pw = new PrintWriterWrapper(frsp.getWriter()) {\n          @Override\n          public void close() {};\n        };\n        return pw;\n      }\n    };\n    authFilter.doFilter(request, rspCloseShield, filterChain);\n\n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      log.info(\"Status : {}\", frsp.getStatus());\n      log.info(\"Headers :\");\n      for (String name : frsp.getHeaderNames()) {\n        for (String value : frsp.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find \" + REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    // Workaround until HADOOP-13346 is fixed.\n    HttpServletResponse rspCloseShield = new HttpServletResponseWrapper(frsp) {\n      @SuppressForbidden(reason = \"Hadoop DelegationTokenAuthenticationFilter uses response writer, this\" +\n          \"is providing a CloseShield on top of that\")\n      @Override\n      public PrintWriter getWriter() throws IOException {\n        final PrintWriter pw = new PrintWriterWrapper(frsp.getWriter()) {\n          @Override\n          public void close() {};\n        };\n        return pw;\n      }\n    };\n    authFilter.doFilter(request, rspCloseShield, filterChain);\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find \" + REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85397dd93927c17347c6bf89800cd0fc566c2d03","date":1544610812,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    if (TRACE_HTTP) {\n      HttpServletRequest req = (HttpServletRequest) request;\n      log.info(\"----------HTTP Request---------\");\n      log.info(\"{} : {}\", req.getMethod(), req.getRequestURI());\n      log.info(\"Query : {}\", req.getQueryString());\n      log.info(\"Headers :\");\n      Enumeration<String> headers = req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = req.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          log.info(\"{} : {}\", name, hvals.nextElement());\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    // Workaround until HADOOP-13346 is fixed.\n    HttpServletResponse rspCloseShield = new HttpServletResponseWrapper(frsp) {\n      @SuppressForbidden(reason = \"Hadoop DelegationTokenAuthenticationFilter uses response writer, this\" +\n          \"is providing a CloseShield on top of that\")\n      @Override\n      public PrintWriter getWriter() throws IOException {\n        final PrintWriter pw = new PrintWriterWrapper(frsp.getWriter()) {\n          @Override\n          public void close() {};\n        };\n        return pw;\n      }\n    };\n    authFilter.doFilter(request, rspCloseShield, filterChain);\n\n    switch (frsp.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (frsp.getStatus() >= 200 && frsp.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      log.info(\"Status : {}\", frsp.getStatus());\n      log.info(\"Headers :\");\n      for (String name : frsp.getHeaderNames()) {\n        for (String value : frsp.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find \" + REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    if (TRACE_HTTP) {\n      HttpServletRequest req = (HttpServletRequest) request;\n      log.info(\"----------HTTP Request---------\");\n      log.info(\"{} : {}\", req.getMethod(), req.getRequestURI());\n      log.info(\"Query : {}\", req.getQueryString());\n      log.info(\"Headers :\");\n      Enumeration<String> headers = req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = req.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          log.info(\"{} : {}\", name, hvals.nextElement());\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    // Workaround until HADOOP-13346 is fixed.\n    HttpServletResponse rspCloseShield = new HttpServletResponseWrapper(frsp) {\n      @SuppressForbidden(reason = \"Hadoop DelegationTokenAuthenticationFilter uses response writer, this\" +\n          \"is providing a CloseShield on top of that\")\n      @Override\n      public PrintWriter getWriter() throws IOException {\n        final PrintWriter pw = new PrintWriterWrapper(frsp.getWriter()) {\n          @Override\n          public void close() {};\n        };\n        return pw;\n      }\n    };\n    authFilter.doFilter(request, rspCloseShield, filterChain);\n\n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      log.info(\"Status : {}\", frsp.getStatus());\n      log.info(\"Headers :\");\n      for (String name : frsp.getHeaderNames()) {\n        for (String value : frsp.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find \" + REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a0ea515a31bb6b0279f3bbcc2bf88ed17eb0c0c","date":1551210752,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    if (TRACE_HTTP) {\n      HttpServletRequest req = (HttpServletRequest) request;\n      log.info(\"----------HTTP Request---------\");\n      log.info(\"{} : {}\", req.getMethod(), req.getRequestURI());\n      log.info(\"Query : {}\", req.getQueryString());\n      log.info(\"Headers :\");\n      Enumeration<String> headers = req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = req.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          log.info(\"{} : {}\", name, hvals.nextElement());\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    authFilter.doFilter(request, frsp, filterChain);\n\n    switch (frsp.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (frsp.getStatus() >= 200 && frsp.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      log.info(\"Status : {}\", frsp.getStatus());\n      log.info(\"Headers :\");\n      for (String name : frsp.getHeaderNames()) {\n        for (String value : frsp.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find \" + REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    if (TRACE_HTTP) {\n      HttpServletRequest req = (HttpServletRequest) request;\n      log.info(\"----------HTTP Request---------\");\n      log.info(\"{} : {}\", req.getMethod(), req.getRequestURI());\n      log.info(\"Query : {}\", req.getQueryString());\n      log.info(\"Headers :\");\n      Enumeration<String> headers = req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = req.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          log.info(\"{} : {}\", name, hvals.nextElement());\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    // Workaround until HADOOP-13346 is fixed.\n    HttpServletResponse rspCloseShield = new HttpServletResponseWrapper(frsp) {\n      @SuppressForbidden(reason = \"Hadoop DelegationTokenAuthenticationFilter uses response writer, this\" +\n          \"is providing a CloseShield on top of that\")\n      @Override\n      public PrintWriter getWriter() throws IOException {\n        final PrintWriter pw = new PrintWriterWrapper(frsp.getWriter()) {\n          @Override\n          public void close() {};\n        };\n        return pw;\n      }\n    };\n    authFilter.doFilter(request, rspCloseShield, filterChain);\n\n    switch (frsp.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (frsp.getStatus() >= 200 && frsp.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      log.info(\"Status : {}\", frsp.getStatus());\n      log.info(\"Headers :\");\n      for (String name : frsp.getHeaderNames()) {\n        for (String value : frsp.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find \" + REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"accbc347dd28993a84ae51e9e6f01e31a26a7184","date":1551252530,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    if (TRACE_HTTP) {\n      HttpServletRequest req = (HttpServletRequest) request;\n      log.info(\"----------HTTP Request---------\");\n      log.info(\"{} : {}\", req.getMethod(), req.getRequestURI());\n      log.info(\"Query : {}\", req.getQueryString());\n      log.info(\"Headers :\");\n      Enumeration<String> headers = req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = req.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          log.info(\"{} : {}\", name, hvals.nextElement());\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    authFilter.doFilter(request, frsp, filterChain);\n\n    switch (frsp.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (frsp.getStatus() >= 200 && frsp.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      log.info(\"Status : {}\", frsp.getStatus());\n      log.info(\"Headers :\");\n      for (String name : frsp.getHeaderNames()) {\n        for (String value : frsp.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find \" + REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    if (TRACE_HTTP) {\n      HttpServletRequest req = (HttpServletRequest) request;\n      log.info(\"----------HTTP Request---------\");\n      log.info(\"{} : {}\", req.getMethod(), req.getRequestURI());\n      log.info(\"Query : {}\", req.getQueryString());\n      log.info(\"Headers :\");\n      Enumeration<String> headers = req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = req.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          log.info(\"{} : {}\", name, hvals.nextElement());\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    // Workaround until HADOOP-13346 is fixed.\n    HttpServletResponse rspCloseShield = new HttpServletResponseWrapper(frsp) {\n      @SuppressForbidden(reason = \"Hadoop DelegationTokenAuthenticationFilter uses response writer, this\" +\n          \"is providing a CloseShield on top of that\")\n      @Override\n      public PrintWriter getWriter() throws IOException {\n        final PrintWriter pw = new PrintWriterWrapper(frsp.getWriter()) {\n          @Override\n          public void close() {};\n        };\n        return pw;\n      }\n    };\n    authFilter.doFilter(request, rspCloseShield, filterChain);\n\n    switch (frsp.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (frsp.getStatus() >= 200 && frsp.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      log.info(\"Status : {}\", frsp.getStatus());\n      log.info(\"Headers :\");\n      for (String name : frsp.getHeaderNames()) {\n        for (String value : frsp.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find \" + REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    if (TRACE_HTTP) {\n      HttpServletRequest req = (HttpServletRequest) request;\n      log.info(\"----------HTTP Request---------{}\");\n      if (log.isInfoEnabled()) {\n        log.info(\"{} : {}\", req.getMethod(), req.getRequestURI());\n      }\n      if (log.isInfoEnabled()) {\n        log.info(\"Query : {}\", req.getQueryString());\n      }\n      log.info(\"Headers :\");\n      Enumeration<String> headers = req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = req.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{} : {}\", name, hvals.nextElement());\n          }\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    authFilter.doFilter(request, frsp, filterChain);\n\n    switch (frsp.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (frsp.getStatus() >= 200 && frsp.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      if (log.isInfoEnabled()) {\n        log.info(\"Status : {}\", frsp.getStatus());\n      }\n      log.info(\"Headers :\");\n      for (String name : frsp.getHeaderNames()) {\n        for (String value : frsp.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find {}\", REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    if (TRACE_HTTP) {\n      HttpServletRequest req = (HttpServletRequest) request;\n      log.info(\"----------HTTP Request---------\");\n      log.info(\"{} : {}\", req.getMethod(), req.getRequestURI());\n      log.info(\"Query : {}\", req.getQueryString());\n      log.info(\"Headers :\");\n      Enumeration<String> headers = req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = req.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          log.info(\"{} : {}\", name, hvals.nextElement());\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    authFilter.doFilter(request, frsp, filterChain);\n\n    switch (frsp.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (frsp.getStatus() >= 200 && frsp.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      log.info(\"Status : {}\", frsp.getStatus());\n      log.info(\"Headers :\");\n      for (String name : frsp.getHeaderNames()) {\n        for (String value : frsp.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find \" + REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":5,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/HadoopAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n      throws Exception {\n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Request---------{}\");\n      if (log.isInfoEnabled()) {\n        log.info(\"{} : {}\", request.getMethod(), request.getRequestURI());\n      }\n      if (log.isInfoEnabled()) {\n        log.info(\"Query : {}\", request.getQueryString());\n      }\n      log.info(\"Headers :\");\n      Enumeration<String> headers = request.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = request.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{} : {}\", name, hvals.nextElement());\n          }\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    authFilter.doFilter(request, response, filterChain);\n\n    switch (response.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (response.getStatus() >= 200 && response.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      if (log.isInfoEnabled()) {\n        log.info(\"Status : {}\", response.getStatus());\n      }\n      log.info(\"Headers :\");\n      for (String name : response.getHeaderNames()) {\n        for (String value : response.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find {}\", REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)\n      throws Exception {\n    final HttpServletResponse frsp = (HttpServletResponse)response;\n\n    if (TRACE_HTTP) {\n      HttpServletRequest req = (HttpServletRequest) request;\n      log.info(\"----------HTTP Request---------{}\");\n      if (log.isInfoEnabled()) {\n        log.info(\"{} : {}\", req.getMethod(), req.getRequestURI());\n      }\n      if (log.isInfoEnabled()) {\n        log.info(\"Query : {}\", req.getQueryString());\n      }\n      log.info(\"Headers :\");\n      Enumeration<String> headers = req.getHeaderNames();\n      while (headers.hasMoreElements()) {\n        String name = headers.nextElement();\n        Enumeration<String> hvals = req.getHeaders(name);\n        while (hvals.hasMoreElements()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{} : {}\", name, hvals.nextElement());\n          }\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n    authFilter.doFilter(request, frsp, filterChain);\n\n    switch (frsp.getStatus()) {\n      case HttpServletResponse.SC_UNAUTHORIZED:\n        // Cannot tell whether the 401 is due to wrong or missing credentials\n        numWrongCredentials.inc();\n        break;\n\n      case HttpServletResponse.SC_FORBIDDEN:\n        // Are there other status codes which should also translate to error?\n        numErrors.mark();\n        break;\n      default:\n        if (frsp.getStatus() >= 200 && frsp.getStatus() <= 299) {\n          numAuthenticated.inc();\n        } else {\n          numErrors.mark();\n        }\n    }\n     \n    if (TRACE_HTTP) {\n      log.info(\"----------HTTP Response---------\");\n      if (log.isInfoEnabled()) {\n        log.info(\"Status : {}\", frsp.getStatus());\n      }\n      log.info(\"Headers :\");\n      for (String name : frsp.getHeaderNames()) {\n        for (String value : frsp.getHeaders(name)) {\n          log.info(\"{} : {}\", name, value);\n        }\n      }\n      log.info(\"-------------------------------\");\n    }\n\n\n    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.\n      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);\n      if (requestContinuesAttr == null) {\n        log.warn(\"Could not find {}\", REQUEST_CONTINUES_ATTR);\n        return false;\n      } else {\n        return Boolean.parseBoolean(requestContinuesAttr);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ddd225c382b8919214f3db79af4c842f893b871":["29887daf839649150d96855b142b76f5c45d60d2"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["accbc347dd28993a84ae51e9e6f01e31a26a7184"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["9ddd225c382b8919214f3db79af4c842f893b871"],"29887daf839649150d96855b142b76f5c45d60d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29887daf839649150d96855b142b76f5c45d60d2"],"23b436ffee26b67f87efef6a3bab24697332b6b2":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"accbc347dd28993a84ae51e9e6f01e31a26a7184":["85397dd93927c17347c6bf89800cd0fc566c2d03","8a0ea515a31bb6b0279f3bbcc2bf88ed17eb0c0c"],"8a0ea515a31bb6b0279f3bbcc2bf88ed17eb0c0c":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b436ffee26b67f87efef6a3bab24697332b6b2"]},"commit2Childs":{"9ddd225c382b8919214f3db79af4c842f893b871":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"29887daf839649150d96855b142b76f5c45d60d2":["9ddd225c382b8919214f3db79af4c842f893b871","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["accbc347dd28993a84ae51e9e6f01e31a26a7184","8a0ea515a31bb6b0279f3bbcc2bf88ed17eb0c0c"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"23b436ffee26b67f87efef6a3bab24697332b6b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29887daf839649150d96855b142b76f5c45d60d2","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"accbc347dd28993a84ae51e9e6f01e31a26a7184":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"8a0ea515a31bb6b0279f3bbcc2bf88ed17eb0c0c":["accbc347dd28993a84ae51e9e6f01e31a26a7184"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}