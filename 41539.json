{"path":"backwards/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"/dev/null","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestSort#testEmptyFieldSort().mjava","sourceNew":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","sourceOld":"  // test sorting when the sort field is empty (undefined) for some of the documents\n  public void testEmptyFieldSort() throws Exception {\n    sort.setSort (new SortField (\"string\", SortField.STRING) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"string\", SortField.STRING, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH));\n    assertMatches (full, queryF, sort, \"ZJI\");\n    \n    sort.setSort (new SortField (\"i18n\", Locale.ENGLISH, true));\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT) );\n    assertMatches (full, queryF, sort, \"IZJ\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true) );\n    assertMatches (full, queryF, sort, \"JZI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    // using a nonexisting field as first sort key shouldn't make a difference:\n    sort.setSort (new SortField (\"nosuchfield\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryF, sort, \"ZJI\");\n\n    sort.setSort (new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryF, sort, \"IJZ\");\n\n    // When a field is null for both documents, the next SortField should be used.\n                // Works for\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (full, queryG, sort, \"ZWXY\");\n\n    // Reverse the last criterium to make sure the test didn't pass by chance\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (full, queryG, sort, \"ZYXW\");\n\n    // Do the same for a MultiSearcher\n    Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (multiSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (multiSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the multiSearcher. it would close the full searcher too!\n\n    // Do the same for a ParallelMultiSearcher\n                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZWXY\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT),\n                                new SortField (\"string\", SortField.STRING),\n        new SortField (\"float\", SortField.FLOAT, true) );\n    assertMatches (parallelSearcher, queryG, sort, \"ZYXW\");\n    // Don't close the parallelSearcher. it would close the full searcher too!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}