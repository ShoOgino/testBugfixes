{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","commits":[{"id":"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","date":1286986267,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#groupNames().mjava","sourceNew":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void groupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = AbstractDataImportHandlerTestCase.getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    Assert.assertEquals(\"Noble\", result.get(\"firstName\"));\n    Assert.assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    Assert.assertEquals(\"Noble\", l1.get(0));\n    Assert.assertEquals(\"Shalin\", l1.get(1));\n    Assert.assertEquals(\"Paul\", l2.get(0));\n    Assert.assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#groupNames().mjava","sourceNew":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void groupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = AbstractDataImportHandlerTestCase.getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    Assert.assertEquals(\"Noble\", result.get(\"firstName\"));\n    Assert.assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    Assert.assertEquals(\"Noble\", l1.get(0));\n    Assert.assertEquals(\"Shalin\", l1.get(1));\n    Assert.assertEquals(\"Paul\", l2.get(0));\n    Assert.assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","sourceNew":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testGroupNames().mjava","sourceNew":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void testGroupNames() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"col1\" regex=\"(\\w*)(\\w*) (\\w*)\" groupNames=\",firstName,lastName\"/>\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(COLUMN,\"fullName\");\n    m.put(GROUP_NAMES,\",firstName,lastName\");\n    m.put(REGEX,\"(\\\\w*) (\\\\w*) (\\\\w*)\");\n    fields.add(m);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    Map<String, Object> src = new HashMap<String, Object>();\n    src.put(\"fullName\", \"Mr Noble Paul\");\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"Noble\", result.get(\"firstName\"));\n    assertEquals(\"Paul\", result.get(\"lastName\"));\n    src= new HashMap<String, Object>();\n    List<String> l= new ArrayList();\n    l.add(\"Mr Noble Paul\") ;\n    l.add(\"Mr Shalin Mangar\") ;\n    src.put(\"fullName\", l);\n    result = new RegexTransformer().transformRow(src, context);\n    List l1 = (List) result.get(\"firstName\");\n    List l2 = (List) result.get(\"lastName\");\n    assertEquals(\"Noble\", l1.get(0));\n    assertEquals(\"Shalin\", l1.get(1));\n    assertEquals(\"Paul\", l2.get(0));\n    assertEquals(\"Mangar\", l2.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"c26f00b574427b55127e869b935845554afde1fa":["fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}