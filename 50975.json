{"path":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","commits":[{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,DataType,T,T,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final NumericType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = dataType;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermsEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (dataType) {\n      case LONG:\n      case DOUBLE:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case INT:\n      case FLOAT:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"Invalid numeric NumericType\");\n    }\n    \n    // shortcut if upper bound == lower bound\n    if (min != null && min.equals(max)) {\n      setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    }\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final DataType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = dataType;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermsEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (dataType) {\n      case LONG:\n      case DOUBLE:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case INT:\n      case FLOAT:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"Invalid numeric DataType\");\n    }\n    \n    // shortcut if upper bound == lower bound\n    if (min != null && min.equals(max)) {\n      setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d71f97edfefd34211f08b56b3190ee1d0959c252","date":1342638504,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final NumericType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = dataType;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final NumericType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = dataType;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermsEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (dataType) {\n      case LONG:\n      case DOUBLE:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case INT:\n      case FLOAT:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"Invalid numeric NumericType\");\n    }\n    \n    // shortcut if upper bound == lower bound\n    if (min != null && min.equals(max)) {\n      setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final NumericType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = dataType;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final NumericType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = dataType;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermsEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (dataType) {\n      case LONG:\n      case DOUBLE:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case INT:\n      case FLOAT:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"Invalid numeric NumericType\");\n    }\n    \n    // shortcut if upper bound == lower bound\n    if (min != null && min.equals(max)) {\n      setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final NumericType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = dataType;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final NumericType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = dataType;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermsEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (dataType) {\n      case LONG:\n      case DOUBLE:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case INT:\n      case FLOAT:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"Invalid numeric NumericType\");\n    }\n    \n    // shortcut if upper bound == lower bound\n    if (min != null && min.equals(max)) {\n      setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685c242a4f1bc78f1fa61c131bd557355edad6c7","date":1429208182,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final NumericType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = Objects.requireNonNull(dataType, \"NumericType must not be null\");\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final NumericType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = dataType;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n  }\n\n","bugFix":["7f1640a619bcb2540ce0703e0db764ce7327c1a5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91b7d9f5000faefb0e81b98e76ad5b9463283e8","date":1433799348,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final NumericType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = Objects.requireNonNull(dataType, \"NumericType must not be null\");\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final NumericType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = Objects.requireNonNull(dataType, \"NumericType must not be null\");\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery#LegacyNumericRangeQuery(String,int,LegacyNumericType,T,T,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,NumericType,T,T,boolean,boolean).mjava","sourceNew":"  private LegacyNumericRangeQuery(final String field, final int precisionStep, final LegacyNumericType dataType,\n                                  T min, T max, final boolean minInclusive, final boolean maxInclusive) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = Objects.requireNonNull(dataType, \"LegacyNumericType must not be null\");\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final NumericType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = Objects.requireNonNull(dataType, \"NumericType must not be null\");\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d71f97edfefd34211f08b56b3190ee1d0959c252":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a78a90fc9701e511308346ea29f4f5e548bb39fe","d71f97edfefd34211f08b56b3190ee1d0959c252"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a78a90fc9701e511308346ea29f4f5e548bb39fe","d71f97edfefd34211f08b56b3190ee1d0959c252"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["d71f97edfefd34211f08b56b3190ee1d0959c252"],"770342641f7b505eaa8dccdc666158bff2419109":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"d71f97edfefd34211f08b56b3190ee1d0959c252":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","685c242a4f1bc78f1fa61c131bd557355edad6c7"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["d71f97edfefd34211f08b56b3190ee1d0959c252","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["770342641f7b505eaa8dccdc666158bff2419109"],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}