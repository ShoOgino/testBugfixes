{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","commits":[{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(String,String).mjava","sourceNew":"  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.load(0, m, Collections.emptySet(), null);\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, Utils.getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> emptyMap());\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager createCloudManager(String clusterStateStr, String metadata) {\n    Map m = (Map) Utils.fromJSONString(clusterStateStr);\n    Map meta = (Map) Utils.fromJSONString(metadata);\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.load(0, m, Collections.emptySet(), null);\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, Utils.getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> emptyMap());\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe52ff382a90016f1f6f34f2a026c4749eebb1b8","date":1541503646,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","sourceNew":"  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.load(0, m, Collections.emptySet(), null);\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> emptyMap());\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.load(0, m, Collections.emptySet(), null);\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, Utils.getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> emptyMap());\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","sourceNew":"  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.load(0, m, Collections.emptySet(), null);\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, Utils.NEW_HASHMAP_FUN);\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.load(0, m, Collections.emptySet(), null);\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> emptyMap());\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","sourceNew":"  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.createFromCollectionMap(0, m, Collections.emptySet());\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, Utils.NEW_HASHMAP_FUN);\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.load(0, m, Collections.emptySet(), null);\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, Utils.NEW_HASHMAP_FUN);\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.createFromCollectionMap(0, m, Collections.emptySet());\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, Utils.NEW_HASHMAP_FUN);\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.createFromCollectionMap(0, m, Collections.emptySet());\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, Utils.NEW_HASHMAP_FUN);\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.createFromCollectionMap(0, m, Collections.emptySet());\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<Replica>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, Utils.NEW_HASHMAP_FUN);\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getProperties().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCoreName().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getProperties().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.createFromCollectionMap(0, m, Collections.emptySet());\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, Utils.NEW_HASHMAP_FUN);\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getVariables().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCore().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getVariables().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManager(Map,Map).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static SolrCloudManager createCloudManager(Map m, Map meta) {\n    Map nodeVals = (Map) meta.get(\"nodeValues\");\n    List<Map> replicaVals = (List<Map>) meta.get(\"replicaValues\");\n    ClusterState clusterState = ClusterState.createFromCollectionMap(0, m, Collections.emptySet());\n    Map<String, AtomicInteger> coreCount = new LinkedHashMap<>();\n    Set<String> nodes = new HashSet<>(nodeVals.keySet());\n    clusterState.getCollectionStates().forEach((s, collectionRef) -> collectionRef.get()\n        .forEachReplica((s12, replica) -> {\n          nodes.add(replica.getNodeName());\n          coreCount.computeIfAbsent(replica.getNodeName(), s1 -> new AtomicInteger(0))\n              .incrementAndGet();\n        }));\n\n    DelegatingClusterStateProvider delegatingClusterStateProvider = new DelegatingClusterStateProvider(null) {\n      @Override\n      public ClusterState getClusterState() throws IOException {\n        return clusterState;\n      }\n\n      @Override\n      public Set<String> getLiveNodes() {\n        return nodes;\n      }\n    };\n\n    return new DelegatingCloudManager(null) {\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return delegatingClusterStateProvider;\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n\n        return new SolrClientNodeStateProvider(null) {\n          @Override\n          protected ClusterStateProvider getClusterStateProvider() {\n            return delegatingClusterStateProvider;\n          }\n\n          @Override\n          protected Map<String, Object> fetchTagValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            for (String tag : tags) {\n              if (tag.equals(CORES.tagName))\n                result.put(CORES.tagName, coreCount.getOrDefault(node, new AtomicInteger(0)).get());\n              result.put(tag, getObjectByPath(nodeVals, true, Arrays.asList(node, tag)));\n            }\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<Replica>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, Utils.NEW_HASHMAP_FUN);\n            if (!keys.isEmpty()) {\n              Row.forEachReplica(result, replicaInfo -> {\n                for (String key : keys) {\n                  if (!replicaInfo.getProperties().containsKey(key)) {\n                    replicaVals.stream()\n                        .filter(it -> replicaInfo.getCoreName().equals(it.get(\"core\")))\n                        .findFirst()\n                        .ifPresent(map -> replicaInfo.getProperties().put(key, map.get(key)));\n                  }\n                }\n              });\n            }\n            return result;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"58e890cd5653ae8550bc6088d739f4eaaf950aff":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["f5a27e78e3d29dee02bab19ded25336471e96882"],"f5a27e78e3d29dee02bab19ded25336471e96882":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"58e890cd5653ae8550bc6088d739f4eaaf950aff":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9ba1b632c041956c93c41aa1143d16a567014891"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f5a27e78e3d29dee02bab19ded25336471e96882"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"f5a27e78e3d29dee02bab19ded25336471e96882":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}