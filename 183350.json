{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testEndPointer().mjava","commits":[{"id":"c661dcad9680b8a6ce5bf2cc583a69ec965328bc","date":1352297862,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testEndPointer().mjava","pathOld":"/dev/null","sourceNew":"  public void testEndPointer() throws IOException {\n    final Directory dir = newDirectory();\n    final int valueCount = RandomInts.randomIntBetween(random(), 1, 1000);\n    final IndexOutput out = dir.createOutput(\"tests.bin\", newIOContext(random()));\n    for (int i = 0; i < valueCount; ++i) {\n      out.writeLong(0);\n    }\n    out.close();\n    final IndexInput in = dir.openInput(\"tests.bin\", newIOContext(random()));\n    for (int version = PackedInts.VERSION_START; version <= PackedInts.VERSION_CURRENT; ++version) {\n      for (int bpv = 1; bpv <= 64; ++bpv) {\n        for (PackedInts.Format format : PackedInts.Format.values()) {\n          if (!format.isSupported(bpv)) {\n            continue;\n          }\n          final long byteCount = format.byteCount(version, valueCount, bpv); \n          String msg = \"format=\" + format + \",version=\" + version + \",valueCount=\" + valueCount + \",bpv=\" + bpv;\n\n          // test iterator\n          in.seek(0L);\n          final PackedInts.ReaderIterator it = PackedInts.getReaderIteratorNoHeader(in, format, version, valueCount, bpv, RandomInts.randomIntBetween(random(), 1, 1<<16));\n          for (int i = 0; i < valueCount; ++i) {\n            it.next();\n          }\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test direct reader\n          in.seek(0L);\n          final PackedInts.Reader directReader = PackedInts.getDirectReaderNoHeader(in, format, version, valueCount, bpv);\n          directReader.get(valueCount - 1);\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test reader\n          in.seek(0L);\n          PackedInts.getReaderNoHeader(in, format, version, valueCount, bpv);\n          assertEquals(msg, byteCount, in.getFilePointer());\n         }\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testEndPointer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testEndPointer().mjava","sourceNew":"  public void testEndPointer() throws IOException {\n    final Directory dir = newDirectory();\n    final int valueCount = RandomInts.randomIntBetween(random(), 1, 1000);\n    final IndexOutput out = dir.createOutput(\"tests.bin\", newIOContext(random()));\n    for (int i = 0; i < valueCount; ++i) {\n      out.writeLong(0);\n    }\n    out.close();\n    final IndexInput in = dir.openInput(\"tests.bin\", newIOContext(random()));\n    for (int version = PackedInts.VERSION_START; version <= PackedInts.VERSION_CURRENT; ++version) {\n      for (int bpv = 1; bpv <= 64; ++bpv) {\n        for (PackedInts.Format format : PackedInts.Format.values()) {\n          if (!format.isSupported(bpv)) {\n            continue;\n          }\n          final long byteCount = format.byteCount(version, valueCount, bpv);\n          String msg = \"format=\" + format + \",version=\" + version + \",valueCount=\" + valueCount + \",bpv=\" + bpv;\n\n          // test iterator\n          in.seek(0L);\n          final PackedInts.ReaderIterator it = PackedInts.getReaderIteratorNoHeader(in, format, version, valueCount, bpv, RandomInts.randomIntBetween(random(), 1, 1<<16));\n          for (int i = 0; i < valueCount; ++i) {\n            it.next();\n          }\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test direct reader\n          in.seek(0L);\n          final PackedInts.Reader directReader = PackedInts.getDirectReaderNoHeader(in, format, version, valueCount, bpv);\n          directReader.get(valueCount - 1);\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test reader\n          in.seek(0L);\n          PackedInts.getReaderNoHeader(in, format, version, valueCount, bpv);\n          assertEquals(msg, byteCount, in.getFilePointer());\n         }\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEndPointer() throws IOException {\n    final Directory dir = newDirectory();\n    final int valueCount = RandomInts.randomIntBetween(random(), 1, 1000);\n    final IndexOutput out = dir.createOutput(\"tests.bin\", newIOContext(random()));\n    for (int i = 0; i < valueCount; ++i) {\n      out.writeLong(0);\n    }\n    out.close();\n    final IndexInput in = dir.openInput(\"tests.bin\", newIOContext(random()));\n    for (int version = PackedInts.VERSION_START; version <= PackedInts.VERSION_CURRENT; ++version) {\n      for (int bpv = 1; bpv <= 64; ++bpv) {\n        for (PackedInts.Format format : PackedInts.Format.values()) {\n          if (!format.isSupported(bpv)) {\n            continue;\n          }\n          final long byteCount = format.byteCount(version, valueCount, bpv); \n          String msg = \"format=\" + format + \",version=\" + version + \",valueCount=\" + valueCount + \",bpv=\" + bpv;\n\n          // test iterator\n          in.seek(0L);\n          final PackedInts.ReaderIterator it = PackedInts.getReaderIteratorNoHeader(in, format, version, valueCount, bpv, RandomInts.randomIntBetween(random(), 1, 1<<16));\n          for (int i = 0; i < valueCount; ++i) {\n            it.next();\n          }\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test direct reader\n          in.seek(0L);\n          final PackedInts.Reader directReader = PackedInts.getDirectReaderNoHeader(in, format, version, valueCount, bpv);\n          directReader.get(valueCount - 1);\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test reader\n          in.seek(0L);\n          PackedInts.getReaderNoHeader(in, format, version, valueCount, bpv);\n          assertEquals(msg, byteCount, in.getFilePointer());\n         }\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testEndPointer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testEndPointer().mjava","sourceNew":"  public void testEndPointer() throws IOException {\n    final Directory dir = newDirectory();\n    final int valueCount = RandomInts.randomIntBetween(random(), 1, 1000);\n    final IndexOutput out = dir.createOutput(\"tests.bin\", newIOContext(random()));\n    for (int i = 0; i < valueCount; ++i) {\n      out.writeLong(0);\n    }\n    out.close();\n    final IndexInput in = dir.openInput(\"tests.bin\", newIOContext(random()));\n    for (int version = PackedInts.VERSION_START; version <= PackedInts.VERSION_CURRENT; ++version) {\n      for (int bpv = 1; bpv <= 64; ++bpv) {\n        for (PackedInts.Format format : PackedInts.Format.values()) {\n          if (!format.isSupported(bpv)) {\n            continue;\n          }\n          final long byteCount = format.byteCount(version, valueCount, bpv);\n          String msg = \"format=\" + format + \",version=\" + version + \",valueCount=\" + valueCount + \",bpv=\" + bpv;\n\n          // test iterator\n          in.seek(0L);\n          final PackedInts.ReaderIterator it = PackedInts.getReaderIteratorNoHeader(in, format, version, valueCount, bpv, RandomInts.randomIntBetween(random(), 1, 1<<16));\n          for (int i = 0; i < valueCount; ++i) {\n            it.next();\n          }\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test direct reader\n          in.seek(0L);\n          final PackedInts.Reader directReader = PackedInts.getDirectReaderNoHeader(in, format, version, valueCount, bpv);\n          directReader.get(valueCount - 1);\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test reader\n          in.seek(0L);\n          PackedInts.getReaderNoHeader(in, format, version, valueCount, bpv);\n          assertEquals(msg, byteCount, in.getFilePointer());\n         }\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEndPointer() throws IOException {\n    final Directory dir = newDirectory();\n    final int valueCount = RandomInts.randomIntBetween(random(), 1, 1000);\n    final IndexOutput out = dir.createOutput(\"tests.bin\", newIOContext(random()));\n    for (int i = 0; i < valueCount; ++i) {\n      out.writeLong(0);\n    }\n    out.close();\n    final IndexInput in = dir.openInput(\"tests.bin\", newIOContext(random()));\n    for (int version = PackedInts.VERSION_START; version <= PackedInts.VERSION_CURRENT; ++version) {\n      for (int bpv = 1; bpv <= 64; ++bpv) {\n        for (PackedInts.Format format : PackedInts.Format.values()) {\n          if (!format.isSupported(bpv)) {\n            continue;\n          }\n          final long byteCount = format.byteCount(version, valueCount, bpv); \n          String msg = \"format=\" + format + \",version=\" + version + \",valueCount=\" + valueCount + \",bpv=\" + bpv;\n\n          // test iterator\n          in.seek(0L);\n          final PackedInts.ReaderIterator it = PackedInts.getReaderIteratorNoHeader(in, format, version, valueCount, bpv, RandomInts.randomIntBetween(random(), 1, 1<<16));\n          for (int i = 0; i < valueCount; ++i) {\n            it.next();\n          }\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test direct reader\n          in.seek(0L);\n          final PackedInts.Reader directReader = PackedInts.getDirectReaderNoHeader(in, format, version, valueCount, bpv);\n          directReader.get(valueCount - 1);\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test reader\n          in.seek(0L);\n          PackedInts.getReaderNoHeader(in, format, version, valueCount, bpv);\n          assertEquals(msg, byteCount, in.getFilePointer());\n         }\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testEndPointer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testEndPointer().mjava","sourceNew":"  public void testEndPointer() throws IOException {\n    final Directory dir = newDirectory();\n    final int valueCount = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final IndexOutput out = dir.createOutput(\"tests.bin\", newIOContext(random()));\n    for (int i = 0; i < valueCount; ++i) {\n      out.writeLong(0);\n    }\n    out.close();\n    final IndexInput in = dir.openInput(\"tests.bin\", newIOContext(random()));\n    for (int version = PackedInts.VERSION_START; version <= PackedInts.VERSION_CURRENT; ++version) {\n      for (int bpv = 1; bpv <= 64; ++bpv) {\n        for (PackedInts.Format format : PackedInts.Format.values()) {\n          if (!format.isSupported(bpv)) {\n            continue;\n          }\n          final long byteCount = format.byteCount(version, valueCount, bpv);\n          String msg = \"format=\" + format + \",version=\" + version + \",valueCount=\" + valueCount + \",bpv=\" + bpv;\n\n          // test iterator\n          in.seek(0L);\n          final PackedInts.ReaderIterator it = PackedInts.getReaderIteratorNoHeader(in, format, version, valueCount, bpv, RandomNumbers.randomIntBetween(random(), 1, 1<<16));\n          for (int i = 0; i < valueCount; ++i) {\n            it.next();\n          }\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test direct reader\n          in.seek(0L);\n          final PackedInts.Reader directReader = PackedInts.getDirectReaderNoHeader(in, format, version, valueCount, bpv);\n          directReader.get(valueCount - 1);\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test reader\n          in.seek(0L);\n          PackedInts.getReaderNoHeader(in, format, version, valueCount, bpv);\n          assertEquals(msg, byteCount, in.getFilePointer());\n         }\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEndPointer() throws IOException {\n    final Directory dir = newDirectory();\n    final int valueCount = RandomInts.randomIntBetween(random(), 1, 1000);\n    final IndexOutput out = dir.createOutput(\"tests.bin\", newIOContext(random()));\n    for (int i = 0; i < valueCount; ++i) {\n      out.writeLong(0);\n    }\n    out.close();\n    final IndexInput in = dir.openInput(\"tests.bin\", newIOContext(random()));\n    for (int version = PackedInts.VERSION_START; version <= PackedInts.VERSION_CURRENT; ++version) {\n      for (int bpv = 1; bpv <= 64; ++bpv) {\n        for (PackedInts.Format format : PackedInts.Format.values()) {\n          if (!format.isSupported(bpv)) {\n            continue;\n          }\n          final long byteCount = format.byteCount(version, valueCount, bpv);\n          String msg = \"format=\" + format + \",version=\" + version + \",valueCount=\" + valueCount + \",bpv=\" + bpv;\n\n          // test iterator\n          in.seek(0L);\n          final PackedInts.ReaderIterator it = PackedInts.getReaderIteratorNoHeader(in, format, version, valueCount, bpv, RandomInts.randomIntBetween(random(), 1, 1<<16));\n          for (int i = 0; i < valueCount; ++i) {\n            it.next();\n          }\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test direct reader\n          in.seek(0L);\n          final PackedInts.Reader directReader = PackedInts.getDirectReaderNoHeader(in, format, version, valueCount, bpv);\n          directReader.get(valueCount - 1);\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test reader\n          in.seek(0L);\n          PackedInts.getReaderNoHeader(in, format, version, valueCount, bpv);\n          assertEquals(msg, byteCount, in.getFilePointer());\n         }\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testEndPointer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testEndPointer().mjava","sourceNew":"  public void testEndPointer() throws IOException {\n    final Directory dir = newDirectory();\n    final int valueCount = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final IndexOutput out = dir.createOutput(\"tests.bin\", newIOContext(random()));\n    for (int i = 0; i < valueCount; ++i) {\n      out.writeLong(0);\n    }\n    out.close();\n    final IndexInput in = dir.openInput(\"tests.bin\", newIOContext(random()));\n    for (int version = PackedInts.VERSION_START; version <= PackedInts.VERSION_CURRENT; ++version) {\n      for (int bpv = 1; bpv <= 64; ++bpv) {\n        for (PackedInts.Format format : PackedInts.Format.values()) {\n          if (!format.isSupported(bpv)) {\n            continue;\n          }\n          final long byteCount = format.byteCount(version, valueCount, bpv);\n          String msg = \"format=\" + format + \",version=\" + version + \",valueCount=\" + valueCount + \",bpv=\" + bpv;\n\n          // test iterator\n          in.seek(0L);\n          final PackedInts.ReaderIterator it = PackedInts.getReaderIteratorNoHeader(in, format, version, valueCount, bpv, RandomNumbers.randomIntBetween(random(), 1, 1<<16));\n          for (int i = 0; i < valueCount; ++i) {\n            it.next();\n          }\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test direct reader\n          in.seek(0L);\n          final PackedInts.Reader directReader = PackedInts.getDirectReaderNoHeader(in, format, version, valueCount, bpv);\n          directReader.get(valueCount - 1);\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test reader\n          in.seek(0L);\n          PackedInts.getReaderNoHeader(in, format, version, valueCount, bpv);\n          assertEquals(msg, byteCount, in.getFilePointer());\n         }\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEndPointer() throws IOException {\n    final Directory dir = newDirectory();\n    final int valueCount = RandomInts.randomIntBetween(random(), 1, 1000);\n    final IndexOutput out = dir.createOutput(\"tests.bin\", newIOContext(random()));\n    for (int i = 0; i < valueCount; ++i) {\n      out.writeLong(0);\n    }\n    out.close();\n    final IndexInput in = dir.openInput(\"tests.bin\", newIOContext(random()));\n    for (int version = PackedInts.VERSION_START; version <= PackedInts.VERSION_CURRENT; ++version) {\n      for (int bpv = 1; bpv <= 64; ++bpv) {\n        for (PackedInts.Format format : PackedInts.Format.values()) {\n          if (!format.isSupported(bpv)) {\n            continue;\n          }\n          final long byteCount = format.byteCount(version, valueCount, bpv);\n          String msg = \"format=\" + format + \",version=\" + version + \",valueCount=\" + valueCount + \",bpv=\" + bpv;\n\n          // test iterator\n          in.seek(0L);\n          final PackedInts.ReaderIterator it = PackedInts.getReaderIteratorNoHeader(in, format, version, valueCount, bpv, RandomInts.randomIntBetween(random(), 1, 1<<16));\n          for (int i = 0; i < valueCount; ++i) {\n            it.next();\n          }\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test direct reader\n          in.seek(0L);\n          final PackedInts.Reader directReader = PackedInts.getDirectReaderNoHeader(in, format, version, valueCount, bpv);\n          directReader.get(valueCount - 1);\n          assertEquals(msg, byteCount, in.getFilePointer());\n\n          // test reader\n          in.seek(0L);\n          PackedInts.getReaderNoHeader(in, format, version, valueCount, bpv);\n          assertEquals(msg, byteCount, in.getFilePointer());\n         }\n      }\n    }\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"6448f67be45147de82a85cd903fec34e8930da75":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","6448f67be45147de82a85cd903fec34e8930da75"],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"de522d9303bd67c8473a269a1319125d1f3700e0":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6448f67be45147de82a85cd903fec34e8930da75"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","de522d9303bd67c8473a269a1319125d1f3700e0"],"6448f67be45147de82a85cd903fec34e8930da75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","de522d9303bd67c8473a269a1319125d1f3700e0"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}