{"path":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String).mjava","commits":[{"id":"45ae8f6354b0826d27014deff71fe330604a9783","date":1378195819,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String).mjava","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName) throws Exception {\n    AtomicReader atomicReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      atomicReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(atomicReader, textFieldName, classFieldName, analyzer);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (atomicReader != null)\n        atomicReader.close();\n    }\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String classFieldName) throws Exception {\n    AtomicReader compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","date":1381993379,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String).mjava","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName) throws Exception {\n     checkCorrectClassification(classifier, inputDoc, expectedResult, analyzer, textFieldName, classFieldName, null);\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName) throws Exception {\n    AtomicReader atomicReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      atomicReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(atomicReader, textFieldName, classFieldName, analyzer);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (atomicReader != null)\n        atomicReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42752f746c2f3b1cfc8a971a2890d8098ebfb4b4","date":1385109382,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String).mjava","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName) throws Exception {\n    checkCorrectClassification(classifier, inputDoc, expectedResult, analyzer, textFieldName, classFieldName, null);\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName) throws Exception {\n     checkCorrectClassification(classifier, inputDoc, expectedResult, analyzer, textFieldName, classFieldName, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String).mjava","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName) throws Exception {\n    checkCorrectClassification(classifier, inputDoc, expectedResult, analyzer, textFieldName, classFieldName, null);\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName) throws Exception {\n     checkCorrectClassification(classifier, inputDoc, expectedResult, analyzer, textFieldName, classFieldName, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":4,"author":"Tommaso Teofili","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String).mjava","sourceNew":null,"sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName) throws Exception {\n    checkCorrectClassification(classifier, inputDoc, expectedResult, analyzer, textFieldName, classFieldName, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","42752f746c2f3b1cfc8a971a2890d8098ebfb4b4"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["45ae8f6354b0826d27014deff71fe330604a9783"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["42752f746c2f3b1cfc8a971a2890d8098ebfb4b4"],"42752f746c2f3b1cfc8a971a2890d8098ebfb4b4":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"45ae8f6354b0826d27014deff71fe330604a9783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ae8f6354b0826d27014deff71fe330604a9783"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","42752f746c2f3b1cfc8a971a2890d8098ebfb4b4"],"42752f746c2f3b1cfc8a971a2890d8098ebfb4b4":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","360ff513ddb24a30ffa2111a3ef0f91038803100"],"45ae8f6354b0826d27014deff71fe330604a9783":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"360ff513ddb24a30ffa2111a3ef0f91038803100":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}