{"path":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    MetricUtils.toNamedMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, (k, v) -> {\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d5f817b50083e9ed9dcb0df2ecdd8ac84b02b7c9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    MetricUtils.toNamedMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, (k, v) -> {\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["d5f817b50083e9ed9dcb0df2ecdd8ac84b02b7c9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    MetricUtils.toNamedMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, (k, v) -> {\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    MetricUtils.toNamedMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, (k, v) -> {\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"413934793f78ea84d60fafb85e566d4a90277632","date":1490645943,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"expected error\");};\n    registry.register(\"expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c21acb733efcbefbc1a81e1152ae1bec1725a3a","date":1490793993,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"expected error\");};\n    registry.register(\"expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"983d2e48d6584570adcbdabb7bac1fecdf5fca0d","date":1490873944,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"expected error\");};\n    registry.register(\"expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","bugFix":null,"bugIntro":["a4c0d58c97db195a961f93ceebc3808cb68c8674"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4c0d58c97db195a961f93ceebc3808cb68c8674","date":1490873947,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"expected error\");};\n    registry.register(\"expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","bugFix":["983d2e48d6584570adcbdabb7bac1fecdf5fca0d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, false, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, true, false, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, false, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, true, false, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        false, false, true, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5f817b50083e9ed9dcb0df2ecdd8ac84b02b7c9","date":1582804843,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n\n    // SOLR-14252: check that negative values are supported correctly\n    // NB a-d represent the same metric from multiple nodes\n    AggregateMetric am1 = new AggregateMetric();\n    registry.register(\"aggregate1\", am1);\n    am1.set(\"a\", -10);\n    am1.set(\"b\", 1);\n    am1.set(\"b\", -2);\n    am1.set(\"c\", -3);\n    am1.set(\"d\", -5);\n\n    // SOLR-14252: check that aggregation of non-Number metrics don't trigger NullPointerException\n    AggregateMetric am2 = new AggregateMetric();\n    registry.register(\"aggregate2\", am2);\n    am2.set(\"a\", false);\n    am2.set(\"b\", true);\n\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate1\")) {\n        assertEquals(4, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(4, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n        assertEquals(-10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"b\");\n        assertEquals(-2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n        assertEquals(-10D, v.get(\"min\"));\n        assertEquals(-2D, v.get(\"max\"));\n        assertEquals(-5D, v.get(\"mean\"));\n      } else if (k.startsWith(\"aggregate2\")) {\n        // SOLR-14252: non-Number metric aggregations should return 0 rather than throwing NPE\n        assertEquals(2, v.get(\"count\"));\n        assertEquals(0D, v.get(\"min\"));\n        assertEquals(0D, v.get(\"max\"));\n        assertEquals(0D, v.get(\"mean\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, true, false, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate1\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(4, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(4, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n            assertEquals(-10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"b\");\n            assertEquals(-2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"aggregate2\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n            assertEquals(false, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"b\");\n            assertEquals(true, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n    AggregateMetric am = new AggregateMetric();\n    registry.register(\"aggregate\", am);\n    am.set(\"foo\", 10);\n    am.set(\"bar\", 1);\n    am.set(\"bar\", 2);\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate\")) {\n        assertEquals(2, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(2, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n        assertEquals(10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"bar\");\n        assertEquals(2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, true, false, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"foo\");\n            assertEquals(10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"bar\");\n            assertEquals(2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","bugFix":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","f34d83c894e07c24f5f957820777b5da2cc29e5a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n\n    // SOLR-14252: check that negative values are supported correctly\n    // NB a-d represent the same metric from multiple nodes\n    AggregateMetric am1 = new AggregateMetric();\n    registry.register(\"aggregate1\", am1);\n    am1.set(\"a\", -10);\n    am1.set(\"b\", 1);\n    am1.set(\"b\", -2);\n    am1.set(\"c\", -3);\n    am1.set(\"d\", -5);\n\n    // SOLR-14252: check that aggregation of non-Number metrics don't trigger NullPointerException\n    AggregateMetric am2 = new AggregateMetric();\n    registry.register(\"aggregate2\", am2);\n    am2.set(\"a\", false);\n    am2.set(\"b\", true);\n\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, false, false, (k, o) -> {\n      @SuppressWarnings({\"rawtypes\"})\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate1\")) {\n        assertEquals(4, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(4, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n        assertEquals(-10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"b\");\n        assertEquals(-2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n        assertEquals(-10D, v.get(\"min\"));\n        assertEquals(-2D, v.get(\"max\"));\n        assertEquals(-5D, v.get(\"mean\"));\n      } else if (k.startsWith(\"aggregate2\")) {\n        // SOLR-14252: non-Number metric aggregations should return 0 rather than throwing NPE\n        assertEquals(2, v.get(\"count\"));\n        assertEquals(0D, v.get(\"min\"));\n        assertEquals(0D, v.get(\"max\"));\n        assertEquals(0D, v.get(\"mean\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, true, false, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            @SuppressWarnings({\"rawtypes\"})\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            @SuppressWarnings({\"rawtypes\"})\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            @SuppressWarnings({\"rawtypes\"})\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate1\")) {\n            assertTrue(o instanceof Map);\n            @SuppressWarnings({\"rawtypes\"})\n            Map v = (Map)o;\n            assertEquals(4, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(4, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n            assertEquals(-10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"b\");\n            assertEquals(-2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"aggregate2\")) {\n            assertTrue(o instanceof Map);\n            @SuppressWarnings({\"rawtypes\"})\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n            assertEquals(false, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"b\");\n            assertEquals(true, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            @SuppressWarnings({\"rawtypes\"})\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n\n    // SOLR-14252: check that negative values are supported correctly\n    // NB a-d represent the same metric from multiple nodes\n    AggregateMetric am1 = new AggregateMetric();\n    registry.register(\"aggregate1\", am1);\n    am1.set(\"a\", -10);\n    am1.set(\"b\", 1);\n    am1.set(\"b\", -2);\n    am1.set(\"c\", -3);\n    am1.set(\"d\", -5);\n\n    // SOLR-14252: check that aggregation of non-Number metrics don't trigger NullPointerException\n    AggregateMetric am2 = new AggregateMetric();\n    registry.register(\"aggregate2\", am2);\n    am2.set(\"a\", false);\n    am2.set(\"b\", true);\n\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, false, false, (k, o) -> {\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate1\")) {\n        assertEquals(4, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(4, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n        assertEquals(-10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"b\");\n        assertEquals(-2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n        assertEquals(-10D, v.get(\"min\"));\n        assertEquals(-2D, v.get(\"max\"));\n        assertEquals(-5D, v.get(\"mean\"));\n      } else if (k.startsWith(\"aggregate2\")) {\n        // SOLR-14252: non-Number metric aggregations should return 0 rather than throwing NPE\n        assertEquals(2, v.get(\"count\"));\n        assertEquals(0D, v.get(\"min\"));\n        assertEquals(0D, v.get(\"max\"));\n        assertEquals(0D, v.get(\"mean\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, true, false, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate1\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(4, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(4, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n            assertEquals(-10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"b\");\n            assertEquals(-2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"aggregate2\")) {\n            assertTrue(o instanceof Map);\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n            assertEquals(false, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"b\");\n            assertEquals(true, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testMetrics().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n\n    // SOLR-14252: check that negative values are supported correctly\n    // NB a-d represent the same metric from multiple nodes\n    AggregateMetric am1 = new AggregateMetric();\n    registry.register(\"aggregate1\", am1);\n    am1.set(\"a\", -10);\n    am1.set(\"b\", 1);\n    am1.set(\"b\", -2);\n    am1.set(\"c\", -3);\n    am1.set(\"d\", -5);\n\n    // SOLR-14252: check that aggregation of non-Number metrics don't trigger NullPointerException\n    AggregateMetric am2 = new AggregateMetric();\n    registry.register(\"aggregate2\", am2);\n    am2.set(\"a\", false);\n    am2.set(\"b\", true);\n\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n\n    MetricsMap metricsMapWithMap = new MetricsMap((detailed, map) -> {\n      map.put(\"foo\", \"bar\");\n    });\n    registry.register(\"mapWithMap\", metricsMapWithMap);\n    MetricsMap metricsMap = new MetricsMap(map -> {\n      map.putNoEx(\"foo\", \"bar\");\n    });\n    registry.register(\"map\", metricsMap);\n\n    SolrMetricManager.GaugeWrapper<Map<String,Object>> gaugeWrapper = new SolrMetricManager.GaugeWrapper<>(metricsMap, \"foo-tag\");\n    registry.register(\"wrappedGauge\", gaugeWrapper);\n\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.ALL_PROPERTIES, false, false, false, false, (k, o) -> {\n      @SuppressWarnings({\"rawtypes\"})\n      Map<String, Object> v = new HashMap<>();\n      if (o != null) {\n        ((MapWriter) o).toMap(v);\n      }\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate1\")) {\n        assertEquals(4, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(4, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n        assertEquals(-10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"b\");\n        assertEquals(-2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n        assertEquals(-10D, v.get(\"min\"));\n        assertEquals(-2D, v.get(\"max\"));\n        assertEquals(-5D, v.get(\"mean\"));\n      } else if (k.startsWith(\"aggregate2\")) {\n        // SOLR-14252: non-Number metric aggregations should return 0 rather than throwing NPE\n        assertEquals(2, v.get(\"count\"));\n        assertEquals(0D, v.get(\"min\"));\n        assertEquals(0D, v.get(\"max\"));\n        assertEquals(0D, v.get(\"mean\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertTrue(v.isEmpty());\n      } else if (k.startsWith(\"map\") || k.startsWith(\"wrapped\")) {\n        assertNotNull(v.toString(), v.get(\"value\"));\n        assertTrue(v.toString(), v.get(\"value\") instanceof Map);\n        assertEquals(v.toString(), \"bar\", ((Map) v.get(\"value\")).get(\"foo\"));\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.ALL_PROPERTIES, false, false, true, false, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof MapWriter);\n            Map<String, Object> v = new HashMap<>();\n            ((MapWriter) o).toMap(v);\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof MapWriter);\n            Map<String, Object> v = new HashMap<>();\n            ((MapWriter) o).toMap(v);\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof MapWriter);\n            Map<String, Object> v = new HashMap<>();\n            ((MapWriter) o).toMap(v);\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate1\")) {\n            assertTrue(o instanceof MapWriter);\n            Map<String, Object> v = new HashMap<>();\n            ((MapWriter) o).toMap(v);\n            assertEquals(4, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(4, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n            assertEquals(-10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"b\");\n            assertEquals(-2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"aggregate2\")) {\n            assertTrue(o instanceof MapWriter);\n            Map<String, Object> v = new HashMap<>();\n            ((MapWriter) o).toMap(v);\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n            assertEquals(false, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"b\");\n            assertEquals(true, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else if (k.startsWith(\"map\") || k.startsWith(\"wrapped\")) {\n            assertTrue(o instanceof MapWriter);\n            MapWriter writer = (MapWriter) o;\n            assertEquals(1, writer._size());\n            assertEquals(\"bar\", writer._get(\"foo\", null));\n          } else {\n            assertTrue(o instanceof MapWriter);\n            Map<String, Object> v = new HashMap<>();\n            ((MapWriter) o).toMap(v);\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testMetrics() throws Exception {\n    MetricRegistry registry = new MetricRegistry();\n    Counter counter = registry.counter(\"counter\");\n    counter.inc();\n    Timer timer = registry.timer(\"timer\");\n    Timer.Context ctx = timer.time();\n    Thread.sleep(150);\n    ctx.stop();\n    Meter meter = registry.meter(\"meter\");\n    meter.mark();\n    Histogram histogram = registry.histogram(\"histogram\");\n    histogram.update(10);\n\n    // SOLR-14252: check that negative values are supported correctly\n    // NB a-d represent the same metric from multiple nodes\n    AggregateMetric am1 = new AggregateMetric();\n    registry.register(\"aggregate1\", am1);\n    am1.set(\"a\", -10);\n    am1.set(\"b\", 1);\n    am1.set(\"b\", -2);\n    am1.set(\"c\", -3);\n    am1.set(\"d\", -5);\n\n    // SOLR-14252: check that aggregation of non-Number metrics don't trigger NullPointerException\n    AggregateMetric am2 = new AggregateMetric();\n    registry.register(\"aggregate2\", am2);\n    am2.set(\"a\", false);\n    am2.set(\"b\", true);\n\n    Gauge<String> gauge = () -> \"foobar\";\n    registry.register(\"gauge\", gauge);\n    Gauge<Long> error = () -> {throw new InternalError(\"Memory Pool not found error\");};\n    registry.register(\"memory.expected.error\", error);\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, false, false, (k, o) -> {\n      @SuppressWarnings({\"rawtypes\"})\n      Map v = (Map)o;\n      if (k.startsWith(\"counter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"gauge\")) {\n        assertEquals(\"foobar\", v.get(\"value\"));\n      } else if (k.startsWith(\"timer\")) {\n        assertEquals(1L, v.get(\"count\"));\n        assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n      } else if (k.startsWith(\"meter\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"histogram\")) {\n        assertEquals(1L, v.get(\"count\"));\n      } else if (k.startsWith(\"aggregate1\")) {\n        assertEquals(4, v.get(\"count\"));\n        Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n        assertNotNull(values);\n        assertEquals(4, values.size());\n        Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n        assertEquals(-10, update.get(\"value\"));\n        assertEquals(1, update.get(\"updateCount\"));\n        update = (Map<String, Object>)values.get(\"b\");\n        assertEquals(-2, update.get(\"value\"));\n        assertEquals(2, update.get(\"updateCount\"));\n        assertEquals(-10D, v.get(\"min\"));\n        assertEquals(-2D, v.get(\"max\"));\n        assertEquals(-5D, v.get(\"mean\"));\n      } else if (k.startsWith(\"aggregate2\")) {\n        // SOLR-14252: non-Number metric aggregations should return 0 rather than throwing NPE\n        assertEquals(2, v.get(\"count\"));\n        assertEquals(0D, v.get(\"min\"));\n        assertEquals(0D, v.get(\"max\"));\n        assertEquals(0D, v.get(\"mean\"));\n      } else if (k.startsWith(\"memory.expected.error\")) {\n        assertNull(v);\n      }\n    });\n    // test compact format\n    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,\n        MetricUtils.PropertyFilter.ALL, false, false, true, false, (k, o) -> {\n          if (k.startsWith(\"counter\")) {\n            assertTrue(o instanceof Long);\n            assertEquals(1L, o);\n          } else if (k.startsWith(\"gauge\")) {\n            assertTrue(o instanceof String);\n            assertEquals(\"foobar\", o);\n          } else if (k.startsWith(\"timer\")) {\n            assertTrue(o instanceof Map);\n            @SuppressWarnings({\"rawtypes\"})\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n            assertTrue(((Number)v.get(\"min_ms\")).intValue() > 100);\n          } else if (k.startsWith(\"meter\")) {\n            assertTrue(o instanceof Map);\n            @SuppressWarnings({\"rawtypes\"})\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"histogram\")) {\n            assertTrue(o instanceof Map);\n            @SuppressWarnings({\"rawtypes\"})\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          } else if (k.startsWith(\"aggregate1\")) {\n            assertTrue(o instanceof Map);\n            @SuppressWarnings({\"rawtypes\"})\n            Map v = (Map)o;\n            assertEquals(4, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(4, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n            assertEquals(-10, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"b\");\n            assertEquals(-2, update.get(\"value\"));\n            assertEquals(2, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"aggregate2\")) {\n            assertTrue(o instanceof Map);\n            @SuppressWarnings({\"rawtypes\"})\n            Map v = (Map)o;\n            assertEquals(2, v.get(\"count\"));\n            Map<String, Object> values = (Map<String, Object>)v.get(\"values\");\n            assertNotNull(values);\n            assertEquals(2, values.size());\n            Map<String, Object> update = (Map<String, Object>)values.get(\"a\");\n            assertEquals(false, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n            update = (Map<String, Object>)values.get(\"b\");\n            assertEquals(true, update.get(\"value\"));\n            assertEquals(1, update.get(\"updateCount\"));\n          } else if (k.startsWith(\"memory.expected.error\")) {\n            assertNull(o);\n          } else {\n            @SuppressWarnings({\"rawtypes\"})\n            Map v = (Map)o;\n            assertEquals(1L, v.get(\"count\"));\n          }\n        });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a4c0d58c97db195a961f93ceebc3808cb68c8674"],"983d2e48d6584570adcbdabb7bac1fecdf5fca0d":["ab68488225b6a6c357dda72ed11dedca9914a192"],"d5f817b50083e9ed9dcb0df2ecdd8ac84b02b7c9":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"413934793f78ea84d60fafb85e566d4a90277632":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["e98520789adb1d5ad05afb4956eca0944a929688"],"8c21acb733efcbefbc1a81e1152ae1bec1725a3a":["413934793f78ea84d60fafb85e566d4a90277632"],"816521ebaad5add9cb96bb88c577394e2938c40b":["8c21acb733efcbefbc1a81e1152ae1bec1725a3a"],"e98520789adb1d5ad05afb4956eca0944a929688":["d5f817b50083e9ed9dcb0df2ecdd8ac84b02b7c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"a4c0d58c97db195a961f93ceebc3808cb68c8674":["983d2e48d6584570adcbdabb7bac1fecdf5fca0d"],"ab68488225b6a6c357dda72ed11dedca9914a192":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["816521ebaad5add9cb96bb88c577394e2938c40b"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"983d2e48d6584570adcbdabb7bac1fecdf5fca0d":["a4c0d58c97db195a961f93ceebc3808cb68c8674"],"d5f817b50083e9ed9dcb0df2ecdd8ac84b02b7c9":["e98520789adb1d5ad05afb4956eca0944a929688"],"413934793f78ea84d60fafb85e566d4a90277632":["8c21acb733efcbefbc1a81e1152ae1bec1725a3a"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8c21acb733efcbefbc1a81e1152ae1bec1725a3a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"e98520789adb1d5ad05afb4956eca0944a929688":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["413934793f78ea84d60fafb85e566d4a90277632"],"a4c0d58c97db195a961f93ceebc3808cb68c8674":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"ab68488225b6a6c357dda72ed11dedca9914a192":["983d2e48d6584570adcbdabb7bac1fecdf5fca0d"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["d5f817b50083e9ed9dcb0df2ecdd8ac84b02b7c9"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}