{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean,boolean).mjava","commits":[{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c, boolean closeAnalyzer, boolean useSoftDeletes) throws IOException {\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.r = new Random(r.nextLong());\n    if (useSoftDeletes) {\n      c.setSoftDeletesField(\"___soft_deletes\");\n      softDeletesRatio = 1.d / (double)1 + r.nextInt(10);\n    } else {\n      softDeletesRatio = 0d;\n    }\n    w = mockIndexWriter(dir, c, r);\n    flushAt = TestUtil.nextInt(r, 10, 1000);\n    if (closeAnalyzer) {\n      analyzer = w.getAnalyzer();\n    } else {\n      analyzer = null;\n    }\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW dir=\" + dir);\n    }\n\n    // Make sure we sometimes test indices that don't get\n    // any forced merges:\n    doRandomForceMerge = !(c.getMergePolicy() instanceof NoMergePolicy) && r.nextBoolean();\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e84628e1e00d06556b67af150a13dbfb1849a818","date":1588191102,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean,boolean).mjava","sourceNew":"  private RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c, boolean closeAnalyzer, boolean useSoftDeletes) throws IOException {\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.r = new Random(r.nextLong());\n    if (useSoftDeletes) {\n      c.setSoftDeletesField(\"___soft_deletes\");\n      softDeletesRatio = 1.d / (double)1 + r.nextInt(10);\n    } else {\n      softDeletesRatio = 0d;\n    }\n    w = mockIndexWriter(dir, c, r);\n    config = w.getConfig();\n    flushAt = TestUtil.nextInt(r, 10, 1000);\n    if (closeAnalyzer) {\n      analyzer = w.getAnalyzer();\n    } else {\n      analyzer = null;\n    }\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW dir=\" + dir);\n    }\n\n    // Make sure we sometimes test indices that don't get\n    // any forced merges:\n    doRandomForceMerge = !(c.getMergePolicy() instanceof NoMergePolicy) && r.nextBoolean();\n  } \n\n","sourceOld":"  private RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c, boolean closeAnalyzer, boolean useSoftDeletes) throws IOException {\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.r = new Random(r.nextLong());\n    if (useSoftDeletes) {\n      c.setSoftDeletesField(\"___soft_deletes\");\n      softDeletesRatio = 1.d / (double)1 + r.nextInt(10);\n    } else {\n      softDeletesRatio = 0d;\n    }\n    w = mockIndexWriter(dir, c, r);\n    flushAt = TestUtil.nextInt(r, 10, 1000);\n    if (closeAnalyzer) {\n      analyzer = w.getAnalyzer();\n    } else {\n      analyzer = null;\n    }\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW dir=\" + dir);\n    }\n\n    // Make sure we sometimes test indices that don't get\n    // any forced merges:\n    doRandomForceMerge = !(c.getMergePolicy() instanceof NoMergePolicy) && r.nextBoolean();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e84628e1e00d06556b67af150a13dbfb1849a818":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e84628e1e00d06556b67af150a13dbfb1849a818"]},"commit2Childs":{"e84628e1e00d06556b67af150a13dbfb1849a818":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["e84628e1e00d06556b67af150a13dbfb1849a818"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}