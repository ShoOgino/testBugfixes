{"path":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","commits":[{"id":"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709","date":1180597733,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleSkip() throws IOException {\r\n    RAMDirectory dir = new RAMDirectory();\r\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true);\r\n    Term term = new Term(\"test\", \"a\");\r\n    for (int i = 0; i < 5000; i++) {\r\n      Document d1 = new Document();\r\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.TOKENIZED));\r\n      writer.addDocument(d1);\r\n    }\r\n    writer.flush();\r\n    writer.optimize();\r\n    writer.close();\r\n\r\n    IndexReader reader = IndexReader.open(dir);\r\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions(term);\r\n    tp.freqStream = new CountingStream(tp.freqStream);\r\n    \r\n    tp.next();\r\n\r\n    checkSkipTo(tp, 14, 185); // no skips\r\n    checkSkipTo(tp, 17, 190); // one skip on level 0\r\n    checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\r\n    \r\n    // this test would fail if we had only one skip level,\r\n    // because than more bytes would be read from the freqStream\r\n    checkSkipTo(tp, 4800, 250);// one skip on level 2\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["78e60bb26b98b01a8df99a4e253d608b750e5aed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78e60bb26b98b01a8df99a4e253d608b750e5aed","date":1184257426,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\r\n    RAMDirectory dir = new RAMDirectory();\r\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true);\r\n    Term term = new Term(\"test\", \"a\");\r\n    for (int i = 0; i < 5000; i++) {\r\n      Document d1 = new Document();\r\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.TOKENIZED));\r\n      writer.addDocument(d1);\r\n    }\r\n    writer.flush();\r\n    writer.optimize();\r\n    writer.close();\r\n\r\n    IndexReader reader = IndexReader.open(dir);\r\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\r\n    tp.freqStream = new CountingStream(tp.freqStream);\r\n\r\n    for (int i = 0; i < 2; i++) {\r\n      counter = 0;\r\n      tp.seek(term);\r\n\r\n      checkSkipTo(tp, 14, 185); // no skips\r\n      checkSkipTo(tp, 17, 190); // one skip on level 0\r\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\r\n    \r\n      // this test would fail if we had only one skip level,\r\n      // because than more bytes would be read from the freqStream\r\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\r\n    }\r\n  }\r\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\r\n    RAMDirectory dir = new RAMDirectory();\r\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true);\r\n    Term term = new Term(\"test\", \"a\");\r\n    for (int i = 0; i < 5000; i++) {\r\n      Document d1 = new Document();\r\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.TOKENIZED));\r\n      writer.addDocument(d1);\r\n    }\r\n    writer.flush();\r\n    writer.optimize();\r\n    writer.close();\r\n\r\n    IndexReader reader = IndexReader.open(dir);\r\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions(term);\r\n    tp.freqStream = new CountingStream(tp.freqStream);\r\n    \r\n    tp.next();\r\n\r\n    checkSkipTo(tp, 14, 185); // no skips\r\n    checkSkipTo(tp, 17, 190); // one skip on level 0\r\n    checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\r\n    \r\n    // this test would fail if we had only one skip level,\r\n    // because than more bytes would be read from the freqStream\r\n    checkSkipTo(tp, 4800, 250);// one skip on level 2\r\n  }\r\n\n","bugFix":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\r\n    RAMDirectory dir = new RAMDirectory();\r\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\r\n                                         IndexWriter.MaxFieldLength.LIMITED);\r\n    Term term = new Term(\"test\", \"a\");\r\n    for (int i = 0; i < 5000; i++) {\r\n      Document d1 = new Document();\r\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.TOKENIZED));\r\n      writer.addDocument(d1);\r\n    }\r\n    writer.flush();\r\n    writer.optimize();\r\n    writer.close();\r\n\r\n    IndexReader reader = IndexReader.open(dir);\r\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\r\n    tp.freqStream = new CountingStream(tp.freqStream);\r\n\r\n    for (int i = 0; i < 2; i++) {\r\n      counter = 0;\r\n      tp.seek(term);\r\n\r\n      checkSkipTo(tp, 14, 185); // no skips\r\n      checkSkipTo(tp, 17, 190); // one skip on level 0\r\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\r\n    \r\n      // this test would fail if we had only one skip level,\r\n      // because than more bytes would be read from the freqStream\r\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\r\n    }\r\n  }\r\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\r\n    RAMDirectory dir = new RAMDirectory();\r\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true);\r\n    Term term = new Term(\"test\", \"a\");\r\n    for (int i = 0; i < 5000; i++) {\r\n      Document d1 = new Document();\r\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.TOKENIZED));\r\n      writer.addDocument(d1);\r\n    }\r\n    writer.flush();\r\n    writer.optimize();\r\n    writer.close();\r\n\r\n    IndexReader reader = IndexReader.open(dir);\r\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\r\n    tp.freqStream = new CountingStream(tp.freqStream);\r\n\r\n    for (int i = 0; i < 2; i++) {\r\n      counter = 0;\r\n      tp.seek(term);\r\n\r\n      checkSkipTo(tp, 14, 185); // no skips\r\n      checkSkipTo(tp, 17, 190); // one skip on level 0\r\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\r\n    \r\n      // this test would fail if we had only one skip level,\r\n      // because than more bytes would be read from the freqStream\r\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.TOKENIZED));\n      writer.addDocument(d1);\n    }\n    writer.flush();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\r\n    RAMDirectory dir = new RAMDirectory();\r\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\r\n                                         IndexWriter.MaxFieldLength.LIMITED);\r\n    Term term = new Term(\"test\", \"a\");\r\n    for (int i = 0; i < 5000; i++) {\r\n      Document d1 = new Document();\r\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.TOKENIZED));\r\n      writer.addDocument(d1);\r\n    }\r\n    writer.flush();\r\n    writer.optimize();\r\n    writer.close();\r\n\r\n    IndexReader reader = IndexReader.open(dir);\r\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\r\n    tp.freqStream = new CountingStream(tp.freqStream);\r\n\r\n    for (int i = 0; i < 2; i++) {\r\n      counter = 0;\r\n      tp.seek(term);\r\n\r\n      checkSkipTo(tp, 14, 185); // no skips\r\n      checkSkipTo(tp, 17, 190); // one skip on level 0\r\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\r\n    \r\n      // this test would fail if we had only one skip level,\r\n      // because than more bytes would be read from the freqStream\r\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.flush();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.TOKENIZED));\n      writer.addDocument(d1);\n    }\n    writer.flush();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.flush();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.flush();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.flush();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new PayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["78e60bb26b98b01a8df99a4e253d608b750e5aed"],"2123bddbd65dea198cac380540636ce43a880403":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["2123bddbd65dea198cac380540636ce43a880403"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"78e60bb26b98b01a8df99a4e253d608b750e5aed":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["2123bddbd65dea198cac380540636ce43a880403"],"2123bddbd65dea198cac380540636ce43a880403":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"78e60bb26b98b01a8df99a4e253d608b750e5aed":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["78e60bb26b98b01a8df99a4e253d608b750e5aed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}