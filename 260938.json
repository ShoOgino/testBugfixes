{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","commits":[{"id":"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94","date":1344442349,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(long[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt((int) data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSize(numBits);\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(long[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt((int) data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSize(numBits);\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97b1b5806a1f8e249985ae7c486ef449726fd236","date":1344446896,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSize(numBits);\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt((int) data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSize(numBits);\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee0d2b90b9b7c96860f9c096edae6ed8fad95388","date":1344516744,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSize(numBits);\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#writeBlock(int[],byte[],IndexOutput).mjava","sourceNew":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Write a block of data (<code>For</code> format).\n   *\n   * @param data     the data to write\n   * @param encoded  a buffer to use to encode data\n   * @param out      the destination output\n   * @throws IOException\n   */\n  void writeBlock(int[] data, byte[] encoded, IndexOutput out) throws IOException {\n    if (isAllEqual(data)) {\n      out.writeVInt(ALL_VALUES_EQUAL);\n      out.writeInt(data[0]);\n      return;\n    }\n\n    final int numBits = bitsRequired(data);\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final PackedInts.Encoder encoder = encoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * encoder.valueCount() >= BLOCK_SIZE;\n    final int encodedSize = encodedSizes[numBits];\n    assert (iters * encoder.blockCount()) << 3 >= encodedSize;\n\n    out.writeVInt(numBits);\n\n    encoder.encode(data, 0, encoded, 0, iters);\n    out.writeBytes(encoded, encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee0d2b90b9b7c96860f9c096edae6ed8fad95388":["97b1b5806a1f8e249985ae7c486ef449726fd236"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"97b1b5806a1f8e249985ae7c486ef449726fd236":["cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94"],"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["ee0d2b90b9b7c96860f9c096edae6ed8fad95388"]},"commit2Childs":{"ee0d2b90b9b7c96860f9c096edae6ed8fad95388":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"97b1b5806a1f8e249985ae7c486ef449726fd236":["ee0d2b90b9b7c96860f9c096edae6ed8fad95388"],"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94":["97b1b5806a1f8e249985ae7c486ef449726fd236"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}