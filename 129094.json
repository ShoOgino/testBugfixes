{"path":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"solr/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean includeDoc = Boolean.parseBoolean(System.getProperty(\"includeDoc\",\"true\")); // include the time to create the document\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n\n    Field idField=null;\n\n    for (int i=0; i<iter; i++) {\n      if (includeDoc || add.doc==null) {\n        add.doc = new Document();\n        idField = new Field(\"id\",\"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n        add.doc.add(idField);\n        for (int j=0; j<fields.length; j+=2) {\n          String field = fields[j];\n          String val = fields[j+1];\n          Fieldable f = schema.getField(field).createField(val, 1.0f);\n          add.doc.add(f);\n        }\n      }\n      idField.setValue(Integer.toString(i));\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"includeDoc=\"+includeDoc+\" doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","sourceOld":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean includeDoc = Boolean.parseBoolean(System.getProperty(\"includeDoc\",\"true\")); // include the time to create the document\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n\n    Field idField=null;\n\n    for (int i=0; i<iter; i++) {\n      if (includeDoc || add.doc==null) {\n        add.doc = new Document();\n        idField = new Field(\"id\",\"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n        add.doc.add(idField);\n        for (int j=0; j<fields.length; j+=2) {\n          String field = fields[j];\n          String val = fields[j+1];\n          Fieldable f = schema.getField(field).createField(val, 1.0f);\n          add.doc.add(f);\n        }\n      }\n      idField.setValue(Integer.toString(i));\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"includeDoc=\"+includeDoc+\" doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"solr/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean includeDoc = Boolean.parseBoolean(System.getProperty(\"includeDoc\",\"true\")); // include the time to create the document\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n\n    Field idField=null;\n\n    for (int i=0; i<iter; i++) {\n      if (includeDoc || add.doc==null) {\n        add.doc = new Document();\n        idField = new Field(\"id\",\"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n        add.doc.add(idField);\n        for (int j=0; j<fields.length; j+=2) {\n          String field = fields[j];\n          String val = fields[j+1];\n          Fieldable f = schema.getField(field).createField(val, 1.0f);\n          add.doc.add(f);\n        }\n      }\n      idField.setValue(Integer.toString(i));\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"includeDoc=\"+includeDoc+\" doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","sourceOld":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean includeDoc = Boolean.parseBoolean(System.getProperty(\"includeDoc\",\"true\")); // include the time to create the document\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n\n    Field idField=null;\n\n    for (int i=0; i<iter; i++) {\n      if (includeDoc || add.doc==null) {\n        add.doc = new Document();\n        idField = new Field(\"id\",\"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n        add.doc.add(idField);\n        for (int j=0; j<fields.length; j+=2) {\n          String field = fields[j];\n          String val = fields[j+1];\n          Fieldable f = schema.getField(field).createField(val, 1.0f);\n          add.doc.add(f);\n        }\n      }\n      idField.setValue(Integer.toString(i));\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"includeDoc=\"+includeDoc+\" doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"solr/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean includeDoc = Boolean.parseBoolean(System.getProperty(\"includeDoc\",\"true\")); // include the time to create the document\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n\n    Field idField=null;\n\n    for (int i=0; i<iter; i++) {\n      if (includeDoc || add.doc==null) {\n        add.doc = new Document();\n        idField = new Field(\"id\",\"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n        add.doc.add(idField);\n        for (int j=0; j<fields.length; j+=2) {\n          String field = fields[j];\n          String val = fields[j+1];\n          Fieldable f = schema.getField(field).createField(val, 1.0f);\n          add.doc.add(f);\n        }\n      }\n      idField.setValue(Integer.toString(i));\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"includeDoc=\"+includeDoc+\" doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","sourceOld":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean includeDoc = Boolean.parseBoolean(System.getProperty(\"includeDoc\",\"true\")); // include the time to create the document\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n\n    Field idField=null;\n\n    for (int i=0; i<iter; i++) {\n      if (includeDoc || add.doc==null) {\n        add.doc = new Document();\n        idField = new Field(\"id\",\"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n        add.doc.add(idField);\n        for (int j=0; j<fields.length; j+=2) {\n          String field = fields[j];\n          String val = fields[j+1];\n          Fieldable f = schema.getField(field).createField(val, 1.0f);\n          add.doc.add(f);\n        }\n      }\n      idField.setValue(Integer.toString(i));\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"includeDoc=\"+includeDoc+\" doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"671279fa1676e7f2755c2745a25abd77a169f992","date":1312053489,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n    String field = \"textgap\";\n\n    String[] fields = {field,\"simple\"\n            ,field,\"test\"\n            ,field,\"how now brown cow\"\n            ,field,\"what's that?\"\n            ,field,\"radical!\"\n            ,field,\"what's all this about, anyway?\"\n            ,field,\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    add.overwrite = overwrite;\n\n    for (int i=0; i<iter; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", Integer.toString(i));\n      for (int j=0; j<fields.length; j+=2) {\n        String f = fields[j];\n        String val = fields[j+1];\n        add.solrDoc.addField(f, val);\n      }\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","sourceOld":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean includeDoc = Boolean.parseBoolean(System.getProperty(\"includeDoc\",\"true\")); // include the time to create the document\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n\n    String[] fields = {\"text\",\"simple\"\n            ,\"text\",\"test\"\n            ,\"text\",\"how now brown cow\"\n            ,\"text\",\"what's that?\"\n            ,\"text\",\"radical!\"\n            ,\"text\",\"what's all this about, anyway?\"\n            ,\"text\",\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n\n    Field idField=null;\n\n    for (int i=0; i<iter; i++) {\n      if (includeDoc || add.doc==null) {\n        add.doc = new Document();\n        idField = new Field(\"id\",\"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n        add.doc.add(idField);\n        for (int j=0; j<fields.length; j+=2) {\n          String field = fields[j];\n          String val = fields[j+1];\n          Fieldable f = schema.getField(field).createField(val, 1.0f);\n          add.doc.add(f);\n        }\n      }\n      idField.setValue(Integer.toString(i));\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"includeDoc=\"+includeDoc+\" doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n    String field = \"textgap\";\n\n    String[] fields = {field,\"simple\"\n            ,field,\"test\"\n            ,field,\"how now brown cow\"\n            ,field,\"what's that?\"\n            ,field,\"radical!\"\n            ,field,\"what's all this about, anyway?\"\n            ,field,\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    add.overwrite = overwrite;\n\n    for (int i=0; i<iter; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", Integer.toString(i));\n      for (int j=0; j<fields.length; j+=2) {\n        String f = fields[j];\n        String val = fields[j+1];\n        add.solrDoc.addField(f, val);\n      }\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","sourceOld":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    IndexSchema schema = req.getSchema();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n    String field = \"textgap\";\n\n    String[] fields = {field,\"simple\"\n            ,field,\"test\"\n            ,field,\"how now brown cow\"\n            ,field,\"what's that?\"\n            ,field,\"radical!\"\n            ,field,\"what's all this about, anyway?\"\n            ,field,\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    add.overwrite = overwrite;\n\n    for (int i=0; i<iter; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", Integer.toString(i));\n      for (int j=0; j<fields.length; j+=2) {\n        String f = fields[j];\n        String val = fields[j+1];\n        add.solrDoc.addField(f, val);\n      }\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n    String field = \"textgap\";\n\n    String[] fields = {field,\"simple\"\n            ,field,\"test\"\n            ,field,\"how now brown cow\"\n            ,field,\"what's that?\"\n            ,field,\"radical!\"\n            ,field,\"what's all this about, anyway?\"\n            ,field,\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    add.overwrite = overwrite;\n\n    for (int i=0; i<iter; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", Integer.toString(i));\n      for (int j=0; j<fields.length; j+=2) {\n        String f = fields[j];\n        String val = fields[j+1];\n        add.solrDoc.addField(f, val);\n      }\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","sourceOld":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n    String field = \"textgap\";\n\n    String[] fields = {field,\"simple\"\n            ,field,\"test\"\n            ,field,\"how now brown cow\"\n            ,field,\"what's that?\"\n            ,field,\"radical!\"\n            ,field,\"what's all this about, anyway?\"\n            ,field,\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    add.overwrite = overwrite;\n\n    for (int i=0; i<iter; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", Integer.toString(i));\n      for (int j=0; j<fields.length; j+=2) {\n        String f = fields[j];\n        String val = fields[j+1];\n        add.solrDoc.addField(f, val);\n      }\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n    String field = \"textgap\";\n\n    String[] fields = {field,\"simple\"\n            ,field,\"test\"\n            ,field,\"how now brown cow\"\n            ,field,\"what's that?\"\n            ,field,\"radical!\"\n            ,field,\"what's all this about, anyway?\"\n            ,field,\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    add.overwrite = overwrite;\n\n    for (int i=0; i<iter; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", Integer.toString(i));\n      for (int j=0; j<fields.length; j+=2) {\n        String f = fields[j];\n        String val = fields[j+1];\n        add.solrDoc.addField(f, val);\n      }\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","sourceOld":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n    String field = \"textgap\";\n\n    String[] fields = {field,\"simple\"\n            ,field,\"test\"\n            ,field,\"how now brown cow\"\n            ,field,\"what's that?\"\n            ,field,\"radical!\"\n            ,field,\"what's all this about, anyway?\"\n            ,field,\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    add.overwrite = overwrite;\n\n    for (int i=0; i<iter; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", Integer.toString(i));\n      for (int j=0; j<fields.length; j+=2) {\n        String f = fields[j];\n        String val = fields[j+1];\n        add.solrDoc.addField(f, val);\n      }\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n    String field = \"textgap\";\n\n    String[] fields = {field,\"simple\"\n            ,field,\"test\"\n            ,field,\"how now brown cow\"\n            ,field,\"what's that?\"\n            ,field,\"radical!\"\n            ,field,\"what's all this about, anyway?\"\n            ,field,\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    final RTimer timer = new RTimer();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    add.overwrite = overwrite;\n\n    for (int i=0; i<iter; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", Integer.toString(i));\n      for (int j=0; j<fields.length; j+=2) {\n        String f = fields[j];\n        String val = fields[j+1];\n        add.solrDoc.addField(f, val);\n      }\n      updateHandler.addDoc(add);\n    }\n    log.info(\"doc=\"+ Arrays.toString(fields));\n    double elapsed = timer.getTime();\n    log.info(\"iter=\"+iter +\" time=\" + elapsed + \" throughput=\" + ((long)iter*1000)/elapsed);\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","sourceOld":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n    String field = \"textgap\";\n\n    String[] fields = {field,\"simple\"\n            ,field,\"test\"\n            ,field,\"how now brown cow\"\n            ,field,\"what's that?\"\n            ,field,\"radical!\"\n            ,field,\"what's all this about, anyway?\"\n            ,field,\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    long start = System.currentTimeMillis();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    add.overwrite = overwrite;\n\n    for (int i=0; i<iter; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", Integer.toString(i));\n      for (int j=0; j<fields.length; j+=2) {\n        String f = fields[j];\n        String val = fields[j+1];\n        add.solrDoc.addField(f, val);\n      }\n      updateHandler.addDoc(add);\n    }\n    long end = System.currentTimeMillis();\n    log.info(\"doc=\"+ Arrays.toString(fields));\n    log.info(\"iter=\"+iter +\" time=\" + (end-start) + \" throughput=\" + ((long)iter*1000)/(end-start));\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestIndexingPerformance#testIndexingPerf().mjava","sourceNew":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n    String field = \"textgap\";\n\n    String[] fields = {field,\"simple\"\n            ,field,\"test\"\n            ,field,\"how now brown cow\"\n            ,field,\"what's that?\"\n            ,field,\"radical!\"\n            ,field,\"what's all this about, anyway?\"\n            ,field,\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    final RTimer timer = new RTimer();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    add.overwrite = overwrite;\n\n    for (int i=0; i<iter; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", Integer.toString(i));\n      for (int j=0; j<fields.length; j+=2) {\n        String f = fields[j];\n        String val = fields[j+1];\n        add.solrDoc.addField(f, val);\n      }\n      updateHandler.addDoc(add);\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"doc={}\", Arrays.toString(fields));\n    }\n    double elapsed = timer.getTime();\n    if (log.isInfoEnabled()) {\n      log.info(\"iter={} time={} throughput={}\", iter, elapsed, ((long) iter * 1000) / elapsed);\n    }\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","sourceOld":"  public void testIndexingPerf() throws IOException {\n    int iter=1000;\n    String iterS = System.getProperty(\"iter\");\n    if (iterS != null) iter=Integer.parseInt(iterS);\n    boolean overwrite = Boolean.parseBoolean(System.getProperty(\"overwrite\",\"false\"));\n    String doc = System.getProperty(\"doc\");\n    if (doc != null) {\n      StrUtils.splitSmart(doc,\",\",true);\n    }\n\n\n    SolrQueryRequest req = lrf.makeRequest();\n    UpdateHandler updateHandler = req.getCore().getUpdateHandler();\n    String field = \"textgap\";\n\n    String[] fields = {field,\"simple\"\n            ,field,\"test\"\n            ,field,\"how now brown cow\"\n            ,field,\"what's that?\"\n            ,field,\"radical!\"\n            ,field,\"what's all this about, anyway?\"\n            ,field,\"just how fast is this text indexing?\"\n    };\n\n\n  /***\n    String[] fields = {\n            \"a_i\",\"1\"\n            ,\"b_i\",\"2\"\n            ,\"c_i\",\"3\"\n            ,\"d_i\",\"4\"\n            ,\"e_i\",\"5\"\n            ,\"f_i\",\"6\"\n            ,\"g_i\",\"7\"\n            ,\"h_i\",\"8\"\n            ,\"i_i\",\"9\"\n            ,\"j_i\",\"0\"\n            ,\"k_i\",\"0\"\n    };\n   ***/\n\n    final RTimer timer = new RTimer();\n\n    AddUpdateCommand add = new AddUpdateCommand(req);\n    add.overwrite = overwrite;\n\n    for (int i=0; i<iter; i++) {\n      add.clear();\n      add.solrDoc = new SolrInputDocument();\n      add.solrDoc.addField(\"id\", Integer.toString(i));\n      for (int j=0; j<fields.length; j+=2) {\n        String f = fields[j];\n        String val = fields[j+1];\n        add.solrDoc.addField(f, val);\n      }\n      updateHandler.addDoc(add);\n    }\n    log.info(\"doc=\"+ Arrays.toString(fields));\n    double elapsed = timer.getTime();\n    log.info(\"iter=\"+iter +\" time=\" + elapsed + \" throughput=\" + ((long)iter*1000)/elapsed);\n\n    //discard all the changes\n    updateHandler.rollback(new RollbackUpdateCommand(req));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"671279fa1676e7f2755c2745a25abd77a169f992":["c26f00b574427b55127e869b935845554afde1fa"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["08970e5b8411182a29412c177eff67ec1110095b","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["08970e5b8411182a29412c177eff67ec1110095b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"08970e5b8411182a29412c177eff67ec1110095b":["671279fa1676e7f2755c2745a25abd77a169f992"]},"commit2Childs":{"671279fa1676e7f2755c2745a25abd77a169f992":["08970e5b8411182a29412c177eff67ec1110095b"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["671279fa1676e7f2755c2745a25abd77a169f992"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08970e5b8411182a29412c177eff67ec1110095b":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}