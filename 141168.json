{"path":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#createMockRequest(AtomicReference[Header]).mjava","commits":[{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#createMockRequest(AtomicReference[Header]).mjava","pathOld":"/dev/null","sourceNew":"  private HttpServletRequest createMockRequest(final AtomicReference<Header> header) {\n    HttpServletRequest mockReq = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.reset(mockReq);\n    mockReq.getHeader(EasyMock.anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        if (PKIAuthenticationPlugin.HEADER.equals(getCurrentArguments()[0])) {\n          if (header.get() == null) return null;\n          return header.get().getValue();\n        } else return null;\n      }\n    }).anyTimes();\n    mockReq.getUserPrincipal();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<Principal>() {\n      @Override\n      public Principal answer() throws Throwable {\n        return null;\n      }\n    }).anyTimes();\n\n    mockReq.getRequestURI();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        return \"/collection1/select\";\n      }\n    }).anyTimes();\n\n    EasyMock.replay(mockReq);\n    return mockReq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"357888e0066ec9901a44897fac3332f4586834ba","date":1464198119,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#createMockRequest(AtomicReference[Header]).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#createMockRequest(AtomicReference[Header]).mjava","sourceNew":"  private HttpServletRequest createMockRequest(final AtomicReference<Header> header) {\n    HttpServletRequest mockReq = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.reset(mockReq);\n    mockReq.getHeader(EasyMock.anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      if (PKIAuthenticationPlugin.HEADER.equals(getCurrentArguments()[0])) {\n        if (header.get() == null) return null;\n        return header.get().getValue();\n      } else return null;\n    }).anyTimes();\n    mockReq.getUserPrincipal();\n    EasyMock.expectLastCall().andAnswer(() -> null).anyTimes();\n\n    mockReq.getRequestURI();\n    EasyMock.expectLastCall().andAnswer(() -> \"/collection1/select\").anyTimes();\n\n    EasyMock.replay(mockReq);\n    return mockReq;\n  }\n\n","sourceOld":"  private HttpServletRequest createMockRequest(final AtomicReference<Header> header) {\n    HttpServletRequest mockReq = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.reset(mockReq);\n    mockReq.getHeader(EasyMock.anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        if (PKIAuthenticationPlugin.HEADER.equals(getCurrentArguments()[0])) {\n          if (header.get() == null) return null;\n          return header.get().getValue();\n        } else return null;\n      }\n    }).anyTimes();\n    mockReq.getUserPrincipal();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<Principal>() {\n      @Override\n      public Principal answer() throws Throwable {\n        return null;\n      }\n    }).anyTimes();\n\n    mockReq.getRequestURI();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        return \"/collection1/select\";\n      }\n    }).anyTimes();\n\n    EasyMock.replay(mockReq);\n    return mockReq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#createMockRequest(AtomicReference[Header]).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#createMockRequest(AtomicReference[Header]).mjava","sourceNew":"  private HttpServletRequest createMockRequest(final AtomicReference<Header> header) {\n    HttpServletRequest mockReq = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.reset(mockReq);\n    mockReq.getHeader(EasyMock.anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      if (PKIAuthenticationPlugin.HEADER.equals(getCurrentArguments()[0])) {\n        if (header.get() == null) return null;\n        return header.get().getValue();\n      } else return null;\n    }).anyTimes();\n    mockReq.getUserPrincipal();\n    EasyMock.expectLastCall().andAnswer(() -> null).anyTimes();\n\n    mockReq.getRequestURI();\n    EasyMock.expectLastCall().andAnswer(() -> \"/collection1/select\").anyTimes();\n\n    EasyMock.replay(mockReq);\n    return mockReq;\n  }\n\n","sourceOld":"  private HttpServletRequest createMockRequest(final AtomicReference<Header> header) {\n    HttpServletRequest mockReq = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.reset(mockReq);\n    mockReq.getHeader(EasyMock.anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        if (PKIAuthenticationPlugin.HEADER.equals(getCurrentArguments()[0])) {\n          if (header.get() == null) return null;\n          return header.get().getValue();\n        } else return null;\n      }\n    }).anyTimes();\n    mockReq.getUserPrincipal();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<Principal>() {\n      @Override\n      public Principal answer() throws Throwable {\n        return null;\n      }\n    }).anyTimes();\n\n    mockReq.getRequestURI();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        return \"/collection1/select\";\n      }\n    }).anyTimes();\n\n    EasyMock.replay(mockReq);\n    return mockReq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#createMockRequest(AtomicReference[Header]).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#createMockRequest(AtomicReference[Header]).mjava","sourceNew":"  private HttpServletRequest createMockRequest(final AtomicReference<Header> header) {\n    HttpServletRequest mockReq = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.reset(mockReq);\n    mockReq.getHeader(EasyMock.anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      if (PKIAuthenticationPlugin.HEADER.equals(getCurrentArguments()[0])) {\n        if (header.get() == null) return null;\n        return header.get().getValue();\n      } else return null;\n    }).anyTimes();\n    mockReq.getUserPrincipal();\n    EasyMock.expectLastCall().andAnswer(() -> null).anyTimes();\n\n    mockReq.getRequestURI();\n    EasyMock.expectLastCall().andAnswer(() -> \"/collection1/select\").anyTimes();\n\n    EasyMock.replay(mockReq);\n    return mockReq;\n  }\n\n","sourceOld":"  private HttpServletRequest createMockRequest(final AtomicReference<Header> header) {\n    HttpServletRequest mockReq = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.reset(mockReq);\n    mockReq.getHeader(EasyMock.anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        if (PKIAuthenticationPlugin.HEADER.equals(getCurrentArguments()[0])) {\n          if (header.get() == null) return null;\n          return header.get().getValue();\n        } else return null;\n      }\n    }).anyTimes();\n    mockReq.getUserPrincipal();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<Principal>() {\n      @Override\n      public Principal answer() throws Throwable {\n        return null;\n      }\n    }).anyTimes();\n\n    mockReq.getRequestURI();\n    EasyMock.expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        return \"/collection1/select\";\n      }\n    }).anyTimes();\n\n    EasyMock.replay(mockReq);\n    return mockReq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#createMockRequest(AtomicReference[Header]).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin#createMockRequest(AtomicReference[Header]).mjava","sourceNew":"  private HttpServletRequest createMockRequest(final AtomicReference<Header> header) {\n    HttpServletRequest mockReq = mock(HttpServletRequest.class);\n    when(mockReq.getHeader(any(String.class))).then(invocation -> {\n      if (PKIAuthenticationPlugin.HEADER.equals(invocation.getArgument(0))) {\n        if (header.get() == null) return null;\n        return header.get().getValue();\n      } else return null;\n    });\n    when(mockReq.getRequestURI()).thenReturn(\"/collection1/select\");\n    return mockReq;\n  }\n\n","sourceOld":"  private HttpServletRequest createMockRequest(final AtomicReference<Header> header) {\n    HttpServletRequest mockReq = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.reset(mockReq);\n    mockReq.getHeader(EasyMock.anyObject(String.class));\n    EasyMock.expectLastCall().andAnswer(() -> {\n      if (PKIAuthenticationPlugin.HEADER.equals(getCurrentArguments()[0])) {\n        if (header.get() == null) return null;\n        return header.get().getValue();\n      } else return null;\n    }).anyTimes();\n    mockReq.getUserPrincipal();\n    EasyMock.expectLastCall().andAnswer(() -> null).anyTimes();\n\n    mockReq.getRequestURI();\n    EasyMock.expectLastCall().andAnswer(() -> \"/collection1/select\").anyTimes();\n\n    EasyMock.replay(mockReq);\n    return mockReq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"357888e0066ec9901a44897fac3332f4586834ba":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["357888e0066ec9901a44897fac3332f4586834ba"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["b3a34dae868734612eb6329aa0ef754f30bd2036","357888e0066ec9901a44897fac3332f4586834ba"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b3a34dae868734612eb6329aa0ef754f30bd2036","357888e0066ec9901a44897fac3332f4586834ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"]},"commit2Childs":{"357888e0066ec9901a44897fac3332f4586834ba":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["357888e0066ec9901a44897fac3332f4586834ba","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}