{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    public void applyRules() {\n      if (!preferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : preferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> preferences.get(0).compare(r1, r2, true));\n      }\n\n      if (!clauses.isEmpty()) {\n        for (Clause clause : clauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    public void applyRules() {\n      if (!preferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : preferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> preferences.get(0).compare(r1, r2, true));\n      }\n\n      if (!clauses.isEmpty()) {\n        for (Clause clause : clauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> clusterPreferences.get(0).compare(r1, r2, true));\n      }\n\n      for (Clause clause : expandedClauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    public void applyRules() {\n      if (!preferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : preferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> preferences.get(0).compare(r1, r2, true));\n      }\n\n      if (!clauses.isEmpty()) {\n        for (Clause clause : clauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44c9a458cd4ceff8755128274a56cc87271cb3d9","date":1493722297,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if(result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> clusterPreferences.get(0).compare(r1, r2, true));\n      }\n\n      for (Clause clause : expandedClauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if(result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if(result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n          for (Row row : matrix) {\n            clause.test(row);\n          }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f78c807c3692e5b227a71538672d87d78c3cd9ba","date":1495764154,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if(result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e64a5099fefdf4cd9cd64a858fd9c44cedf9a384","date":1498229245,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (r1, r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["e64a5099fefdf4cd9cd64a858fd9c44cedf9a384"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["44c9a458cd4ceff8755128274a56cc87271cb3d9"],"86fff6c123a5a1d38adb665dd045347219798da9":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["f78c807c3692e5b227a71538672d87d78c3cd9ba","e64a5099fefdf4cd9cd64a858fd9c44cedf9a384"],"44c9a458cd4ceff8755128274a56cc87271cb3d9":["86fff6c123a5a1d38adb665dd045347219798da9"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f78c807c3692e5b227a71538672d87d78c3cd9ba":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"98f11c416d30e556e0004a9a84960702d12d35b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e64a5099fefdf4cd9cd64a858fd9c44cedf9a384":["74aea047dff7f7c38a2d766827bd20d356f98c6a"]},"commit2Childs":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["f78c807c3692e5b227a71538672d87d78c3cd9ba"],"86fff6c123a5a1d38adb665dd045347219798da9":["44c9a458cd4ceff8755128274a56cc87271cb3d9"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"44c9a458cd4ceff8755128274a56cc87271cb3d9":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e64a5099fefdf4cd9cd64a858fd9c44cedf9a384"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["86fff6c123a5a1d38adb665dd045347219798da9"],"f78c807c3692e5b227a71538672d87d78c3cd9ba":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"e64a5099fefdf4cd9cd64a858fd9c44cedf9a384":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}