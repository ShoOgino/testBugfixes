{"path":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#searchWithException().mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#searchWithException().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void searchWithException() throws Exception {\n    setupCluster(false, 0, false, null);\n    try {\n      testHarness.get().cluster.getSolrClient().request(CollectionAdminRequest.createCollection(\"test\", 1, 1));\n      testHarness.get().cluster.getSolrClient().query(\"test\", new MapSolrParams(Collections.singletonMap(\"q\", \"a(bc\")));\n      fail(\"Query should fail\");\n    } catch (SolrException ex) {\n      waitForAuditEventCallbacks(3);\n      CallbackReceiver receiver = testHarness.get().receiver;\n      assertAuditEvent(receiver.popEvent(), COMPLETED, \"/admin/cores\");\n      assertAuditEvent(receiver.popEvent(), COMPLETED, \"/admin/collections\");\n      assertAuditEvent(receiver.popEvent(), ERROR,\"/select\", SEARCH, null, 400);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5482e225fe64e9f868c423923d1144adc88142","date":1571270194,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#searchWithException().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#searchWithException().mjava","sourceNew":"  @Test\n  public void searchWithException() throws Exception {\n    setupCluster(false, null, false);\n    testHarness.get().cluster.getSolrClient().request(CollectionAdminRequest.createCollection(\"test\", 1, 1));\n    expectThrows(SolrException.class, () -> {\n      testHarness.get().cluster.getSolrClient().query(\"test\", new MapSolrParams(Collections.singletonMap(\"q\", \"a(bc\")));\n      });\n    final List<AuditEvent> events = testHarness.get().receiver.waitForAuditEvents(3);\n    assertAuditEvent(events.get(0), COMPLETED, \"/admin/cores\");\n    assertAuditEvent(events.get(1), COMPLETED, \"/admin/collections\");\n    assertAuditEvent(events.get(2), ERROR,\"/select\", SEARCH, null, 400);\n  }\n\n","sourceOld":"  @Test\n  public void searchWithException() throws Exception {\n    setupCluster(false, 0, false, null);\n    try {\n      testHarness.get().cluster.getSolrClient().request(CollectionAdminRequest.createCollection(\"test\", 1, 1));\n      testHarness.get().cluster.getSolrClient().query(\"test\", new MapSolrParams(Collections.singletonMap(\"q\", \"a(bc\")));\n      fail(\"Query should fail\");\n    } catch (SolrException ex) {\n      waitForAuditEventCallbacks(3);\n      CallbackReceiver receiver = testHarness.get().receiver;\n      assertAuditEvent(receiver.popEvent(), COMPLETED, \"/admin/cores\");\n      assertAuditEvent(receiver.popEvent(), COMPLETED, \"/admin/collections\");\n      assertAuditEvent(receiver.popEvent(), ERROR,\"/select\", SEARCH, null, 400);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d5482e225fe64e9f868c423923d1144adc88142":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d5482e225fe64e9f868c423923d1144adc88142"]},"commit2Childs":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["5d5482e225fe64e9f868c423923d1144adc88142"],"5d5482e225fe64e9f868c423923d1144adc88142":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}