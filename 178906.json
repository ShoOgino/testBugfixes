{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      DirectoryReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      DirectoryReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      DirectoryReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      DirectoryReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      DirectoryReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      DirectoryReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent.ReaderThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      DirectoryReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        failed = e;\n        return;\n      }\n      DirectoryReader reader;\n      while ((reader = holder.reader) != null) {\n        if (reader.tryIncRef()) {\n          try {\n            boolean current = reader.isCurrent();\n            if (VERBOSE) {\n              System.out.println(\"Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent:\" + current);\n            }\n\n            assertFalse(current);\n          } catch (Throwable e) {\n            if (VERBOSE) {\n              System.out.println(\"FAILED Thread: \" + Thread.currentThread() + \" Reader: \" + reader + \" isCurrent: false\");\n            }\n            failed = e;\n            holder.stop = true;\n            return;\n          } finally {\n            try {\n              reader.decRef();\n            } catch (IOException e) {\n              if (failed == null) {\n                failed = e;\n              }\n              return;\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2bb2842e561df4e8e9ad89010605fc86ac265465":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bb2842e561df4e8e9ad89010605fc86ac265465"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2bb2842e561df4e8e9ad89010605fc86ac265465"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}