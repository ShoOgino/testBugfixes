{"path":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","commits":[{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b3115f2bc6471b711ae670e999c942c6212432","date":1248307368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, r.getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, r.getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, null, true, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n    assertFalse(((SegmentReader) r.getSequentialSubReaders()[0]).termsIndexLoaded());\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    IndexReader r2 = r.reopen();\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      assertFalse(((SegmentReader) subReaders[i]).termsIndexLoaded());\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"961159f13aece73fbb30aea720e77a2237e8bafd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9b3115f2bc6471b711ae670e999c942c6212432":["961159f13aece73fbb30aea720e77a2237e8bafd"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["a9b3115f2bc6471b711ae670e999c942c6212432"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"961159f13aece73fbb30aea720e77a2237e8bafd":["a9b3115f2bc6471b711ae670e999c942c6212432"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["961159f13aece73fbb30aea720e77a2237e8bafd"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a9b3115f2bc6471b711ae670e999c942c6212432":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}