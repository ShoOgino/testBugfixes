{"path":"lucene/core/src/java/org/apache/lucene/util/MultiBits#getMatchingSub(ReaderSlice).mjava","commits":[{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MultiBits#getMatchingSub(ReaderSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/MultiBits#getMatchingSub(ReaderUtil.Slice).mjava","sourceNew":"  /**\n   * Returns a sub-Bits matching the provided <code>slice</code>\n   * <p>\n   * Because <code>null</code> usually has a special meaning for\n   * Bits (e.g. no deleted documents), you must check\n   * {@link SubResult#matches} instead to ensure the sub was \n   * actually found.\n   */\n  public SubResult getMatchingSub(ReaderSlice slice) {\n    int reader = ReaderUtil.subIndex(slice.start, starts);\n    assert reader != -1;\n    assert reader < subs.length: \"slice=\" + slice + \" starts[-1]=\" + starts[starts.length-1];\n    final SubResult subResult = new SubResult();\n    if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {\n      subResult.matches = true;\n      subResult.result = subs[reader];\n    } else {\n      subResult.matches = false;\n    }\n    return subResult;\n  }\n\n","sourceOld":"  /**\n   * Returns a sub-Bits matching the provided <code>slice</code>\n   * <p>\n   * Because <code>null</code> usually has a special meaning for\n   * Bits (e.g. no deleted documents), you must check\n   * {@link SubResult#matches} instead to ensure the sub was \n   * actually found.\n   */\n  public SubResult getMatchingSub(ReaderUtil.Slice slice) {\n    int reader = ReaderUtil.subIndex(slice.start, starts);\n    assert reader != -1;\n    assert reader < subs.length: \"slice=\" + slice + \" starts[-1]=\" + starts[starts.length-1];\n    final SubResult subResult = new SubResult();\n    if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {\n      subResult.matches = true;\n      subResult.result = subs[reader];\n    } else {\n      subResult.matches = false;\n    }\n    return subResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcce0e518c0546269a896ca6124ba4313059185f","date":1340381078,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiBits#getMatchingSub(ReaderSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/MultiBits#getMatchingSub(ReaderSlice).mjava","sourceNew":"  /**\n   * Returns a sub-Bits matching the provided <code>slice</code>\n   * <p>\n   * Because <code>null</code> usually has a special meaning for\n   * Bits (e.g. no deleted documents), you must check\n   * {@link SubResult#matches} instead to ensure the sub was \n   * actually found.\n   */\n  public SubResult getMatchingSub(ReaderSlice slice) {\n    int reader = ReaderUtil.subIndex(slice.start, starts);\n    assert reader != -1;\n    assert reader < subs.length: \"slice=\" + slice + \" starts[-1]=\" + starts[starts.length-1];\n    final SubResult subResult = new SubResult();\n    if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {\n      subResult.matches = true;\n      subResult.result = subs[reader];\n    } else {\n      subResult.matches = false;\n    }\n    return subResult;\n  }\n\n","sourceOld":"  /**\n   * Returns a sub-Bits matching the provided <code>slice</code>\n   * <p>\n   * Because <code>null</code> usually has a special meaning for\n   * Bits (e.g. no deleted documents), you must check\n   * {@link SubResult#matches} instead to ensure the sub was \n   * actually found.\n   */\n  public SubResult getMatchingSub(ReaderSlice slice) {\n    int reader = ReaderUtil.subIndex(slice.start, starts);\n    assert reader != -1;\n    assert reader < subs.length: \"slice=\" + slice + \" starts[-1]=\" + starts[starts.length-1];\n    final SubResult subResult = new SubResult();\n    if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {\n      subResult.matches = true;\n      subResult.result = subs[reader];\n    } else {\n      subResult.matches = false;\n    }\n    return subResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiBits#getMatchingSub(ReaderSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/MultiBits#getMatchingSub(ReaderSlice).mjava","sourceNew":"  /**\n   * Returns a sub-Bits matching the provided <code>slice</code>\n   * <p>\n   * Because <code>null</code> usually has a special meaning for\n   * Bits (e.g. no deleted documents), you must check\n   * {@link SubResult#matches} instead to ensure the sub was \n   * actually found.\n   */\n  public SubResult getMatchingSub(ReaderSlice slice) {\n    int reader = ReaderUtil.subIndex(slice.start, starts);\n    assert reader != -1;\n    assert reader < subs.length: \"slice=\" + slice + \" starts[-1]=\" + starts[starts.length-1];\n    final SubResult subResult = new SubResult();\n    if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {\n      subResult.matches = true;\n      subResult.result = subs[reader];\n    } else {\n      subResult.matches = false;\n    }\n    return subResult;\n  }\n\n","sourceOld":"  /**\n   * Returns a sub-Bits matching the provided <code>slice</code>\n   * <p>\n   * Because <code>null</code> usually has a special meaning for\n   * Bits (e.g. no deleted documents), you must check\n   * {@link SubResult#matches} instead to ensure the sub was \n   * actually found.\n   */\n  public SubResult getMatchingSub(ReaderSlice slice) {\n    int reader = ReaderUtil.subIndex(slice.start, starts);\n    assert reader != -1;\n    assert reader < subs.length: \"slice=\" + slice + \" starts[-1]=\" + starts[starts.length-1];\n    final SubResult subResult = new SubResult();\n    if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {\n      subResult.matches = true;\n      subResult.result = subs[reader];\n    } else {\n      subResult.matches = false;\n    }\n    return subResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcce0e518c0546269a896ca6124ba4313059185f":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","bcce0e518c0546269a896ca6124ba4313059185f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bcce0e518c0546269a896ca6124ba4313059185f"]},"commit2Childs":{"bcce0e518c0546269a896ca6124ba4313059185f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["bcce0e518c0546269a896ca6124ba4313059185f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}