{"path":"solr/core/src/test/org/apache/hadoop/http/HttpServer2.Builder#build().mjava","commits":[{"id":"99b97f030e743d8dd4d7685202f71718d7e5af22","date":1548957620,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2.Builder#build().mjava","pathOld":"/dev/null","sourceNew":"    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName == null) {\n        hostName = endpoints.get(0).getHost();\n      }\n\n      if (this.conf == null) {\n        conf = new Configuration();\n      }\n\n      HttpServer2 server = new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        if (HTTPS_SCHEME.equals(ep.getScheme())) {\n          loadSSLConfiguration();\n          break;\n        }\n      }\n\n      int requestHeaderSize = conf.getInt(\n          HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n          HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n      int responseHeaderSize = conf.getInt(\n          HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n          HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n      int idleTimeout = conf.getInt(HTTP_IDLE_TIMEOUT_MS_KEY,\n          HTTP_IDLE_TIMEOUT_MS_DEFAULT);\n\n      HttpConfiguration httpConfig = new HttpConfiguration();\n      httpConfig.setRequestHeaderSize(requestHeaderSize);\n      httpConfig.setResponseHeaderSize(responseHeaderSize);\n      httpConfig.setSendServerVersion(false);\n\n      int backlogSize = conf.getInt(HTTP_SOCKET_BACKLOG_SIZE_KEY,\n          HTTP_SOCKET_BACKLOG_SIZE_DEFAULT);\n\n      for (URI ep : endpoints) {\n        final ServerConnector connector;\n        String scheme = ep.getScheme();\n        if (HTTP_SCHEME.equals(scheme)) {\n          connector = createHttpChannelConnector(server.webServer,\n              httpConfig);\n        } else if (HTTPS_SCHEME.equals(scheme)) {\n          connector = createHttpsChannelConnector(server.webServer,\n              httpConfig);\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        connector.setHost(ep.getHost());\n        connector.setPort(ep.getPort() == -1 ? 0 : ep.getPort());\n        connector.setAcceptQueueSize(backlogSize);\n        connector.setIdleTimeout(idleTimeout);\n        server.addListener(connector);\n      }\n      server.loadListeners();\n      return server;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b74c124d68d8e306d6ef09624f3cd053b8a2fd","date":1548981962,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/hadoop/http/HttpServer2.Builder#build().mjava","sourceNew":null,"sourceOld":"    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName == null) {\n        hostName = endpoints.get(0).getHost();\n      }\n\n      if (this.conf == null) {\n        conf = new Configuration();\n      }\n\n      HttpServer2 server = new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        if (HTTPS_SCHEME.equals(ep.getScheme())) {\n          loadSSLConfiguration();\n          break;\n        }\n      }\n\n      int requestHeaderSize = conf.getInt(\n          HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n          HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n      int responseHeaderSize = conf.getInt(\n          HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n          HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n      int idleTimeout = conf.getInt(HTTP_IDLE_TIMEOUT_MS_KEY,\n          HTTP_IDLE_TIMEOUT_MS_DEFAULT);\n\n      HttpConfiguration httpConfig = new HttpConfiguration();\n      httpConfig.setRequestHeaderSize(requestHeaderSize);\n      httpConfig.setResponseHeaderSize(responseHeaderSize);\n      httpConfig.setSendServerVersion(false);\n\n      int backlogSize = conf.getInt(HTTP_SOCKET_BACKLOG_SIZE_KEY,\n          HTTP_SOCKET_BACKLOG_SIZE_DEFAULT);\n\n      for (URI ep : endpoints) {\n        final ServerConnector connector;\n        String scheme = ep.getScheme();\n        if (HTTP_SCHEME.equals(scheme)) {\n          connector = createHttpChannelConnector(server.webServer,\n              httpConfig);\n        } else if (HTTPS_SCHEME.equals(scheme)) {\n          connector = createHttpsChannelConnector(server.webServer,\n              httpConfig);\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        connector.setHost(ep.getHost());\n        connector.setPort(ep.getPort() == -1 ? 0 : ep.getPort());\n        connector.setAcceptQueueSize(backlogSize);\n        connector.setIdleTimeout(idleTimeout);\n        server.addListener(connector);\n      }\n      server.loadListeners();\n      return server;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44ca189138a5b6e1989d12ab992fab60e235ddc7","date":1549051496,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2.Builder#build().mjava","pathOld":"/dev/null","sourceNew":"    public HttpServer2 build() throws IOException {\n      Preconditions.checkNotNull(name, \"name is not set\");\n      Preconditions.checkState(!endpoints.isEmpty(), \"No endpoints specified\");\n\n      if (hostName == null) {\n        hostName = endpoints.get(0).getHost();\n      }\n\n      if (this.conf == null) {\n        conf = new Configuration();\n      }\n\n      HttpServer2 server = new HttpServer2(this);\n\n      if (this.securityEnabled) {\n        server.initSpnego(conf, hostName, usernameConfKey, keytabConfKey);\n      }\n\n      for (URI ep : endpoints) {\n        if (HTTPS_SCHEME.equals(ep.getScheme())) {\n          loadSSLConfiguration();\n          break;\n        }\n      }\n\n      int requestHeaderSize = conf.getInt(\n          HTTP_MAX_REQUEST_HEADER_SIZE_KEY,\n          HTTP_MAX_REQUEST_HEADER_SIZE_DEFAULT);\n      int responseHeaderSize = conf.getInt(\n          HTTP_MAX_RESPONSE_HEADER_SIZE_KEY,\n          HTTP_MAX_RESPONSE_HEADER_SIZE_DEFAULT);\n      int idleTimeout = conf.getInt(HTTP_IDLE_TIMEOUT_MS_KEY,\n          HTTP_IDLE_TIMEOUT_MS_DEFAULT);\n\n      HttpConfiguration httpConfig = new HttpConfiguration();\n      httpConfig.setRequestHeaderSize(requestHeaderSize);\n      httpConfig.setResponseHeaderSize(responseHeaderSize);\n      httpConfig.setSendServerVersion(false);\n\n      int backlogSize = conf.getInt(HTTP_SOCKET_BACKLOG_SIZE_KEY,\n          HTTP_SOCKET_BACKLOG_SIZE_DEFAULT);\n\n      for (URI ep : endpoints) {\n        final ServerConnector connector;\n        String scheme = ep.getScheme();\n        if (HTTP_SCHEME.equals(scheme)) {\n          connector = createHttpChannelConnector(server.webServer,\n              httpConfig);\n        } else if (HTTPS_SCHEME.equals(scheme)) {\n          connector = createHttpsChannelConnector(server.webServer,\n              httpConfig);\n        } else {\n          throw new HadoopIllegalArgumentException(\n              \"unknown scheme for endpoint:\" + ep);\n        }\n        connector.setHost(ep.getHost());\n        connector.setPort(ep.getPort() == -1 ? 0 : ep.getPort());\n        connector.setAcceptQueueSize(backlogSize);\n        connector.setIdleTimeout(idleTimeout);\n        server.addListener(connector);\n      }\n      server.loadListeners();\n      return server;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44ca189138a5b6e1989d12ab992fab60e235ddc7"]},"commit2Childs":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}