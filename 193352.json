{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,boolean,String,String...).mjava","commits":[{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,boolean,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrInfoBean,String,Metric,boolean,String,String...).mjava","sourceNew":"  /**\n   * Register an instance of {@link Metric}.\n   *\n   * @param registry   registry name\n   * @param metric     metric instance\n   * @param force      if true then an already existing metric with the same name will be replaced.\n   *                   When false and a metric with the same name already exists an exception\n   *                   will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (context != null) {\n      context.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) {\n      if (force && metricRegistry.getMetrics().containsKey(fullName)) {\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register an instance of {@link Metric}.\n   *\n   * @param registry   registry name\n   * @param metric     metric instance\n   * @param force      if true then an already existing metric with the same name will be replaced.\n   *                   When false and a metric with the same name already exists an exception\n   *                   will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void registerMetric(SolrInfoBean info, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (info != null) {\n      info.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) {\n      if (force && metricRegistry.getMetrics().containsKey(fullName)) {\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3099430ddb7155a6c992ffe31939ba52dbdddc6","date":1587397484,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,boolean,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,boolean,String,String...).mjava","sourceNew":"  /**\n   * Register an instance of {@link Metric}.\n   *\n   * @param registry   registry name\n   * @param metric     metric instance\n   * @param force      if true then an already existing metric with the same name will be replaced.\n   *                   When false and a metric with the same name already exists an exception\n   *                   will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (context != null) {\n      context.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) { // prevent race; register() throws if metric is already present\n      if (force) { // must remove any existing one if present\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","sourceOld":"  /**\n   * Register an instance of {@link Metric}.\n   *\n   * @param registry   registry name\n   * @param metric     metric instance\n   * @param force      if true then an already existing metric with the same name will be replaced.\n   *                   When false and a metric with the same name already exists an exception\n   *                   will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (context != null) {\n      context.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) {\n      if (force && metricRegistry.getMetrics().containsKey(fullName)) {\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"462c81bfb611619a4867328837e70c876bd5a94f","date":1588355232,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,boolean,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,boolean,String,String...).mjava","sourceNew":"  /**\n   * @deprecated use {@link #registerMetric(SolrMetricsContext, String, Metric, ResolutionStrategy, String, String...)}\n   */\n  @Deprecated\n  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    registerMetric(context, registry, metric, force ? ResolutionStrategy.REPLACE : ResolutionStrategy.IGNORE, metricName, metricPath);\n  }\n\n","sourceOld":"  /**\n   * Register an instance of {@link Metric}.\n   *\n   * @param registry   registry name\n   * @param metric     metric instance\n   * @param force      if true then an already existing metric with the same name will be replaced.\n   *                   When false and a metric with the same name already exists an exception\n   *                   will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (context != null) {\n      context.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) { // prevent race; register() throws if metric is already present\n      if (force) { // must remove any existing one if present\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff7b5fca5c4207413bd78695e460f6eb81bc2e99","date":1588356568,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,boolean,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,boolean,String,String...).mjava","sourceNew":"  /**\n   * Register an instance of {@link Metric}.\n   *\n   * @param registry   registry name\n   * @param metric     metric instance\n   * @param force      if true then an already existing metric with the same name will be replaced.\n   *                   When false and a metric with the same name already exists an exception\n   *                   will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (context != null) {\n      context.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) { // prevent race; register() throws if metric is already present\n      if (force) { // must remove any existing one if present\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","sourceOld":"  /**\n   * @deprecated use {@link #registerMetric(SolrMetricsContext, String, Metric, ResolutionStrategy, String, String...)}\n   */\n  @Deprecated\n  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    registerMetric(context, registry, metric, force ? ResolutionStrategy.REPLACE : ResolutionStrategy.IGNORE, metricName, metricPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bad14379f15be20a5f4871be82a276e5e69731fc","date":1599578304,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,boolean,String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#registerMetric(SolrMetricsContext,String,Metric,boolean,String,String...).mjava","sourceNew":"  /**\n   * @deprecated use {@link #registerMetric(SolrMetricsContext, String, Metric, ResolutionStrategy, String, String...)}\n   */\n  @Deprecated\n  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    registerMetric(context, registry, metric, force ? ResolutionStrategy.REPLACE : ResolutionStrategy.IGNORE, metricName, metricPath);\n  }\n\n","sourceOld":"  /**\n   * Register an instance of {@link Metric}.\n   *\n   * @param registry   registry name\n   * @param metric     metric instance\n   * @param force      if true then an already existing metric with the same name will be replaced.\n   *                   When false and a metric with the same name already exists an exception\n   *                   will be thrown.\n   * @param metricName metric name, either final name or a fully-qualified name\n   *                   using dotted notation\n   * @param metricPath (optional) additional top-most metric name path elements\n   */\n  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, boolean force, String metricName, String... metricPath) {\n    MetricRegistry metricRegistry = registry(registry);\n    String fullName = mkName(metricName, metricPath);\n    if (context != null) {\n      context.registerMetricName(fullName);\n    }\n    synchronized (metricRegistry) { // prevent race; register() throws if metric is already present\n      if (force) { // must remove any existing one if present\n        metricRegistry.remove(fullName);\n      }\n      metricRegistry.register(fullName, metric);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"462c81bfb611619a4867328837e70c876bd5a94f":["d3099430ddb7155a6c992ffe31939ba52dbdddc6"],"d3099430ddb7155a6c992ffe31939ba52dbdddc6":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff7b5fca5c4207413bd78695e460f6eb81bc2e99":["462c81bfb611619a4867328837e70c876bd5a94f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bad14379f15be20a5f4871be82a276e5e69731fc":["ff7b5fca5c4207413bd78695e460f6eb81bc2e99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bad14379f15be20a5f4871be82a276e5e69731fc"]},"commit2Childs":{"462c81bfb611619a4867328837e70c876bd5a94f":["ff7b5fca5c4207413bd78695e460f6eb81bc2e99"],"d3099430ddb7155a6c992ffe31939ba52dbdddc6":["462c81bfb611619a4867328837e70c876bd5a94f"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["d3099430ddb7155a6c992ffe31939ba52dbdddc6"],"ff7b5fca5c4207413bd78695e460f6eb81bc2e99":["bad14379f15be20a5f4871be82a276e5e69731fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"bad14379f15be20a5f4871be82a276e5e69731fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}