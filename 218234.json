{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#removeTestCodecs(Codec).mjava","commits":[{"id":"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","date":1281277545,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#removeTestCodecs(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#removeTestCodecs(String).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(String codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#removeTestCodecs(Codec).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#removeTestCodecs(Codec).mjava","sourceNew":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n  }\n\n","sourceOld":"  // returns current PreFlex codec\n  static void removeTestCodecs(Codec codec) {\n    final CodecProvider cp = CodecProvider.getDefault();\n    if (codec.name.equals(\"PreFlex\")) {\n      final Codec preFlex = cp.lookup(\"PreFlex\");\n      if (preFlex != null) {\n        cp.unregister(preFlex);\n      }\n      cp.register(new PreFlexCodec());\n    }\n    cp.unregister(cp.lookup(\"MockSep\"));\n    cp.unregister(cp.lookup(\"MockFixedIntBlock\"));\n    cp.unregister(cp.lookup(\"MockVariableIntBlock\"));\n    swapCodec(new PulsingCodec(1));\n    CodecProvider.setDefaultCodec(savedDefaultCodec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43b04c27924fe393e38e9f0986e32c634f261859":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43b04c27924fe393e38e9f0986e32c634f261859"]},"commit2Childs":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["43b04c27924fe393e38e9f0986e32c634f261859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"43b04c27924fe393e38e9f0986e32c634f261859":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}