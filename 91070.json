{"path":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testZFloat().mjava","commits":[{"id":"078fa9e94da55eaa1aa1e7393aa84ba7cc986864","date":1418310060,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testZFloat().mjava","pathOld":"/dev/null","sourceNew":"  public void testZFloat() throws Exception {\n    byte buffer[] = new byte[5]; // we never need more than 5 bytes\n    ByteArrayDataOutput out = new ByteArrayDataOutput(buffer);\n    ByteArrayDataInput in = new ByteArrayDataInput(buffer);\n\n    // round-trip small integer values\n    for (int i = Short.MIN_VALUE; i < Short.MAX_VALUE; i++) {\n      float f = (float) i;\n      CompressingStoredFieldsWriter.writeZFloat(out, f);\n      in.reset(buffer, 0, out.getPosition());\n      float g = CompressingStoredFieldsReader.readZFloat(in);\n      assertTrue(in.eof());\n      assertEquals(Float.floatToIntBits(f), Float.floatToIntBits(g));\n\n      // check that compression actually works\n      if (i >= -1 && i <= 123) {\n        assertEquals(1, out.getPosition()); // single byte compression\n      }\n      out.reset(buffer);\n    }\n\n    // round-trip special values\n    float special[] = {\n        -0.0f,\n        +0.0f,\n        Float.NEGATIVE_INFINITY,\n        Float.POSITIVE_INFINITY,\n        Float.MIN_VALUE,\n        Float.MAX_VALUE,\n        Float.NaN,\n    };\n\n    for (float f : special) {\n      CompressingStoredFieldsWriter.writeZFloat(out, f);\n      in.reset(buffer, 0, out.getPosition());\n      float g = CompressingStoredFieldsReader.readZFloat(in);\n      assertTrue(in.eof());\n      assertEquals(Float.floatToIntBits(f), Float.floatToIntBits(g));\n      out.reset(buffer);\n    }\n\n    // round-trip random values\n    Random r = random();\n    for (int i = 0; i < 100000; i++) {\n      float f = r.nextFloat() * (random().nextInt(100) - 50);\n      CompressingStoredFieldsWriter.writeZFloat(out, f);\n      assertTrue(\"length=\" + out.getPosition() + \", f=\" + f, out.getPosition() <= ((Float.floatToIntBits(f) >>> 31) == 1 ? 5 : 4));\n      in.reset(buffer, 0, out.getPosition());\n      float g = CompressingStoredFieldsReader.readZFloat(in);\n      assertTrue(in.eof());\n      assertEquals(Float.floatToIntBits(f), Float.floatToIntBits(g));\n      out.reset(buffer);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testZFloat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testZFloat().mjava","sourceNew":"  public void testZFloat() throws Exception {\n    byte buffer[] = new byte[5]; // we never need more than 5 bytes\n    ByteArrayDataOutput out = new ByteArrayDataOutput(buffer);\n    ByteArrayDataInput in = new ByteArrayDataInput(buffer);\n\n    // round-trip small integer values\n    for (int i = Short.MIN_VALUE; i < Short.MAX_VALUE; i++) {\n      float f = (float) i;\n      CompressingStoredFieldsWriter.writeZFloat(out, f);\n      in.reset(buffer, 0, out.getPosition());\n      float g = CompressingStoredFieldsReader.readZFloat(in);\n      assertTrue(in.eof());\n      assertEquals(Float.floatToIntBits(f), Float.floatToIntBits(g));\n\n      // check that compression actually works\n      if (i >= -1 && i <= 123) {\n        assertEquals(1, out.getPosition()); // single byte compression\n      }\n      out.reset(buffer);\n    }\n\n    // round-trip special values\n    float special[] = {\n        -0.0f,\n        +0.0f,\n        Float.NEGATIVE_INFINITY,\n        Float.POSITIVE_INFINITY,\n        Float.MIN_VALUE,\n        Float.MAX_VALUE,\n        Float.NaN,\n    };\n\n    for (float f : special) {\n      CompressingStoredFieldsWriter.writeZFloat(out, f);\n      in.reset(buffer, 0, out.getPosition());\n      float g = CompressingStoredFieldsReader.readZFloat(in);\n      assertTrue(in.eof());\n      assertEquals(Float.floatToIntBits(f), Float.floatToIntBits(g));\n      out.reset(buffer);\n    }\n\n    // round-trip random values\n    Random r = random();\n    for (int i = 0; i < 100000; i++) {\n      float f = r.nextFloat() * (random().nextInt(100) - 50);\n      CompressingStoredFieldsWriter.writeZFloat(out, f);\n      assertTrue(\"length=\" + out.getPosition() + \", f=\" + f, out.getPosition() <= ((Float.floatToIntBits(f) >>> 31) == 1 ? 5 : 4));\n      in.reset(buffer, 0, out.getPosition());\n      float g = CompressingStoredFieldsReader.readZFloat(in);\n      assertTrue(in.eof());\n      assertEquals(Float.floatToIntBits(f), Float.floatToIntBits(g));\n      out.reset(buffer);\n    }\n  }\n\n","sourceOld":"  public void testZFloat() throws Exception {\n    byte buffer[] = new byte[5]; // we never need more than 5 bytes\n    ByteArrayDataOutput out = new ByteArrayDataOutput(buffer);\n    ByteArrayDataInput in = new ByteArrayDataInput(buffer);\n\n    // round-trip small integer values\n    for (int i = Short.MIN_VALUE; i < Short.MAX_VALUE; i++) {\n      float f = (float) i;\n      CompressingStoredFieldsWriter.writeZFloat(out, f);\n      in.reset(buffer, 0, out.getPosition());\n      float g = CompressingStoredFieldsReader.readZFloat(in);\n      assertTrue(in.eof());\n      assertEquals(Float.floatToIntBits(f), Float.floatToIntBits(g));\n\n      // check that compression actually works\n      if (i >= -1 && i <= 123) {\n        assertEquals(1, out.getPosition()); // single byte compression\n      }\n      out.reset(buffer);\n    }\n\n    // round-trip special values\n    float special[] = {\n        -0.0f,\n        +0.0f,\n        Float.NEGATIVE_INFINITY,\n        Float.POSITIVE_INFINITY,\n        Float.MIN_VALUE,\n        Float.MAX_VALUE,\n        Float.NaN,\n    };\n\n    for (float f : special) {\n      CompressingStoredFieldsWriter.writeZFloat(out, f);\n      in.reset(buffer, 0, out.getPosition());\n      float g = CompressingStoredFieldsReader.readZFloat(in);\n      assertTrue(in.eof());\n      assertEquals(Float.floatToIntBits(f), Float.floatToIntBits(g));\n      out.reset(buffer);\n    }\n\n    // round-trip random values\n    Random r = random();\n    for (int i = 0; i < 100000; i++) {\n      float f = r.nextFloat() * (random().nextInt(100) - 50);\n      CompressingStoredFieldsWriter.writeZFloat(out, f);\n      assertTrue(\"length=\" + out.getPosition() + \", f=\" + f, out.getPosition() <= ((Float.floatToIntBits(f) >>> 31) == 1 ? 5 : 4));\n      in.reset(buffer, 0, out.getPosition());\n      float g = CompressingStoredFieldsReader.readZFloat(in);\n      assertTrue(in.eof());\n      assertEquals(Float.floatToIntBits(f), Float.floatToIntBits(g));\n      out.reset(buffer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"078fa9e94da55eaa1aa1e7393aa84ba7cc986864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["078fa9e94da55eaa1aa1e7393aa84ba7cc986864"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"078fa9e94da55eaa1aa1e7393aa84ba7cc986864":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["078fa9e94da55eaa1aa1e7393aa84ba7cc986864"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}