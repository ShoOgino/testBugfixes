{"path":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings0().mjava","commits":[{"id":"ec4fc24ecd353171e03bd016c1681cd97476015f","date":1432214672,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings0().mjava","pathOld":"/dev/null","sourceNew":"  Map<Position, String> getNodeMappings0() {\n    List<String> shardNames = new ArrayList<>(shardVsReplicaCount.keySet());\n    int[] shardOrder = new int[shardNames.size()];\n    for (int i = 0; i < shardNames.size(); i++) shardOrder[i] = i;\n\n    boolean hasFuzzyRules = false;\n    int nonWildCardShardRules = 0;\n    for (Rule r : rules) {\n      if (r.isFuzzy()) hasFuzzyRules = true;\n      if (!r.shard.isWildCard()) {\n        nonWildCardShardRules++;\n        //we will have to try all combinations\n        if (shardNames.size() > 10) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Max 10 shards allowed if there is a non wild card shard specified in rule\");\n        }\n      }\n    }\n\n    Map<Position, String> result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, false);\n    if (result == null && hasFuzzyRules) {\n      result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, true);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"969718c368b28ed1b2335ea2deb275c696cddb4f","date":1498803580,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings0().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings0().mjava","sourceNew":"  Map<ReplicaPosition, String> getNodeMappings0() {\n    List<String> shardNames = new ArrayList<>(shardVsReplicaCount.keySet());\n    int[] shardOrder = new int[shardNames.size()];\n    for (int i = 0; i < shardNames.size(); i++) shardOrder[i] = i;\n\n    boolean hasFuzzyRules = false;\n    int nonWildCardShardRules = 0;\n    for (Rule r : rules) {\n      if (r.isFuzzy()) hasFuzzyRules = true;\n      if (!r.shard.isWildCard()) {\n        nonWildCardShardRules++;\n        //we will have to try all combinations\n        if (shardNames.size() > 10) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Max 10 shards allowed if there is a non wild card shard specified in rule\");\n        }\n      }\n    }\n\n    Map<ReplicaPosition, String> result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, false);\n    if (result == null && hasFuzzyRules) {\n      result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, true);\n    }\n    return result;\n  }\n\n","sourceOld":"  Map<Position, String> getNodeMappings0() {\n    List<String> shardNames = new ArrayList<>(shardVsReplicaCount.keySet());\n    int[] shardOrder = new int[shardNames.size()];\n    for (int i = 0; i < shardNames.size(); i++) shardOrder[i] = i;\n\n    boolean hasFuzzyRules = false;\n    int nonWildCardShardRules = 0;\n    for (Rule r : rules) {\n      if (r.isFuzzy()) hasFuzzyRules = true;\n      if (!r.shard.isWildCard()) {\n        nonWildCardShardRules++;\n        //we will have to try all combinations\n        if (shardNames.size() > 10) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Max 10 shards allowed if there is a non wild card shard specified in rule\");\n        }\n      }\n    }\n\n    Map<Position, String> result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, false);\n    if (result == null && hasFuzzyRules) {\n      result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, true);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d92226151c91fb4bebcca6d18782d1c84aee2cd","date":1498804792,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings0().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#getNodeMappings0().mjava","sourceNew":"  Map<ReplicaPosition, String> getNodeMappings0() {\n    List<String> shardNames = new ArrayList<>(shardVsReplicaCount.keySet());\n    int[] shardOrder = new int[shardNames.size()];\n    for (int i = 0; i < shardNames.size(); i++) shardOrder[i] = i;\n\n    boolean hasFuzzyRules = false;\n    int nonWildCardShardRules = 0;\n    for (Rule r : rules) {\n      if (r.isFuzzy()) hasFuzzyRules = true;\n      if (!r.shard.isWildCard()) {\n        nonWildCardShardRules++;\n        //we will have to try all combinations\n        if (shardNames.size() > 10) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Max 10 shards allowed if there is a non wild card shard specified in rule\");\n        }\n      }\n    }\n\n    Map<ReplicaPosition, String> result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, false);\n    if (result == null && hasFuzzyRules) {\n      result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, true);\n    }\n    return result;\n  }\n\n","sourceOld":"  Map<Position, String> getNodeMappings0() {\n    List<String> shardNames = new ArrayList<>(shardVsReplicaCount.keySet());\n    int[] shardOrder = new int[shardNames.size()];\n    for (int i = 0; i < shardNames.size(); i++) shardOrder[i] = i;\n\n    boolean hasFuzzyRules = false;\n    int nonWildCardShardRules = 0;\n    for (Rule r : rules) {\n      if (r.isFuzzy()) hasFuzzyRules = true;\n      if (!r.shard.isWildCard()) {\n        nonWildCardShardRules++;\n        //we will have to try all combinations\n        if (shardNames.size() > 10) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Max 10 shards allowed if there is a non wild card shard specified in rule\");\n        }\n      }\n    }\n\n    Map<Position, String> result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, false);\n    if (result == null && hasFuzzyRules) {\n      result = tryAllPermutations(shardNames, shardOrder, nonWildCardShardRules, true);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"969718c368b28ed1b2335ea2deb275c696cddb4f":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["969718c368b28ed1b2335ea2deb275c696cddb4f"]},"commit2Childs":{"969718c368b28ed1b2335ea2deb275c696cddb4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["969718c368b28ed1b2335ea2deb275c696cddb4f","0d92226151c91fb4bebcca6d18782d1c84aee2cd"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d92226151c91fb4bebcca6d18782d1c84aee2cd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}