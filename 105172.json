{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testReplaceWith().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testReplaceWith().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testReplaceWith().mjava","sourceNew":"  @Test\n  public void testReplaceWith() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"name\" regexp=\"'\" replaceWith=\"''\" />\n    Map<String, String> fld = getField(\"name\", \"string\", \"'\", null, null);\n    fld.put(REPLACE_WITH, \"''\");\n    fields.add(fld);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n\n    Map<String, Object> src = new HashMap<String, Object>();\n    String s = \"D'souza\";\n    src.put(\"name\", s);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src,\n            context);\n    assertEquals(\"D''souza\", result.get(\"name\"));\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceWith() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"name\" regexp=\"'\" replaceWith=\"''\" />\n    Map<String, String> fld = getField(\"name\", \"string\", \"'\", null, null);\n    fld.put(REPLACE_WITH, \"''\");\n    fields.add(fld);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n\n    Map<String, Object> src = new HashMap<String, Object>();\n    String s = \"D'souza\";\n    src.put(\"name\", s);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src,\n            context);\n    assertEquals(\"D''souza\", result.get(\"name\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testReplaceWith().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestRegexTransformer#testReplaceWith().mjava","sourceNew":"  @Test\n  public void testReplaceWith() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"name\" regexp=\"'\" replaceWith=\"''\" />\n    Map<String, String> fld = getField(\"name\", \"string\", \"'\", null, null);\n    fld.put(REPLACE_WITH, \"''\");\n    fields.add(fld);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n\n    Map<String, Object> src = new HashMap<String, Object>();\n    String s = \"D'souza\";\n    src.put(\"name\", s);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src,\n            context);\n    assertEquals(\"D''souza\", result.get(\"name\"));\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceWith() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"name\" regexp=\"'\" replaceWith=\"''\" />\n    Map<String, String> fld = getField(\"name\", \"string\", \"'\", null, null);\n    fld.put(REPLACE_WITH, \"''\");\n    fields.add(fld);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n\n    Map<String, Object> src = new HashMap<String, Object>();\n    String s = \"D'souza\";\n    src.put(\"name\", s);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src,\n            context);\n    assertEquals(\"D''souza\", result.get(\"name\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testReplaceWith().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testReplaceWith().mjava","sourceNew":"  @Test\n  public void testReplaceWith() {\n    List<Map<String, String>> fields = new ArrayList<>();\n    // <field column=\"name\" regexp=\"'\" replaceWith=\"''\" />\n    Map<String, String> fld = getField(\"name\", \"string\", \"'\", null, null);\n    fld.put(REPLACE_WITH, \"''\");\n    fields.add(fld);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n\n    Map<String, Object> src = new HashMap<>();\n    String s = \"D'souza\";\n    src.put(\"name\", s);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src,\n            context);\n    assertEquals(\"D''souza\", result.get(\"name\"));\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceWith() {\n    List<Map<String, String>> fields = new ArrayList<Map<String, String>>();\n    // <field column=\"name\" regexp=\"'\" replaceWith=\"''\" />\n    Map<String, String> fld = getField(\"name\", \"string\", \"'\", null, null);\n    fld.put(REPLACE_WITH, \"''\");\n    fields.add(fld);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n\n    Map<String, Object> src = new HashMap<String, Object>();\n    String s = \"D'souza\";\n    src.put(\"name\", s);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src,\n            context);\n    assertEquals(\"D''souza\", result.get(\"name\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e08ecdf9a28c81716b89f59f7db35cda7609a09","date":1408297873,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testReplaceWith().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testReplaceWith().mjava","sourceNew":"  @Test\n  public void testReplaceWith() {\n    List<Map<String, String>> fields = new ArrayList<>();\n    // <field column=\"name\" regexp=\"'\" replaceWith=\"''\" />\n    Map<String, String> fld = getField(\"name\", \"string\", \"'\", null, null);\n    fld.put(REPLACE_WITH, \"''\");\n    fields.add(fld);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n\n    Map<String, Object> src = new HashMap<>();\n    String s = \"D'souza\";\n    src.put(\"name\", s);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src,\n            context);\n    assertEquals(\"D''souza\", result.get(\"name\"));\n\n    fld = getField(\"title_underscore\", \"string\", \"\\\\s+\", \"title\", null);\n    fld.put(REPLACE_WITH, \"_\");\n    fields.clear();\n    fields.add(fld);\n    context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    src.clear();\n    src.put(\"title\", \"value with spaces\"); // a value which will match the regex\n    result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"value_with_spaces\", result.get(\"title_underscore\"));\n    src.clear();\n    src.put(\"title\", \"valueWithoutSpaces\"); // value which will not match regex\n    result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"valueWithoutSpaces\", result.get(\"title_underscore\")); // value should be returned as-is\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceWith() {\n    List<Map<String, String>> fields = new ArrayList<>();\n    // <field column=\"name\" regexp=\"'\" replaceWith=\"''\" />\n    Map<String, String> fld = getField(\"name\", \"string\", \"'\", null, null);\n    fld.put(REPLACE_WITH, \"''\");\n    fields.add(fld);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n\n    Map<String, Object> src = new HashMap<>();\n    String s = \"D'souza\";\n    src.put(\"name\", s);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src,\n            context);\n    assertEquals(\"D''souza\", result.get(\"name\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestRegexTransformer#testReplaceWith().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testReplaceWith() {\n    List<Map<String, String>> fields = new ArrayList<>();\n    // <field column=\"name\" regexp=\"'\" replaceWith=\"''\" />\n    Map<String, String> fld = getField(\"name\", \"string\", \"'\", null, null);\n    fld.put(REPLACE_WITH, \"''\");\n    fields.add(fld);\n    Context context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n\n    Map<String, Object> src = new HashMap<>();\n    String s = \"D'souza\";\n    src.put(\"name\", s);\n\n    Map<String, Object> result = new RegexTransformer().transformRow(src,\n            context);\n    assertEquals(\"D''souza\", result.get(\"name\"));\n\n    fld = getField(\"title_underscore\", \"string\", \"\\\\s+\", \"title\", null);\n    fld.put(REPLACE_WITH, \"_\");\n    fields.clear();\n    fields.add(fld);\n    context = getContext(null, null, null, Context.FULL_DUMP, fields, null);\n    src.clear();\n    src.put(\"title\", \"value with spaces\"); // a value which will match the regex\n    result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"value_with_spaces\", result.get(\"title_underscore\"));\n    src.clear();\n    src.put(\"title\", \"valueWithoutSpaces\"); // value which will not match regex\n    result = new RegexTransformer().transformRow(src, context);\n    assertEquals(\"valueWithoutSpaces\", result.get(\"title_underscore\")); // value should be returned as-is\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["4e08ecdf9a28c81716b89f59f7db35cda7609a09"],"4e08ecdf9a28c81716b89f59f7db35cda7609a09":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4e08ecdf9a28c81716b89f59f7db35cda7609a09"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e08ecdf9a28c81716b89f59f7db35cda7609a09":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}