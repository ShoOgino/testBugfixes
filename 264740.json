{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final float[] arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final float[] floatArr = arr;\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = floatArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final float[] arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final float[] floatArr = arr;\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = floatArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Floats arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final float[] arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final float[] floatArr = arr;\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = floatArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Floats arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final float[] arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr[doc] : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final float[] floatArr = arr;\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = floatArr[doc];\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","10d2f7af0975ac83900a2c970a62fe4c8667176b","61e20f33ce8ff701576366fdb03955eded5f209b","0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Floats arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Floats arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Floats arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Floats arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Floats arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Floats arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return Float.intBitsToFloat((int)arr.get(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = floatVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Floats arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return Float.intBitsToFloat((int)arr.get(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = floatVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Floats arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return Float.intBitsToFloat((int)arr.get(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = floatVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Floats arr = cache.getFloats(readerContext.reader(), field, parser, true);\n    final Bits valid = cache.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return valid.get(doc) ? arr.get(doc) : null;\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = arr.get(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/FloatFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return Float.intBitsToFloat((int)arr.get(doc));\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return arr.get(doc) != 0 || valid.get(doc);\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueFloat mval = new MutableValueFloat();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = floatVal(doc);\n            mval.exists = mval.value != 0 || valid.get(doc);\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11a746437bc5c0a0b3df0337ed249c387c812871":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","f45457a742a53533c348c4b990b1c579ff364467"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","11a746437bc5c0a0b3df0337ed249c387c812871"],"56572ec06f1407c066d6b7399413178b33176cd8":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"f45457a742a53533c348c4b990b1c579ff364467":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d4d69c535930b5cce125cff868d40f6373dc27d4","f45457a742a53533c348c4b990b1c579ff364467"],"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["93dd449115a9247533e44bab47e8429e5dccbc6d","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"f45457a742a53533c348c4b990b1c579ff364467":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}