{"path":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testConfigureReporter().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testConfigureReporter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConfigureReporter() throws Exception {\n    Random random = random();\n\n    String metricName = SolrMetricManager.mkName(METRIC_NAME, HANDLER_CATEGORY.toString(), HANDLER_NAME);\n    SolrCoreMetricManager coreMetricManager = h.getCore().getCoreMetricManager();\n    Timer timer = (Timer) metricManager.timer(coreMetricManager.getRegistryName(), metricName);\n\n    long initialCount = timer.getCount();\n\n    int iterations = TestUtil.nextInt(random, 0, MAX_ITERATIONS);\n    for (int i = 0; i < iterations; ++i) {\n      h.query(req(\"*\"));\n    }\n\n    long finalCount = timer.getCount();\n    assertEquals(\"metric counter incorrect\", iterations, finalCount - initialCount);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertEquals(RENAMED_REPORTERS.length, reporters.size());\n\n    // SPECIFIC and MULTIREGISTRY were skipped because they were\n    // specific to collection1\n    for (String reporterName : RENAMED_REPORTERS) {\n      SolrMetricReporter reporter = reporters.get(reporterName);\n      assertNotNull(\"Reporter \" + reporterName + \" was not found.\", reporter);\n      assertTrue(reporter instanceof MockMetricReporter);\n\n      MockMetricReporter mockReporter = (MockMetricReporter) reporter;\n      assertTrue(\"Reporter \" + reporterName + \" was not initialized: \" + mockReporter, mockReporter.didInit);\n      assertTrue(\"Reporter \" + reporterName + \" was not validated: \" + mockReporter, mockReporter.didValidate);\n      assertFalse(\"Reporter \" + reporterName + \" was incorrectly closed: \" + mockReporter, mockReporter.didClose);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testConfigureReporter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConfigureReporter() throws Exception {\n    Random random = random();\n\n    String metricName = SolrMetricManager.mkName(METRIC_NAME, HANDLER_CATEGORY.toString(), HANDLER_NAME);\n    SolrCoreMetricManager coreMetricManager = h.getCore().getCoreMetricManager();\n    Timer timer = (Timer) metricManager.timer(coreMetricManager.getRegistryName(), metricName);\n\n    long initialCount = timer.getCount();\n\n    int iterations = TestUtil.nextInt(random, 0, MAX_ITERATIONS);\n    for (int i = 0; i < iterations; ++i) {\n      h.query(req(\"*\"));\n    }\n\n    long finalCount = timer.getCount();\n    assertEquals(\"metric counter incorrect\", iterations, finalCount - initialCount);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertEquals(RENAMED_REPORTERS.length, reporters.size());\n\n    // SPECIFIC and MULTIREGISTRY were skipped because they were\n    // specific to collection1\n    for (String reporterName : RENAMED_REPORTERS) {\n      SolrMetricReporter reporter = reporters.get(reporterName);\n      assertNotNull(\"Reporter \" + reporterName + \" was not found.\", reporter);\n      assertTrue(reporter instanceof MockMetricReporter);\n\n      MockMetricReporter mockReporter = (MockMetricReporter) reporter;\n      assertTrue(\"Reporter \" + reporterName + \" was not initialized: \" + mockReporter, mockReporter.didInit);\n      assertTrue(\"Reporter \" + reporterName + \" was not validated: \" + mockReporter, mockReporter.didValidate);\n      assertFalse(\"Reporter \" + reporterName + \" was incorrectly closed: \" + mockReporter, mockReporter.didClose);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testConfigureReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testConfigureReporter().mjava","sourceNew":"  @Test\n  public void testConfigureReporter() throws Exception {\n    Random random = random();\n\n    String metricName = SolrMetricManager.mkName(METRIC_NAME, HANDLER_CATEGORY.toString(), HANDLER_NAME);\n    SolrCoreMetricManager coreMetricManager = h.getCore().getCoreMetricManager();\n    Timer timer = (Timer) metricManager.timer(coreMetricManager.getRegistryName(), metricName);\n\n    long initialCount = timer.getCount();\n\n    int iterations = TestUtil.nextInt(random, 0, MAX_ITERATIONS);\n    for (int i = 0; i < iterations; ++i) {\n      h.query(req(\"*\"));\n    }\n\n    long finalCount = timer.getCount();\n    assertEquals(\"metric counter incorrect\", iterations, finalCount - initialCount);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertEquals(RENAMED_REPORTERS.length, reporters.size());\n\n    // SPECIFIC and MULTIREGISTRY were skipped because they were\n    // specific to collection1\n    for (String reporterName : RENAMED_REPORTERS) {\n      SolrMetricReporter reporter = reporters.get(reporterName + \"@\" + tag);\n      assertNotNull(\"Reporter \" + reporterName + \" was not found.\", reporter);\n      assertTrue(reporter instanceof MockMetricReporter);\n\n      MockMetricReporter mockReporter = (MockMetricReporter) reporter;\n      assertTrue(\"Reporter \" + reporterName + \" was not initialized: \" + mockReporter, mockReporter.didInit);\n      assertTrue(\"Reporter \" + reporterName + \" was not validated: \" + mockReporter, mockReporter.didValidate);\n      assertFalse(\"Reporter \" + reporterName + \" was incorrectly closed: \" + mockReporter, mockReporter.didClose);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConfigureReporter() throws Exception {\n    Random random = random();\n\n    String metricName = SolrMetricManager.mkName(METRIC_NAME, HANDLER_CATEGORY.toString(), HANDLER_NAME);\n    SolrCoreMetricManager coreMetricManager = h.getCore().getCoreMetricManager();\n    Timer timer = (Timer) metricManager.timer(coreMetricManager.getRegistryName(), metricName);\n\n    long initialCount = timer.getCount();\n\n    int iterations = TestUtil.nextInt(random, 0, MAX_ITERATIONS);\n    for (int i = 0; i < iterations; ++i) {\n      h.query(req(\"*\"));\n    }\n\n    long finalCount = timer.getCount();\n    assertEquals(\"metric counter incorrect\", iterations, finalCount - initialCount);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertEquals(RENAMED_REPORTERS.length, reporters.size());\n\n    // SPECIFIC and MULTIREGISTRY were skipped because they were\n    // specific to collection1\n    for (String reporterName : RENAMED_REPORTERS) {\n      SolrMetricReporter reporter = reporters.get(reporterName);\n      assertNotNull(\"Reporter \" + reporterName + \" was not found.\", reporter);\n      assertTrue(reporter instanceof MockMetricReporter);\n\n      MockMetricReporter mockReporter = (MockMetricReporter) reporter;\n      assertTrue(\"Reporter \" + reporterName + \" was not initialized: \" + mockReporter, mockReporter.didInit);\n      assertTrue(\"Reporter \" + reporterName + \" was not validated: \" + mockReporter, mockReporter.didValidate);\n      assertFalse(\"Reporter \" + reporterName + \" was incorrectly closed: \" + mockReporter, mockReporter.didClose);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testConfigureReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testConfigureReporter().mjava","sourceNew":"  @Test\n  public void testConfigureReporter() throws Exception {\n    Random random = random();\n\n    String metricName = SolrMetricManager.mkName(METRIC_NAME, HANDLER_CATEGORY.toString(), HANDLER_NAME);\n    SolrCoreMetricManager coreMetricManager = h.getCore().getCoreMetricManager();\n    Timer timer = (Timer) metricManager.timer(null, coreMetricManager.getRegistryName(), metricName);\n\n    long initialCount = timer.getCount();\n\n    int iterations = TestUtil.nextInt(random, 0, MAX_ITERATIONS);\n    for (int i = 0; i < iterations; ++i) {\n      h.query(req(\"*\"));\n    }\n\n    long finalCount = timer.getCount();\n    assertEquals(\"metric counter incorrect\", iterations, finalCount - initialCount);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertEquals(RENAMED_REPORTERS.length + jmxReporter, reporters.size());\n\n    // SPECIFIC and MULTIREGISTRY were skipped because they were\n    // specific to collection1\n    for (String reporterName : RENAMED_REPORTERS) {\n      SolrMetricReporter reporter = reporters.get(reporterName + \"@\" + tag);\n      assertNotNull(\"Reporter \" + reporterName + \" was not found.\", reporter);\n      assertTrue(reporter instanceof MockMetricReporter);\n\n      MockMetricReporter mockReporter = (MockMetricReporter) reporter;\n      assertTrue(\"Reporter \" + reporterName + \" was not initialized: \" + mockReporter, mockReporter.didInit);\n      assertTrue(\"Reporter \" + reporterName + \" was not validated: \" + mockReporter, mockReporter.didValidate);\n      assertFalse(\"Reporter \" + reporterName + \" was incorrectly closed: \" + mockReporter, mockReporter.didClose);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConfigureReporter() throws Exception {\n    Random random = random();\n\n    String metricName = SolrMetricManager.mkName(METRIC_NAME, HANDLER_CATEGORY.toString(), HANDLER_NAME);\n    SolrCoreMetricManager coreMetricManager = h.getCore().getCoreMetricManager();\n    Timer timer = (Timer) metricManager.timer(coreMetricManager.getRegistryName(), metricName);\n\n    long initialCount = timer.getCount();\n\n    int iterations = TestUtil.nextInt(random, 0, MAX_ITERATIONS);\n    for (int i = 0; i < iterations; ++i) {\n      h.query(req(\"*\"));\n    }\n\n    long finalCount = timer.getCount();\n    assertEquals(\"metric counter incorrect\", iterations, finalCount - initialCount);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertEquals(RENAMED_REPORTERS.length, reporters.size());\n\n    // SPECIFIC and MULTIREGISTRY were skipped because they were\n    // specific to collection1\n    for (String reporterName : RENAMED_REPORTERS) {\n      SolrMetricReporter reporter = reporters.get(reporterName + \"@\" + tag);\n      assertNotNull(\"Reporter \" + reporterName + \" was not found.\", reporter);\n      assertTrue(reporter instanceof MockMetricReporter);\n\n      MockMetricReporter mockReporter = (MockMetricReporter) reporter;\n      assertTrue(\"Reporter \" + reporterName + \" was not initialized: \" + mockReporter, mockReporter.didInit);\n      assertTrue(\"Reporter \" + reporterName + \" was not validated: \" + mockReporter, mockReporter.didValidate);\n      assertFalse(\"Reporter \" + reporterName + \" was incorrectly closed: \" + mockReporter, mockReporter.didClose);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testConfigureReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testConfigureReporter().mjava","sourceNew":"  @Test\n  public void testConfigureReporter() throws Exception {\n    Random random = random();\n\n    String metricName = SolrMetricManager.mkName(METRIC_NAME, HANDLER_CATEGORY.toString(), HANDLER_NAME);\n    SolrCoreMetricManager coreMetricManager = h.getCore().getCoreMetricManager();\n    Timer timer = (Timer) metricManager.timer(null, coreMetricManager.getRegistryName(), metricName);\n\n    long initialCount = timer.getCount();\n\n    int iterations = TestUtil.nextInt(random, 0, MAX_ITERATIONS);\n    for (int i = 0; i < iterations; ++i) {\n      h.query(req(\"*\"));\n    }\n\n    long finalCount = timer.getCount();\n    assertEquals(\"metric counter incorrect\", iterations, finalCount - initialCount);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertEquals(RENAMED_REPORTERS.length + jmxReporter, reporters.size());\n\n    // SPECIFIC and MULTIREGISTRY were skipped because they were\n    // specific to collection1\n    for (String reporterName : RENAMED_REPORTERS) {\n      SolrMetricReporter reporter = reporters.get(reporterName + \"@\" + tag);\n      assertNotNull(\"Reporter \" + reporterName + \" was not found.\", reporter);\n      assertTrue(reporter instanceof MockMetricReporter);\n\n      MockMetricReporter mockReporter = (MockMetricReporter) reporter;\n      assertTrue(\"Reporter \" + reporterName + \" was not initialized: \" + mockReporter, mockReporter.didInit);\n      assertTrue(\"Reporter \" + reporterName + \" was not validated: \" + mockReporter, mockReporter.didValidate);\n      assertFalse(\"Reporter \" + reporterName + \" was incorrectly closed: \" + mockReporter, mockReporter.didClose);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConfigureReporter() throws Exception {\n    Random random = random();\n\n    String metricName = SolrMetricManager.mkName(METRIC_NAME, HANDLER_CATEGORY.toString(), HANDLER_NAME);\n    SolrCoreMetricManager coreMetricManager = h.getCore().getCoreMetricManager();\n    Timer timer = (Timer) metricManager.timer(coreMetricManager.getRegistryName(), metricName);\n\n    long initialCount = timer.getCount();\n\n    int iterations = TestUtil.nextInt(random, 0, MAX_ITERATIONS);\n    for (int i = 0; i < iterations; ++i) {\n      h.query(req(\"*\"));\n    }\n\n    long finalCount = timer.getCount();\n    assertEquals(\"metric counter incorrect\", iterations, finalCount - initialCount);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertEquals(RENAMED_REPORTERS.length, reporters.size());\n\n    // SPECIFIC and MULTIREGISTRY were skipped because they were\n    // specific to collection1\n    for (String reporterName : RENAMED_REPORTERS) {\n      SolrMetricReporter reporter = reporters.get(reporterName + \"@\" + tag);\n      assertNotNull(\"Reporter \" + reporterName + \" was not found.\", reporter);\n      assertTrue(reporter instanceof MockMetricReporter);\n\n      MockMetricReporter mockReporter = (MockMetricReporter) reporter;\n      assertTrue(\"Reporter \" + reporterName + \" was not initialized: \" + mockReporter, mockReporter.didInit);\n      assertTrue(\"Reporter \" + reporterName + \" was not validated: \" + mockReporter, mockReporter.didValidate);\n      assertFalse(\"Reporter \" + reporterName + \" was incorrectly closed: \" + mockReporter, mockReporter.didClose);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testConfigureReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricsIntegrationTest#testConfigureReporter().mjava","sourceNew":"  @Test\n  public void testConfigureReporter() throws Exception {\n    Random random = random();\n\n    String metricName = SolrMetricManager.mkName(METRIC_NAME, HANDLER_CATEGORY.toString(), HANDLER_NAME);\n    SolrCoreMetricManager coreMetricManager = h.getCore().getCoreMetricManager();\n    Timer timer = metricManager.timer(null, coreMetricManager.getRegistryName(), metricName);\n\n    long initialCount = timer.getCount();\n\n    int iterations = TestUtil.nextInt(random, 0, MAX_ITERATIONS);\n    for (int i = 0; i < iterations; ++i) {\n      h.query(req(\"*\"));\n    }\n\n    long finalCount = timer.getCount();\n    assertEquals(\"metric counter incorrect\", iterations, finalCount - initialCount);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertEquals(RENAMED_REPORTERS.length + jmxReporter, reporters.size());\n\n    // SPECIFIC and MULTIREGISTRY were skipped because they were\n    // specific to collection1\n    for (String reporterName : RENAMED_REPORTERS) {\n      SolrMetricReporter reporter = reporters.get(reporterName + \"@\" + tag);\n      assertNotNull(\"Reporter \" + reporterName + \" was not found.\", reporter);\n      assertTrue(reporter instanceof MockMetricReporter);\n\n      MockMetricReporter mockReporter = (MockMetricReporter) reporter;\n      assertTrue(\"Reporter \" + reporterName + \" was not initialized: \" + mockReporter, mockReporter.didInit);\n      assertTrue(\"Reporter \" + reporterName + \" was not validated: \" + mockReporter, mockReporter.didValidate);\n      assertFalse(\"Reporter \" + reporterName + \" was incorrectly closed: \" + mockReporter, mockReporter.didClose);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConfigureReporter() throws Exception {\n    Random random = random();\n\n    String metricName = SolrMetricManager.mkName(METRIC_NAME, HANDLER_CATEGORY.toString(), HANDLER_NAME);\n    SolrCoreMetricManager coreMetricManager = h.getCore().getCoreMetricManager();\n    Timer timer = (Timer) metricManager.timer(null, coreMetricManager.getRegistryName(), metricName);\n\n    long initialCount = timer.getCount();\n\n    int iterations = TestUtil.nextInt(random, 0, MAX_ITERATIONS);\n    for (int i = 0; i < iterations; ++i) {\n      h.query(req(\"*\"));\n    }\n\n    long finalCount = timer.getCount();\n    assertEquals(\"metric counter incorrect\", iterations, finalCount - initialCount);\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertEquals(RENAMED_REPORTERS.length + jmxReporter, reporters.size());\n\n    // SPECIFIC and MULTIREGISTRY were skipped because they were\n    // specific to collection1\n    for (String reporterName : RENAMED_REPORTERS) {\n      SolrMetricReporter reporter = reporters.get(reporterName + \"@\" + tag);\n      assertNotNull(\"Reporter \" + reporterName + \" was not found.\", reporter);\n      assertTrue(reporter instanceof MockMetricReporter);\n\n      MockMetricReporter mockReporter = (MockMetricReporter) reporter;\n      assertTrue(\"Reporter \" + reporterName + \" was not initialized: \" + mockReporter, mockReporter.didInit);\n      assertTrue(\"Reporter \" + reporterName + \" was not validated: \" + mockReporter, mockReporter.didValidate);\n      assertFalse(\"Reporter \" + reporterName + \" was incorrectly closed: \" + mockReporter, mockReporter.didClose);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0265144286422ad99682a00904cc2536b79c8535"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}