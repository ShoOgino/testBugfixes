{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > blockSize) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= blockSize) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > blockSize) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= blockSize) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > blockSize) {\n      termState.skipOffset = in.readVInt();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51","date":1344355078,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVInt();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > blockSize) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= blockSize) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > blockSize) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= blockSize) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > blockSize) {\n      termState.skipOffset = in.readVInt();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVInt();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVInt();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVInt();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVInt();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVInt();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}