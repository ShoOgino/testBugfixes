{"path":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","commits":[{"id":"a9c811a9de65f8536719a1f507d2f84516dcbdd5","date":1284036765,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","pathOld":"/dev/null","sourceNew":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed32 p32 = new Packed32(INDEX, BITS);\n    p32.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed32\", 1, p32.get(INDEX-1));\n    p32 = null; // To free the 256MB used\n\n    Packed64 p64 = new Packed64(INDEX, BITS);\n    p64.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","pathOld":"/dev/null","sourceNew":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed32 p32 = new Packed32(INDEX, BITS);\n    p32.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed32\", 1, p32.get(INDEX-1));\n    p32 = null; // To free the 256MB used\n\n    Packed64 p64 = new Packed64(INDEX, BITS);\n    p64.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testIntOverflow().mjava","sourceNew":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed32 p32 = new Packed32(INDEX, BITS);\n    p32.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed32\", 1, p32.get(INDEX-1));\n    p32 = null; // To free the 256MB used\n\n    Packed64 p64 = new Packed64(INDEX, BITS);\n    p64.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n  }\n\n","sourceOld":"  /*\n    Check if the structures properly handle the case where\n    index * bitsPerValue > Integer.MAX_VALUE\n    \n    NOTE: this test allocates 256 MB\n   */\n  public void testIntOverflow() {\n    int INDEX = (int)Math.pow(2, 30)+1;\n    int BITS = 2;\n\n    Packed32 p32 = new Packed32(INDEX, BITS);\n    p32.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed32\", 1, p32.get(INDEX-1));\n    p32 = null; // To free the 256MB used\n\n    Packed64 p64 = new Packed64(INDEX, BITS);\n    p64.set(INDEX-1, 1);\n    assertEquals(\"The value at position \" + (INDEX-1)\n        + \" should be correct for Packed64\", 1, p64.get(INDEX-1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a9c811a9de65f8536719a1f507d2f84516dcbdd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a9c811a9de65f8536719a1f507d2f84516dcbdd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a9c811a9de65f8536719a1f507d2f84516dcbdd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a9c811a9de65f8536719a1f507d2f84516dcbdd5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a9c811a9de65f8536719a1f507d2f84516dcbdd5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}