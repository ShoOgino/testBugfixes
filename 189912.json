{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Filter,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, \n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, Filter, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, Filter,\n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, Filter filter, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, filter, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fad1351342e15571fed2a68feaed0a8a3a18e5da","date":1327959908,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight, \n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, \n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight, \n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(IndexReader.AtomicReaderContext[], Weight, \n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,int,Sort,boolean).mjava","sourceNew":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight, \n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","sourceOld":"  /**\n   * Just like {@link #search(Weight, int, Sort)}, but you choose\n   * whether or not the fields in the returned {@link FieldDoc} instances should\n   * be set by specifying fillFields.\n   *\n   * <p>NOTE: this does not compute scores by default.  If you\n   * need scores, create a {@link TopFieldCollector}\n   * instance by calling {@link TopFieldCollector#create} and\n   * then pass that to {@link #search(AtomicReaderContext[], Weight, \n   * Collector)}.</p>\n   */\n  protected TopFieldDocs search(AtomicReaderContext[] leaves, Weight weight, int nDocs,\n      Sort sort, boolean fillFields) throws IOException {\n    // single thread\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n\n    TopFieldCollector collector = TopFieldCollector.create(sort, nDocs,\n                                                           fillFields, fieldSortDoTrackScores, fieldSortDoMaxScore, !weight.scoresDocsOutOfOrder());\n    search(leaves, weight, collector);\n    return (TopFieldDocs) collector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["6620df8541b174097b1133a4fc370adb2e570524"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","fad1351342e15571fed2a68feaed0a8a3a18e5da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["fad1351342e15571fed2a68feaed0a8a3a18e5da","5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}