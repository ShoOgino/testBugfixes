{"path":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(ReaderContext).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(ReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      final Bits delDocs = reader.getDeletedDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(delDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(reader.maxDoc());\n      int termCount = 0;\n      final Bits delDocs = reader.getDeletedDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(delDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(ReaderContext).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      final Bits delDocs = reader.getDeletedDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(delDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be permitted in search\n   * results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final Fields fields = reader.fields();\n    if (fields == null) {\n      // reader has no fields\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final Terms terms = fields.terms(query.field);\n    if (terms == null) {\n      // field does not exist\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n\n    final TermsEnum termsEnum = query.getTermsEnum(terms);\n    assert termsEnum != null;\n    if (termsEnum.next() != null) {\n      // fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(context.reader.maxDoc());\n      int termCount = 0;\n      final Bits delDocs = reader.getDeletedDocs();\n      DocsEnum docsEnum = null;\n      do {\n        termCount++;\n        // System.out.println(\"  iter termCount=\" + termCount + \" term=\" +\n        // enumerator.term().toBytesString());\n        docsEnum = termsEnum.docs(delDocs, docsEnum);\n        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();\n        while (true) {\n          final int count = docsEnum.read();\n          if (count != 0) {\n            final int[] docs = result.docs.ints;\n            for (int i = 0; i < count; i++) {\n              bitSet.set(docs[i]);\n            }\n          } else {\n            break;\n          }\n        }\n      } while (termsEnum.next() != null);\n      // System.out.println(\"  done termCount=\" + termCount);\n\n      query.incTotalNumberOfTerms(termCount);\n      return bitSet;\n    } else {\n      return DocIdSet.EMPTY_DOCIDSET;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"]},"commit2Childs":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}