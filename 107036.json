{"path":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newFields = new ArrayList<SchemaField>();\n            IndexSchema oldSchema = getSchema();\n            for (Map<String,Object> map : list) {\n              String fieldName = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields);\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"577e41641d2fc8a834d2709dc76cc424b2936e19","date":1373292023,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          Map<String, String> copyFields = new HashMap<>();\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newFields = new ArrayList<SchemaField>();\n            IndexSchema oldSchema = getSchema();\n            for (Map<String,Object> map : list) {\n              String fieldName = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              String copyTo = (String)map.get(IndexSchema.COPY_FIELDS);\n              if (copyTo != null){\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields);\n            for (Map.Entry<String, String> entry : copyFields.entrySet()) {\n              //key is the source, value is a comma separated list of targets\n              String [] splits = entry.getValue().split(\",\");\n              if (splits != null && splits.length > 0){\n                for (int i = 0; i < splits.length; i++) {\n                  newSchema.registerCopyField(entry.getKey(), splits[i].trim());\n                }\n              }\n            }\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newFields = new ArrayList<SchemaField>();\n            IndexSchema oldSchema = getSchema();\n            for (Map<String,Object> map : list) {\n              String fieldName = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields);\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01257aab3074127b72c3b53a508f396bb968019c","date":1373336679,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<SchemaField>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            Set<String> malformed = new HashSet<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              String copyTo = (String) map.get(IndexSchema.COPY_FIELDS);\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                String[] splits = copyTo.split(\",\");\n                Set<String> destinations = new HashSet<>();\n                if (splits != null && splits.length > 0) {\n                  for (int i = 0; i < splits.length; i++) {\n                    destinations.add(splits[i].trim());\n                  }\n                  copyFields.put(fieldName, destinations);\n                } else{\n                  malformed.add(fieldName);\n                }\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            if (malformed.size() > 0){\n              StringBuilder message = new StringBuilder(\"Malformed destination(s) for: \");\n              for (String s : malformed) {\n                message.append(s).append(\", \");\n              }\n              if (message.length() > 2) {\n                message.setLength(message.length() - 2);//drop the last ,\n              }\n              log.error(message.toString().trim());\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, message.toString().trim());\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          Map<String, String> copyFields = new HashMap<>();\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newFields = new ArrayList<SchemaField>();\n            IndexSchema oldSchema = getSchema();\n            for (Map<String,Object> map : list) {\n              String fieldName = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              String copyTo = (String)map.get(IndexSchema.COPY_FIELDS);\n              if (copyTo != null){\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields);\n            for (Map.Entry<String, String> entry : copyFields.entrySet()) {\n              //key is the source, value is a comma separated list of targets\n              String [] splits = entry.getValue().split(\",\");\n              if (splits != null && splits.length > 0){\n                for (int i = 0; i < splits.length; i++) {\n                  newSchema.registerCopyField(entry.getKey(), splits[i].trim());\n                }\n              }\n            }\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33d016ca76018790ad668b7a61f7fdf21daeb0a","date":1373453738,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<SchemaField>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            Set<String> malformed = new HashSet<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              List<String> copyTo = (List<String>) map.get(IndexSchema.COPY_FIELDS);\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<SchemaField>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            Set<String> malformed = new HashSet<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              String copyTo = (String) map.get(IndexSchema.COPY_FIELDS);\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                String[] splits = copyTo.split(\",\");\n                Set<String> destinations = new HashSet<>();\n                if (splits != null && splits.length > 0) {\n                  for (int i = 0; i < splits.length; i++) {\n                    destinations.add(splits[i].trim());\n                  }\n                  copyFields.put(fieldName, destinations);\n                } else{\n                  malformed.add(fieldName);\n                }\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            if (malformed.size() > 0){\n              StringBuilder message = new StringBuilder(\"Malformed destination(s) for: \");\n              for (String s : malformed) {\n                message.append(s).append(\", \");\n              }\n              if (message.length() > 2) {\n                message.setLength(message.length() - 2);//drop the last ,\n              }\n              log.error(message.toString().trim());\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, message.toString().trim());\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404e1b657c8a29a6ad3d35391e2d9fd847c4c632","date":1373556718,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<SchemaField>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            Set<String> malformed = new HashSet<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<SchemaField>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            Set<String> malformed = new HashSet<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              List<String> copyTo = (List<String>) map.get(IndexSchema.COPY_FIELDS);\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<SchemaField>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            Set<String> malformed = new HashSet<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if ( ! getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if ( ! entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if ( ! (object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String,Object>> list = (List<Map<String,Object>>)object;\n            List<SchemaField> newFields = new ArrayList<SchemaField>();\n            IndexSchema oldSchema = getSchema();\n            for (Map<String,Object> map : list) {\n              String fieldName = (String)map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String)map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields);\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            Set<String> malformed = new HashSet<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<SchemaField>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            Set<String> malformed = new HashSet<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec756ece2bfff759a9615a1d8f833e4f5f26e96b","date":1402433820,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<>();\n            List<NewFieldArguments> newFieldArguments = new ArrayList<>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n              newFieldArguments.add(new NewFieldArguments(fieldName, fieldType, map));\n            }\n            boolean firstAttempt = true;\n            boolean success = false;\n            while (!success) {\n              try {\n                if (!firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newFields.clear();\n                  for (NewFieldArguments args : newFieldArguments) {\n                    newFields.add(oldSchema.newField(\n                      args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n                if (null != newSchema) {\n                  getSolrCore().setLatestSchema(newSchema);\n                  success = true;\n                } else {\n                  throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add fields.\");\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = getSolrCore().getLatestSchema();\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            Set<String> malformed = new HashSet<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n\n            getSolrCore().setLatestSchema(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a54972b2387f87fdd92600308f9a0d477b1f53b0","date":1404789654,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<>();\n            List<NewFieldArguments> newFieldArguments = new ArrayList<>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n              newFieldArguments.add(new NewFieldArguments(fieldName, fieldType, map));\n            }\n            boolean firstAttempt = true;\n            boolean success = false;\n            while (!success) {\n              try {\n                if (!firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newFields.clear();\n                  for (NewFieldArguments args : newFieldArguments) {\n                    newFields.add(oldSchema.newField(\n                      args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = getSolrCore().getLatestSchema();\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<>();\n            List<NewFieldArguments> newFieldArguments = new ArrayList<>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n              newFieldArguments.add(new NewFieldArguments(fieldName, fieldType, map));\n            }\n            boolean firstAttempt = true;\n            boolean success = false;\n            while (!success) {\n              try {\n                if (!firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newFields.clear();\n                  for (NewFieldArguments args : newFieldArguments) {\n                    newFields.add(oldSchema.newField(\n                      args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n                if (null != newSchema) {\n                  getSolrCore().setLatestSchema(newSchema);\n                  success = true;\n                } else {\n                  throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add fields.\");\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = getSolrCore().getLatestSchema();\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"106069d345c14ee5c76f0ea76397b02a656f883c","date":1411998064,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<>();\n            List<NewFieldArguments> newFieldArguments = new ArrayList<>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n              newFieldArguments.add(new NewFieldArguments(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = null;\n            boolean firstAttempt = true;\n            boolean success = false;\n            while (!success) {\n              try {\n                if (!firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newFields.clear();\n                  for (NewFieldArguments args : newFieldArguments) {\n                    newFields.add(oldSchema.newField(\n                      args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  newSchema = oldSchema.addFields(newFields, copyFields);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = getSolrCore().getLatestSchema();\n              }\n            }\n            waitForSchemaUpdateToPropagate(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<>();\n            List<NewFieldArguments> newFieldArguments = new ArrayList<>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n              newFieldArguments.add(new NewFieldArguments(fieldName, fieldType, map));\n            }\n            boolean firstAttempt = true;\n            boolean success = false;\n            while (!success) {\n              try {\n                if (!firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newFields.clear();\n                  for (NewFieldArguments args : newFieldArguments) {\n                    newFields.add(oldSchema.newField(\n                      args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = getSolrCore().getLatestSchema();\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<>();\n            List<NewFieldArguments> newFieldArguments = new ArrayList<>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n              newFieldArguments.add(new NewFieldArguments(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = null;\n            boolean firstAttempt = true;\n            boolean success = false;\n            while (!success) {\n              try {\n                if (!firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newFields.clear();\n                  for (NewFieldArguments args : newFieldArguments) {\n                    newFields.add(oldSchema.newField(\n                      args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  newSchema = oldSchema.addFields(newFields, copyFields, true);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = getSolrCore().getLatestSchema();\n              }\n            }\n            waitForSchemaUpdateToPropagate(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<>();\n            List<NewFieldArguments> newFieldArguments = new ArrayList<>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n              newFieldArguments.add(new NewFieldArguments(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = null;\n            boolean firstAttempt = true;\n            boolean success = false;\n            while (!success) {\n              try {\n                if (!firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newFields.clear();\n                  for (NewFieldArguments args : newFieldArguments) {\n                    newFields.add(oldSchema.newField(\n                      args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  newSchema = oldSchema.addFields(newFields, copyFields);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = getSolrCore().getLatestSchema();\n              }\n            }\n            waitForSchemaUpdateToPropagate(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","sourceNew":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<>();\n            List<NewFieldArguments> newFieldArguments = new ArrayList<>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n              newFieldArguments.add(new NewFieldArguments(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = null;\n            boolean firstAttempt = true;\n            boolean success = false;\n            while (!success) {\n              try {\n                if (!firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newFields.clear();\n                  for (NewFieldArguments args : newFieldArguments) {\n                    newFields.add(oldSchema.newField(\n                      args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  newSchema = oldSchema.addFields(newFields, copyFields, true);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = getSolrCore().getLatestSchema();\n              }\n            }\n            waitForSchemaUpdateToPropagate(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<>();\n            List<NewFieldArguments> newFieldArguments = new ArrayList<>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n              newFieldArguments.add(new NewFieldArguments(fieldName, fieldType, map));\n            }\n            boolean firstAttempt = true;\n            boolean success = false;\n            while (!success) {\n              try {\n                if (!firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newFields.clear();\n                  for (NewFieldArguments args : newFieldArguments) {\n                    newFields.add(oldSchema.newField(\n                      args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  IndexSchema newSchema = oldSchema.addFields(newFields, copyFields);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = getSolrCore().getLatestSchema();\n              }\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldCollectionResource#post(Representation).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Representation post(Representation entity) {\n    try {\n      if (!getSchema().isMutable()) {\n        final String message = \"This IndexSchema is not mutable.\";\n        throw new SolrException(ErrorCode.BAD_REQUEST, message);\n      } else {\n        if (null == entity.getMediaType()) {\n          entity.setMediaType(MediaType.APPLICATION_JSON);\n        }\n        if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {\n          String message = \"Only media type \" + MediaType.APPLICATION_JSON.toString() + \" is accepted.\"\n              + \"  Request has media type \" + entity.getMediaType().toString() + \".\";\n          log.error(message);\n          throw new SolrException(ErrorCode.BAD_REQUEST, message);\n        } else {\n          Object object = ObjectBuilder.fromJSON(entity.getText());\n          if (!(object instanceof List)) {\n            String message = \"Invalid JSON type \" + object.getClass().getName() + \", expected List of the form\"\n                + \" (ignore the backslashes): [{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"text_general\\\", ...}, {...}, ...]\";\n            log.error(message);\n            throw new SolrException(ErrorCode.BAD_REQUEST, message);\n          } else {\n            List<Map<String, Object>> list = (List<Map<String, Object>>) object;\n            List<SchemaField> newFields = new ArrayList<>();\n            List<NewFieldArguments> newFieldArguments = new ArrayList<>();\n            IndexSchema oldSchema = getSchema();\n            Map<String, Collection<String>> copyFields = new HashMap<>();\n            for (Map<String, Object> map : list) {\n              String fieldName = (String) map.remove(IndexSchema.NAME);\n              if (null == fieldName) {\n                String message = \"Missing '\" + IndexSchema.NAME + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              String fieldType = (String) map.remove(IndexSchema.TYPE);\n              if (null == fieldType) {\n                String message = \"Missing '\" + IndexSchema.TYPE + \"' mapping.\";\n                log.error(message);\n                throw new SolrException(ErrorCode.BAD_REQUEST, message);\n              }\n              // copyFields:\"comma separated list of destination fields\"\n              Object copies = map.get(IndexSchema.COPY_FIELDS);\n              List<String> copyTo = null;\n              if (copies != null) {\n                if (copies instanceof List){\n                  copyTo = (List<String>) copies;\n                } else if (copies instanceof String){\n                  copyTo = Collections.singletonList(copies.toString());\n                } else {\n                  String message = \"Invalid '\" + IndexSchema.COPY_FIELDS + \"' type.\";\n                  log.error(message);\n                  throw new SolrException(ErrorCode.BAD_REQUEST, message);\n                }\n              }\n              if (copyTo != null) {\n                map.remove(IndexSchema.COPY_FIELDS);\n                copyFields.put(fieldName, copyTo);\n              }\n              newFields.add(oldSchema.newField(fieldName, fieldType, map));\n              newFieldArguments.add(new NewFieldArguments(fieldName, fieldType, map));\n            }\n            IndexSchema newSchema = null;\n            boolean firstAttempt = true;\n            boolean success = false;\n            while (!success) {\n              try {\n                if (!firstAttempt) {\n                  // If this isn't the first attempt, we must have failed due to\n                  // the schema changing in Zk during optimistic concurrency control.\n                  // In that case, rerun creating the new fields, because they may\n                  // fail now due to changes in the schema.  This behavior is consistent\n                  // with what would happen if we locked the schema and the other schema\n                  // change went first.\n                  newFields.clear();\n                  for (NewFieldArguments args : newFieldArguments) {\n                    newFields.add(oldSchema.newField(\n                      args.getName(), args.getType(), args.getMap()));\n                  }\n                }\n                firstAttempt = false;\n                synchronized (oldSchema.getSchemaUpdateLock()) {\n                  newSchema = oldSchema.addFields(newFields, copyFields, true);\n                  if (null != newSchema) {\n                    getSolrCore().setLatestSchema(newSchema);\n                    success = true;\n                  } else {\n                    throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed to add fields.\");\n                  }\n                }\n              } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n                log.debug(\"Schema changed while processing request, retrying\");\n                oldSchema = getSolrCore().getLatestSchema();\n              }\n            }\n            waitForSchemaUpdateToPropagate(newSchema);\n          }\n        }\n      }\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["404e1b657c8a29a6ad3d35391e2d9fd847c4c632"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["08970e5b8411182a29412c177eff67ec1110095b","404e1b657c8a29a6ad3d35391e2d9fd847c4c632"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["106069d345c14ee5c76f0ea76397b02a656f883c"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a54972b2387f87fdd92600308f9a0d477b1f53b0","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b"],"b33d016ca76018790ad668b7a61f7fdf21daeb0a":["01257aab3074127b72c3b53a508f396bb968019c"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"577e41641d2fc8a834d2709dc76cc424b2936e19":["08970e5b8411182a29412c177eff67ec1110095b"],"01257aab3074127b72c3b53a508f396bb968019c":["577e41641d2fc8a834d2709dc76cc424b2936e19"],"f494bc636a1302995e4930fdccd371eeda452f87":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"106069d345c14ee5c76f0ea76397b02a656f883c":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"404e1b657c8a29a6ad3d35391e2d9fd847c4c632":["b33d016ca76018790ad668b7a61f7fdf21daeb0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ec756ece2bfff759a9615a1d8f833e4f5f26e96b"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["d9a47902d6207303f5ed3e7aaca62ca33433af66","f494bc636a1302995e4930fdccd371eeda452f87"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"08970e5b8411182a29412c177eff67ec1110095b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","577e41641d2fc8a834d2709dc76cc424b2936e19"],"a54972b2387f87fdd92600308f9a0d477b1f53b0":["d9a47902d6207303f5ed3e7aaca62ca33433af66","106069d345c14ee5c76f0ea76397b02a656f883c"],"b33d016ca76018790ad668b7a61f7fdf21daeb0a":["404e1b657c8a29a6ad3d35391e2d9fd847c4c632"],"ec756ece2bfff759a9615a1d8f833e4f5f26e96b":["a54972b2387f87fdd92600308f9a0d477b1f53b0"],"577e41641d2fc8a834d2709dc76cc424b2936e19":["01257aab3074127b72c3b53a508f396bb968019c"],"01257aab3074127b72c3b53a508f396bb968019c":["b33d016ca76018790ad668b7a61f7fdf21daeb0a"],"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"106069d345c14ee5c76f0ea76397b02a656f883c":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"404e1b657c8a29a6ad3d35391e2d9fd847c4c632":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}