{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/query/QueryTranslator#translateHttpSearchRequest(IndexSchema,Map[String,String[]],String).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/query/QueryTranslator#translateHttpSearchRequest(IndexSchema,Map[String,String[]],String).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/query/QueryTranslator#translateHttpSearchRequest(IndexSchema,Map[String,String[]],String).mjava","sourceNew":"    /**\n     * This method does a little preprocessing of the query. Basically it will map the given request parameters to a lucene syntax. Each\n     * parameter matching a index field in the given schema will be translated into a grouped query string according to the lucene query syntax. \n     * <p>\n     * <ol>\n     * <li>title=foo bar AND \"FooBar\" will be title:(foo bar AND \"FooBar)</i>\n     * <li>updated-min=2005-08-09T10:57:00-08:00 will be translated to updated:[1123613820000 TO 9223372036854775807] according to the gdata protocol</i>\n     * </ol>\n     * </p>\n     * @param schema the index schema for the queried service\n     * @param parameterMap - the http parameter map returning String[] instances as values\n     * @param categoryQuery - the parsed category query from the request\n     * @return - a lucene syntax query string\n     */\n    public static String translateHttpSearchRequest(IndexSchema schema,\n            Map<String, String[]> parameterMap, String categoryQuery) {\n        Set<String> searchableFieldNames = schema.getSearchableFieldNames();\n        Set<String> parameterSet = parameterMap.keySet();\n        StringBuilder translatedQuery = new StringBuilder();\n        if(categoryQuery != null){\n           translatedQuery.append(translateCategory(translatedQuery,categoryQuery));\n        }\n        String updateMin = null;\n        String updateMax = null;\n        for (String parameterName : parameterSet) {\n            if (STANDARD_REQUEST_PARAMETER.contains(parameterName))\n                continue;\n            if (searchableFieldNames.contains(parameterName)) {\n                translatedQuery.append(parameterName).append(\":(\");\n                translatedQuery.append(parameterMap.get(parameterName)[0]);\n                translatedQuery.append(\") \");\n                continue;\n            }\n            if(parameterName.equals(GDATA_DEFAULT_SEARCH_PARAMETER)){\n                translatedQuery.append(schema.getDefaultSearchField());\n                translatedQuery.append(\":(\");\n                translatedQuery.append(parameterMap.get(parameterName)[0]);\n                translatedQuery.append(\") \");\n                continue;\n                \n            }\n            if(parameterName.endsWith(\"updated-min\")){\n                updateMin = parameterMap.get(parameterName)[0];\n                continue;\n            }\n            if(parameterName.endsWith(\"updated-max\")){\n                updateMax = parameterMap.get(parameterName)[0];\n                continue;\n            }\n            throw new RuntimeException(\"Can not apply parameter -- invalid -- \"\n                    + parameterName);\n        }\n        if(updateMax!=null || updateMin!= null)\n            translatedQuery.append(translateUpdate(updateMin,updateMax));\n            \n        return translatedQuery.length() == 0?null:translatedQuery.toString();\n    }\n\n","sourceOld":"    /**\n     * This method does a little preprocessing of the query. Basically it will map the given request parameters to a lucene syntax. Each\n     * parameter matching a index field in the given schema will be translated into a grouped query string according to the lucene query syntax. \n     * <p>\n     * <ol>\n     * <li>title=foo bar AND \"FooBar\" will be title:(foo bar AND \"FooBar)</i>\n     * <li>updated-min=2005-08-09T10:57:00-08:00 will be translated to updated:[1123613820000 TO 9223372036854775807] according to the gdata protocol</i>\n     * </ol>\n     * </p>\n     * @param schema the index schema for the queried service\n     * @param parameterMap - the http parameter map returning String[] instances as values\n     * @param categoryQuery - the parsed category query from the request\n     * @return - a lucene syntax query string\n     */\n    public static String translateHttpSearchRequest(IndexSchema schema,\n            Map<String, String[]> parameterMap, String categoryQuery) {\n        Set<String> searchableFieldNames = schema.getSearchableFieldNames();\n        Set<String> parameterSet = parameterMap.keySet();\n        StringBuilder translatedQuery = new StringBuilder();\n        if(categoryQuery != null){\n           translatedQuery.append(translateCategory(translatedQuery,categoryQuery));\n        }\n        String updateMin = null;\n        String updateMax = null;\n        for (String parameterName : parameterSet) {\n            if (STANDARD_REQUEST_PARAMETER.contains(parameterName))\n                continue;\n            if (searchableFieldNames.contains(parameterName)) {\n                translatedQuery.append(parameterName).append(\":(\");\n                translatedQuery.append(parameterMap.get(parameterName)[0]);\n                translatedQuery.append(\") \");\n                continue;\n            }\n            if(parameterName.equals(GDATA_DEFAULT_SEARCH_PARAMETER)){\n                translatedQuery.append(schema.getDefaultSearchField());\n                translatedQuery.append(\":(\");\n                translatedQuery.append(parameterMap.get(parameterName)[0]);\n                translatedQuery.append(\") \");\n                continue;\n                \n            }\n            if(parameterName.endsWith(\"updated-min\")){\n                updateMin = parameterMap.get(parameterName)[0];\n                continue;\n            }\n            if(parameterName.endsWith(\"updated-max\")){\n                updateMax = parameterMap.get(parameterName)[0];\n                continue;\n            }\n            throw new RuntimeException(\"Can not apply parameter -- invalid -- \"\n                    + parameterName);\n        }\n        if(updateMax!=null || updateMin!= null)\n            translatedQuery.append(translateUpdate(updateMin,updateMax));\n            \n        return translatedQuery.length() == 0?null:translatedQuery.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/query/QueryTranslator#translateHttpSearchRequest(IndexSchema,Map[String,String[]],String).mjava","sourceNew":null,"sourceOld":"    /**\n     * This method does a little preprocessing of the query. Basically it will map the given request parameters to a lucene syntax. Each\n     * parameter matching a index field in the given schema will be translated into a grouped query string according to the lucene query syntax. \n     * <p>\n     * <ol>\n     * <li>title=foo bar AND \"FooBar\" will be title:(foo bar AND \"FooBar)</i>\n     * <li>updated-min=2005-08-09T10:57:00-08:00 will be translated to updated:[1123613820000 TO 9223372036854775807] according to the gdata protocol</i>\n     * </ol>\n     * </p>\n     * @param schema the index schema for the queried service\n     * @param parameterMap - the http parameter map returning String[] instances as values\n     * @param categoryQuery - the parsed category query from the request\n     * @return - a lucene syntax query string\n     */\n    public static String translateHttpSearchRequest(IndexSchema schema,\n            Map<String, String[]> parameterMap, String categoryQuery) {\n        Set<String> searchableFieldNames = schema.getSearchableFieldNames();\n        Set<String> parameterSet = parameterMap.keySet();\n        StringBuilder translatedQuery = new StringBuilder();\n        if(categoryQuery != null){\n           translatedQuery.append(translateCategory(translatedQuery,categoryQuery));\n        }\n        String updateMin = null;\n        String updateMax = null;\n        for (String parameterName : parameterSet) {\n            if (STANDARD_REQUEST_PARAMETER.contains(parameterName))\n                continue;\n            if (searchableFieldNames.contains(parameterName)) {\n                translatedQuery.append(parameterName).append(\":(\");\n                translatedQuery.append(parameterMap.get(parameterName)[0]);\n                translatedQuery.append(\") \");\n                continue;\n            }\n            if(parameterName.equals(GDATA_DEFAULT_SEARCH_PARAMETER)){\n                translatedQuery.append(schema.getDefaultSearchField());\n                translatedQuery.append(\":(\");\n                translatedQuery.append(parameterMap.get(parameterName)[0]);\n                translatedQuery.append(\") \");\n                continue;\n                \n            }\n            if(parameterName.endsWith(\"updated-min\")){\n                updateMin = parameterMap.get(parameterName)[0];\n                continue;\n            }\n            if(parameterName.endsWith(\"updated-max\")){\n                updateMax = parameterMap.get(parameterName)[0];\n                continue;\n            }\n            throw new RuntimeException(\"Can not apply parameter -- invalid -- \"\n                    + parameterName);\n        }\n        if(updateMax!=null || updateMin!= null)\n            translatedQuery.append(translateUpdate(updateMin,updateMax));\n            \n        return translatedQuery.length() == 0?null:translatedQuery.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}