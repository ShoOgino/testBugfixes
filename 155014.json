{"path":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","commits":[{"id":"c813a2b1db6d91d83baed4eab53ecc22eb857a82","date":1340957276,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.getMaxFailures();\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.setMaxFailures(2);\n\n      JUnitCore core = new JUnitCore();\n      final int [] assumptions = new int [1];\n      core.addListener(new RunListener() {\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          assumptions[0]++; \n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(2, result.getFailureCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(100, result.getRunCount());\n      // JUnit doesn't pass back the number of successful tests, just make sure\n      // we did have enough assumption-failures.\n      Assert.assertTrue(assumptions[0] > 50);\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.setMaxFailures(maxFailures);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["18bf84f26e85b274460f472a6e42de37fda19f7c","75bce543b6d582ca6954ae899f455ed34a278995"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbf8bcd0aa41f81725d2d7ef520f744236c50b51","date":1340958307,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","sourceNew":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final int [] assumptions = new int [1];\n      core.addListener(new RunListener() {\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          assumptions[0]++; \n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(100, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // JUnit doesn't pass back the number of successful tests, just make sure\n      // we did have enough assumption-failures.\n      Assert.assertTrue(assumptions[0] > 50);\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.getMaxFailures();\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.setMaxFailures(2);\n\n      JUnitCore core = new JUnitCore();\n      final int [] assumptions = new int [1];\n      core.addListener(new RunListener() {\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          assumptions[0]++; \n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(2, result.getFailureCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(100, result.getRunCount());\n      // JUnit doesn't pass back the number of successful tests, just make sure\n      // we did have enough assumption-failures.\n      Assert.assertTrue(assumptions[0] > 50);\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.setMaxFailures(maxFailures);\n    }\n  }\n\n","bugFix":null,"bugIntro":["18bf84f26e85b274460f472a6e42de37fda19f7c","75bce543b6d582ca6954ae899f455ed34a278995"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a257d768efff0a219aa239db4bbef6c40eb6a01","date":1341046867,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","sourceNew":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final int [] assumptions = new int [1];\n      core.addListener(new RunListener() {\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          assumptions[0]++; \n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(100, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // JUnit doesn't pass back the number of successful tests, just make sure\n      // we did have enough assumption-failures.\n      Assert.assertTrue(assumptions[0] > 50);\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final int [] assumptions = new int [1];\n      core.addListener(new RunListener() {\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          assumptions[0]++; \n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(100, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // JUnit doesn't pass back the number of successful tests, just make sure\n      // we did have enough assumption-failures.\n      Assert.assertTrue(assumptions[0] > 50);\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","bugFix":null,"bugIntro":["18bf84f26e85b274460f472a6e42de37fda19f7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final int [] assumptions = new int [1];\n      core.addListener(new RunListener() {\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          assumptions[0]++; \n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(100, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // JUnit doesn't pass back the number of successful tests, just make sure\n      // we did have enough assumption-failures.\n      Assert.assertTrue(assumptions[0] > 50);\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403","date":1345705030,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","sourceNew":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final StringBuilder results = new StringBuilder();\n      core.addListener(new RunListener() {\n        char lastTest;\n\n        @Override\n        public void testStarted(Description description) throws Exception {\n          lastTest = 'S'; // success.\n        }\n\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          lastTest = 'A'; // assumption failure.\n        }\n\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          lastTest = 'F'; // failure\n        }\n\n        @Override\n        public void testFinished(Description description) throws Exception {\n          results.append(lastTest);\n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(500, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // Make sure we had exactly two failures followed by assumption-failures\n      // resulting from ignored tests.\n      Assert.assertTrue(results.toString(), \n          results.toString().matches(\"(S*F){2}A+\"));\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final int [] assumptions = new int [1];\n      core.addListener(new RunListener() {\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          assumptions[0]++; \n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(100, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // JUnit doesn't pass back the number of successful tests, just make sure\n      // we did have enough assumption-failures.\n      Assert.assertTrue(assumptions[0] > 50);\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","bugFix":null,"bugIntro":["18bf84f26e85b274460f472a6e42de37fda19f7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","sourceNew":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final StringBuilder results = new StringBuilder();\n      core.addListener(new RunListener() {\n        char lastTest;\n\n        @Override\n        public void testStarted(Description description) throws Exception {\n          lastTest = 'S'; // success.\n        }\n\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          lastTest = 'A'; // assumption failure.\n        }\n\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          lastTest = 'F'; // failure\n        }\n\n        @Override\n        public void testFinished(Description description) throws Exception {\n          results.append(lastTest);\n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(500, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // Make sure we had exactly two failures followed by assumption-failures\n      // resulting from ignored tests.\n      Assert.assertTrue(results.toString(), \n          results.toString().matches(\"(S*F){2}A+\"));\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final int [] assumptions = new int [1];\n      core.addListener(new RunListener() {\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          assumptions[0]++; \n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(100, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // JUnit doesn't pass back the number of successful tests, just make sure\n      // we did have enough assumption-failures.\n      Assert.assertTrue(assumptions[0] > 50);\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95cbd7fffff985b69f6445ba2782a834d50aaba7","date":1355342631,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","sourceNew":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final StringBuilder results = new StringBuilder();\n      core.addListener(new RunListener() {\n        char lastTest;\n\n        @Override\n        public void testStarted(Description description) throws Exception {\n          lastTest = 'S'; // success.\n        }\n\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          lastTest = 'A'; // assumption failure.\n        }\n\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          lastTest = 'F'; // failure\n        }\n\n        @Override\n        public void testFinished(Description description) throws Exception {\n          results.append(lastTest);\n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(500, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // Make sure we had exactly two failures followed by assumption-failures\n      // resulting from ignored tests.\n      Assert.assertTrue(results.toString(), \n          results.toString().matches(\"(S*F){2}A+\"));\n\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final StringBuilder results = new StringBuilder();\n      core.addListener(new RunListener() {\n        char lastTest;\n\n        @Override\n        public void testStarted(Description description) throws Exception {\n          lastTest = 'S'; // success.\n        }\n\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          lastTest = 'A'; // assumption failure.\n        }\n\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          lastTest = 'F'; // failure\n        }\n\n        @Override\n        public void testFinished(Description description) throws Exception {\n          results.append(lastTest);\n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(500, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // Make sure we had exactly two failures followed by assumption-failures\n      // resulting from ignored tests.\n      Assert.assertTrue(results.toString(), \n          results.toString().matches(\"(S*F){2}A+\"));\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","bugFix":null,"bugIntro":["18bf84f26e85b274460f472a6e42de37fda19f7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","sourceNew":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final StringBuilder results = new StringBuilder();\n      core.addListener(new RunListener() {\n        char lastTest;\n\n        @Override\n        public void testStarted(Description description) throws Exception {\n          lastTest = 'S'; // success.\n        }\n\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          lastTest = 'A'; // assumption failure.\n        }\n\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          lastTest = 'F'; // failure\n        }\n\n        @Override\n        public void testFinished(Description description) throws Exception {\n          results.append(lastTest);\n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(500, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // Make sure we had exactly two failures followed by assumption-failures\n      // resulting from ignored tests.\n      Assert.assertTrue(results.toString(), \n          results.toString().matches(\"(S*F){2}A+\"));\n\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final StringBuilder results = new StringBuilder();\n      core.addListener(new RunListener() {\n        char lastTest;\n\n        @Override\n        public void testStarted(Description description) throws Exception {\n          lastTest = 'S'; // success.\n        }\n\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          lastTest = 'A'; // assumption failure.\n        }\n\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          lastTest = 'F'; // failure\n        }\n\n        @Override\n        public void testFinished(Description description) throws Exception {\n          results.append(lastTest);\n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(500, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // Make sure we had exactly two failures followed by assumption-failures\n      // resulting from ignored tests.\n      Assert.assertTrue(results.toString(), \n          results.toString().matches(\"(S*F){2}A+\"));\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75bce543b6d582ca6954ae899f455ed34a278995","date":1368387866,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","sourceNew":"  @Test\n  public void testMaxFailures() {\n    TestRuleIgnoreAfterMaxFailures newRule = new TestRuleIgnoreAfterMaxFailures(2);\n    TestRuleIgnoreAfterMaxFailures prevRule = LuceneTestCase.replaceMaxFailureRule(newRule);\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      JUnitCore core = new JUnitCore();\n      final StringBuilder results = new StringBuilder();\n      core.addListener(new RunListener() {\n        char lastTest;\n\n        @Override\n        public void testStarted(Description description) throws Exception {\n          lastTest = 'S'; // success.\n        }\n\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          lastTest = 'A'; // assumption failure.\n        }\n\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          lastTest = 'F'; // failure\n        }\n\n        @Override\n        public void testFinished(Description description) throws Exception {\n          results.append(lastTest);\n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(500, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // Make sure we had exactly two failures followed by assumption-failures\n      // resulting from ignored tests.\n      Assert.assertTrue(results.toString(), \n          results.toString().matches(\"(S*F){2}A+\"));\n\n    } finally {\n      LuceneTestCase.replaceMaxFailureRule(prevRule);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMaxFailures() {\n    int maxFailures = LuceneTestCase.ignoreAfterMaxFailures.maxFailures;\n    int failuresSoFar = LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar;\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = 2;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = 0;\n\n      JUnitCore core = new JUnitCore();\n      final StringBuilder results = new StringBuilder();\n      core.addListener(new RunListener() {\n        char lastTest;\n\n        @Override\n        public void testStarted(Description description) throws Exception {\n          lastTest = 'S'; // success.\n        }\n\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          lastTest = 'A'; // assumption failure.\n        }\n\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          lastTest = 'F'; // failure\n        }\n\n        @Override\n        public void testFinished(Description description) throws Exception {\n          results.append(lastTest);\n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(500, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // Make sure we had exactly two failures followed by assumption-failures\n      // resulting from ignored tests.\n      Assert.assertTrue(results.toString(), \n          results.toString().matches(\"(S*F){2}A+\"));\n\n    } finally {\n      LuceneTestCase.ignoreAfterMaxFailures.maxFailures = maxFailures;\n      LuceneTestCase.ignoreAfterMaxFailures.failuresSoFar = failuresSoFar;\n    }\n  }\n\n","bugFix":["c813a2b1db6d91d83baed4eab53ecc22eb857a82","cbf8bcd0aa41f81725d2d7ef520f744236c50b51"],"bugIntro":["18bf84f26e85b274460f472a6e42de37fda19f7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18bf84f26e85b274460f472a6e42de37fda19f7c","date":1396602216,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","sourceNew":"  @Test\n  public void testMaxFailures() {\n    LuceneTestCase.replaceMaxFailureRule(new TestRuleIgnoreAfterMaxFailures(2));\n    JUnitCore core = new JUnitCore();\n    final StringBuilder results = new StringBuilder();\n    core.addListener(new RunListener() {\n      char lastTest;\n\n      @Override\n      public void testStarted(Description description) throws Exception {\n        lastTest = 'S'; // success.\n      }\n\n      @Override\n      public void testAssumptionFailure(Failure failure) {\n        lastTest = 'A'; // assumption failure.\n      }\n\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        lastTest = 'F'; // failure\n      }\n\n      @Override\n      public void testFinished(Description description) throws Exception {\n        results.append(lastTest);\n      }\n    });\n\n    Result result = core.run(Nested.class);\n    Assert.assertEquals(500, result.getRunCount());\n    Assert.assertEquals(0, result.getIgnoreCount());\n    Assert.assertEquals(2, result.getFailureCount());\n\n    // Make sure we had exactly two failures followed by assumption-failures\n    // resulting from ignored tests.\n    Assert.assertTrue(results.toString(), \n        results.toString().matches(\"(S*F){2}A+\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMaxFailures() {\n    TestRuleIgnoreAfterMaxFailures newRule = new TestRuleIgnoreAfterMaxFailures(2);\n    TestRuleIgnoreAfterMaxFailures prevRule = LuceneTestCase.replaceMaxFailureRule(newRule);\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      JUnitCore core = new JUnitCore();\n      final StringBuilder results = new StringBuilder();\n      core.addListener(new RunListener() {\n        char lastTest;\n\n        @Override\n        public void testStarted(Description description) throws Exception {\n          lastTest = 'S'; // success.\n        }\n\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          lastTest = 'A'; // assumption failure.\n        }\n\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          lastTest = 'F'; // failure\n        }\n\n        @Override\n        public void testFinished(Description description) throws Exception {\n          results.append(lastTest);\n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(500, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // Make sure we had exactly two failures followed by assumption-failures\n      // resulting from ignored tests.\n      Assert.assertTrue(results.toString(), \n          results.toString().matches(\"(S*F){2}A+\"));\n\n    } finally {\n      LuceneTestCase.replaceMaxFailureRule(prevRule);\n    }\n  }\n\n","bugFix":["c813a2b1db6d91d83baed4eab53ecc22eb857a82","cbf8bcd0aa41f81725d2d7ef520f744236c50b51","0a257d768efff0a219aa239db4bbef6c40eb6a01","1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403","75bce543b6d582ca6954ae899f455ed34a278995","95cbd7fffff985b69f6445ba2782a834d50aaba7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","sourceNew":"  @Test\n  public void testMaxFailures() {\n    LuceneTestCase.replaceMaxFailureRule(new TestRuleIgnoreAfterMaxFailures(2));\n    JUnitCore core = new JUnitCore();\n    final StringBuilder results = new StringBuilder();\n    core.addListener(new RunListener() {\n      char lastTest;\n\n      @Override\n      public void testStarted(Description description) throws Exception {\n        lastTest = 'S'; // success.\n      }\n\n      @Override\n      public void testAssumptionFailure(Failure failure) {\n        lastTest = 'A'; // assumption failure.\n      }\n\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        lastTest = 'F'; // failure\n      }\n\n      @Override\n      public void testFinished(Description description) throws Exception {\n        results.append(lastTest);\n      }\n    });\n\n    Result result = core.run(Nested.class);\n    Assert.assertEquals(500, result.getRunCount());\n    Assert.assertEquals(0, result.getIgnoreCount());\n    Assert.assertEquals(2, result.getFailureCount());\n\n    // Make sure we had exactly two failures followed by assumption-failures\n    // resulting from ignored tests.\n    Assert.assertTrue(results.toString(), \n        results.toString().matches(\"(S*F){2}A+\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMaxFailures() {\n    TestRuleIgnoreAfterMaxFailures newRule = new TestRuleIgnoreAfterMaxFailures(2);\n    TestRuleIgnoreAfterMaxFailures prevRule = LuceneTestCase.replaceMaxFailureRule(newRule);\n    System.clearProperty(SysGlobals.SYSPROP_ITERATIONS());\n    try {\n      JUnitCore core = new JUnitCore();\n      final StringBuilder results = new StringBuilder();\n      core.addListener(new RunListener() {\n        char lastTest;\n\n        @Override\n        public void testStarted(Description description) throws Exception {\n          lastTest = 'S'; // success.\n        }\n\n        @Override\n        public void testAssumptionFailure(Failure failure) {\n          lastTest = 'A'; // assumption failure.\n        }\n\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          lastTest = 'F'; // failure\n        }\n\n        @Override\n        public void testFinished(Description description) throws Exception {\n          results.append(lastTest);\n        }\n      });\n\n      Result result = core.run(Nested.class);\n      Assert.assertEquals(500, result.getRunCount());\n      Assert.assertEquals(0, result.getIgnoreCount());\n      Assert.assertEquals(2, result.getFailureCount());\n\n      // Make sure we had exactly two failures followed by assumption-failures\n      // resulting from ignored tests.\n      Assert.assertTrue(results.toString(), \n          results.toString().matches(\"(S*F){2}A+\"));\n\n    } finally {\n      LuceneTestCase.replaceMaxFailureRule(prevRule);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestMaxFailuresRule#testMaxFailures().mjava","sourceNew":"  @Test\n  public void testMaxFailures() {\n    LuceneTestCase.replaceMaxFailureRule(new TestRuleIgnoreAfterMaxFailures(2));\n    JUnitCore core = new JUnitCore();\n    final StringBuilder results = new StringBuilder();\n    core.addListener(new RunListener() {\n      char lastTest;\n\n      @Override\n      public void testStarted(Description description) throws Exception {\n        lastTest = 'S'; // success.\n      }\n\n      @Override\n      public void testAssumptionFailure(Failure failure) {\n        lastTest = 'A'; // assumption failure.\n      }\n\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        lastTest = 'F'; // failure\n      }\n\n      @Override\n      public void testFinished(Description description) throws Exception {\n        results.append(lastTest);\n      }\n    });\n\n    Result result = core.run(Nested.class);\n    Assert.assertEquals(500, result.getRunCount());\n    Assert.assertEquals(0, result.getIgnoreCount());\n    Assert.assertEquals(2, result.getFailureCount());\n\n    // Make sure we had exactly two failures followed by assumption-failures\n    // resulting from ignored tests.\n    Assert.assertTrue(results.toString(), \n        results.toString().matches(\"(S*F){2}A+\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMaxFailures() {\n    LuceneTestCase.replaceMaxFailureRule(new TestRuleIgnoreAfterMaxFailures(2));\n    JUnitCore core = new JUnitCore();\n    final StringBuilder results = new StringBuilder();\n    core.addListener(new RunListener() {\n      char lastTest;\n\n      @Override\n      public void testStarted(Description description) throws Exception {\n        lastTest = 'S'; // success.\n      }\n\n      @Override\n      public void testAssumptionFailure(Failure failure) {\n        lastTest = 'A'; // assumption failure.\n      }\n\n      @Override\n      public void testFailure(Failure failure) throws Exception {\n        lastTest = 'F'; // failure\n      }\n\n      @Override\n      public void testFinished(Description description) throws Exception {\n        results.append(lastTest);\n      }\n    });\n\n    Result result = core.run(Nested.class);\n    Assert.assertEquals(500, result.getRunCount());\n    Assert.assertEquals(0, result.getIgnoreCount());\n    Assert.assertEquals(2, result.getFailureCount());\n\n    // Make sure we had exactly two failures followed by assumption-failures\n    // resulting from ignored tests.\n    Assert.assertTrue(results.toString(), \n        results.toString().matches(\"(S*F){2}A+\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18bf84f26e85b274460f472a6e42de37fda19f7c":["75bce543b6d582ca6954ae899f455ed34a278995"],"1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403":["0a257d768efff0a219aa239db4bbef6c40eb6a01"],"cbf8bcd0aa41f81725d2d7ef520f744236c50b51":["c813a2b1db6d91d83baed4eab53ecc22eb857a82"],"5eb2511ababf862ea11e10761c70ee560cd84510":["75bce543b6d582ca6954ae899f455ed34a278995","18bf84f26e85b274460f472a6e42de37fda19f7c"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403","95cbd7fffff985b69f6445ba2782a834d50aaba7"],"001b25b42373b22a52f399dbf072f1224632e8e6":["0a257d768efff0a219aa239db4bbef6c40eb6a01","1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403"],"95cbd7fffff985b69f6445ba2782a834d50aaba7":["1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["18bf84f26e85b274460f472a6e42de37fda19f7c"],"c813a2b1db6d91d83baed4eab53ecc22eb857a82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75bce543b6d582ca6954ae899f455ed34a278995":["95cbd7fffff985b69f6445ba2782a834d50aaba7"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0a257d768efff0a219aa239db4bbef6c40eb6a01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a257d768efff0a219aa239db4bbef6c40eb6a01":["cbf8bcd0aa41f81725d2d7ef520f744236c50b51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"18bf84f26e85b274460f472a6e42de37fda19f7c":["5eb2511ababf862ea11e10761c70ee560cd84510","b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","001b25b42373b22a52f399dbf072f1224632e8e6","95cbd7fffff985b69f6445ba2782a834d50aaba7"],"cbf8bcd0aa41f81725d2d7ef520f744236c50b51":["0a257d768efff0a219aa239db4bbef6c40eb6a01"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"001b25b42373b22a52f399dbf072f1224632e8e6":[],"95cbd7fffff985b69f6445ba2782a834d50aaba7":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","75bce543b6d582ca6954ae899f455ed34a278995"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c813a2b1db6d91d83baed4eab53ecc22eb857a82":["cbf8bcd0aa41f81725d2d7ef520f744236c50b51"],"75bce543b6d582ca6954ae899f455ed34a278995":["18bf84f26e85b274460f472a6e42de37fda19f7c","5eb2511ababf862ea11e10761c70ee560cd84510"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c813a2b1db6d91d83baed4eab53ecc22eb857a82","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0a257d768efff0a219aa239db4bbef6c40eb6a01":["1635ac2e6c2cf9b14f95d23fb54c9c55e4dae403","001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}