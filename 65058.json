{"path":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","commits":[{"id":"3c297ed05b9bc449624ef1f0fc8461a948be8139","date":1438781453,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n      SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n\n      SolrQuery query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n      QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n\n      query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n      queryResponse = solrClient_local.query(\"collection1_local\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n      assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n      float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1, Float.compare(score1_local, score2_local));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","sourceNew":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n      SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n\n      SolrQuery query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n      QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n\n      query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n      queryResponse = solrClient_local.query(\"collection1_local\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n      assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n      float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1, Float.compare(score1_local, score2_local));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","sourceNew":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","sourceNew":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","sourceNew":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","sourceNew":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","sourceNew":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","sourceNew":"  @Test\n// commented 4-Sep-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","sourceNew":"  @Test\n// commented 4-Sep-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n// commented 4-Sep-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#testMultiCollectionQuery().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n// commented 4-Sep-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testMultiCollectionQuery() throws Exception {\n    // collection1 and collection2 are collections which have distributed idf enabled\n    // collection1_local and collection2_local don't have distributed idf available\n    // Only one doc has cat:football in each collection\n    // When doing queries across collections we want to test that the query takes into account\n    // distributed idf for the collection=collection1,collection2 query.\n    // The way we verify is that score should be the same when querying across collection1 and collection2\n    // But should be different when querying across collection1_local and collection2_local\n    // since the idf is calculated per shard\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    //Test against all nodes\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["28288370235ed02234a64753cdbf0c6ec096304a"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"28288370235ed02234a64753cdbf0c6ec096304a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","a71f63026529f3c1f03cfdd664910873ab2369ae"],"3c297ed05b9bc449624ef1f0fc8461a948be8139":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"859081acf00749f5dd462772c571d611d4a4d2db":["3c297ed05b9bc449624ef1f0fc8461a948be8139"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"3c297ed05b9bc449624ef1f0fc8461a948be8139":["859081acf00749f5dd462772c571d611d4a4d2db"],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c297ed05b9bc449624ef1f0fc8461a948be8139"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}