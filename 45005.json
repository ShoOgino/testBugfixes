{"path":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","commits":[{"id":"127981e5a1e1d1425c5fdc816ceacf753ca70ee4","date":1354205321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValues.Type dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      switch(dvType) {\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_STRAIGHT:\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n        break;\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_DEREF:\n      case BYTES_FIXED_DEREF:\n        addSortedField(fieldInfo, docID, field.binaryValue());\n        break;\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n        break;\n      case FLOAT_32:\n        addNumericField(fieldInfo, docID, field.numericValue().floatValue());\n        break;\n      case FLOAT_64:\n        addNumericField(fieldInfo, docID, field.numericValue().doubleValue());\n        break;\n      default:\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e29774db46ad98ca4a8d7fcbfab633ebc01f358","date":1355170812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValues.Type dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      if (DocValues.isBytes(dvType)) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (DocValues.isSortedBytes(dvType)) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (DocValues.isFloat(dvType)) {\n        if (dvType == DocValues.Type.FLOAT_32) {\n          addNumericField(fieldInfo, docID, field.numericValue().floatValue());\n        } else if (dvType == DocValues.Type.FLOAT_64) {\n          addNumericField(fieldInfo, docID, field.numericValue().doubleValue());\n        } else {\n          assert false;\n        }\n      } else if (DocValues.isNumber(dvType)) {\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValues.Type dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      switch(dvType) {\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_FIXED_STRAIGHT:\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n        break;\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n      case BYTES_VAR_DEREF:\n      case BYTES_FIXED_DEREF:\n        addSortedField(fieldInfo, docID, field.binaryValue());\n        break;\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n        break;\n      case FLOAT_32:\n        addNumericField(fieldInfo, docID, field.numericValue().floatValue());\n        break;\n      case FLOAT_64:\n        addNumericField(fieldInfo, docID, field.numericValue().doubleValue());\n        break;\n      default:\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30664cb1b9c7d634d5001fa13052e8adb962ea7c","date":1355178731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValues.Type dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      DocValues.Type currentDVType = fieldInfo.getDocValuesType();\n      if (currentDVType == null) {\n        fieldInfo.setDocValuesType(dvType);\n      } else if (currentDVType != dvType) {\n        throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldInfo.name + \"\\\"\");\n      }\n      if (DocValues.isBytes(dvType)) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (DocValues.isSortedBytes(dvType)) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (DocValues.isFloat(dvType)) {\n        if (dvType == DocValues.Type.FLOAT_32) {\n          addNumericField(fieldInfo, docID, field.numericValue().floatValue());\n        } else if (dvType == DocValues.Type.FLOAT_64) {\n          addNumericField(fieldInfo, docID, field.numericValue().doubleValue());\n        } else {\n          assert false;\n        }\n      } else if (DocValues.isNumber(dvType)) {\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValues.Type dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      if (DocValues.isBytes(dvType)) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (DocValues.isSortedBytes(dvType)) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (DocValues.isFloat(dvType)) {\n        if (dvType == DocValues.Type.FLOAT_32) {\n          addNumericField(fieldInfo, docID, field.numericValue().floatValue());\n        } else if (dvType == DocValues.Type.FLOAT_64) {\n          addNumericField(fieldInfo, docID, field.numericValue().doubleValue());\n        } else {\n          assert false;\n        }\n      } else if (DocValues.isNumber(dvType)) {\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    // nocommit: these checks are duplicated everywhere\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      DocValuesType currentDVType = fieldInfo.getDocValuesType();\n      if (currentDVType == null) {\n        fieldInfo.setDocValuesType(dvType);\n      } else if (currentDVType != dvType) {\n        throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldInfo.name + \"\\\"\");\n      }\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n        // nocommit: hack\n      } else if (dvType == DocValuesType.NUMERIC && field.numericValue() instanceof Float) {\n        addNumericField(fieldInfo, docID, field.numericValue().floatValue());\n      } else if (dvType == DocValuesType.NUMERIC && field.numericValue() instanceof Double) {\n        addNumericField(fieldInfo, docID, field.numericValue().doubleValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValues.Type dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      DocValues.Type currentDVType = fieldInfo.getDocValuesType();\n      if (currentDVType == null) {\n        fieldInfo.setDocValuesType(dvType);\n      } else if (currentDVType != dvType) {\n        throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldInfo.name + \"\\\"\");\n      }\n      if (DocValues.isBytes(dvType)) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (DocValues.isSortedBytes(dvType)) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (DocValues.isFloat(dvType)) {\n        if (dvType == DocValues.Type.FLOAT_32) {\n          addNumericField(fieldInfo, docID, field.numericValue().floatValue());\n        } else if (dvType == DocValues.Type.FLOAT_64) {\n          addNumericField(fieldInfo, docID, field.numericValue().doubleValue());\n        } else {\n          assert false;\n        }\n      } else if (DocValues.isNumber(dvType)) {\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    // nocommit: these checks are duplicated everywhere\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      DocValuesType currentDVType = fieldInfo.getDocValuesType();\n      if (currentDVType == null) {\n        fieldInfo.setDocValuesType(dvType);\n      } else if (currentDVType != dvType) {\n        throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldInfo.name + \"\\\"\");\n      }\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    // nocommit: these checks are duplicated everywhere\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      DocValuesType currentDVType = fieldInfo.getDocValuesType();\n      if (currentDVType == null) {\n        fieldInfo.setDocValuesType(dvType);\n      } else if (currentDVType != dvType) {\n        throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldInfo.name + \"\\\"\");\n      }\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n        // nocommit: hack\n      } else if (dvType == DocValuesType.NUMERIC && field.numericValue() instanceof Float) {\n        addNumericField(fieldInfo, docID, field.numericValue().floatValue());\n      } else if (dvType == DocValuesType.NUMERIC && field.numericValue() instanceof Double) {\n        addNumericField(fieldInfo, docID, field.numericValue().doubleValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aa15ae143b798908ca3088a9e2cd183f63373c5","date":1359420558,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    // nocommit: these checks are duplicated everywhere\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      fieldInfo.setDocValuesType(dvType);\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    // nocommit: these checks are duplicated everywhere\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      DocValuesType currentDVType = fieldInfo.getDocValuesType();\n      if (currentDVType == null) {\n        fieldInfo.setDocValuesType(dvType);\n      } else if (currentDVType != dvType) {\n        throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldInfo.name + \"\\\"\");\n      }\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91558b294ce7daddef081a90b916f4e3b6d1d04d","date":1359636003,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      fieldInfo.setDocValuesType(dvType);\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    // nocommit: these checks are duplicated everywhere\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      fieldInfo.setDocValuesType(dvType);\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      fieldInfo.setDocValuesType(dvType);\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      fieldInfo.setDocValuesType(dvType);\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED_SET) {\n        addSortedSetField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      fieldInfo.setDocValuesType(dvType);\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      fieldInfo.setDocValuesType(dvType);\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED_SET) {\n        addSortedSetField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      fieldInfo.setDocValuesType(dvType);\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      fieldInfo.setDocValuesType(dvType);\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED_SET) {\n        addSortedSetField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      fieldInfo.setDocValuesType(dvType);\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED_SET) {\n        addSortedSetField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addField(int,StorableField,FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addField(int docID, StorableField field, FieldInfo fieldInfo) {\n    final DocValuesType dvType = field.fieldType().docValueType();\n    if (dvType != null) {\n      fieldInfo.setDocValuesType(dvType);\n      if (dvType == DocValuesType.BINARY) {\n        addBinaryField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED) {\n        addSortedField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.SORTED_SET) {\n        addSortedSetField(fieldInfo, docID, field.binaryValue());\n      } else if (dvType == DocValuesType.NUMERIC) {\n        if (!(field.numericValue() instanceof Long)) {\n          throw new IllegalArgumentException(\"illegal type \" + field.numericValue().getClass() + \": DocValues types must be Long\");\n        }\n        addNumericField(fieldInfo, docID, field.numericValue().longValue());\n      } else {\n        assert false: \"unrecognized DocValues.Type: \" + dvType;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["ddbb72a33557d2b5bc22ee95daf3281c43560502","3394716f52b34ab259ad5247e7595d9f9db6e935"],"91558b294ce7daddef081a90b916f4e3b6d1d04d":["7aa15ae143b798908ca3088a9e2cd183f63373c5"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","f366ce28775e2b8ea4e06355009471328711666d"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["ddbb72a33557d2b5bc22ee95daf3281c43560502","52c7e49be259508735752fba88085255014a6ecf"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91558b294ce7daddef081a90b916f4e3b6d1d04d"],"7aa15ae143b798908ca3088a9e2cd183f63373c5":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0837ab0472feecb3a54260729d845f839e1cbd72":["30664cb1b9c7d634d5001fa13052e8adb962ea7c"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["0837ab0472feecb3a54260729d845f839e1cbd72"],"f366ce28775e2b8ea4e06355009471328711666d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"30664cb1b9c7d634d5001fa13052e8adb962ea7c":["3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"52c7e49be259508735752fba88085255014a6ecf":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"91558b294ce7daddef081a90b916f4e3b6d1d04d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","52c7e49be259508735752fba88085255014a6ecf"],"3e29774db46ad98ca4a8d7fcbfab633ebc01f358":["30664cb1b9c7d634d5001fa13052e8adb962ea7c"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7aa15ae143b798908ca3088a9e2cd183f63373c5":["91558b294ce7daddef081a90b916f4e3b6d1d04d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f366ce28775e2b8ea4e06355009471328711666d"],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["3e29774db46ad98ca4a8d7fcbfab633ebc01f358"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"0837ab0472feecb3a54260729d845f839e1cbd72":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"f366ce28775e2b8ea4e06355009471328711666d":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["7aa15ae143b798908ca3088a9e2cd183f63373c5"],"30664cb1b9c7d634d5001fa13052e8adb962ea7c":["0837ab0472feecb3a54260729d845f839e1cbd72"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}