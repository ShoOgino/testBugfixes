{"path":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","pathOld":"/dev/null","sourceNew":"  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      JSONParser jsonParser = new JSONParser(reader);\n      Object object = ObjectBuilder.getVal(jsonParser);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + object.getClass().getName() + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6515a2fe685df0def77be27d55da9bb88b91010b","date":1474975102,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","sourceNew":"  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      JSONParser jsonParser = new JSONParser(reader);\n      Object object = ObjectBuilder.getVal(jsonParser);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + objectClass + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      JSONParser jsonParser = new JSONParser(reader);\n      Object object = ObjectBuilder.getVal(jsonParser);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + object.getClass().getName() + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","sourceNew":"  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      JSONParser jsonParser = new JSONParser(reader);\n      Object object = ObjectBuilder.getVal(jsonParser);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + objectClass + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      JSONParser jsonParser = new JSONParser(reader);\n      Object object = ObjectBuilder.getVal(jsonParser);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + object.getClass().getName() + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","sourceNew":"  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      JSONParser jsonParser = new JSONParser(reader);\n      Object object = ObjectBuilder.getVal(jsonParser);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + objectClass + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      JSONParser jsonParser = new JSONParser(reader);\n      Object object = ObjectBuilder.getVal(jsonParser);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + object.getClass().getName() + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","sourceNew":"  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      Object object = fromJSON(reader);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + objectClass + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      JSONParser jsonParser = new JSONParser(reader);\n      Object object = ObjectBuilder.getVal(jsonParser);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + objectClass + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","sourceNew":"  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      Object object = fromJSON(reader);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + objectClass + \", expected Map\");\n      }\n      return new NamedList((Map) object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      Object object = fromJSON(reader);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + objectClass + \", expected Map\");\n      }\n      return new NamedList((Map)object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetProperties#readFromInputStream(InputStreamReader).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      Object object = fromJSON(reader);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + objectClass + \", expected Map\");\n      }\n      return new NamedList((Map) object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  public static NamedList readFromInputStream(InputStreamReader reader) {\n    try {\n      Object object = fromJSON(reader);\n      if (!(object instanceof Map)) {\n        final String objectClass = object == null ? \"null\" : object.getClass().getName();\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid JSON type \" + objectClass + \", expected Map\");\n      }\n      return new NamedList((Map) object);\n    } catch (Exception ex) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to load ConfigSet properties\", ex);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2209af2c265d2258ec4b29c8cc78622d36994a15","6515a2fe685df0def77be27d55da9bb88b91010b"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6515a2fe685df0def77be27d55da9bb88b91010b":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2209af2c265d2258ec4b29c8cc78622d36994a15","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6515a2fe685df0def77be27d55da9bb88b91010b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3714bcf66a68a1600e9dd11442fc1b33b62ef088","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"6515a2fe685df0def77be27d55da9bb88b91010b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}