{"path":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector,int).mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Collects matching documents in a range.\n   * <br>Note that {@link #next()} must be called once before this method is\n   * called for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  protected boolean score(Collector collector, int max) throws IOException {\n    // null pointer exception when next() was not called before:\n    int docNr = countingSumScorer.doc();\n    collector.setScorer(this);\n    while (docNr < max) {\n      collector.collect(docNr);\n      if (! countingSumScorer.next()) {\n        return false;\n      }\n      docNr = countingSumScorer.doc();\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector,int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector,int).mjava","sourceNew":"  /** Expert: Collects matching documents in a range.\n   * <br>Note that {@link #next()} must be called once before this method is\n   * called for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  protected boolean score(Collector collector, int max) throws IOException {\n    // null pointer exception when next() was not called before:\n    int docNr = countingSumScorer.doc();\n    collector.setScorer(this);\n    while (docNr < max) {\n      collector.collect(docNr);\n      if (!countingSumScorer.next()) {\n        return false;\n      }\n      docNr = countingSumScorer.doc();\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Expert: Collects matching documents in a range.\n   * <br>Note that {@link #next()} must be called once before this method is\n   * called for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  protected boolean score(Collector collector, int max) throws IOException {\n    // null pointer exception when next() was not called before:\n    int docNr = countingSumScorer.doc();\n    collector.setScorer(this);\n    while (docNr < max) {\n      collector.collect(docNr);\n      if (! countingSumScorer.next()) {\n        return false;\n      }\n      docNr = countingSumScorer.doc();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#score(Collector,int).mjava","sourceNew":null,"sourceOld":"  /** Expert: Collects matching documents in a range.\n   * <br>Note that {@link #next()} must be called once before this method is\n   * called for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  protected boolean score(Collector collector, int max) throws IOException {\n    // null pointer exception when next() was not called before:\n    int docNr = countingSumScorer.doc();\n    collector.setScorer(this);\n    while (docNr < max) {\n      collector.collect(docNr);\n      if (!countingSumScorer.next()) {\n        return false;\n      }\n      docNr = countingSumScorer.doc();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"30a558487f2298c2c19ceca9103c1b6865d64708":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30a558487f2298c2c19ceca9103c1b6865d64708"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"30a558487f2298c2c19ceca9103c1b6865d64708":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}