{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testEdismaxSimpleExtension().mjava","commits":[{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testEdismaxSimpleExtension().mjava","pathOld":"/dev/null","sourceNew":"  public void testEdismaxSimpleExtension() throws SyntaxError {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"foo bar\");\n    params.set(\"qf\", \"subject title^5\");\n    params.set(\"qf_fr\", \"subject_fr title_fr^5\");\n    params.set(\"qf_en\", \"subject_en title_en^5\");\n    params.set(\"qf_es\", \"subject_es title_es^5\");\n    \n    MultilanguageQueryParser parser = new MultilanguageQueryParser(\"foo bar\", new ModifiableSolrParams(), params, req(params));\n    Query query = parser.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"subject\", \"foo\", 1, false));\n    assertTrue(containsClause(query, \"subject\", \"bar\", 1, false));\n    \n    params.set(\"language\", \"es\");\n    parser = new MultilanguageQueryParser(\"foo bar\", new ModifiableSolrParams(), params, req(params));\n    query = parser.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title_es\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title_es\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"subject_es\", \"foo\", 1, false));\n    assertTrue(containsClause(query, \"subject_es\", \"bar\", 1, false));\n    \n    FuzzyDismaxQParser parser2 = new FuzzyDismaxQParser(\"foo bar absence\", new ModifiableSolrParams(), params, req(params));\n    query = parser2.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"absence\", 5, true));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testEdismaxSimpleExtension().mjava","pathOld":"/dev/null","sourceNew":"  public void testEdismaxSimpleExtension() throws SyntaxError {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"foo bar\");\n    params.set(\"qf\", \"subject title^5\");\n    params.set(\"qf_fr\", \"subject_fr title_fr^5\");\n    params.set(\"qf_en\", \"subject_en title_en^5\");\n    params.set(\"qf_es\", \"subject_es title_es^5\");\n    \n    MultilanguageQueryParser parser = new MultilanguageQueryParser(\"foo bar\", new ModifiableSolrParams(), params, req(params));\n    Query query = parser.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"subject\", \"foo\", 1, false));\n    assertTrue(containsClause(query, \"subject\", \"bar\", 1, false));\n    \n    params.set(\"language\", \"es\");\n    parser = new MultilanguageQueryParser(\"foo bar\", new ModifiableSolrParams(), params, req(params));\n    query = parser.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title_es\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title_es\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"subject_es\", \"foo\", 1, false));\n    assertTrue(containsClause(query, \"subject_es\", \"bar\", 1, false));\n    \n    FuzzyDismaxQParser parser2 = new FuzzyDismaxQParser(\"foo bar absence\", new ModifiableSolrParams(), params, req(params));\n    query = parser2.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"absence\", 5, true));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testEdismaxSimpleExtension().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testEdismaxSimpleExtension().mjava","sourceNew":"  public void testEdismaxSimpleExtension() throws SyntaxError {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"foo bar\");\n    params.set(\"qf\", \"subject title^5\");\n    params.set(\"qf_fr\", \"subject_fr title_fr^5\");\n    params.set(\"qf_en\", \"subject_en title_en^5\");\n    params.set(\"qf_es\", \"subject_es title_es^5\");\n    \n    MultilanguageQueryParser parser = new MultilanguageQueryParser(\"foo bar\", new ModifiableSolrParams(), params, req(params));\n    Query query = parser.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"subject\", \"foo\", 1, false));\n    assertTrue(containsClause(query, \"subject\", \"bar\", 1, false));\n    \n    params.set(\"language\", \"es\");\n    parser = new MultilanguageQueryParser(\"foo bar\", new ModifiableSolrParams(), params, req(params));\n    query = parser.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title_es\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title_es\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"subject_es\", \"foo\", 1, false));\n    assertTrue(containsClause(query, \"subject_es\", \"bar\", 1, false));\n    \n    FuzzyDismaxQParser parser2 = new FuzzyDismaxQParser(\"foo bar absence\", new ModifiableSolrParams(), params, req(params));\n    query = parser2.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"absence\", 5, true));\n    \n  }\n\n","sourceOld":"  public void testEdismaxSimpleExtension() throws SyntaxError {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"foo bar\");\n    params.set(\"qf\", \"subject title^5\");\n    params.set(\"qf_fr\", \"subject_fr title_fr^5\");\n    params.set(\"qf_en\", \"subject_en title_en^5\");\n    params.set(\"qf_es\", \"subject_es title_es^5\");\n    \n    MultilanguageQueryParser parser = new MultilanguageQueryParser(\"foo bar\", new ModifiableSolrParams(), params, req(params));\n    Query query = parser.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"subject\", \"foo\", 1, false));\n    assertTrue(containsClause(query, \"subject\", \"bar\", 1, false));\n    \n    params.set(\"language\", \"es\");\n    parser = new MultilanguageQueryParser(\"foo bar\", new ModifiableSolrParams(), params, req(params));\n    query = parser.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title_es\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title_es\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"subject_es\", \"foo\", 1, false));\n    assertTrue(containsClause(query, \"subject_es\", \"bar\", 1, false));\n    \n    FuzzyDismaxQParser parser2 = new FuzzyDismaxQParser(\"foo bar absence\", new ModifiableSolrParams(), params, req(params));\n    query = parser2.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"absence\", 5, true));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testEdismaxSimpleExtension().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testEdismaxSimpleExtension().mjava","sourceNew":"  public void testEdismaxSimpleExtension() throws SyntaxError {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"foo bar\");\n    params.set(\"qf\", \"subject title^5\");\n    params.set(\"qf_fr\", \"subject_fr title_fr^5\");\n    params.set(\"qf_en\", \"subject_en title_en^5\");\n    params.set(\"qf_es\", \"subject_es title_es^5\");\n    \n    MultilanguageQueryParser parser = new MultilanguageQueryParser(\"foo bar\", new ModifiableSolrParams(), params, req(params));\n    Query query = parser.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"subject\", \"foo\", 1, false));\n    assertTrue(containsClause(query, \"subject\", \"bar\", 1, false));\n    \n    params.set(\"language\", \"es\");\n    parser = new MultilanguageQueryParser(\"foo bar\", new ModifiableSolrParams(), params, req(params));\n    query = parser.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title_es\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title_es\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"subject_es\", \"foo\", 1, false));\n    assertTrue(containsClause(query, \"subject_es\", \"bar\", 1, false));\n    \n    FuzzyDismaxQParser parser2 = new FuzzyDismaxQParser(\"foo bar absence\", new ModifiableSolrParams(), params, req(params));\n    query = parser2.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"absence\", 5, true));\n    \n  }\n\n","sourceOld":"  public void testEdismaxSimpleExtension() throws SyntaxError {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\", \"foo bar\");\n    params.set(\"qf\", \"subject title^5\");\n    params.set(\"qf_fr\", \"subject_fr title_fr^5\");\n    params.set(\"qf_en\", \"subject_en title_en^5\");\n    params.set(\"qf_es\", \"subject_es title_es^5\");\n    \n    MultilanguageQueryParser parser = new MultilanguageQueryParser(\"foo bar\", new ModifiableSolrParams(), params, req(params));\n    Query query = parser.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"subject\", \"foo\", 1, false));\n    assertTrue(containsClause(query, \"subject\", \"bar\", 1, false));\n    \n    params.set(\"language\", \"es\");\n    parser = new MultilanguageQueryParser(\"foo bar\", new ModifiableSolrParams(), params, req(params));\n    query = parser.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title_es\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title_es\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"subject_es\", \"foo\", 1, false));\n    assertTrue(containsClause(query, \"subject_es\", \"bar\", 1, false));\n    \n    FuzzyDismaxQParser parser2 = new FuzzyDismaxQParser(\"foo bar absence\", new ModifiableSolrParams(), params, req(params));\n    query = parser2.parse();\n    assertNotNull(query);\n    assertTrue(containsClause(query, \"title\", \"foo\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"bar\", 5, false));\n    assertTrue(containsClause(query, \"title\", \"absence\", 5, true));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c7e79e31f55cbb444e3023d430a340658755aa31","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c7e79e31f55cbb444e3023d430a340658755aa31"],"c7e79e31f55cbb444e3023d430a340658755aa31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7e79e31f55cbb444e3023d430a340658755aa31":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}