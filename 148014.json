{"path":"lucene/core/src/test/org/apache/lucene/util/mutable/TestMutableValues#testStr().mjava","commits":[{"id":"0216a47ac375092b9e018cf0498f45f450e8f4ed","date":1404782591,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/mutable/TestMutableValues#testStr().mjava","pathOld":"/dev/null","sourceNew":"  public void testStr() {\n    MutableValueStr xxx = new MutableValueStr();\n    assert xxx.value.equals(new BytesRef()) : \"defaults have changed, test utility may not longer be as high\";\n    assert xxx.exists : \"defaults have changed, test utility may not longer be as high\";\n    assertSanity(xxx);\n    MutableValueStr yyy = new MutableValueStr();\n    assertSanity(yyy);\n\n    assertEquality(xxx, yyy);\n\n    xxx.exists = false;\n    assertSanity(xxx);\n\n    assertInEquality(xxx,yyy);\n\n    yyy.exists = false;\n    assertEquality(xxx, yyy);\n\n    xxx.value.length = 0;\n    xxx.value.copyChars(\"zzz\");\n    xxx.exists = true;\n    assertSanity(xxx);\n\n    assertInEquality(xxx,yyy);\n\n    yyy.value.length = 0;\n    yyy.value.copyChars(\"aaa\");\n    yyy.exists = true;\n    assertSanity(yyy);\n\n    assertInEquality(xxx,yyy);\n    assertTrue(0 < xxx.compareTo(yyy));\n    assertTrue(yyy.compareTo(xxx) < 0);\n\n    xxx.copy(yyy);\n    assertSanity(xxx);\n    assertEquality(xxx, yyy);\n\n    // special BytesRef considerations...\n\n    xxx.exists = false;\n    xxx.value.length = 0; // but leave bytes alone\n    assertInEquality(xxx,yyy);\n\n    yyy.exists = false;\n    yyy.value.length = 0; // but leave bytes alone\n    assertEquality(xxx, yyy);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/mutable/TestMutableValues#testStr().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/mutable/TestMutableValues#testStr().mjava","sourceNew":"  public void testStr() {\n    MutableValueStr xxx = new MutableValueStr();\n    assert xxx.value.get().equals(new BytesRef()) : \"defaults have changed, test utility may not longer be as high\";\n    assert xxx.exists : \"defaults have changed, test utility may not longer be as high\";\n    assertSanity(xxx);\n    MutableValueStr yyy = new MutableValueStr();\n    assertSanity(yyy);\n\n    assertEquality(xxx, yyy);\n\n    xxx.exists = false;\n    assertSanity(xxx);\n\n    assertInEquality(xxx,yyy);\n\n    yyy.exists = false;\n    assertEquality(xxx, yyy);\n\n    xxx.value.clear();\n    xxx.value.copyChars(\"zzz\");\n    xxx.exists = true;\n    assertSanity(xxx);\n\n    assertInEquality(xxx,yyy);\n\n    yyy.value.clear();\n    yyy.value.copyChars(\"aaa\");\n    yyy.exists = true;\n    assertSanity(yyy);\n\n    assertInEquality(xxx,yyy);\n    assertTrue(0 < xxx.compareTo(yyy));\n    assertTrue(yyy.compareTo(xxx) < 0);\n\n    xxx.copy(yyy);\n    assertSanity(xxx);\n    assertEquality(xxx, yyy);\n\n    // special BytesRef considerations...\n\n    xxx.exists = false;\n    xxx.value.clear(); // but leave bytes alone\n    assertInEquality(xxx,yyy);\n\n    yyy.exists = false;\n    yyy.value.clear(); // but leave bytes alone\n    assertEquality(xxx, yyy);\n\n  }\n\n","sourceOld":"  public void testStr() {\n    MutableValueStr xxx = new MutableValueStr();\n    assert xxx.value.equals(new BytesRef()) : \"defaults have changed, test utility may not longer be as high\";\n    assert xxx.exists : \"defaults have changed, test utility may not longer be as high\";\n    assertSanity(xxx);\n    MutableValueStr yyy = new MutableValueStr();\n    assertSanity(yyy);\n\n    assertEquality(xxx, yyy);\n\n    xxx.exists = false;\n    assertSanity(xxx);\n\n    assertInEquality(xxx,yyy);\n\n    yyy.exists = false;\n    assertEquality(xxx, yyy);\n\n    xxx.value.length = 0;\n    xxx.value.copyChars(\"zzz\");\n    xxx.exists = true;\n    assertSanity(xxx);\n\n    assertInEquality(xxx,yyy);\n\n    yyy.value.length = 0;\n    yyy.value.copyChars(\"aaa\");\n    yyy.exists = true;\n    assertSanity(yyy);\n\n    assertInEquality(xxx,yyy);\n    assertTrue(0 < xxx.compareTo(yyy));\n    assertTrue(yyy.compareTo(xxx) < 0);\n\n    xxx.copy(yyy);\n    assertSanity(xxx);\n    assertEquality(xxx, yyy);\n\n    // special BytesRef considerations...\n\n    xxx.exists = false;\n    xxx.value.length = 0; // but leave bytes alone\n    assertInEquality(xxx,yyy);\n\n    yyy.exists = false;\n    yyy.value.length = 0; // but leave bytes alone\n    assertEquality(xxx, yyy);\n\n  }\n\n","bugFix":["0216a47ac375092b9e018cf0498f45f450e8f4ed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0216a47ac375092b9e018cf0498f45f450e8f4ed"],"0216a47ac375092b9e018cf0498f45f450e8f4ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0216a47ac375092b9e018cf0498f45f450e8f4ed"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0216a47ac375092b9e018cf0498f45f450e8f4ed":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}