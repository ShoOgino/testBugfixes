{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#putIfAbsent(Filter,LeafReaderContext,DocIdSet).mjava","sourceNew":"  synchronized void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    // we don't want to have user-provided queries as keys in our cache since queries are mutable\n    query = query.clone();\n    query.setBoost(1f);\n    assert query == QueryCache.cacheKey(query);\n    Query singleton = uniqueQueries.putIfAbsent(query, query);\n    if (singleton == null) {\n      onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n    } else {\n      query = singleton;\n    }\n    final Object key = context.reader().getCoreCacheKey();\n    LeafCache leafCache = cache.get(key);\n    if (leafCache == null) {\n      leafCache = new LeafCache(key);\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(query, set);\n    evictIfNecessary();\n  }\n\n","sourceOld":"  synchronized void putIfAbsent(Filter filter, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedFilters and cache remain sync'ed\n    assert set.isCacheable();\n    Filter singleton = uniqueFilters.putIfAbsent(filter, filter);\n    if (singleton == null) {\n      onFilterCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(filter));\n    } else {\n      filter = singleton;\n    }\n    final Object key = context.reader().getCoreCacheKey();\n    LeafCache leafCache = cache.get(key);\n    if (leafCache == null) {\n      leafCache = new LeafCache(key);\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(filter, set);\n    evictIfNecessary();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","pathOld":"/dev/null","sourceNew":"  synchronized void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    // we don't want to have user-provided queries as keys in our cache since queries are mutable\n    query = query.clone();\n    query.setBoost(1f);\n    assert query == QueryCache.cacheKey(query);\n    Query singleton = uniqueQueries.putIfAbsent(query, query);\n    if (singleton == null) {\n      onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n    } else {\n      query = singleton;\n    }\n    final Object key = context.reader().getCoreCacheKey();\n    LeafCache leafCache = cache.get(key);\n    if (leafCache == null) {\n      leafCache = new LeafCache(key);\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(query, set);\n    evictIfNecessary();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","sourceNew":"  synchronized void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    // we don't want to have user-provided queries as keys in our cache since queries are mutable\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    Query singleton = uniqueQueries.putIfAbsent(query, query);\n    if (singleton == null) {\n      onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n    } else {\n      query = singleton;\n    }\n    final Object key = context.reader().getCoreCacheKey();\n    LeafCache leafCache = cache.get(key);\n    if (leafCache == null) {\n      leafCache = new LeafCache(key);\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(query, set);\n    evictIfNecessary();\n  }\n\n","sourceOld":"  synchronized void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    // we don't want to have user-provided queries as keys in our cache since queries are mutable\n    query = query.clone();\n    query.setBoost(1f);\n    assert query == QueryCache.cacheKey(query);\n    Query singleton = uniqueQueries.putIfAbsent(query, query);\n    if (singleton == null) {\n      onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n    } else {\n      query = singleton;\n    }\n    final Object key = context.reader().getCoreCacheKey();\n    LeafCache leafCache = cache.get(key);\n    if (leafCache == null) {\n      leafCache = new LeafCache(key);\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(query, set);\n    evictIfNecessary();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa","date":1461326984,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","sourceNew":"  void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    lock.lock();\n    try {\n      Query singleton = uniqueQueries.putIfAbsent(query, query);\n      if (singleton == null) {\n        onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n      } else {\n        query = singleton;\n      }\n      final Object key = context.reader().getCoreCacheKey();\n      LeafCache leafCache = cache.get(key);\n      if (leafCache == null) {\n        leafCache = new LeafCache(key);\n        final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n        ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n        assert previous == null;\n        // we just created a new leaf cache, need to register a close listener\n        context.reader().addCoreClosedListener(new CoreClosedListener() {\n          @Override\n          public void onClose(Object ownerCoreCacheKey) {\n            clearCoreCacheKey(ownerCoreCacheKey);\n          }\n        });\n      }\n      leafCache.putIfAbsent(query, set);\n      evictIfNecessary();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  synchronized void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    // we don't want to have user-provided queries as keys in our cache since queries are mutable\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    Query singleton = uniqueQueries.putIfAbsent(query, query);\n    if (singleton == null) {\n      onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n    } else {\n      query = singleton;\n    }\n    final Object key = context.reader().getCoreCacheKey();\n    LeafCache leafCache = cache.get(key);\n    if (leafCache == null) {\n      leafCache = new LeafCache(key);\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(query, set);\n    evictIfNecessary();\n  }\n\n","bugFix":null,"bugIntro":["393f9042b18c4281cb212ceb8dc71c31a2220f46"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","sourceNew":"  void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    lock.lock();\n    try {\n      Query singleton = uniqueQueries.putIfAbsent(query, query);\n      if (singleton == null) {\n        onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n      } else {\n        query = singleton;\n      }\n      final Object key = context.reader().getCoreCacheKey();\n      LeafCache leafCache = cache.get(key);\n      if (leafCache == null) {\n        leafCache = new LeafCache(key);\n        final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n        ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n        assert previous == null;\n        // we just created a new leaf cache, need to register a close listener\n        context.reader().addCoreClosedListener(new CoreClosedListener() {\n          @Override\n          public void onClose(Object ownerCoreCacheKey) {\n            clearCoreCacheKey(ownerCoreCacheKey);\n          }\n        });\n      }\n      leafCache.putIfAbsent(query, set);\n      evictIfNecessary();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  synchronized void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    // we don't want to have user-provided queries as keys in our cache since queries are mutable\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    Query singleton = uniqueQueries.putIfAbsent(query, query);\n    if (singleton == null) {\n      onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n    } else {\n      query = singleton;\n    }\n    final Object key = context.reader().getCoreCacheKey();\n    LeafCache leafCache = cache.get(key);\n    if (leafCache == null) {\n      leafCache = new LeafCache(key);\n      final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n      ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n      assert previous == null;\n      // we just created a new leaf cache, need to register a close listener\n      context.reader().addCoreClosedListener(new CoreClosedListener() {\n        @Override\n        public void onClose(Object ownerCoreCacheKey) {\n          clearCoreCacheKey(ownerCoreCacheKey);\n        }\n      });\n    }\n    leafCache.putIfAbsent(query, set);\n    evictIfNecessary();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7572e4a65adc4053c239781245b1a15b430b279","date":1475129002,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","sourceNew":"  void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    lock.lock();\n    try {\n      Query singleton = uniqueQueries.putIfAbsent(query, query);\n      if (singleton == null) {\n        onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n      } else {\n        query = singleton;\n      }\n      final Object key = context.reader().getCoreCacheKey();\n      LeafCache leafCache = cache.get(key);\n      if (leafCache == null) {\n        leafCache = new LeafCache(key);\n        final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n        ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n        assert previous == null;\n        // we just created a new leaf cache, need to register a close listener\n        context.reader().addCoreClosedListener(this::clearCoreCacheKey);\n      }\n      leafCache.putIfAbsent(query, set);\n      evictIfNecessary();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    lock.lock();\n    try {\n      Query singleton = uniqueQueries.putIfAbsent(query, query);\n      if (singleton == null) {\n        onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n      } else {\n        query = singleton;\n      }\n      final Object key = context.reader().getCoreCacheKey();\n      LeafCache leafCache = cache.get(key);\n      if (leafCache == null) {\n        leafCache = new LeafCache(key);\n        final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n        ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n        assert previous == null;\n        // we just created a new leaf cache, need to register a close listener\n        context.reader().addCoreClosedListener(new CoreClosedListener() {\n          @Override\n          public void onClose(Object ownerCoreCacheKey) {\n            clearCoreCacheKey(ownerCoreCacheKey);\n          }\n        });\n      }\n      leafCache.putIfAbsent(query, set);\n      evictIfNecessary();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","sourceNew":"  void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    lock.lock();\n    try {\n      Query singleton = uniqueQueries.putIfAbsent(query, query);\n      if (singleton == null) {\n        onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n      } else {\n        query = singleton;\n      }\n      final Object key = context.reader().getCoreCacheKey();\n      LeafCache leafCache = cache.get(key);\n      if (leafCache == null) {\n        leafCache = new LeafCache(key);\n        final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n        ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n        assert previous == null;\n        // we just created a new leaf cache, need to register a close listener\n        context.reader().addCoreClosedListener(this::clearCoreCacheKey);\n      }\n      leafCache.putIfAbsent(query, set);\n      evictIfNecessary();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    lock.lock();\n    try {\n      Query singleton = uniqueQueries.putIfAbsent(query, query);\n      if (singleton == null) {\n        onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n      } else {\n        query = singleton;\n      }\n      final Object key = context.reader().getCoreCacheKey();\n      LeafCache leafCache = cache.get(key);\n      if (leafCache == null) {\n        leafCache = new LeafCache(key);\n        final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n        ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n        assert previous == null;\n        // we just created a new leaf cache, need to register a close listener\n        context.reader().addCoreClosedListener(new CoreClosedListener() {\n          @Override\n          public void onClose(Object ownerCoreCacheKey) {\n            clearCoreCacheKey(ownerCoreCacheKey);\n          }\n        });\n      }\n      leafCache.putIfAbsent(query, set);\n      evictIfNecessary();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","sourceNew":"  void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    lock.lock();\n    try {\n      Query singleton = uniqueQueries.putIfAbsent(query, query);\n      if (singleton == null) {\n        onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n      } else {\n        query = singleton;\n      }\n      final Object key = context.reader().getCoreCacheKey();\n      LeafCache leafCache = cache.get(key);\n      if (leafCache == null) {\n        leafCache = new LeafCache(key);\n        final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n        ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n        assert previous == null;\n        // we just created a new leaf cache, need to register a close listener\n        context.reader().addCoreClosedListener(this::clearCoreCacheKey);\n      }\n      leafCache.putIfAbsent(query, set);\n      evictIfNecessary();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    lock.lock();\n    try {\n      Query singleton = uniqueQueries.putIfAbsent(query, query);\n      if (singleton == null) {\n        onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n      } else {\n        query = singleton;\n      }\n      final Object key = context.reader().getCoreCacheKey();\n      LeafCache leafCache = cache.get(key);\n      if (leafCache == null) {\n        leafCache = new LeafCache(key);\n        final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n        ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n        assert previous == null;\n        // we just created a new leaf cache, need to register a close listener\n        context.reader().addCoreClosedListener(new CoreClosedListener() {\n          @Override\n          public void onClose(Object ownerCoreCacheKey) {\n            clearCoreCacheKey(ownerCoreCacheKey);\n          }\n        });\n      }\n      leafCache.putIfAbsent(query, set);\n      evictIfNecessary();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet,IndexReader.CacheHelper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet).mjava","sourceNew":"  void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set, IndexReader.CacheHelper cacheHelper) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    lock.lock();\n    try {\n      Query singleton = uniqueQueries.putIfAbsent(query, query);\n      if (singleton == null) {\n        onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n      } else {\n        query = singleton;\n      }\n      final IndexReader.CacheKey key = cacheHelper.getKey();\n      LeafCache leafCache = cache.get(key);\n      if (leafCache == null) {\n        leafCache = new LeafCache(key);\n        final LeafCache previous = cache.put(key, leafCache);\n        ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n        assert previous == null;\n        // we just created a new leaf cache, need to register a close listener\n        cacheHelper.addClosedListener(this::clearCoreCacheKey);\n      }\n      leafCache.putIfAbsent(query, set);\n      evictIfNecessary();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    lock.lock();\n    try {\n      Query singleton = uniqueQueries.putIfAbsent(query, query);\n      if (singleton == null) {\n        onQueryCache(singleton, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + ramBytesUsed(query));\n      } else {\n        query = singleton;\n      }\n      final Object key = context.reader().getCoreCacheKey();\n      LeafCache leafCache = cache.get(key);\n      if (leafCache == null) {\n        leafCache = new LeafCache(key);\n        final LeafCache previous = cache.put(context.reader().getCoreCacheKey(), leafCache);\n        ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n        assert previous == null;\n        // we just created a new leaf cache, need to register a close listener\n        context.reader().addCoreClosedListener(this::clearCoreCacheKey);\n      }\n      leafCache.putIfAbsent(query, set);\n      evictIfNecessary();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a7572e4a65adc4053c239781245b1a15b430b279":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d211216c83f01894810543d1c107160a9ae3650b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["2dfdf766e55e943d942055d7de53c7ad6bc45283","aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","a7572e4a65adc4053c239781245b1a15b430b279"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"],"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"a7572e4a65adc4053c239781245b1a15b430b279":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2dfdf766e55e943d942055d7de53c7ad6bc45283"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a7572e4a65adc4053c239781245b1a15b430b279","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d211216c83f01894810543d1c107160a9ae3650b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"aa7f878dadf2afe37eaf26f3f2906ec2dd0aacaa":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}