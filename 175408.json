{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testRefCounts2().mjava","commits":[{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testRefCounts2().mjava","pathOld":"/dev/null","sourceNew":"  public void testRefCounts2() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    DirectoryReader ir1 = DirectoryReader.open(dir1);\n    DirectoryReader ir2 = DirectoryReader.open(dir2);\n\n    // don't close subreaders, so ParallelReader will increment refcounts\n    ParallelCompositeReader pr = new ParallelCompositeReader(false, ir1, ir2);\n    // check RefCounts\n    assertEquals(2, ir1.getRefCount());\n    assertEquals(2, ir2.getRefCount());\n    pr.close();\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testRefCounts2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testRefCounts2().mjava","sourceNew":"  public void testRefCounts2() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    DirectoryReader ir1 = DirectoryReader.open(dir1);\n    DirectoryReader ir2 = DirectoryReader.open(dir2);\n\n    // don't close subreaders, so ParallelReader will increment refcounts\n    ParallelCompositeReader pr = new ParallelCompositeReader(false, ir1, ir2);\n    // check RefCounts\n    assertEquals(2, ir1.getRefCount());\n    assertEquals(2, ir2.getRefCount());\n    pr.close();\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();    \n  }\n\n","sourceOld":"  public void testRefCounts2() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    DirectoryReader ir1 = DirectoryReader.open(dir1);\n    DirectoryReader ir2 = DirectoryReader.open(dir2);\n\n    // don't close subreaders, so ParallelReader will increment refcounts\n    ParallelCompositeReader pr = new ParallelCompositeReader(false, ir1, ir2);\n    // check RefCounts\n    assertEquals(2, ir1.getRefCount());\n    assertEquals(2, ir2.getRefCount());\n    pr.close();\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48180ea0d6210cab36e06798b916a39e0607713b","date":1367051483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testRefCounts2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testRefCounts2().mjava","sourceNew":"  public void testRefCounts2() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    DirectoryReader ir1 = DirectoryReader.open(dir1);\n    DirectoryReader ir2 = DirectoryReader.open(dir2);\n\n    // don't close subreaders, so ParallelReader will increment refcounts\n    ParallelCompositeReader pr = new ParallelCompositeReader(false, ir1, ir2);\n    IndexReader psub1 = pr.getSequentialSubReaders().get(0);\n    // check RefCounts\n    assertEquals(2, ir1.getRefCount());\n    assertEquals(2, ir2.getRefCount());\n    assertEquals(\"refCount must be 1, as the synthetic reader was created by ParallelCompositeReader\", 1, psub1.getRefCount());\n    pr.close();\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    assertEquals(\"refcount must be 0 because parent was closed\", 0, psub1.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    assertEquals(\"refcount should not change anymore\", 0, psub1.getRefCount());\n    dir1.close();\n    dir2.close();    \n  }\n\n","sourceOld":"  public void testRefCounts2() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    DirectoryReader ir1 = DirectoryReader.open(dir1);\n    DirectoryReader ir2 = DirectoryReader.open(dir2);\n\n    // don't close subreaders, so ParallelReader will increment refcounts\n    ParallelCompositeReader pr = new ParallelCompositeReader(false, ir1, ir2);\n    // check RefCounts\n    assertEquals(2, ir1.getRefCount());\n    assertEquals(2, ir2.getRefCount());\n    pr.close();\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48180ea0d6210cab36e06798b916a39e0607713b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6e09a3a223be07d75777515a717312813221fe58"],"6e09a3a223be07d75777515a717312813221fe58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48180ea0d6210cab36e06798b916a39e0607713b"]},"commit2Childs":{"48180ea0d6210cab36e06798b916a39e0607713b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e09a3a223be07d75777515a717312813221fe58"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["48180ea0d6210cab36e06798b916a39e0607713b"],"6e09a3a223be07d75777515a717312813221fe58":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}