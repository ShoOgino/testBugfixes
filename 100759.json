{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#decompressCore(IntBuffer,int[],int).mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#decompressCore(IntBuffer,int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForUtil#decompressCore(IntBuffer,int[],int).mjava","sourceNew":"  /**\n   * IntBuffer will not be rewinded in this method, therefore\n   * caller should ensure that the position is set to the first\n   * encoded int before decoding.\n   */\n  static void decompressCore(IntBuffer intBuffer, int[] data, int numBits) {\n    assert numBits<=32;\n    assert numBits>=0;\n\n    // TODO: PackedIntsDecompress is hardewired to size==128 only\n    switch(numBits) {\n      case 0: PackedIntsDecompress.decode0(intBuffer, data); break;\n      case 1: PackedIntsDecompress.decode1(intBuffer, data); break;\n      case 2: PackedIntsDecompress.decode2(intBuffer, data); break;\n      case 3: PackedIntsDecompress.decode3(intBuffer, data); break;\n      case 4: PackedIntsDecompress.decode4(intBuffer, data); break;\n      case 5: PackedIntsDecompress.decode5(intBuffer, data); break;\n      case 6: PackedIntsDecompress.decode6(intBuffer, data); break;\n      case 7: PackedIntsDecompress.decode7(intBuffer, data); break;\n      case 8: PackedIntsDecompress.decode8(intBuffer, data); break;\n      case 9: PackedIntsDecompress.decode9(intBuffer, data); break;\n      case 10: PackedIntsDecompress.decode10(intBuffer, data); break;\n      case 11: PackedIntsDecompress.decode11(intBuffer, data); break;\n      case 12: PackedIntsDecompress.decode12(intBuffer, data); break;\n      case 13: PackedIntsDecompress.decode13(intBuffer, data); break;\n      case 14: PackedIntsDecompress.decode14(intBuffer, data); break;\n      case 15: PackedIntsDecompress.decode15(intBuffer, data); break;\n      case 16: PackedIntsDecompress.decode16(intBuffer, data); break;\n      case 17: PackedIntsDecompress.decode17(intBuffer, data); break;\n      case 18: PackedIntsDecompress.decode18(intBuffer, data); break;\n      case 19: PackedIntsDecompress.decode19(intBuffer, data); break;\n      case 20: PackedIntsDecompress.decode20(intBuffer, data); break;\n      case 21: PackedIntsDecompress.decode21(intBuffer, data); break;\n      case 22: PackedIntsDecompress.decode22(intBuffer, data); break;\n      case 23: PackedIntsDecompress.decode23(intBuffer, data); break;\n      case 24: PackedIntsDecompress.decode24(intBuffer, data); break;\n      case 25: PackedIntsDecompress.decode25(intBuffer, data); break;\n      case 26: PackedIntsDecompress.decode26(intBuffer, data); break;\n      case 27: PackedIntsDecompress.decode27(intBuffer, data); break;\n      case 28: PackedIntsDecompress.decode28(intBuffer, data); break;\n      case 29: PackedIntsDecompress.decode29(intBuffer, data); break;\n      case 30: PackedIntsDecompress.decode30(intBuffer, data); break;\n      case 31: PackedIntsDecompress.decode31(intBuffer, data); break;\n      case 32: PackedIntsDecompress.decode32(intBuffer, data); break;\n    }\n  }\n\n","sourceOld":"  /**\n   * IntBuffer will not be rewinded in this method, therefore\n   * caller should ensure that the position is set to the first\n   * encoded int before decoding.\n   */\n  static void decompressCore(IntBuffer intBuffer, int[] data, int numBits) {\n    assert numBits<=32;\n    assert numBits>=0;\n\n    // TODO: PackedIntsDecompress is hardewired to size==128 only\n    switch(numBits) {\n      case 0: PackedIntsDecompress.decode0(intBuffer, data); break;\n      case 1: PackedIntsDecompress.decode1(intBuffer, data); break;\n      case 2: PackedIntsDecompress.decode2(intBuffer, data); break;\n      case 3: PackedIntsDecompress.decode3(intBuffer, data); break;\n      case 4: PackedIntsDecompress.decode4(intBuffer, data); break;\n      case 5: PackedIntsDecompress.decode5(intBuffer, data); break;\n      case 6: PackedIntsDecompress.decode6(intBuffer, data); break;\n      case 7: PackedIntsDecompress.decode7(intBuffer, data); break;\n      case 8: PackedIntsDecompress.decode8(intBuffer, data); break;\n      case 9: PackedIntsDecompress.decode9(intBuffer, data); break;\n      case 10: PackedIntsDecompress.decode10(intBuffer, data); break;\n      case 11: PackedIntsDecompress.decode11(intBuffer, data); break;\n      case 12: PackedIntsDecompress.decode12(intBuffer, data); break;\n      case 13: PackedIntsDecompress.decode13(intBuffer, data); break;\n      case 14: PackedIntsDecompress.decode14(intBuffer, data); break;\n      case 15: PackedIntsDecompress.decode15(intBuffer, data); break;\n      case 16: PackedIntsDecompress.decode16(intBuffer, data); break;\n      case 17: PackedIntsDecompress.decode17(intBuffer, data); break;\n      case 18: PackedIntsDecompress.decode18(intBuffer, data); break;\n      case 19: PackedIntsDecompress.decode19(intBuffer, data); break;\n      case 20: PackedIntsDecompress.decode20(intBuffer, data); break;\n      case 21: PackedIntsDecompress.decode21(intBuffer, data); break;\n      case 22: PackedIntsDecompress.decode22(intBuffer, data); break;\n      case 23: PackedIntsDecompress.decode23(intBuffer, data); break;\n      case 24: PackedIntsDecompress.decode24(intBuffer, data); break;\n      case 25: PackedIntsDecompress.decode25(intBuffer, data); break;\n      case 26: PackedIntsDecompress.decode26(intBuffer, data); break;\n      case 27: PackedIntsDecompress.decode27(intBuffer, data); break;\n      case 28: PackedIntsDecompress.decode28(intBuffer, data); break;\n      case 29: PackedIntsDecompress.decode29(intBuffer, data); break;\n      case 30: PackedIntsDecompress.decode30(intBuffer, data); break;\n      case 31: PackedIntsDecompress.decode31(intBuffer, data); break;\n      case 32: PackedIntsDecompress.decode32(intBuffer, data); break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8081d5018e8846bf4080f2809432c759996e749f","date":1344206372,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#decompressCore(IntBuffer,int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#decompressCore(IntBuffer,int[],int).mjava","sourceNew":"  static void decompressCore(IntBuffer intBuffer, int[] data, int numBits) {\n    switch(numBits) {\n      case 0: PackedIntsDecompress.decode0(intBuffer, data); break;\n      case 1: PackedIntsDecompress.decode1(intBuffer, data); break;\n      case 2: PackedIntsDecompress.decode2(intBuffer, data); break;\n      case 3: PackedIntsDecompress.decode3(intBuffer, data); break;\n      case 4: PackedIntsDecompress.decode4(intBuffer, data); break;\n      case 5: PackedIntsDecompress.decode5(intBuffer, data); break;\n      case 6: PackedIntsDecompress.decode6(intBuffer, data); break;\n      case 7: PackedIntsDecompress.decode7(intBuffer, data); break;\n      case 8: PackedIntsDecompress.decode8(intBuffer, data); break;\n      case 9: PackedIntsDecompress.decode9(intBuffer, data); break;\n      case 10: PackedIntsDecompress.decode10(intBuffer, data); break;\n      case 11: PackedIntsDecompress.decode11(intBuffer, data); break;\n      case 12: PackedIntsDecompress.decode12(intBuffer, data); break;\n      case 13: PackedIntsDecompress.decode13(intBuffer, data); break;\n      case 14: PackedIntsDecompress.decode14(intBuffer, data); break;\n      case 15: PackedIntsDecompress.decode15(intBuffer, data); break;\n      case 16: PackedIntsDecompress.decode16(intBuffer, data); break;\n      case 17: PackedIntsDecompress.decode17(intBuffer, data); break;\n      case 18: PackedIntsDecompress.decode18(intBuffer, data); break;\n      case 19: PackedIntsDecompress.decode19(intBuffer, data); break;\n      case 20: PackedIntsDecompress.decode20(intBuffer, data); break;\n      case 21: PackedIntsDecompress.decode21(intBuffer, data); break;\n      case 22: PackedIntsDecompress.decode22(intBuffer, data); break;\n      case 23: PackedIntsDecompress.decode23(intBuffer, data); break;\n      case 24: PackedIntsDecompress.decode24(intBuffer, data); break;\n      case 25: PackedIntsDecompress.decode25(intBuffer, data); break;\n      case 26: PackedIntsDecompress.decode26(intBuffer, data); break;\n      case 27: PackedIntsDecompress.decode27(intBuffer, data); break;\n      case 28: PackedIntsDecompress.decode28(intBuffer, data); break;\n      case 29: PackedIntsDecompress.decode29(intBuffer, data); break;\n      case 30: PackedIntsDecompress.decode30(intBuffer, data); break;\n      case 31: PackedIntsDecompress.decode31(intBuffer, data); break;\n      case 32: PackedIntsDecompress.decode32(intBuffer, data); break;\n    }\n  }\n\n","sourceOld":"  /**\n   * IntBuffer will not be rewinded in this method, therefore\n   * caller should ensure that the position is set to the first\n   * encoded int before decoding.\n   */\n  static void decompressCore(IntBuffer intBuffer, int[] data, int numBits) {\n    assert numBits<=32;\n    assert numBits>=0;\n\n    // TODO: PackedIntsDecompress is hardewired to size==128 only\n    switch(numBits) {\n      case 0: PackedIntsDecompress.decode0(intBuffer, data); break;\n      case 1: PackedIntsDecompress.decode1(intBuffer, data); break;\n      case 2: PackedIntsDecompress.decode2(intBuffer, data); break;\n      case 3: PackedIntsDecompress.decode3(intBuffer, data); break;\n      case 4: PackedIntsDecompress.decode4(intBuffer, data); break;\n      case 5: PackedIntsDecompress.decode5(intBuffer, data); break;\n      case 6: PackedIntsDecompress.decode6(intBuffer, data); break;\n      case 7: PackedIntsDecompress.decode7(intBuffer, data); break;\n      case 8: PackedIntsDecompress.decode8(intBuffer, data); break;\n      case 9: PackedIntsDecompress.decode9(intBuffer, data); break;\n      case 10: PackedIntsDecompress.decode10(intBuffer, data); break;\n      case 11: PackedIntsDecompress.decode11(intBuffer, data); break;\n      case 12: PackedIntsDecompress.decode12(intBuffer, data); break;\n      case 13: PackedIntsDecompress.decode13(intBuffer, data); break;\n      case 14: PackedIntsDecompress.decode14(intBuffer, data); break;\n      case 15: PackedIntsDecompress.decode15(intBuffer, data); break;\n      case 16: PackedIntsDecompress.decode16(intBuffer, data); break;\n      case 17: PackedIntsDecompress.decode17(intBuffer, data); break;\n      case 18: PackedIntsDecompress.decode18(intBuffer, data); break;\n      case 19: PackedIntsDecompress.decode19(intBuffer, data); break;\n      case 20: PackedIntsDecompress.decode20(intBuffer, data); break;\n      case 21: PackedIntsDecompress.decode21(intBuffer, data); break;\n      case 22: PackedIntsDecompress.decode22(intBuffer, data); break;\n      case 23: PackedIntsDecompress.decode23(intBuffer, data); break;\n      case 24: PackedIntsDecompress.decode24(intBuffer, data); break;\n      case 25: PackedIntsDecompress.decode25(intBuffer, data); break;\n      case 26: PackedIntsDecompress.decode26(intBuffer, data); break;\n      case 27: PackedIntsDecompress.decode27(intBuffer, data); break;\n      case 28: PackedIntsDecompress.decode28(intBuffer, data); break;\n      case 29: PackedIntsDecompress.decode29(intBuffer, data); break;\n      case 30: PackedIntsDecompress.decode30(intBuffer, data); break;\n      case 31: PackedIntsDecompress.decode31(intBuffer, data); break;\n      case 32: PackedIntsDecompress.decode32(intBuffer, data); break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#decompressCore(IntBuffer,int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#decompressCore(IntBuffer,int[],int).mjava","sourceNew":"  public static void decompressCore(IntBuffer intBuffer, int[] data, int numBits) {\n    switch(numBits) {\n      case 0: PackedIntsDecompress.decode0(intBuffer, data); break;\n      case 1: PackedIntsDecompress.decode1(intBuffer, data); break;\n      case 2: PackedIntsDecompress.decode2(intBuffer, data); break;\n      case 3: PackedIntsDecompress.decode3(intBuffer, data); break;\n      case 4: PackedIntsDecompress.decode4(intBuffer, data); break;\n      case 5: PackedIntsDecompress.decode5(intBuffer, data); break;\n      case 6: PackedIntsDecompress.decode6(intBuffer, data); break;\n      case 7: PackedIntsDecompress.decode7(intBuffer, data); break;\n      case 8: PackedIntsDecompress.decode8(intBuffer, data); break;\n      case 9: PackedIntsDecompress.decode9(intBuffer, data); break;\n      case 10: PackedIntsDecompress.decode10(intBuffer, data); break;\n      case 11: PackedIntsDecompress.decode11(intBuffer, data); break;\n      case 12: PackedIntsDecompress.decode12(intBuffer, data); break;\n      case 13: PackedIntsDecompress.decode13(intBuffer, data); break;\n      case 14: PackedIntsDecompress.decode14(intBuffer, data); break;\n      case 15: PackedIntsDecompress.decode15(intBuffer, data); break;\n      case 16: PackedIntsDecompress.decode16(intBuffer, data); break;\n      case 17: PackedIntsDecompress.decode17(intBuffer, data); break;\n      case 18: PackedIntsDecompress.decode18(intBuffer, data); break;\n      case 19: PackedIntsDecompress.decode19(intBuffer, data); break;\n      case 20: PackedIntsDecompress.decode20(intBuffer, data); break;\n      case 21: PackedIntsDecompress.decode21(intBuffer, data); break;\n      case 22: PackedIntsDecompress.decode22(intBuffer, data); break;\n      case 23: PackedIntsDecompress.decode23(intBuffer, data); break;\n      case 24: PackedIntsDecompress.decode24(intBuffer, data); break;\n      case 25: PackedIntsDecompress.decode25(intBuffer, data); break;\n      case 26: PackedIntsDecompress.decode26(intBuffer, data); break;\n      case 27: PackedIntsDecompress.decode27(intBuffer, data); break;\n      case 28: PackedIntsDecompress.decode28(intBuffer, data); break;\n      case 29: PackedIntsDecompress.decode29(intBuffer, data); break;\n      case 30: PackedIntsDecompress.decode30(intBuffer, data); break;\n      case 31: PackedIntsDecompress.decode31(intBuffer, data); break;\n      case 32: PackedIntsDecompress.decode32(intBuffer, data); break;\n    }\n  }\n\n","sourceOld":"  static void decompressCore(IntBuffer intBuffer, int[] data, int numBits) {\n    switch(numBits) {\n      case 0: PackedIntsDecompress.decode0(intBuffer, data); break;\n      case 1: PackedIntsDecompress.decode1(intBuffer, data); break;\n      case 2: PackedIntsDecompress.decode2(intBuffer, data); break;\n      case 3: PackedIntsDecompress.decode3(intBuffer, data); break;\n      case 4: PackedIntsDecompress.decode4(intBuffer, data); break;\n      case 5: PackedIntsDecompress.decode5(intBuffer, data); break;\n      case 6: PackedIntsDecompress.decode6(intBuffer, data); break;\n      case 7: PackedIntsDecompress.decode7(intBuffer, data); break;\n      case 8: PackedIntsDecompress.decode8(intBuffer, data); break;\n      case 9: PackedIntsDecompress.decode9(intBuffer, data); break;\n      case 10: PackedIntsDecompress.decode10(intBuffer, data); break;\n      case 11: PackedIntsDecompress.decode11(intBuffer, data); break;\n      case 12: PackedIntsDecompress.decode12(intBuffer, data); break;\n      case 13: PackedIntsDecompress.decode13(intBuffer, data); break;\n      case 14: PackedIntsDecompress.decode14(intBuffer, data); break;\n      case 15: PackedIntsDecompress.decode15(intBuffer, data); break;\n      case 16: PackedIntsDecompress.decode16(intBuffer, data); break;\n      case 17: PackedIntsDecompress.decode17(intBuffer, data); break;\n      case 18: PackedIntsDecompress.decode18(intBuffer, data); break;\n      case 19: PackedIntsDecompress.decode19(intBuffer, data); break;\n      case 20: PackedIntsDecompress.decode20(intBuffer, data); break;\n      case 21: PackedIntsDecompress.decode21(intBuffer, data); break;\n      case 22: PackedIntsDecompress.decode22(intBuffer, data); break;\n      case 23: PackedIntsDecompress.decode23(intBuffer, data); break;\n      case 24: PackedIntsDecompress.decode24(intBuffer, data); break;\n      case 25: PackedIntsDecompress.decode25(intBuffer, data); break;\n      case 26: PackedIntsDecompress.decode26(intBuffer, data); break;\n      case 27: PackedIntsDecompress.decode27(intBuffer, data); break;\n      case 28: PackedIntsDecompress.decode28(intBuffer, data); break;\n      case 29: PackedIntsDecompress.decode29(intBuffer, data); break;\n      case 30: PackedIntsDecompress.decode30(intBuffer, data); break;\n      case 31: PackedIntsDecompress.decode31(intBuffer, data); break;\n      case 32: PackedIntsDecompress.decode32(intBuffer, data); break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8a5b726b57b22e5a983b2de19b1f1d10edbeaaa","date":1344355287,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#decompressCore(IntBuffer,int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#decompressCore(IntBuffer,int[],int).mjava","sourceNew":"  public static void decompressCore(IntBuffer intBuffer, int[] data, int numBits) {\n    switch(numBits) {\n      case 0: PackedIntsDecompress.decode0(intBuffer, data); break;\n      case 1: PackedIntsDecompress.decode1(intBuffer, data); break;\n      case 2: PackedIntsDecompress.decode2(intBuffer, data); break;\n      case 3: PackedIntsDecompress.decode3(intBuffer, data); break;\n      case 4: PackedIntsDecompress.decode4(intBuffer, data); break;\n      case 5: PackedIntsDecompress.decode5(intBuffer, data); break;\n      case 6: PackedIntsDecompress.decode6(intBuffer, data); break;\n      case 7: PackedIntsDecompress.decode7(intBuffer, data); break;\n      case 8: PackedIntsDecompress.decode8(intBuffer, data); break;\n      case 9: PackedIntsDecompress.decode9(intBuffer, data); break;\n      case 10: PackedIntsDecompress.decode10(intBuffer, data); break;\n      case 11: PackedIntsDecompress.decode11(intBuffer, data); break;\n      case 12: PackedIntsDecompress.decode12(intBuffer, data); break;\n      case 13: PackedIntsDecompress.decode13(intBuffer, data); break;\n      case 14: PackedIntsDecompress.decode14(intBuffer, data); break;\n      case 15: PackedIntsDecompress.decode15(intBuffer, data); break;\n      case 16: PackedIntsDecompress.decode16(intBuffer, data); break;\n      case 17: PackedIntsDecompress.decode17(intBuffer, data); break;\n      case 18: PackedIntsDecompress.decode18(intBuffer, data); break;\n      case 19: PackedIntsDecompress.decode19(intBuffer, data); break;\n      case 20: PackedIntsDecompress.decode20(intBuffer, data); break;\n      case 21: PackedIntsDecompress.decode21(intBuffer, data); break;\n      case 22: PackedIntsDecompress.decode22(intBuffer, data); break;\n      case 23: PackedIntsDecompress.decode23(intBuffer, data); break;\n      case 24: PackedIntsDecompress.decode24(intBuffer, data); break;\n      case 25: PackedIntsDecompress.decode25(intBuffer, data); break;\n      case 26: PackedIntsDecompress.decode26(intBuffer, data); break;\n      case 27: PackedIntsDecompress.decode27(intBuffer, data); break;\n      case 28: PackedIntsDecompress.decode28(intBuffer, data); break;\n      case 29: PackedIntsDecompress.decode29(intBuffer, data); break;\n      case 30: PackedIntsDecompress.decode30(intBuffer, data); break;\n      case 31: PackedIntsDecompress.decode31(intBuffer, data); break;\n      // nocommit have default throw exc?  or add assert up above\n    }\n  }\n\n","sourceOld":"  public static void decompressCore(IntBuffer intBuffer, int[] data, int numBits) {\n    switch(numBits) {\n      case 0: PackedIntsDecompress.decode0(intBuffer, data); break;\n      case 1: PackedIntsDecompress.decode1(intBuffer, data); break;\n      case 2: PackedIntsDecompress.decode2(intBuffer, data); break;\n      case 3: PackedIntsDecompress.decode3(intBuffer, data); break;\n      case 4: PackedIntsDecompress.decode4(intBuffer, data); break;\n      case 5: PackedIntsDecompress.decode5(intBuffer, data); break;\n      case 6: PackedIntsDecompress.decode6(intBuffer, data); break;\n      case 7: PackedIntsDecompress.decode7(intBuffer, data); break;\n      case 8: PackedIntsDecompress.decode8(intBuffer, data); break;\n      case 9: PackedIntsDecompress.decode9(intBuffer, data); break;\n      case 10: PackedIntsDecompress.decode10(intBuffer, data); break;\n      case 11: PackedIntsDecompress.decode11(intBuffer, data); break;\n      case 12: PackedIntsDecompress.decode12(intBuffer, data); break;\n      case 13: PackedIntsDecompress.decode13(intBuffer, data); break;\n      case 14: PackedIntsDecompress.decode14(intBuffer, data); break;\n      case 15: PackedIntsDecompress.decode15(intBuffer, data); break;\n      case 16: PackedIntsDecompress.decode16(intBuffer, data); break;\n      case 17: PackedIntsDecompress.decode17(intBuffer, data); break;\n      case 18: PackedIntsDecompress.decode18(intBuffer, data); break;\n      case 19: PackedIntsDecompress.decode19(intBuffer, data); break;\n      case 20: PackedIntsDecompress.decode20(intBuffer, data); break;\n      case 21: PackedIntsDecompress.decode21(intBuffer, data); break;\n      case 22: PackedIntsDecompress.decode22(intBuffer, data); break;\n      case 23: PackedIntsDecompress.decode23(intBuffer, data); break;\n      case 24: PackedIntsDecompress.decode24(intBuffer, data); break;\n      case 25: PackedIntsDecompress.decode25(intBuffer, data); break;\n      case 26: PackedIntsDecompress.decode26(intBuffer, data); break;\n      case 27: PackedIntsDecompress.decode27(intBuffer, data); break;\n      case 28: PackedIntsDecompress.decode28(intBuffer, data); break;\n      case 29: PackedIntsDecompress.decode29(intBuffer, data); break;\n      case 30: PackedIntsDecompress.decode30(intBuffer, data); break;\n      case 31: PackedIntsDecompress.decode31(intBuffer, data); break;\n      case 32: PackedIntsDecompress.decode32(intBuffer, data); break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#decompressCore(IntBuffer,int[],int).mjava","sourceNew":null,"sourceOld":"  public static void decompressCore(IntBuffer intBuffer, int[] data, int numBits) {\n    switch(numBits) {\n      case 0: PackedIntsDecompress.decode0(intBuffer, data); break;\n      case 1: PackedIntsDecompress.decode1(intBuffer, data); break;\n      case 2: PackedIntsDecompress.decode2(intBuffer, data); break;\n      case 3: PackedIntsDecompress.decode3(intBuffer, data); break;\n      case 4: PackedIntsDecompress.decode4(intBuffer, data); break;\n      case 5: PackedIntsDecompress.decode5(intBuffer, data); break;\n      case 6: PackedIntsDecompress.decode6(intBuffer, data); break;\n      case 7: PackedIntsDecompress.decode7(intBuffer, data); break;\n      case 8: PackedIntsDecompress.decode8(intBuffer, data); break;\n      case 9: PackedIntsDecompress.decode9(intBuffer, data); break;\n      case 10: PackedIntsDecompress.decode10(intBuffer, data); break;\n      case 11: PackedIntsDecompress.decode11(intBuffer, data); break;\n      case 12: PackedIntsDecompress.decode12(intBuffer, data); break;\n      case 13: PackedIntsDecompress.decode13(intBuffer, data); break;\n      case 14: PackedIntsDecompress.decode14(intBuffer, data); break;\n      case 15: PackedIntsDecompress.decode15(intBuffer, data); break;\n      case 16: PackedIntsDecompress.decode16(intBuffer, data); break;\n      case 17: PackedIntsDecompress.decode17(intBuffer, data); break;\n      case 18: PackedIntsDecompress.decode18(intBuffer, data); break;\n      case 19: PackedIntsDecompress.decode19(intBuffer, data); break;\n      case 20: PackedIntsDecompress.decode20(intBuffer, data); break;\n      case 21: PackedIntsDecompress.decode21(intBuffer, data); break;\n      case 22: PackedIntsDecompress.decode22(intBuffer, data); break;\n      case 23: PackedIntsDecompress.decode23(intBuffer, data); break;\n      case 24: PackedIntsDecompress.decode24(intBuffer, data); break;\n      case 25: PackedIntsDecompress.decode25(intBuffer, data); break;\n      case 26: PackedIntsDecompress.decode26(intBuffer, data); break;\n      case 27: PackedIntsDecompress.decode27(intBuffer, data); break;\n      case 28: PackedIntsDecompress.decode28(intBuffer, data); break;\n      case 29: PackedIntsDecompress.decode29(intBuffer, data); break;\n      case 30: PackedIntsDecompress.decode30(intBuffer, data); break;\n      case 31: PackedIntsDecompress.decode31(intBuffer, data); break;\n      // nocommit have default throw exc?  or add assert up above\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["8081d5018e8846bf4080f2809432c759996e749f"],"8081d5018e8846bf4080f2809432c759996e749f":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"f8a5b726b57b22e5a983b2de19b1f1d10edbeaaa":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["f8a5b726b57b22e5a983b2de19b1f1d10edbeaaa"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["8081d5018e8846bf4080f2809432c759996e749f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f8a5b726b57b22e5a983b2de19b1f1d10edbeaaa"],"8081d5018e8846bf4080f2809432c759996e749f":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"f8a5b726b57b22e5a983b2de19b1f1d10edbeaaa":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}