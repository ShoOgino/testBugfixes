{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query).mjava","commits":[{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query).mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query,Filter).mjava","sourceNew":"  void assertQuery(Query query) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query, Filter filter) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, filter, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query).mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query).mjava","sourceNew":"  void assertQuery(Query query) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, new Sort(ArrayUtil.copyOfSubArray(fields, 0, numSorts)));\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query).mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query).mjava","sourceNew":"  void assertQuery(Query query) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, new Sort(ArrayUtil.copyOfSubArray(fields, 0, numSorts)));\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query).mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#assertQuery(Query).mjava","sourceNew":"  void assertQuery(Query query) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, new Sort(ArrayUtil.copyOfSubArray(fields, 0, numSorts)));\n    }\n  }\n\n","sourceOld":"  void assertQuery(Query query) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      boolean reversed = random().nextBoolean();\n      SortField fields[] = new SortField[] {\n          new SortField(\"int\", SortField.Type.INT, reversed),\n          new SortField(\"long\", SortField.Type.LONG, reversed),\n          new SortField(\"float\", SortField.Type.FLOAT, reversed),\n          new SortField(\"double\", SortField.Type.DOUBLE, reversed),\n          new SortField(\"score\", SortField.Type.SCORE)\n      };\n      Collections.shuffle(Arrays.asList(fields), random());\n      int numSorts = TestUtil.nextInt(random(), 1, fields.length);\n      assertQuery(query, new Sort(Arrays.copyOfRange(fields, 0, numSorts)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}