{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a896b98a41875f2ad698c844cf3ce56e96b794d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a896b98a41875f2ad698c844cf3ce56e96b794d","date":1327803120,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4a0c306589f8607dc4b33f7abaf753db19f76e","date":1327836084,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221ff19d62d5ff429ffecf8e7f3e01ff93754854","date":1329974551,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4554426e0e7be4d464ecc9e7f67b9061670d0c05","date":1330305095,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ae7051bd9161fb49863393ff0ff8e94fbb3f77","date":1335279935,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      setupContainer(i, \"shard1\");\n    }\n    \n    setupContainer(3333, \"shard2\");\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    log.info(\"####SETUP_END \" + getName());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76d96297f37fa04293196671dc704d4feded94c2","date":1351523599,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper\" + System.currentTimeMillis() + \"/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52484c62b273b3e3509d2024098d10faff32575","date":1353381942,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper\" + System.currentTimeMillis() + \"/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper\" + System.currentTimeMillis() + \"/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper\" + System.currentTimeMillis() + \"/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"3000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper\" + System.currentTimeMillis() + \"/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper\" + System.currentTimeMillis() + \"/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper\" + System.currentTimeMillis() + \"/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    createTempDir();\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper\" + System.currentTimeMillis() + \"/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper\" + System.currentTimeMillis() + \"/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    configureCluster(6)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    configureCluster(6)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    configureCluster(6)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    ignoreException(\"No UpdateLog found - cannot sync\");\n    ignoreException(\"No UpdateLog found - cannot recover\");\n    \n    System.setProperty(\"zkClientTimeout\", \"8000\");\n    \n    zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n    AbstractZkTestCase.buildZooKeeper(zkServer.getZkHost(),\n        zkServer.getZkAddress(), \"solrconfig.xml\", \"schema.xml\");\n    \n    log.info(\"####SETUP_START \" + getTestName());\n    \n    // set some system properties for use by tests\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n    \n    for (int i = 7000; i < 7000 + NUM_SHARD_REPLICAS; i++) {\n      try {\n        setupContainer(i, \"shard1\");\n      } catch (Throwable t) {\n        log.error(\"!!!Could not start container:\" + i + \" The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n        fail(\"Could not start container:\" + i + \". Reason:\" + t.getClass() + \" \" + t.getMessage());\n      }\n    }\n    try {\n      setupContainer(3333, \"shard2\");\n    } catch (Throwable t) {\n      log.error(\"!!!Could not start container 3333. The exception thrown was: \" + t.getClass() + \" \" + t.getMessage());\n      fail(\"Could not start container: 3333\");\n    }\n    \n    zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n        \n    reader = new ZkStateReader(zkClient); \n    reader.createClusterStateWatchersAndUpdate();\n    boolean initSuccessful = false;\n    for (int i = 0; i < 30; i++) {\n      List<String> liveNodes = zkClient.getChildren(\"/live_nodes\", null, true);\n      if (liveNodes.size() == NUM_SHARD_REPLICAS + 1) {\n        // all nodes up\n        initSuccessful = true;\n        break;\n      }\n      Thread.sleep(1000);\n      log.info(\"Waiting for more nodes to come up, now: \" + liveNodes.size()\n          + \"/\" + (NUM_SHARD_REPLICAS + 1));\n    }\n    if (!initSuccessful) {\n      fail(\"Init was not successful!\");\n    }\n    log.info(\"####SETUP_END \" + getTestName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["e52484c62b273b3e3509d2024098d10faff32575"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["f4abec28b874149a7223e32cc7a01704c27790de"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["9a896b98a41875f2ad698c844cf3ce56e96b794d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["9a896b98a41875f2ad698c844cf3ce56e96b794d","4554426e0e7be4d464ecc9e7f67b9061670d0c05"],"52ae7051bd9161fb49863393ff0ff8e94fbb3f77":["4554426e0e7be4d464ecc9e7f67b9061670d0c05"],"76d96297f37fa04293196671dc704d4feded94c2":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"407687e67faf6e1f02a211ca078d8e3eed631027":["76d96297f37fa04293196671dc704d4feded94c2","e52484c62b273b3e3509d2024098d10faff32575"],"4554426e0e7be4d464ecc9e7f67b9061670d0c05":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9a896b98a41875f2ad698c844cf3ce56e96b794d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["f4abec28b874149a7223e32cc7a01704c27790de","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["f4abec28b874149a7223e32cc7a01704c27790de","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["52ae7051bd9161fb49863393ff0ff8e94fbb3f77"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["e52484c62b273b3e3509d2024098d10faff32575"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a896b98a41875f2ad698c844cf3ce56e96b794d":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52484c62b273b3e3509d2024098d10faff32575":["76d96297f37fa04293196671dc704d4feded94c2"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","9a896b98a41875f2ad698c844cf3ce56e96b794d"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["4554426e0e7be4d464ecc9e7f67b9061670d0c05"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"52ae7051bd9161fb49863393ff0ff8e94fbb3f77":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"76d96297f37fa04293196671dc704d4feded94c2":["407687e67faf6e1f02a211ca078d8e3eed631027","e52484c62b273b3e3509d2024098d10faff32575"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"4554426e0e7be4d464ecc9e7f67b9061670d0c05":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","52ae7051bd9161fb49863393ff0ff8e94fbb3f77"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"f4abec28b874149a7223e32cc7a01704c27790de":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["76d96297f37fa04293196671dc704d4feded94c2"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"9a896b98a41875f2ad698c844cf3ce56e96b794d":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","9a896b98a41875f2ad698c844cf3ce56e96b794d"],"e52484c62b273b3e3509d2024098d10faff32575":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","407687e67faf6e1f02a211ca078d8e3eed631027","1416f9d09d016a6894cd17e1caac137dad2bba59"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":[],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","fd92b8bcc88e969302510acf77bd6970da3994c4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","8f4a0c306589f8607dc4b33f7abaf753db19f76e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}