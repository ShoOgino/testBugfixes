{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testQueryStringEscaping().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testQueryStringEscaping().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testQueryStringEscaping().mjava","sourceNew":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","sourceOld":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testQueryStringEscaping().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testQueryStringEscaping().mjava","sourceNew":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","sourceOld":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testQueryStringEscaping().mjava","sourceNew":null,"sourceOld":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testQueryStringEscaping().mjava","sourceNew":null,"sourceOld":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testQueryStringEscaping().mjava","sourceNew":null,"sourceOld":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c7f8e68717c68517265937c911e1ce9f25750247","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["c7f8e68717c68517265937c911e1ce9f25750247","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["c7f8e68717c68517265937c911e1ce9f25750247"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c7f8e68717c68517265937c911e1ce9f25750247":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}