{"path":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","commits":[{"id":"3ee70799f6a87a250e98ce10a7bc3e28d41eac23","date":1242826192,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","pathOld":"/dev/null","sourceNew":"\tprotected String getValue(org.apache.lucene.document.Document doc,\n\t\t\tString field) {\n\t\tStringBuilder result = new StringBuilder();\n\t\tString[] vals = doc.getValues(field);\n\t\tfor (int i = 0; i < vals.length; i++) {\n\t\t\t// Join multiple values with a period so that Carrot2 does not pick up\n\t\t\t// phrases that cross field value boundaries (in most cases it would\n\t\t\t// create useless phrases).\n\t\t\tresult.append(vals[i]).append(\" . \");\n\t\t}\n\t\treturn result.toString().trim();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8","date":1246543717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","sourceNew":"  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":"\tprotected String getValue(org.apache.lucene.document.Document doc,\n\t\t\tString field) {\n\t\tStringBuilder result = new StringBuilder();\n\t\tString[] vals = doc.getValues(field);\n\t\tfor (int i = 0; i < vals.length; i++) {\n\t\t\t// Join multiple values with a period so that Carrot2 does not pick up\n\t\t\t// phrases that cross field value boundaries (in most cases it would\n\t\t\t// create useless phrases).\n\t\t\tresult.append(vals[i]).append(\" . \");\n\t\t}\n\t\treturn result.toString().trim();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getValue(org.apache.lucene.document.Document,String).mjava","sourceNew":"  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","sourceOld":"  protected String getValue(org.apache.lucene.document.Document doc,\n                            String field) {\n    StringBuilder result = new StringBuilder();\n    String[] vals = doc.getValues(field);\n    for (int i = 0; i < vals.length; i++) {\n      // Join multiple values with a period so that Carrot2 does not pick up\n      // phrases that cross field value boundaries (in most cases it would\n      // create useless phrases).\n      result.append(vals[i]).append(\" . \");\n    }\n    return result.toString().trim();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3ee70799f6a87a250e98ce10a7bc3e28d41eac23":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3ee70799f6a87a250e98ce10a7bc3e28d41eac23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}