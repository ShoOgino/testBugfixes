{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            if (zk != null) zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            if (zk != null) zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            if (zk != null) zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException | TimeoutException | IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            if (zk != null) zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout, zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (KeeperException e) {\n            zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            if (zk != null) zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException | TimeoutException | IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    stateProvider.connect();\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout, zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (KeeperException e) {\n            zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    stateProvider.connect();\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout, zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (KeeperException e) {\n            zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   */\n  public void connect() {\n    getClusterStateProvider().connect();\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    stateProvider.connect();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["bafca15d8e408346a67f4282ad1143b88023893b"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"727bb765ff2542275f6d31f67be18d7104bae148":["6c8a2521797f14d1d697a17a0069f5619cd211a6","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["727bb765ff2542275f6d31f67be18d7104bae148","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["0544142c22eb88b6d8b3817f2e1190156aa4f9af","727bb765ff2542275f6d31f67be18d7104bae148"],"bafca15d8e408346a67f4282ad1143b88023893b":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}