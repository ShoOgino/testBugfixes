{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","commits":[{"id":"7d7cf463e12b13965d63f133adc46a1c673d0c4e","date":1509636749,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"foo\").size());\n    TestEvent ev = listenerEvents.get(\"foo\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) < now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fd06ecad11382d5e22750492518d05942405fb07"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4450528f86982f38cda0ddd6acb2ac272c8bd369","date":1509640513,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    TestEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) < now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"foo\").size());\n    TestEvent ev = listenerEvents.get(\"foo\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) < now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd06ecad11382d5e22750492518d05942405fb07","date":1510136235,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    TestEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    TestEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) < now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n  }\n\n","bugFix":["7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    TestEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    TestEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  //@AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  //@AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n    assertEquals(listenerEvents.toString(), 1, listenerEvents.get(\"srt\").size());\n    CapturedEvent ev = listenerEvents.get(\"srt\").get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4624ee88a6e7d17a5e20658636e85fe945ca9968","date":1519418966,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  //Commented out 24-Jan-2018\n  //@AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  //@AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  //Commented out 24-Jan-2018\n  //@AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11714\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5aafdd1bebcab8e3b8107db6700fc679b16cc58","date":1519934338,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTime();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["4624ee88a6e7d17a5e20658636e85fe945ca9968"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd06ecad11382d5e22750492518d05942405fb07"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","d9ccfe45460d496c5e5e1b70396521dac842d966"],"fd06ecad11382d5e22750492518d05942405fb07":["4450528f86982f38cda0ddd6acb2ac272c8bd369"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["a5aafdd1bebcab8e3b8107db6700fc679b16cc58"],"4624ee88a6e7d17a5e20658636e85fe945ca9968":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["d4412883c12067d8a4e2a354aa8adc58c32be1d6","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"4450528f86982f38cda0ddd6acb2ac272c8bd369":["7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a5aafdd1bebcab8e3b8107db6700fc679b16cc58":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["a5aafdd1bebcab8e3b8107db6700fc679b16cc58"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"7d7cf463e12b13965d63f133adc46a1c673d0c4e":["4450528f86982f38cda0ddd6acb2ac272c8bd369"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["4624ee88a6e7d17a5e20658636e85fe945ca9968"],"fd06ecad11382d5e22750492518d05942405fb07":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","7d7cf463e12b13965d63f133adc46a1c673d0c4e"],"4624ee88a6e7d17a5e20658636e85fe945ca9968":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4450528f86982f38cda0ddd6acb2ac272c8bd369":["fd06ecad11382d5e22750492518d05942405fb07"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"a5aafdd1bebcab8e3b8107db6700fc679b16cc58":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}