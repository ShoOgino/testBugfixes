{"path":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean,int).mjava","commits":[{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsambles which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, termInfosIndexDivisor);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["81cc37e458a3bdbe82fc7b807a5d1a59b06f9191"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsambles which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(IndexCommit,IndexDeletionPolicy,boolean,int).mjava","sourceNew":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, termInfosIndexDivisor);\n  }\n\n","sourceOld":"  /** Expert: returns an IndexReader reading the index in\n   *  the given Directory, using a specific commit and with\n   *  a custom {@link IndexDeletionPolicy}.  You should pass\n   *  readOnly=true, since it gives much better concurrent\n   *  performance, unless you intend to do write operations\n   *  (delete documents or change norms) with the reader.\n   * @param commit the specific {@link IndexCommit} to open;\n   * see {@link IndexReader#listCommits} to list all commits\n   * in a directory\n   * @param deletionPolicy a custom deletion policy (only used\n   *  if you use this reader to perform deletes or to set\n   *  norms); see {@link IndexWriter} for details.\n   * @param readOnly true if no changes (deletions, norms) will be made with this IndexReader\n   * @param termInfosIndexDivisor Subsamples which indexed\n   *  terms are loaded into RAM. This has the same effect as {@link\n   *  IndexWriter#setTermIndexInterval} except that setting\n   *  must be done at indexing time while this setting can be\n   *  set per reader.  When set to N, then one in every\n   *  N*termIndexInterval terms in the index is loaded into\n   *  memory.  By setting this to a value > 1 you can reduce\n   *  memory usage, at the expense of higher latency when\n   *  loading a TermInfo.  The default value is 1.  Set this\n   *  to -1 to skip loading the terms index entirely.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(final IndexCommit commit, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return open(commit.getDirectory(), deletionPolicy, commit, readOnly, termInfosIndexDivisor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"961159f13aece73fbb30aea720e77a2237e8bafd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["961159f13aece73fbb30aea720e77a2237e8bafd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"]},"commit2Childs":{"961159f13aece73fbb30aea720e77a2237e8bafd":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["961159f13aece73fbb30aea720e77a2237e8bafd"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}