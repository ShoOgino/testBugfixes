{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMultiValuedRandom1().mjava","commits":[{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMultiValuedRandom1().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValuedRandom1() throws IOException {\n    boolean withDeletes = random().nextBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortedNumericSortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(1000);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int num = random().nextInt(10);\n      for (int j = 0; j < num; j++) {\n        doc.add(new SortedNumericDocValuesField(\"foo\", random().nextInt(2000)));\n      }\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    DirectoryReader reader = w.getReader();\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        NumericDocValues values = MultiDocValues.getNumericValues(reader, \"id\");\n        assertEquals(topDocs.scoreDocs[0].doc, values.advance(topDocs.scoreDocs[0].doc));\n        assertEquals(i, values.longValue());\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMultiValuedRandom1().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValuedRandom1() throws IOException {\n    boolean withDeletes = random().nextBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortedNumericSortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(1000);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int num = random().nextInt(10);\n      for (int j = 0; j < num; j++) {\n        doc.add(new SortedNumericDocValuesField(\"foo\", random().nextInt(2000)));\n      }\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    DirectoryReader reader = w.getReader();\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        NumericDocValues values = MultiDocValues.getNumericValues(reader, \"id\");\n        assertEquals(topDocs.scoreDocs[0].doc, values.advance(topDocs.scoreDocs[0].doc));\n        assertEquals(i, values.longValue());\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMultiValuedRandom1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMultiValuedRandom1().mjava","sourceNew":"  public void testMultiValuedRandom1() throws IOException {\n    boolean withDeletes = random().nextBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortedNumericSortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(1000);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int num = random().nextInt(10);\n      for (int j = 0; j < num; j++) {\n        doc.add(new SortedNumericDocValuesField(\"foo\", random().nextInt(2000)));\n      }\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    DirectoryReader reader = w.getReader();\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits.value);\n      } else {\n        assertEquals(1, topDocs.totalHits.value);\n        NumericDocValues values = MultiDocValues.getNumericValues(reader, \"id\");\n        assertEquals(topDocs.scoreDocs[0].doc, values.advance(topDocs.scoreDocs[0].doc));\n        assertEquals(i, values.longValue());\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValuedRandom1() throws IOException {\n    boolean withDeletes = random().nextBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortedNumericSortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(1000);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int num = random().nextInt(10);\n      for (int j = 0; j < num; j++) {\n        doc.add(new SortedNumericDocValuesField(\"foo\", random().nextInt(2000)));\n      }\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    DirectoryReader reader = w.getReader();\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        NumericDocValues values = MultiDocValues.getNumericValues(reader, \"id\");\n        assertEquals(topDocs.scoreDocs[0].doc, values.advance(topDocs.scoreDocs[0].doc));\n        assertEquals(i, values.longValue());\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMultiValuedRandom1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMultiValuedRandom1().mjava","sourceNew":"  public void testMultiValuedRandom1() throws IOException {\n    boolean withDeletes = random().nextBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortedNumericSortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(200);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int num = random().nextInt(10);\n      for (int j = 0; j < num; j++) {\n        doc.add(new SortedNumericDocValuesField(\"foo\", random().nextInt(2000)));\n      }\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    DirectoryReader reader = w.getReader();\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits.value);\n      } else {\n        assertEquals(1, topDocs.totalHits.value);\n        NumericDocValues values = MultiDocValues.getNumericValues(reader, \"id\");\n        assertEquals(topDocs.scoreDocs[0].doc, values.advance(topDocs.scoreDocs[0].doc));\n        assertEquals(i, values.longValue());\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValuedRandom1() throws IOException {\n    boolean withDeletes = random().nextBoolean();\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortedNumericSortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(1000);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int num = random().nextInt(10);\n      for (int j = 0; j < num; j++) {\n        doc.add(new SortedNumericDocValuesField(\"foo\", random().nextInt(2000)));\n      }\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    DirectoryReader reader = w.getReader();\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits.value);\n      } else {\n        assertEquals(1, topDocs.totalHits.value);\n        NumericDocValues values = MultiDocValues.getNumericValues(reader, \"id\");\n        assertEquals(topDocs.scoreDocs[0].doc, values.advance(topDocs.scoreDocs[0].doc));\n        assertEquals(i, values.longValue());\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}