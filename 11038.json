{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","commits":[{"id":"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","date":1358522034,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene41DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene41DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene41DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene41SimpleDocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene41SimpleDocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene41SimpleDocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene41DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene41DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene41DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f"],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":[],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}