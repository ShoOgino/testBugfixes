{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap).mjava","pathOld":"/dev/null","sourceNew":"  public void mergeBucket(SimpleOrderedMap bucket) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap).mjava","pathOld":"/dev/null","sourceNew":"  public void mergeBucket(SimpleOrderedMap bucket) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbadd4a153af2e36785fa5c682db5321cec90789","date":1432157571,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap,FacetMerger.Context).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetBucket[FacetModule]#mergeBucket(SimpleOrderedMap).mjava","sourceNew":"  public void mergeBucket(SimpleOrderedMap bucket, FacetMerger.Context mcontext) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val , mcontext );\n      }\n    }\n  }\n\n","sourceOld":"  public void mergeBucket(SimpleOrderedMap bucket) {\n    // todo: for refinements, we want to recurse, but not re-do stats for intermediate buckets\n\n    // drive merging off the received bucket?\n    for (int i=0; i<bucket.size(); i++) {\n      String key = bucket.getName(i);\n      Object val = bucket.getVal(i);\n      if (\"count\".equals(key)) {\n        count += ((Number)val).longValue();\n        continue;\n      }\n      if (\"val\".equals(key)) {\n        // this is taken care of at a higher level...\n        continue;\n      }\n\n      FacetMerger merger = getMerger(key, val);\n\n      if (merger != null) {\n        merger.merge( val );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bbadd4a153af2e36785fa5c682db5321cec90789":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bbadd4a153af2e36785fa5c682db5321cec90789"]},"commit2Childs":{"bbadd4a153af2e36785fa5c682db5321cec90789":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["bbadd4a153af2e36785fa5c682db5321cec90789","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}