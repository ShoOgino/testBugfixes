{"path":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#map(RandomAccessFile,long,long).mjava","commits":[{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#map(RandomAccessFile,long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Maps a file into a set of buffers */\n  ByteBuffer[] map(RandomAccessFile raf, long offset, long length) throws IOException {\n    if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + raf.toString());\n    \n    final long chunkSize = 1L << chunkSizePower;\n    \n    // we always allocate one more buffer, the last one may be a 0 byte one\n    final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n    \n    ByteBuffer buffers[] = new ByteBuffer[nrBuffers];\n    \n    long bufferStart = 0L;\n    FileChannel rafc = raf.getChannel();\n    for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n      int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n              : (length - bufferStart)\n          );\n      buffers[bufNr] = rafc.map(MapMode.READ_ONLY, offset + bufferStart, bufSize);\n      bufferStart += bufSize;\n    }\n    \n    return buffers;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7be25195304fffb0961b22414915e675ac3c9f6","date":1363889959,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#map(FileChannel,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#map(RandomAccessFile,long,long).mjava","sourceNew":"  /** Maps a file into a set of buffers */\n  ByteBuffer[] map(FileChannel fc, long offset, long length) throws IOException {\n    if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + fc.toString());\n    \n    final long chunkSize = 1L << chunkSizePower;\n    \n    // we always allocate one more buffer, the last one may be a 0 byte one\n    final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n    \n    ByteBuffer buffers[] = new ByteBuffer[nrBuffers];\n    \n    long bufferStart = 0L;\n    for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n      int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n              : (length - bufferStart)\n          );\n      buffers[bufNr] = fc.map(MapMode.READ_ONLY, offset + bufferStart, bufSize);\n      bufferStart += bufSize;\n    }\n    \n    return buffers;\n  }\n\n","sourceOld":"  /** Maps a file into a set of buffers */\n  ByteBuffer[] map(RandomAccessFile raf, long offset, long length) throws IOException {\n    if ((length >>> chunkSizePower) >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"RandomAccessFile too big for chunk size: \" + raf.toString());\n    \n    final long chunkSize = 1L << chunkSizePower;\n    \n    // we always allocate one more buffer, the last one may be a 0 byte one\n    final int nrBuffers = (int) (length >>> chunkSizePower) + 1;\n    \n    ByteBuffer buffers[] = new ByteBuffer[nrBuffers];\n    \n    long bufferStart = 0L;\n    FileChannel rafc = raf.getChannel();\n    for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n      int bufSize = (int) ( (length > (bufferStart + chunkSize))\n          ? chunkSize\n              : (length - bufferStart)\n          );\n      buffers[bufNr] = rafc.map(MapMode.READ_ONLY, offset + bufferStart, bufSize);\n      bufferStart += bufSize;\n    }\n    \n    return buffers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7be25195304fffb0961b22414915e675ac3c9f6":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7be25195304fffb0961b22414915e675ac3c9f6"]},"commit2Childs":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["c7be25195304fffb0961b22414915e675ac3c9f6"],"c7be25195304fffb0961b22414915e675ac3c9f6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}