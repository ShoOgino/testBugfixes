{"path":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#train(AtomicReader,String,String,Analyzer).mjava","commits":[{"id":"45ae8f6354b0826d27014deff71fe330604a9783","date":1378195819,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#train(AtomicReader,String,String,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName,\n      String classFieldName, Analyzer analyzer) throws IOException {\n    this.textTerms = MultiFields.getTerms(atomicReader, textFieldName);\n\n    if (textTerms == null) {\n      throw new IOException(new StringBuilder(\n          \"term vectors need to be available for field \").append(textFieldName)\n          .toString());\n    }\n\n    this.analyzer = analyzer;\n    this.textFieldName = textFieldName;\n\n    if (threshold == null || threshold == 0d) {\n      // automatic assign a threshold\n      long sumDocFreq = atomicReader.getSumDocFreq(textFieldName);\n      if (sumDocFreq != -1) {\n        this.threshold = (double) sumDocFreq / 2d;\n      } else {\n        throw new IOException(\n            \"threshold cannot be assigned since term vectors for field \"\n                + textFieldName + \" do not exist\");\n      }\n    }\n\n    // TODO : remove this map as soon as we have a writable FST\n    SortedMap<String,Double> weights = new TreeMap<>();\n\n    TermsEnum reuse = textTerms.iterator(null);\n    BytesRef textTerm;\n    while ((textTerm = reuse.next()) != null) {\n      weights.put(textTerm.utf8ToString(), (double) reuse.totalTermFreq());\n    }\n    updateFST(weights);\n\n    IndexSearcher indexSearcher = new IndexSearcher(atomicReader);\n\n    int batchCount = 0;\n\n    // do a *:* search and use stored field values\n    for (ScoreDoc scoreDoc : indexSearcher.search(new MatchAllDocsQuery(),\n        Integer.MAX_VALUE).scoreDocs) {\n      StoredDocument doc = indexSearcher.doc(scoreDoc.doc);\n\n      // assign class to the doc\n      ClassificationResult<Boolean> classificationResult = assignClass(doc\n          .getField(textFieldName).stringValue());\n      Boolean assignedClass = classificationResult.getAssignedClass();\n      \n      // get the expected result\n      StorableField field = doc.getField(classFieldName);\n      \n      Boolean correctClass = Boolean.valueOf(field.stringValue());\n      long modifier = correctClass.compareTo(assignedClass);\n      if (modifier != 0) {\n        reuse = updateWeights(atomicReader, reuse, scoreDoc.doc, assignedClass,\n            weights, modifier, batchCount % batchSize == 0);\n      }\n      batchCount++;\n    }\n    weights.clear(); // free memory while waiting for GC\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","date":1381993379,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#train(AtomicReader,String,String,Analyzer).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#train(AtomicReader,String,String,Analyzer).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName,\n                    String classFieldName, Analyzer analyzer) throws IOException {\n    train(atomicReader, textFieldName, classFieldName, analyzer, null);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName,\n      String classFieldName, Analyzer analyzer) throws IOException {\n    this.textTerms = MultiFields.getTerms(atomicReader, textFieldName);\n\n    if (textTerms == null) {\n      throw new IOException(new StringBuilder(\n          \"term vectors need to be available for field \").append(textFieldName)\n          .toString());\n    }\n\n    this.analyzer = analyzer;\n    this.textFieldName = textFieldName;\n\n    if (threshold == null || threshold == 0d) {\n      // automatic assign a threshold\n      long sumDocFreq = atomicReader.getSumDocFreq(textFieldName);\n      if (sumDocFreq != -1) {\n        this.threshold = (double) sumDocFreq / 2d;\n      } else {\n        throw new IOException(\n            \"threshold cannot be assigned since term vectors for field \"\n                + textFieldName + \" do not exist\");\n      }\n    }\n\n    // TODO : remove this map as soon as we have a writable FST\n    SortedMap<String,Double> weights = new TreeMap<>();\n\n    TermsEnum reuse = textTerms.iterator(null);\n    BytesRef textTerm;\n    while ((textTerm = reuse.next()) != null) {\n      weights.put(textTerm.utf8ToString(), (double) reuse.totalTermFreq());\n    }\n    updateFST(weights);\n\n    IndexSearcher indexSearcher = new IndexSearcher(atomicReader);\n\n    int batchCount = 0;\n\n    // do a *:* search and use stored field values\n    for (ScoreDoc scoreDoc : indexSearcher.search(new MatchAllDocsQuery(),\n        Integer.MAX_VALUE).scoreDocs) {\n      StoredDocument doc = indexSearcher.doc(scoreDoc.doc);\n\n      // assign class to the doc\n      ClassificationResult<Boolean> classificationResult = assignClass(doc\n          .getField(textFieldName).stringValue());\n      Boolean assignedClass = classificationResult.getAssignedClass();\n      \n      // get the expected result\n      StorableField field = doc.getField(classFieldName);\n      \n      Boolean correctClass = Boolean.valueOf(field.stringValue());\n      long modifier = correctClass.compareTo(assignedClass);\n      if (modifier != 0) {\n        reuse = updateWeights(atomicReader, reuse, scoreDoc.doc, assignedClass,\n            weights, modifier, batchCount % batchSize == 0);\n      }\n      batchCount++;\n    }\n    weights.clear(); // free memory while waiting for GC\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#train(AtomicReader,String,String,Analyzer).mjava","sourceNew":null,"sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName,\n                    String classFieldName, Analyzer analyzer) throws IOException {\n    train(atomicReader, textFieldName, classFieldName, analyzer, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["45ae8f6354b0826d27014deff71fe330604a9783"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"45ae8f6354b0826d27014deff71fe330604a9783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ae8f6354b0826d27014deff71fe330604a9783"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45ae8f6354b0826d27014deff71fe330604a9783":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}