{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.Builder#finish().mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.Builder#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton.Builder#finish().mjava","sourceNew":"    public Automaton finish() {\n      //System.out.println(\"LA.Builder.finish: count=\" + (nextTransition/4));\n      // nocommit: we could make this more efficient,\n      // e.g. somehow xfer the int[] to the automaton, or\n      // alloc exactly the right size from the automaton\n      //System.out.println(\"finish pending\");\n      sorter.sort(0, nextTransition/4);\n      int upto = 0;\n      while (upto < nextTransition) {\n        a.addTransition(transitions[upto],\n                        transitions[upto+1],\n                        transitions[upto+2],\n                        transitions[upto+3]);\n        upto += 4;\n      }\n\n      a.finishState();\n      return a;\n    }\n\n","sourceOld":"    public LightAutomaton finish() {\n      //System.out.println(\"LA.Builder.finish: count=\" + (nextTransition/4));\n      // nocommit: we could make this more efficient,\n      // e.g. somehow xfer the int[] to the automaton, or\n      // alloc exactly the right size from the automaton\n      //System.out.println(\"finish pending\");\n      sorter.sort(0, nextTransition/4);\n      int upto = 0;\n      while (upto < nextTransition) {\n        a.addTransition(transitions[upto],\n                        transitions[upto+1],\n                        transitions[upto+2],\n                        transitions[upto+3]);\n        upto += 4;\n      }\n\n      a.finishState();\n      return a;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.Builder#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.Builder#finish().mjava","sourceNew":"    /** Compiles all added states and transitions into a new {@code Automaton}\n     *  and returns it. */\n    public Automaton finish() {\n      //System.out.println(\"LA.Builder.finish: count=\" + (nextTransition/4));\n      // TODO: we could make this more efficient,\n      // e.g. somehow xfer the int[] to the automaton, or\n      // alloc exactly the right size from the automaton\n      //System.out.println(\"finish pending\");\n      sorter.sort(0, nextTransition/4);\n      int upto = 0;\n      while (upto < nextTransition) {\n        a.addTransition(transitions[upto],\n                        transitions[upto+1],\n                        transitions[upto+2],\n                        transitions[upto+3]);\n        upto += 4;\n      }\n\n      a.finishState();\n      return a;\n    }\n\n","sourceOld":"    public Automaton finish() {\n      //System.out.println(\"LA.Builder.finish: count=\" + (nextTransition/4));\n      // nocommit: we could make this more efficient,\n      // e.g. somehow xfer the int[] to the automaton, or\n      // alloc exactly the right size from the automaton\n      //System.out.println(\"finish pending\");\n      sorter.sort(0, nextTransition/4);\n      int upto = 0;\n      while (upto < nextTransition) {\n        a.addTransition(transitions[upto],\n                        transitions[upto+1],\n                        transitions[upto+2],\n                        transitions[upto+3]);\n        upto += 4;\n      }\n\n      a.finishState();\n      return a;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.Builder#finish().mjava","pathOld":"/dev/null","sourceNew":"    /** Compiles all added states and transitions into a new {@code Automaton}\n     *  and returns it. */\n    public Automaton finish() {\n      //System.out.println(\"LA.Builder.finish: count=\" + (nextTransition/4));\n      // TODO: we could make this more efficient,\n      // e.g. somehow xfer the int[] to the automaton, or\n      // alloc exactly the right size from the automaton\n      //System.out.println(\"finish pending\");\n      sorter.sort(0, nextTransition/4);\n      int upto = 0;\n      while (upto < nextTransition) {\n        a.addTransition(transitions[upto],\n                        transitions[upto+1],\n                        transitions[upto+2],\n                        transitions[upto+3]);\n        upto += 4;\n      }\n\n      a.finishState();\n      return a;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"449c2b8eb83ba3f319bc9a01bbe34af590f2c8c8","date":1411051409,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.Builder#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton.Builder#finish().mjava","sourceNew":"    /** Compiles all added states and transitions into a new {@code Automaton}\n     *  and returns it. */\n    public Automaton finish() {\n      // Create automaton with the correct size.\n      int numStates = nextState;\n      int numTransitions = nextTransition / 4;\n      Automaton a = new Automaton(numStates, numTransitions);\n      \n      // Create all states.\n      for (int state = 0; state < numStates; state++) {\n         a.createState();\n         a.setAccept(state, isAccept(state));\n      }\n      \n      // Create all transitions\n      sorter.sort(0, numTransitions);\n      for (int upto = 0; upto < nextTransition; upto += 4) {\n        a.addTransition(transitions[upto],\n                        transitions[upto+1],\n                        transitions[upto+2],\n                        transitions[upto+3]);\n      }\n\n      a.finishState();\n      \n      return a;\n    }\n\n","sourceOld":"    /** Compiles all added states and transitions into a new {@code Automaton}\n     *  and returns it. */\n    public Automaton finish() {\n      //System.out.println(\"LA.Builder.finish: count=\" + (nextTransition/4));\n      // TODO: we could make this more efficient,\n      // e.g. somehow xfer the int[] to the automaton, or\n      // alloc exactly the right size from the automaton\n      //System.out.println(\"finish pending\");\n      sorter.sort(0, nextTransition/4);\n      int upto = 0;\n      while (upto < nextTransition) {\n        a.addTransition(transitions[upto],\n                        transitions[upto+1],\n                        transitions[upto+2],\n                        transitions[upto+3]);\n        upto += 4;\n      }\n\n      a.finishState();\n      return a;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"449c2b8eb83ba3f319bc9a01bbe34af590f2c8c8":["5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["449c2b8eb83ba3f319bc9a01bbe34af590f2c8c8"]},"commit2Childs":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"449c2b8eb83ba3f319bc9a01bbe34af590f2c8c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["449c2b8eb83ba3f319bc9a01bbe34af590f2c8c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}