{"path":"lucene/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","pathOld":"src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","sourceNew":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","sourceOld":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","sourceNew":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            fieldsData = b;\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","sourceOld":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"371bbd52cb908c7640086aa3aec5880542b81060","date":1277991686,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","sourceNew":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n          if (cacheResult == true){\n            fieldsData = b;\n          }\n          return b;\n        } else {\n          return (byte[]) fieldsData;\n        }\n      } else\n        return null;     \n    }\n\n","sourceOld":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            fieldsData = b;\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","sourceNew":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n          if (cacheResult == true){\n            fieldsData = b;\n          }\n          return b;\n        } else {\n          return (byte[]) fieldsData;\n        }\n      } else\n        return null;     \n    }\n\n","sourceOld":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            fieldsData = b;\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor.LazyField#binaryValue().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","sourceNew":"    @Override\n    synchronized public BytesRef binaryValue() {\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b = new byte[toRead];\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          final BytesRef result = new BytesRef(b);\n          result.length = toRead;\n          if (cacheResult == true){\n            fieldsData = result;\n          }\n          return result;\n        } else {\n          return (BytesRef) fieldsData;\n        }\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n          if (cacheResult == true){\n            fieldsData = b;\n          }\n          return b;\n        } else {\n          return (byte[]) fieldsData;\n        }\n      } else\n        return null;     \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6267e1ce56c2eec111425690cd04e251b6f14952":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"371bbd52cb908c7640086aa3aec5880542b81060":["6267e1ce56c2eec111425690cd04e251b6f14952"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","371bbd52cb908c7640086aa3aec5880542b81060"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["371bbd52cb908c7640086aa3aec5880542b81060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6267e1ce56c2eec111425690cd04e251b6f14952":["371bbd52cb908c7640086aa3aec5880542b81060","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"371bbd52cb908c7640086aa3aec5880542b81060":["5f4e87790277826a2aea119328600dfb07761f32","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"5f4e87790277826a2aea119328600dfb07761f32":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}