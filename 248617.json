{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership,Plane,Membership,Membership).mjava","commits":[{"id":"d564e0296db7f80d73dd62b17710f61c85f38c50","date":1523483630,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership,Plane,Membership,Membership).mjava","pathOld":"/dev/null","sourceNew":"    /** Find the intersections with a pair of envelope planes, and assess those intersections for duplication and for\n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane travelEnvelopePlane, final Membership travelEnvelopeBound1, final Membership travelEnvelopeBound2,\n      final Plane testPointEnvelopePlane, final Membership testPointEnvelopeBound1, final Membership testPointEnvelopeBound2) {\n      final GeoPoint[] travelIntersections = edge.plane.findIntersections(planetModel, travelEnvelopePlane, edge.startPlane, edge.endPlane, travelEnvelopeBound1, travelEnvelopeBound2);\n      final GeoPoint[] testPointIntersections = edge.plane.findIntersections(planetModel, testPointEnvelopePlane, edge.startPlane, edge.endPlane, testPointEnvelopeBound1, testPointEnvelopeBound2);\n      int crossings = 0;\n      if (travelIntersections != null) {\n        for (final GeoPoint intersection : travelIntersections) {\n          // Make sure it's not a dup\n          boolean notDup = true;\n          if (testPointIntersections != null) {\n            for (final GeoPoint otherIntersection : testPointIntersections) {\n              if (intersection.isNumericallyIdentical(otherIntersection)) {\n                notDup = false;\n                break;\n              }\n            }\n          }\n          if (!notDup) {\n            continue;\n          }\n          // It's unique, so assess it\n          //System.out.println(\"  Assessing travel intersection point \"+intersection+\"...\");\n          crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n        }\n      }\n      if (testPointIntersections != null) {\n        for (final GeoPoint intersection : testPointIntersections) {\n          // It's unique, so assess it\n          //System.out.println(\"  Assessing testpoint intersection point \"+intersection+\"...\");\n          crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n        }\n      }\n      return crossings;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e872ee16caf3bf386b6a55f3654fabb2840d8fc9","date":1523529572,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership,Plane,Membership,Membership).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership,Plane,Membership,Membership).mjava","sourceNew":"    /** Find the intersections with a pair of envelope planes, and assess those intersections for duplication and for\n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane travelEnvelopePlane, final Membership travelEnvelopeBound1, final Membership travelEnvelopeBound2,\n      final Plane testPointEnvelopePlane, final Membership testPointEnvelopeBound1, final Membership testPointEnvelopeBound2) {\n      final GeoPoint[] travelIntersections = edge.plane.findIntersections(planetModel, travelEnvelopePlane, edge.startPlane, edge.endPlane, travelEnvelopeBound1, travelEnvelopeBound2);\n      final GeoPoint[] testPointIntersections = edge.plane.findIntersections(planetModel, testPointEnvelopePlane, edge.startPlane, edge.endPlane, testPointEnvelopeBound1, testPointEnvelopeBound2);\n      int crossings = 0;\n      if (travelIntersections != null) {\n        for (final GeoPoint intersection : travelIntersections) {\n          // Make sure it's not a dup\n          boolean notDup = true;\n          if (testPointIntersections != null) {\n            for (final GeoPoint otherIntersection : testPointIntersections) {\n              if (intersection.isNumericallyIdentical(otherIntersection)) {\n                //System.out.println(\"  Points \"+intersection+\" and \"+otherIntersection+\" are duplicates\");\n                notDup = false;\n                break;\n              }\n            }\n          }\n          if (!notDup) {\n            continue;\n          }\n          // It's unique, so assess it\n          //System.out.println(\"  Assessing travel envelope intersection point \"+intersection+\"...\");\n          crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n        }\n      }\n      if (testPointIntersections != null) {\n        for (final GeoPoint intersection : testPointIntersections) {\n          // It's unique, so assess it\n          //System.out.println(\"  Assessing testpoint envelope intersection point \"+intersection+\"...\");\n          crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n        }\n      }\n      return crossings;\n    }\n\n","sourceOld":"    /** Find the intersections with a pair of envelope planes, and assess those intersections for duplication and for\n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane travelEnvelopePlane, final Membership travelEnvelopeBound1, final Membership travelEnvelopeBound2,\n      final Plane testPointEnvelopePlane, final Membership testPointEnvelopeBound1, final Membership testPointEnvelopeBound2) {\n      final GeoPoint[] travelIntersections = edge.plane.findIntersections(planetModel, travelEnvelopePlane, edge.startPlane, edge.endPlane, travelEnvelopeBound1, travelEnvelopeBound2);\n      final GeoPoint[] testPointIntersections = edge.plane.findIntersections(planetModel, testPointEnvelopePlane, edge.startPlane, edge.endPlane, testPointEnvelopeBound1, testPointEnvelopeBound2);\n      int crossings = 0;\n      if (travelIntersections != null) {\n        for (final GeoPoint intersection : travelIntersections) {\n          // Make sure it's not a dup\n          boolean notDup = true;\n          if (testPointIntersections != null) {\n            for (final GeoPoint otherIntersection : testPointIntersections) {\n              if (intersection.isNumericallyIdentical(otherIntersection)) {\n                notDup = false;\n                break;\n              }\n            }\n          }\n          if (!notDup) {\n            continue;\n          }\n          // It's unique, so assess it\n          //System.out.println(\"  Assessing travel intersection point \"+intersection+\"...\");\n          crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n        }\n      }\n      if (testPointIntersections != null) {\n        for (final GeoPoint intersection : testPointIntersections) {\n          // It's unique, so assess it\n          //System.out.println(\"  Assessing testpoint intersection point \"+intersection+\"...\");\n          crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n        }\n      }\n      return crossings;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd56d07f4412123997b4b19dfcd68d39aa5b4acd","date":1523531331,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership,Plane,Membership,Membership).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership,Plane,Membership,Membership).mjava","sourceNew":"    /** Find the intersections with a pair of envelope planes, and assess those intersections for duplication and for\n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane travelEnvelopePlane, final Membership travelEnvelopeBound1, final Membership travelEnvelopeBound2,\n      final Plane testPointEnvelopePlane, final Membership testPointEnvelopeBound1, final Membership testPointEnvelopeBound2) {\n      final GeoPoint[] travelIntersections = edge.plane.findIntersections(planetModel, travelEnvelopePlane, travelEnvelopeBound1, travelEnvelopeBound2);\n      final GeoPoint[] testPointIntersections = edge.plane.findIntersections(planetModel, testPointEnvelopePlane, testPointEnvelopeBound1, testPointEnvelopeBound2);\n      int crossings = 0;\n      if (travelIntersections != null) {\n        for (final GeoPoint intersection : travelIntersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // Make sure it's not a dup\n            boolean notDup = true;\n            if (testPointIntersections != null) {\n              for (final GeoPoint otherIntersection : testPointIntersections) {\n                if (edge.startPlane.strictlyWithin(otherIntersection) && edge.endPlane.strictlyWithin(otherIntersection) && intersection.isNumericallyIdentical(otherIntersection)) {\n                  //System.out.println(\"  Points \"+intersection+\" and \"+otherIntersection+\" are duplicates\");\n                  notDup = false;\n                  break;\n                }\n              }\n            }\n            if (!notDup) {\n              continue;\n            }\n            // It's unique, so assess it\n            //System.out.println(\"  Assessing travel envelope intersection point \"+intersection+\"...\");\n            crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n          }\n        }\n      }\n      if (testPointIntersections != null) {\n        for (final GeoPoint intersection : testPointIntersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // It's unique, so assess it\n            //System.out.println(\"  Assessing testpoint envelope intersection point \"+intersection+\"...\");\n            crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n          }\n        }\n      }\n      return crossings;\n    }\n\n","sourceOld":"    /** Find the intersections with a pair of envelope planes, and assess those intersections for duplication and for\n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane travelEnvelopePlane, final Membership travelEnvelopeBound1, final Membership travelEnvelopeBound2,\n      final Plane testPointEnvelopePlane, final Membership testPointEnvelopeBound1, final Membership testPointEnvelopeBound2) {\n      final GeoPoint[] travelIntersections = edge.plane.findIntersections(planetModel, travelEnvelopePlane, edge.startPlane, edge.endPlane, travelEnvelopeBound1, travelEnvelopeBound2);\n      final GeoPoint[] testPointIntersections = edge.plane.findIntersections(planetModel, testPointEnvelopePlane, edge.startPlane, edge.endPlane, testPointEnvelopeBound1, testPointEnvelopeBound2);\n      int crossings = 0;\n      if (travelIntersections != null) {\n        for (final GeoPoint intersection : travelIntersections) {\n          // Make sure it's not a dup\n          boolean notDup = true;\n          if (testPointIntersections != null) {\n            for (final GeoPoint otherIntersection : testPointIntersections) {\n              if (intersection.isNumericallyIdentical(otherIntersection)) {\n                //System.out.println(\"  Points \"+intersection+\" and \"+otherIntersection+\" are duplicates\");\n                notDup = false;\n                break;\n              }\n            }\n          }\n          if (!notDup) {\n            continue;\n          }\n          // It's unique, so assess it\n          //System.out.println(\"  Assessing travel envelope intersection point \"+intersection+\"...\");\n          crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n        }\n      }\n      if (testPointIntersections != null) {\n        for (final GeoPoint intersection : testPointIntersections) {\n          // It's unique, so assess it\n          //System.out.println(\"  Assessing testpoint envelope intersection point \"+intersection+\"...\");\n          crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n        }\n      }\n      return crossings;\n    }\n\n","bugFix":null,"bugIntro":["4417cae689ce0fc964a3546ded2b0ab6e374f1b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4417cae689ce0fc964a3546ded2b0ab6e374f1b0","date":1523635542,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership,Plane,Membership,Membership).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership,Plane,Membership,Membership).mjava","sourceNew":"    /** Find the intersections with a pair of envelope planes, and assess those intersections for duplication and for\n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane travelEnvelopePlane, final Membership travelEnvelopeBound1, final Membership travelEnvelopeBound2,\n      final Plane testPointEnvelopePlane, final Membership testPointEnvelopeBound1, final Membership testPointEnvelopeBound2) {\n      final GeoPoint[] travelIntersections = edge.plane.findIntersections(planetModel, travelEnvelopePlane, travelEnvelopeBound1, travelEnvelopeBound2);\n      final GeoPoint[] testPointIntersections = edge.plane.findIntersections(planetModel, testPointEnvelopePlane, testPointEnvelopeBound1, testPointEnvelopeBound2);\n      int crossings = 0;\n      if (travelIntersections != null) {\n        for (final GeoPoint intersection : travelIntersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // Make sure it's not a dup\n            boolean notDup = true;\n            if (testPointIntersections != null) {\n              for (final GeoPoint otherIntersection : testPointIntersections) {\n                if (edge.startPlane.strictlyWithin(otherIntersection) && edge.endPlane.strictlyWithin(otherIntersection) && intersection.isNumericallyIdentical(otherIntersection)) {\n                  //System.out.println(\"  Points \"+intersection+\" and \"+otherIntersection+\" are duplicates\");\n                  notDup = false;\n                  break;\n                }\n              }\n            }\n            if (!notDup) {\n              continue;\n            }\n            // It's unique, so assess it\n            //System.out.println(\"  Assessing travel envelope intersection point \"+intersection+\", travelPlane distance=\"+travelPlane.evaluate(intersection)+\"...\");\n            crossings += edgeCrossesEnvelope(edge.plane, intersection, travelEnvelopePlane)?1:0;\n          }\n        }\n      }\n      if (testPointIntersections != null) {\n        for (final GeoPoint intersection : testPointIntersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // It's unique, so assess it\n            //System.out.println(\"  Assessing testpoint envelope intersection point \"+intersection+\", testPointPlane distance=\"+testPointPlane.evaluate(intersection)+\"...\");\n            crossings += edgeCrossesEnvelope(edge.plane, intersection, testPointEnvelopePlane)?1:0;\n          }\n        }\n      }\n      return crossings;\n    }\n\n","sourceOld":"    /** Find the intersections with a pair of envelope planes, and assess those intersections for duplication and for\n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane travelEnvelopePlane, final Membership travelEnvelopeBound1, final Membership travelEnvelopeBound2,\n      final Plane testPointEnvelopePlane, final Membership testPointEnvelopeBound1, final Membership testPointEnvelopeBound2) {\n      final GeoPoint[] travelIntersections = edge.plane.findIntersections(planetModel, travelEnvelopePlane, travelEnvelopeBound1, travelEnvelopeBound2);\n      final GeoPoint[] testPointIntersections = edge.plane.findIntersections(planetModel, testPointEnvelopePlane, testPointEnvelopeBound1, testPointEnvelopeBound2);\n      int crossings = 0;\n      if (travelIntersections != null) {\n        for (final GeoPoint intersection : travelIntersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // Make sure it's not a dup\n            boolean notDup = true;\n            if (testPointIntersections != null) {\n              for (final GeoPoint otherIntersection : testPointIntersections) {\n                if (edge.startPlane.strictlyWithin(otherIntersection) && edge.endPlane.strictlyWithin(otherIntersection) && intersection.isNumericallyIdentical(otherIntersection)) {\n                  //System.out.println(\"  Points \"+intersection+\" and \"+otherIntersection+\" are duplicates\");\n                  notDup = false;\n                  break;\n                }\n              }\n            }\n            if (!notDup) {\n              continue;\n            }\n            // It's unique, so assess it\n            //System.out.println(\"  Assessing travel envelope intersection point \"+intersection+\"...\");\n            crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n          }\n        }\n      }\n      if (testPointIntersections != null) {\n        for (final GeoPoint intersection : testPointIntersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // It's unique, so assess it\n            //System.out.println(\"  Assessing testpoint envelope intersection point \"+intersection+\"...\");\n            crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;\n          }\n        }\n      }\n      return crossings;\n    }\n\n","bugFix":["cd56d07f4412123997b4b19dfcd68d39aa5b4acd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"039615f2ceafe5881c61222281f45a0631b90174","date":1524725949,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership,Plane,Membership,Membership).mjava","sourceNew":null,"sourceOld":"    /** Find the intersections with a pair of envelope planes, and assess those intersections for duplication and for\n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane travelEnvelopePlane, final Membership travelEnvelopeBound1, final Membership travelEnvelopeBound2,\n      final Plane testPointEnvelopePlane, final Membership testPointEnvelopeBound1, final Membership testPointEnvelopeBound2) {\n      final GeoPoint[] travelIntersections = edge.plane.findIntersections(planetModel, travelEnvelopePlane, travelEnvelopeBound1, travelEnvelopeBound2);\n      final GeoPoint[] testPointIntersections = edge.plane.findIntersections(planetModel, testPointEnvelopePlane, testPointEnvelopeBound1, testPointEnvelopeBound2);\n      int crossings = 0;\n      if (travelIntersections != null) {\n        for (final GeoPoint intersection : travelIntersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // Make sure it's not a dup\n            boolean notDup = true;\n            if (testPointIntersections != null) {\n              for (final GeoPoint otherIntersection : testPointIntersections) {\n                if (edge.startPlane.strictlyWithin(otherIntersection) && edge.endPlane.strictlyWithin(otherIntersection) && intersection.isNumericallyIdentical(otherIntersection)) {\n                  //System.out.println(\"  Points \"+intersection+\" and \"+otherIntersection+\" are duplicates\");\n                  notDup = false;\n                  break;\n                }\n              }\n            }\n            if (!notDup) {\n              continue;\n            }\n            // It's unique, so assess it\n            //System.out.println(\"  Assessing travel envelope intersection point \"+intersection+\", travelPlane distance=\"+travelPlane.evaluate(intersection)+\"...\");\n            crossings += edgeCrossesEnvelope(edge.plane, intersection, travelEnvelopePlane)?1:0;\n          }\n        }\n      }\n      if (testPointIntersections != null) {\n        for (final GeoPoint intersection : testPointIntersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // It's unique, so assess it\n            //System.out.println(\"  Assessing testpoint envelope intersection point \"+intersection+\", testPointPlane distance=\"+testPointPlane.evaluate(intersection)+\"...\");\n            crossings += edgeCrossesEnvelope(edge.plane, intersection, testPointEnvelopePlane)?1:0;\n          }\n        }\n      }\n      return crossings;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e456381ade0a256838cbf558702284e345c8d3d6","date":1524920804,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#countCrossings(Edge,Plane,Membership,Membership,Plane,Membership,Membership).mjava","pathOld":"/dev/null","sourceNew":"    /** Find the intersections with a pair of envelope planes, and assess those intersections for duplication and for\n      * whether they truly describe crossings.\n      */\n    private int countCrossings(final Edge edge,\n      final Plane travelEnvelopePlane, final Membership travelEnvelopeBound1, final Membership travelEnvelopeBound2,\n      final Plane testPointEnvelopePlane, final Membership testPointEnvelopeBound1, final Membership testPointEnvelopeBound2) {\n      final GeoPoint[] travelIntersections = edge.plane.findIntersections(planetModel, travelEnvelopePlane, travelEnvelopeBound1, travelEnvelopeBound2);\n      final GeoPoint[] testPointIntersections = edge.plane.findIntersections(planetModel, testPointEnvelopePlane, testPointEnvelopeBound1, testPointEnvelopeBound2);\n      int crossings = 0;\n      if (travelIntersections != null) {\n        for (final GeoPoint intersection : travelIntersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // Make sure it's not a dup\n            boolean notDup = true;\n            if (testPointIntersections != null) {\n              for (final GeoPoint otherIntersection : testPointIntersections) {\n                if (edge.startPlane.strictlyWithin(otherIntersection) && edge.endPlane.strictlyWithin(otherIntersection) && intersection.isNumericallyIdentical(otherIntersection)) {\n                  //System.out.println(\"  Points \"+intersection+\" and \"+otherIntersection+\" are duplicates\");\n                  notDup = false;\n                  break;\n                }\n              }\n            }\n            if (!notDup) {\n              continue;\n            }\n            // It's unique, so assess it\n            //System.out.println(\"  Assessing travel envelope intersection point \"+intersection+\", travelPlane distance=\"+travelPlane.evaluate(intersection)+\"...\");\n            crossings += edgeCrossesEnvelope(edge.plane, intersection, travelEnvelopePlane)?1:0;\n          }\n        }\n      }\n      if (testPointIntersections != null) {\n        for (final GeoPoint intersection : testPointIntersections) {\n          if (edge.startPlane.strictlyWithin(intersection) && edge.endPlane.strictlyWithin(intersection)) {\n            // It's unique, so assess it\n            //System.out.println(\"  Assessing testpoint envelope intersection point \"+intersection+\", testPointPlane distance=\"+testPointPlane.evaluate(intersection)+\"...\");\n            crossings += edgeCrossesEnvelope(edge.plane, intersection, testPointEnvelopePlane)?1:0;\n          }\n        }\n      }\n      return crossings;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e456381ade0a256838cbf558702284e345c8d3d6":["039615f2ceafe5881c61222281f45a0631b90174"],"d564e0296db7f80d73dd62b17710f61c85f38c50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4417cae689ce0fc964a3546ded2b0ab6e374f1b0":["cd56d07f4412123997b4b19dfcd68d39aa5b4acd"],"cd56d07f4412123997b4b19dfcd68d39aa5b4acd":["e872ee16caf3bf386b6a55f3654fabb2840d8fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e872ee16caf3bf386b6a55f3654fabb2840d8fc9":["d564e0296db7f80d73dd62b17710f61c85f38c50"],"039615f2ceafe5881c61222281f45a0631b90174":["4417cae689ce0fc964a3546ded2b0ab6e374f1b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e456381ade0a256838cbf558702284e345c8d3d6"]},"commit2Childs":{"e456381ade0a256838cbf558702284e345c8d3d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d564e0296db7f80d73dd62b17710f61c85f38c50":["e872ee16caf3bf386b6a55f3654fabb2840d8fc9"],"4417cae689ce0fc964a3546ded2b0ab6e374f1b0":["039615f2ceafe5881c61222281f45a0631b90174"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d564e0296db7f80d73dd62b17710f61c85f38c50"],"cd56d07f4412123997b4b19dfcd68d39aa5b4acd":["4417cae689ce0fc964a3546ded2b0ab6e374f1b0"],"e872ee16caf3bf386b6a55f3654fabb2840d8fc9":["cd56d07f4412123997b4b19dfcd68d39aa5b4acd"],"039615f2ceafe5881c61222281f45a0631b90174":["e456381ade0a256838cbf558702284e345c8d3d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}