{"path":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","sourceNew":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreads();\n    long bytesUsed = 0;\n    while (allActiveThreads.hasNext()) {\n      bytesUsed += allActiveThreads.next().perThread.bytesUsed();\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","sourceOld":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreads();\n    long bytesUsed = 0;\n    while (allActiveThreads.hasNext()) {\n      bytesUsed += allActiveThreads.next().perThread.bytesUsed();\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","sourceNew":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreadStates();\n    long bytesUsed = 0;\n    while (allActiveThreads.hasNext()) {\n      bytesUsed += allActiveThreads.next().dwpt.bytesUsed();\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","sourceOld":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreads();\n    long bytesUsed = 0;\n    while (allActiveThreads.hasNext()) {\n      bytesUsed += allActiveThreads.next().perThread.bytesUsed();\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","sourceNew":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreadStates();\n    long bytesUsed = 0;\n    while (allActiveThreads.hasNext()) {\n      ThreadState next = allActiveThreads.next();\n      if (next.dwpt != null) {\n        bytesUsed += next.dwpt.bytesUsed();\n      }\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","sourceOld":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreadStates();\n    long bytesUsed = 0;\n    while (allActiveThreads.hasNext()) {\n      bytesUsed += allActiveThreads.next().dwpt.bytesUsed();\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","sourceNew":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreadStates();\n    long bytesUsed = 0;\n    while (allActiveThreads.hasNext()) {\n      ThreadState next = allActiveThreads.next();\n      if (next.dwpt != null) {\n        bytesUsed += next.dwpt.bytesUsed();\n      }\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","sourceOld":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreadStates();\n    long bytesUsed = 0;\n    while (allActiveThreads.hasNext()) {\n      bytesUsed += allActiveThreads.next().dwpt.bytesUsed();\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","sourceNew":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreadStates();\n    long bytesUsed = 0;\n    while (allActiveThreads.hasNext()) {\n      ThreadState next = allActiveThreads.next();\n      if (next.dwpt != null) {\n        bytesUsed += next.dwpt.bytesUsed();\n      }\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","sourceOld":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreadStates();\n    long bytesUsed = 0;\n    while (allActiveThreads.hasNext()) {\n      bytesUsed += allActiveThreads.next().dwpt.bytesUsed();\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","sourceNew":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<DocumentsWriterPerThread> allActiveWriter = flushControl.allActiveWriters();\n    long bytesUsed = 0;\n    while (allActiveWriter.hasNext()) {\n      DocumentsWriterPerThread next = allActiveWriter.next();\n      bytesUsed += next.bytesUsed();\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","sourceOld":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<ThreadState> allActiveThreads = flushControl.allActiveThreadStates();\n    long bytesUsed = 0;\n    while (allActiveThreads.hasNext()) {\n      ThreadState next = allActiveThreads.next();\n      if (next.dwpt != null) {\n        bytesUsed += next.dwpt.bytesUsed();\n      }\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4","date":1599581893,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#assertActiveBytesAfter(DocumentsWriterFlushControl).mjava","sourceNew":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<DocumentsWriterPerThread> allActiveWriter = flushControl.allActiveWriters();\n    long bytesUsed = 0;\n    while (allActiveWriter.hasNext()) {\n      DocumentsWriterPerThread next = allActiveWriter.next();\n      bytesUsed += next.ramBytesUsed();\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","sourceOld":"  protected void assertActiveBytesAfter(DocumentsWriterFlushControl flushControl) {\n    Iterator<DocumentsWriterPerThread> allActiveWriter = flushControl.allActiveWriters();\n    long bytesUsed = 0;\n    while (allActiveWriter.hasNext()) {\n      DocumentsWriterPerThread next = allActiveWriter.next();\n      bytesUsed += next.bytesUsed();\n    }\n    assertEquals(bytesUsed, flushControl.activeBytes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4":["264935965977b4a9e2f3920420647072c9c49176"],"264935965977b4a9e2f3920420647072c9c49176":["7af110b00ea8df9429309d83e38e0533d82e144f"],"7af110b00ea8df9429309d83e38e0533d82e144f":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"264935965977b4a9e2f3920420647072c9c49176":["6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4"],"7af110b00ea8df9429309d83e38e0533d82e144f":["264935965977b4a9e2f3920420647072c9c49176","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}