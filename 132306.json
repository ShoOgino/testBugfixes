{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","commits":[{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"/dev/null","sourceNew":"  private void addReplicaTest()throws Exception{\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client,2,2);\n\n      waitForRecoveriesToFinish(collectionName, false);\n      String newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      ArrayList<String> nodeList = new ArrayList<String>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      Map m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          \"node\", nodeList.get(0));\n\n      SolrRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica,client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n//\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\");\n\n      request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["103857ec20f79f31c7a00310a91ed001b9a6ef17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a166a99205d498efdb0bc4fa1463da874e48e62","date":1393337319,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest()throws Exception{\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client,2,2);\n      String newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      ArrayList<String> nodeList = new ArrayList<String>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      Map m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          \"node\", nodeList.get(0));\n\n      SolrRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica,client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n//\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\");\n\n      request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","sourceOld":"  private void addReplicaTest()throws Exception{\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client,2,2);\n\n      waitForRecoveriesToFinish(collectionName, false);\n      String newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      ArrayList<String> nodeList = new ArrayList<String>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      Map m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          \"node\", nodeList.get(0));\n\n      SolrRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica,client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n//\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\");\n\n      request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"/dev/null","sourceNew":"  private void addReplicaTest()throws Exception{\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client,2,2);\n      String newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      ArrayList<String> nodeList = new ArrayList<String>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      Map m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          \"node\", nodeList.get(0));\n\n      SolrRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica,client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n//\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\");\n\n      request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest()throws Exception{\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client,2,2);\n      String newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      Map m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          \"node\", nodeList.get(0));\n\n      SolrRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica,client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n//\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\");\n\n      request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","sourceOld":"  private void addReplicaTest()throws Exception{\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client,2,2);\n      String newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      ArrayList<String> nodeList = new ArrayList<String>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      Map m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          \"node\", nodeList.get(0));\n\n      SolrRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica,client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n//\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\");\n\n      request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3a46663789411cdf016145a96a40cf861798ae3","date":1395119088,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest()throws Exception{\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client,2,2);\n      String newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      Map m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          \"node\", nodeList.get(0));\n\n      SolrRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n      \n      while (System.currentTimeMillis() < timeout) {\n        Slice slice = client.getZkStateReader().getClusterState()\n            .getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica,client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n//\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\");\n\n      request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","sourceOld":"  private void addReplicaTest()throws Exception{\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client,2,2);\n      String newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      Map m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          \"node\", nodeList.get(0));\n\n      SolrRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica,client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n//\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\");\n\n      request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"963b0a9b072593721af39e1d9b815fba17e88e7f","date":1395120846,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest()throws Exception{\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client,2,2);\n      String newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      Map m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          \"node\", nodeList.get(0));\n\n      SolrRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica,client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n//\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\");\n\n      request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","sourceOld":"  private void addReplicaTest()throws Exception{\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client,2,2);\n      String newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      Map m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          \"node\", nodeList.get(0));\n\n      SolrRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n      \n      while (System.currentTimeMillis() < timeout) {\n        Slice slice = client.getZkStateReader().getClusterState()\n            .getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica,client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n//\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\");\n\n      request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"919d0359b366fa52dd8de3edbf85db8be74fc0df","date":1400759431,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","sourceOld":"  private void addReplicaTest()throws Exception{\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client,2,2);\n      String newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      Map m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          \"node\", nodeList.get(0));\n\n      SolrRequest request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica,client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n//\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName , client.getZkStateReader().getClusterState() );\n      m = makeMap(\n          \"action\", CollectionAction.ADDREPLICA.toString(),\n          ZkStateReader.COLLECTION_PROP, collectionName,\n          ZkStateReader.SHARD_ID_PROP, \"shard2\");\n\n      request = new QueryRequest(new MapSolrParams(m));\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for(; System.currentTimeMillis()<timeout;){\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"103857ec20f79f31c7a00310a91ed001b9a6ef17","date":1412698959,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","bugFix":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList);\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","date":1419896224,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":null,"sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"/dev/null","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9942a098be9e045925c48c55fe39f6ffb9667744"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n    }\n\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n\n    } finally {\n      client.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f00012a7c6138e4e38ba35b5d2da70d12c623fe","date":1424221233,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      addReplica.setProperties(props);\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      HttpSolrClient coreclient = new HttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n    }\n\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["9942a098be9e045925c48c55fe39f6ffb9667744"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8c5997453bf2d3c85add46a572ff2912ad04c99","date":1434968375,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      addReplica.setProperties(props);\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      HttpSolrClient coreclient = new HttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      addReplica.setProperties(props);\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      HttpSolrClient coreclient = new HttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9942a098be9e045925c48c55fe39f6ffb9667744","date":1436492864,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      HttpSolrClient coreclient = new HttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard1\");\n      addReplica.setNode(nodeList.get(0));\n      client.request(addReplica);\n\n      long timeout = System.currentTimeMillis() + 3000;\n      Replica newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(collectionName);\n      addReplica.setShardName(\"shard2\");\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      addReplica.setProperties(props);\n      client.request(addReplica);\n\n      timeout = System.currentTimeMillis() + 3000;\n      newReplica = null;\n\n      for (; System.currentTimeMillis() < timeout; ) {\n        Slice slice = client.getZkStateReader().getClusterState().getSlice(collectionName, \"shard2\");\n        newReplica = slice.getReplica(newReplicaName);\n      }\n\n      assertNotNull(newReplica);\n\n      HttpSolrClient coreclient = new HttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n    }\n  }\n\n","bugFix":["5f00012a7c6138e4e38ba35b5d2da70d12c623fe","bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      try (HttpSolrClient coreclient = new HttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n        CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n        NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n        String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n        assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n      }\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      HttpSolrClient coreclient = new HttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n        CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n        NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n        String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n        assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n      }\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      try (HttpSolrClient coreclient = new HttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n        CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n        NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n        String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n        assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n      }\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n        CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n        NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n        String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n        assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n      }\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      try (HttpSolrClient coreclient = new HttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n        CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n        NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n        String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n        assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n      }\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName));\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName)),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName)),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n        CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n        NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n        String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n        assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n      }\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName)),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n        CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n        NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n        String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n        assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n      }\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName));\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName)),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName)),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n        CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n        NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n        String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n        assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n      }\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName)),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(collectionName, client.getZkStateReader().getClusterState());\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n        CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n        NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n        String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n        assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n      }\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(collectionName, client.getZkStateReader().getClusterState()),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    String newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n\n    Replica newReplica = getCollectionState(collectionName).getReplica(newReplicaName);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    Path instancePath = createTempDir();\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n\n    newReplica = getCollectionState(collectionName).getReplica(newReplicaName);\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = getCollectionState(collectionName).getReplica(newReplicaName);\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName));\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName)),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName)),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n        CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n        NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n        String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n        assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n      }\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName)),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["273ff2f5b0b365591fcbe91ea23b5e97027ca60d","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    String newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n\n    Replica newReplica = getCollectionState(collectionName).getReplica(newReplicaName);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    Path instancePath = createTempDir();\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n\n    newReplica = getCollectionState(collectionName).getReplica(newReplicaName);\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = getCollectionState(collectionName).getReplica(newReplicaName);\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","sourceOld":"  private void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n    try (CloudSolrClient client = createCloudClient(null)) {\n      createCollection(collectionName, client, 2, 2);\n      String newReplicaName = Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName));\n      ArrayList<String> nodeList = new ArrayList<>(client.getZkStateReader().getClusterState().getLiveNodes());\n      Collections.shuffle(nodeList, random());\n\n      Replica newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName)),\n          nodeList.get(0), client, null);\n\n      log.info(\"newReplica {},\\n{} \", newReplica, client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)));\n\n      assertEquals(\"Replica should be created on the right node\",\n          client.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)), newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n      Properties props = new Properties();\n      String instancePathStr = createTempDir().toString();\n      props.put(CoreAdminParams.INSTANCE_DIR, instancePathStr); //Use name via the property.instanceDir method\n      newReplica = doAddReplica(collectionName, \"shard2\",\n          Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName)),\n          null, client, props);\n      assertNotNull(newReplica);\n\n      try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n        CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n        NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n        String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n        assertEquals(Paths.get(instanceDirStr).toString(), instancePathStr);\n      }\n\n      //Test to make sure we can't create another replica with an existing core_name of that collection\n      String coreName = newReplica.getStr(CORE_NAME_PROP);\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      try {\n        client.request(request);\n        fail(\"AddReplica call should not have been successful\");\n      } catch (SolrException e) {\n        assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n      }\n\n\n      // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n      // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n      props = new Properties();\n      props.put(CoreAdminParams.NAME, \"propertyDotName\");\n\n      newReplica = doAddReplica(collectionName, \"shard1\",\n          Assign.assignNode(client.getZkStateReader().getClusterState().getCollection(collectionName)),\n          nodeList.get(0), client, props);\n      assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f100e4a037a938ee4b027674f1ca80fc208badf","date":1500526196,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    String newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n\n    Replica newReplica = getCollectionState(collectionName).getReplica(newReplicaName);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    Path instancePath = createTempDir();\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n\n    newReplica = getCollectionState(collectionName).getReplica(newReplicaName);\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = getCollectionState(collectionName).getReplica(newReplicaName);\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    String newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n\n    Replica newReplica = getCollectionState(collectionName).getReplica(newReplicaName);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    Path instancePath = createTempDir();\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n\n    newReplica = getCollectionState(collectionName).getReplica(newReplicaName);\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = getCollectionState(collectionName).getReplica(newReplicaName);\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"509252acd2d9d5b2bd56f1685afe5234c2308562","date":1509610842,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","bugFix":null,"bugIntro":["273ff2f5b0b365591fcbe91ea23b5e97027ca60d","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"b94236357aaa22b76c10629851fe4e376e0cea82":["509252acd2d9d5b2bd56f1685afe5234c2308562","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"d3a46663789411cdf016145a96a40cf861798ae3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"509252acd2d9d5b2bd56f1685afe5234c2308562":["9f100e4a037a938ee4b027674f1ca80fc208badf"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"9942a098be9e045925c48c55fe39f6ffb9667744":["f8c5997453bf2d3c85add46a572ff2912ad04c99"],"bafca15d8e408346a67f4282ad1143b88023893b":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["103857ec20f79f31c7a00310a91ed001b9a6ef17"],"9a166a99205d498efdb0bc4fa1463da874e48e62":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9a166a99205d498efdb0bc4fa1463da874e48e62"],"963b0a9b072593721af39e1d9b815fba17e88e7f":["d3a46663789411cdf016145a96a40cf861798ae3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9a166a99205d498efdb0bc4fa1463da874e48e62"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"55980207f1977bd1463465de1659b821347e2fa8":["919d0359b366fa52dd8de3edbf85db8be74fc0df","103857ec20f79f31c7a00310a91ed001b9a6ef17"],"5f00012a7c6138e4e38ba35b5d2da70d12c623fe":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["a4efd3fffdd7acd625bb88e455c8097e17f75735","9f100e4a037a938ee4b027674f1ca80fc208badf"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["509252acd2d9d5b2bd56f1685afe5234c2308562"],"f8c5997453bf2d3c85add46a572ff2912ad04c99":["5f00012a7c6138e4e38ba35b5d2da70d12c623fe"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"859081acf00749f5dd462772c571d611d4a4d2db":["9942a098be9e045925c48c55fe39f6ffb9667744"],"919d0359b366fa52dd8de3edbf85db8be74fc0df":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"103857ec20f79f31c7a00310a91ed001b9a6ef17":["919d0359b366fa52dd8de3edbf85db8be74fc0df"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["9f100e4a037a938ee4b027674f1ca80fc208badf","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","936cdd5882761db3b844afd6f84ab81cbb011a75"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3a46663789411cdf016145a96a40cf861798ae3":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["509252acd2d9d5b2bd56f1685afe5234c2308562","936cdd5882761db3b844afd6f84ab81cbb011a75"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"509252acd2d9d5b2bd56f1685afe5234c2308562":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"9942a098be9e045925c48c55fe39f6ffb9667744":["859081acf00749f5dd462772c571d611d4a4d2db"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["bafca15d8e408346a67f4282ad1143b88023893b"],"9a166a99205d498efdb0bc4fa1463da874e48e62":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"963b0a9b072593721af39e1d9b815fba17e88e7f":["919d0359b366fa52dd8de3edbf85db8be74fc0df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["5f00012a7c6138e4e38ba35b5d2da70d12c623fe"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d3a46663789411cdf016145a96a40cf861798ae3"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"55980207f1977bd1463465de1659b821347e2fa8":[],"5f00012a7c6138e4e38ba35b5d2da70d12c623fe":["f8c5997453bf2d3c85add46a572ff2912ad04c99"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"f8c5997453bf2d3c85add46a572ff2912ad04c99":["9942a098be9e045925c48c55fe39f6ffb9667744"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"919d0359b366fa52dd8de3edbf85db8be74fc0df":["55980207f1977bd1463465de1659b821347e2fa8","103857ec20f79f31c7a00310a91ed001b9a6ef17"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"103857ec20f79f31c7a00310a91ed001b9a6ef17":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","55980207f1977bd1463465de1659b821347e2fa8"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["9a166a99205d498efdb0bc4fa1463da874e48e62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","55980207f1977bd1463465de1659b821347e2fa8","936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}