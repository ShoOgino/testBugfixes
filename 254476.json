{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","commits":[{"id":"2b844e2ae5435a8d4d925003c10027c25e26e02d","date":1455044345,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory).mjava","sourceNew":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory) throws IOException {\n    super(id, dir, searcherFactory);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(System.out);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5c2b099338fb9b77f99c5127f70418a85a7689f","date":1468243391,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","sourceNew":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n      success = true;\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dcbdc4d70424f69441091cee35f497a60c60bdb","date":1468245582,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","sourceNew":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n      success = true;\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","sourceNew":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n      success = true;\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3306bdef6cff9218671c5972462d4ff115785dd0","date":1524667585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","sourceNew":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir.checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n      success = true;\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir instanceof FSDirectory && ((FSDirectory) dir).checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n      success = true;\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5e84aa7f651de6493590da495bcbe46d32cf038","date":1526462263,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/nrt/ReplicaNode#ReplicaNode(int,Directory,SearcherFactory,PrintStream).mjava","sourceNew":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir.getPendingDeletions().isEmpty() == false) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n      success = true;\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  public ReplicaNode(int id, Directory dir, SearcherFactory searcherFactory, PrintStream printStream) throws IOException {\n    super(id, dir, searcherFactory, printStream);\n\n    if (dir.checkPendingDeletions()) {\n      throw new IllegalArgumentException(\"Directory \" + dir + \" still has pending deleted files; cannot initialize IndexWriter\");\n    }\n\n    boolean success = false;\n\n    try {\n      message(\"top: init replica dir=\" + dir);\n\n      // Obtain a write lock on this index since we \"act like\" an IndexWriter, to prevent any other IndexWriter or ReplicaNode from using it:\n      writeFileLock = dir.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n      \n      state = \"init\";\n      deleter = new ReplicaFileDeleter(this, dir);\n      success = true;\n    } catch (Throwable t) {\n      message(\"exc on init:\");\n      t.printStackTrace(printStream);\n      throw t;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2b844e2ae5435a8d4d925003c10027c25e26e02d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3306bdef6cff9218671c5972462d4ff115785dd0":["2dcbdc4d70424f69441091cee35f497a60c60bdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dcbdc4d70424f69441091cee35f497a60c60bdb":["68496c2200e559fb7802f7575427b7a482659afb","e5c2b099338fb9b77f99c5127f70418a85a7689f"],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2b844e2ae5435a8d4d925003c10027c25e26e02d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["68496c2200e559fb7802f7575427b7a482659afb","2dcbdc4d70424f69441091cee35f497a60c60bdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5e84aa7f651de6493590da495bcbe46d32cf038"],"c5e84aa7f651de6493590da495bcbe46d32cf038":["3306bdef6cff9218671c5972462d4ff115785dd0"],"e5c2b099338fb9b77f99c5127f70418a85a7689f":["68496c2200e559fb7802f7575427b7a482659afb"]},"commit2Childs":{"2b844e2ae5435a8d4d925003c10027c25e26e02d":["68496c2200e559fb7802f7575427b7a482659afb"],"3306bdef6cff9218671c5972462d4ff115785dd0":["c5e84aa7f651de6493590da495bcbe46d32cf038"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2b844e2ae5435a8d4d925003c10027c25e26e02d","68496c2200e559fb7802f7575427b7a482659afb"],"2dcbdc4d70424f69441091cee35f497a60c60bdb":["3306bdef6cff9218671c5972462d4ff115785dd0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"68496c2200e559fb7802f7575427b7a482659afb":["2dcbdc4d70424f69441091cee35f497a60c60bdb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e5c2b099338fb9b77f99c5127f70418a85a7689f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e5c2b099338fb9b77f99c5127f70418a85a7689f":["2dcbdc4d70424f69441091cee35f497a60c60bdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c5e84aa7f651de6493590da495bcbe46d32cf038":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}