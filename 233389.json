{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWithinQuery.SpanWithinWeight#getSpans(LeafReaderContext,Bits,SpanCollector).mjava","commits":[{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWithinQuery.SpanWithinWeight#getSpans(LeafReaderContext,Bits,SpanCollector).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Return spans from <code>little</code> that are contained in a spans from <code>big</code>.\n     * The payload is from the spans of <code>little</code>.\n     */\n    @Override\n    public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, SpanCollector collector) throws IOException {\n      ArrayList<Spans> containerContained = prepareConjunction(context, acceptDocs, collector);\n      if (containerContained == null) {\n        return null;\n      }\n\n      Spans big = containerContained.get(0);\n      Spans little = containerContained.get(1);\n\n      return new ContainSpans(big, little, little) {\n\n        @Override\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          oneExhaustedInCurrentDoc = false;\n          assert littleSpans.startPosition() == -1;\n          while (littleSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (bigSpans.endPosition() < littleSpans.endPosition()) {\n              if (bigSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return false;\n              }\n            }\n            if (bigSpans.startPosition() <= littleSpans.startPosition()) {\n              atFirstInCurrentDoc = true;\n              return true;\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return false;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (atFirstInCurrentDoc) {\n            atFirstInCurrentDoc = false;\n            return littleSpans.startPosition();\n          }\n          while (littleSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (bigSpans.endPosition() < littleSpans.endPosition()) {\n              if (bigSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return NO_MORE_POSITIONS;\n              }\n            }\n            if (bigSpans.startPosition() <= littleSpans.startPosition()) {\n              return littleSpans.startPosition();\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return NO_MORE_POSITIONS;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWithinQuery.SpanWithinWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanWithinQuery.SpanWithinWeight#getSpans(LeafReaderContext,Bits,SpanCollector).mjava","sourceNew":"    /**\n     * Return spans from <code>little</code> that are contained in a spans from <code>big</code>.\n     * The payload is from the spans of <code>little</code>.\n     */\n    @Override\n    public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, Postings requiredPostings) throws IOException {\n      ArrayList<Spans> containerContained = prepareConjunction(context, acceptDocs, requiredPostings);\n      if (containerContained == null) {\n        return null;\n      }\n\n      Spans big = containerContained.get(0);\n      Spans little = containerContained.get(1);\n\n      return new ContainSpans(big, little, little) {\n\n        @Override\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          oneExhaustedInCurrentDoc = false;\n          assert littleSpans.startPosition() == -1;\n          while (littleSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (bigSpans.endPosition() < littleSpans.endPosition()) {\n              if (bigSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return false;\n              }\n            }\n            if (bigSpans.startPosition() <= littleSpans.startPosition()) {\n              atFirstInCurrentDoc = true;\n              return true;\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return false;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (atFirstInCurrentDoc) {\n            atFirstInCurrentDoc = false;\n            return littleSpans.startPosition();\n          }\n          while (littleSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (bigSpans.endPosition() < littleSpans.endPosition()) {\n              if (bigSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return NO_MORE_POSITIONS;\n              }\n            }\n            if (bigSpans.startPosition() <= littleSpans.startPosition()) {\n              return littleSpans.startPosition();\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return NO_MORE_POSITIONS;\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Return spans from <code>little</code> that are contained in a spans from <code>big</code>.\n     * The payload is from the spans of <code>little</code>.\n     */\n    @Override\n    public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, SpanCollector collector) throws IOException {\n      ArrayList<Spans> containerContained = prepareConjunction(context, acceptDocs, collector);\n      if (containerContained == null) {\n        return null;\n      }\n\n      Spans big = containerContained.get(0);\n      Spans little = containerContained.get(1);\n\n      return new ContainSpans(big, little, little) {\n\n        @Override\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          oneExhaustedInCurrentDoc = false;\n          assert littleSpans.startPosition() == -1;\n          while (littleSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (bigSpans.endPosition() < littleSpans.endPosition()) {\n              if (bigSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return false;\n              }\n            }\n            if (bigSpans.startPosition() <= littleSpans.startPosition()) {\n              atFirstInCurrentDoc = true;\n              return true;\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return false;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (atFirstInCurrentDoc) {\n            atFirstInCurrentDoc = false;\n            return littleSpans.startPosition();\n          }\n          while (littleSpans.nextStartPosition() != NO_MORE_POSITIONS) {\n            while (bigSpans.endPosition() < littleSpans.endPosition()) {\n              if (bigSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n                oneExhaustedInCurrentDoc = true;\n                return NO_MORE_POSITIONS;\n              }\n            }\n            if (bigSpans.startPosition() <= littleSpans.startPosition()) {\n              return littleSpans.startPosition();\n            }\n          }\n          oneExhaustedInCurrentDoc = true;\n          return NO_MORE_POSITIONS;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29aea3139c4326c0501d75d51059855463220279":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29aea3139c4326c0501d75d51059855463220279"]},"commit2Childs":{"29aea3139c4326c0501d75d51059855463220279":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["29aea3139c4326c0501d75d51059855463220279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}