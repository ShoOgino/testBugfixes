{"path":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","commits":[{"id":"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b","date":1217355237,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n            Query.attr(\"numDocs\"), Query.value(\"[0-9]\")));\n    assertFalse(\"No MBean for SolrIndexSearcher found in MBeanServer\", objects\n            .isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(objects\n            .iterator().next().getObjectName(), \"numDocs\"));\n\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"numDocs\"),\n            Query.value(\"[0-9]\")));\n    assertFalse(\"No MBean for SolrIndexSearcher found in MBeanServer\", objects\n            .isEmpty());\n\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(objects\n            .iterator().next().getObjectName(), \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291","c1d6d844f3b4061aedc283b5e71ff1d19aeae291","c1d6d844f3b4061aedc283b5e71ff1d19aeae291"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b87b35762c441ede36091e69fd4a3b6f99dfecd1","date":1217573088,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxUpdate: \" + servers);\n    boolean found = false;\n    Set<ObjectInstance> objects = null;\n    MBeanServer mbeanServer = null;\n\n    for (MBeanServer server : servers) {\n      objects = server.queryMBeans(null, Query.match(\n              Query.attr(\"numDocs\"), Query.value(\"*\")));\n      if (!objects.isEmpty()) {\n        found = true;\n        mbeanServer = server;\n        break;\n      }\n    }\n\n    if (!found) {\n      assertFalse(\"No MBean for SolrIndexSearcher found in MBeanServer\", objects.isEmpty());\n    }\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(objects\n            .iterator().next().getObjectName(), \"numDocs\"));\n\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"numDocs\"),\n            Query.value(\"*\")));\n    assertFalse(\"No MBean for SolrIndexSearcher found in MBeanServer\", objects\n            .isEmpty());\n\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(objects\n            .iterator().next().getObjectName(), \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    MBeanServer mbeanServer = servers.get(0);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n            Query.attr(\"numDocs\"), Query.value(\"[0-9]\")));\n    assertFalse(\"No MBean for SolrIndexSearcher found in MBeanServer\", objects\n            .isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(objects\n            .iterator().next().getObjectName(), \"numDocs\"));\n\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"numDocs\"),\n            Query.value(\"[0-9]\")));\n    assertFalse(\"No MBean for SolrIndexSearcher found in MBeanServer\", objects\n            .isEmpty());\n\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(objects\n            .iterator().next().getObjectName(), \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"131942378c467969bf066f9d52165fe81746a280","date":1217585088,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxUpdate: \" + servers);\n\n    ObjectName searcher = getObjectName(\"searcher\", h.getCore().getInfoRegistry().get(\"searcher\")); \n    MBeanServer mbeanServer = servers.get(0);\n    System.out.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxUpdate: \" + servers);\n    boolean found = false;\n    Set<ObjectInstance> objects = null;\n    MBeanServer mbeanServer = null;\n\n    for (MBeanServer server : servers) {\n      objects = server.queryMBeans(null, Query.match(\n              Query.attr(\"numDocs\"), Query.value(\"*\")));\n      if (!objects.isEmpty()) {\n        found = true;\n        mbeanServer = server;\n        break;\n      }\n    }\n\n    if (!found) {\n      assertFalse(\"No MBean for SolrIndexSearcher found in MBeanServer\", objects.isEmpty());\n    }\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(objects\n            .iterator().next().getObjectName(), \"numDocs\"));\n\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"numDocs\"),\n            Query.value(\"*\")));\n    assertFalse(\"No MBean for SolrIndexSearcher found in MBeanServer\", objects\n            .isEmpty());\n\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(objects\n            .iterator().next().getObjectName(), \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":["c1d6d844f3b4061aedc283b5e71ff1d19aeae291","c1d6d844f3b4061aedc283b5e71ff1d19aeae291","c1d6d844f3b4061aedc283b5e71ff1d19aeae291","e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d50df85cb6a761019f31aee37c287f40f3ac4a7e","date":1217925511,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    ObjectName searcher = getObjectName(\"searcher\", h.getCore().getInfoRegistry().get(\"searcher\")); \n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.out.println(\"Servers in testJmxUpdate: \" + servers);\n\n    ObjectName searcher = getObjectName(\"searcher\", h.getCore().getInfoRegistry().get(\"searcher\")); \n    MBeanServer mbeanServer = servers.get(0);\n    System.out.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d95c0e6724a3c32eae956df090a4a7e4ea6ff5c0","date":1218298344,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    ObjectName searcher = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      searcher = getObjectName(\"searcher\", h.getCore().getInfoRegistry().get(\"searcher\"));\n      if (searcher != null) break;\n      Thread.sleep(250);\n    }\n    if (searcher==null) throw new RuntimeException(\"searcher was never registered\");\n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    ObjectName searcher = getObjectName(\"searcher\", h.getCore().getInfoRegistry().get(\"searcher\")); \n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5400d82ee38f634bc98851339652cd48a456692","date":1218298795,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    ObjectName searcher = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      searcher = getObjectName(\"searcher\", h.getCore().getInfoRegistry().get(\"searcher\"));\n      if (searcher != null) break;\n      Thread.sleep(250);\n    }\n    if (searcher==null) throw new RuntimeException(\"searcher was never registered\");\n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","pathOld":"src/test/org/apache/solr/core/TestJmxIntegration#testJmxUpdate().mjava","sourceNew":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testJmxUpdate() throws Exception {\n    List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null);\n    System.err.println(\"Servers in testJmxUpdate: \" + servers);\n    System.err.println(h.getCore().getInfoRegistry());\n\n    SolrInfoMBean bean = null;\n    // wait until searcher is registered\n    for (int i=0; i<100; i++) {\n      bean = h.getCore().getInfoRegistry().get(\"searcher\");\n      if (bean != null) break;\n      Thread.sleep(250);\n    }\n    if (bean==null) throw new RuntimeException(\"searcher was never registered\");\n    ObjectName searcher = getObjectName(\"searcher\", bean);\n\n    MBeanServer mbeanServer = servers.get(0);\n    System.err.println(\"Mbeans in server: \" + mbeanServer.queryNames(null, null));\n\n    assertFalse(\"No mbean found for SolrIndexSearcher\", mbeanServer.queryMBeans(searcher, null).isEmpty());\n\n    int oldNumDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertU(adoc(\"id\", \"1\"));\n    assertU(\"commit\", commit());\n    int numDocs = Integer.valueOf((String) mbeanServer.getAttribute(searcher, \"numDocs\"));\n    assertTrue(\"New numDocs is same as old numDocs as reported by JMX\",\n            numDocs > oldNumDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5400d82ee38f634bc98851339652cd48a456692":["d95c0e6724a3c32eae956df090a4a7e4ea6ff5c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b87b35762c441ede36091e69fd4a3b6f99dfecd1":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d50df85cb6a761019f31aee37c287f40f3ac4a7e":["131942378c467969bf066f9d52165fe81746a280"],"ad94625fb8d088209f46650c8097196fec67f00c":["c5400d82ee38f634bc98851339652cd48a456692"],"131942378c467969bf066f9d52165fe81746a280":["b87b35762c441ede36091e69fd4a3b6f99dfecd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d95c0e6724a3c32eae956df090a4a7e4ea6ff5c0":["d50df85cb6a761019f31aee37c287f40f3ac4a7e"]},"commit2Childs":{"c5400d82ee38f634bc98851339652cd48a456692":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"b87b35762c441ede36091e69fd4a3b6f99dfecd1":["131942378c467969bf066f9d52165fe81746a280"],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["b87b35762c441ede36091e69fd4a3b6f99dfecd1"],"d50df85cb6a761019f31aee37c287f40f3ac4a7e":["d95c0e6724a3c32eae956df090a4a7e4ea6ff5c0"],"131942378c467969bf066f9d52165fe81746a280":["d50df85cb6a761019f31aee37c287f40f3ac4a7e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d95c0e6724a3c32eae956df090a4a7e4ea6ff5c0":["c5400d82ee38f634bc98851339652cd48a456692"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}