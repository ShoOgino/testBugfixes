{"path":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#setComplementThreshold(double).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#setComplementThreshold(double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the complement threshold.\n   * This threshold will dictate whether the complements optimization is applied.\n   * The optimization is to count for less documents. It is useful when the same \n   * FacetSearchParams are used for varying sets of documents. The first time \n   * complements is used the \"total counts\" are computed - counting for all the \n   * documents in the collection. Then, only the complementing set of documents\n   * is considered, and used to decrement from the overall counts, thereby \n   * walking through less documents, which is faster.\n   * <p>\n   * Note that this optimization is only available when searching an index\n   * whose {@link IndexReader} implements both \n   * {@link IndexReader#directory()} and {@link IndexReader#getVersion()} \n   * otherwise the optimization is silently disabled regardless of\n   * the complement threshold settings.\n   * <p>\n   * For the default settings see {@link #DEFAULT_COMPLEMENT_THRESHOLD}.\n   * <p>\n   * To forcing complements in all cases pass {@link #FORCE_COMPLEMENT}.\n   * This is mostly useful for testing purposes, as forcing complements when only \n   * tiny fraction of available documents match the query does not make sense and \n   * would incur performance degradations.\n   * <p>\n   * To disable complements pass {@link #DISABLE_COMPLEMENT}.\n   * @param complementThreshold the complement threshold to set\n   */\n  public void setComplementThreshold(double complementThreshold) {\n    this.complementThreshold = complementThreshold;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#setComplementThreshold(double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the complement threshold.\n   * This threshold will dictate whether the complements optimization is applied.\n   * The optimization is to count for less documents. It is useful when the same \n   * FacetSearchParams are used for varying sets of documents. The first time \n   * complements is used the \"total counts\" are computed - counting for all the \n   * documents in the collection. Then, only the complementing set of documents\n   * is considered, and used to decrement from the overall counts, thereby \n   * walking through less documents, which is faster.\n   * <p>\n   * Note that this optimization is only available when searching an index\n   * whose {@link IndexReader} implements both \n   * {@link IndexReader#directory()} and {@link IndexReader#getVersion()} \n   * otherwise the optimization is silently disabled regardless of\n   * the complement threshold settings.\n   * <p>\n   * For the default settings see {@link #DEFAULT_COMPLEMENT_THRESHOLD}.\n   * <p>\n   * To forcing complements in all cases pass {@link #FORCE_COMPLEMENT}.\n   * This is mostly useful for testing purposes, as forcing complements when only \n   * tiny fraction of available documents match the query does not make sense and \n   * would incur performance degradations.\n   * <p>\n   * To disable complements pass {@link #DISABLE_COMPLEMENT}.\n   * @param complementThreshold the complement threshold to set\n   */\n  public void setComplementThreshold(double complementThreshold) {\n    this.complementThreshold = complementThreshold;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#setComplementThreshold(double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the complement threshold.\n   * This threshold will dictate whether the complements optimization is applied.\n   * The optimization is to count for less documents. It is useful when the same \n   * FacetSearchParams are used for varying sets of documents. The first time \n   * complements is used the \"total counts\" are computed - counting for all the \n   * documents in the collection. Then, only the complementing set of documents\n   * is considered, and used to decrement from the overall counts, thereby \n   * walking through less documents, which is faster.\n   * <p>\n   * Note that this optimization is only available when searching an index\n   * whose {@link IndexReader} implements both \n   * {@link IndexReader#directory()} and {@link IndexReader#getVersion()} \n   * otherwise the optimization is silently disabled regardless of\n   * the complement threshold settings.\n   * <p>\n   * For the default settings see {@link #DEFAULT_COMPLEMENT_THRESHOLD}.\n   * <p>\n   * To forcing complements in all cases pass {@link #FORCE_COMPLEMENT}.\n   * This is mostly useful for testing purposes, as forcing complements when only \n   * tiny fraction of available documents match the query does not make sense and \n   * would incur performance degradations.\n   * <p>\n   * To disable complements pass {@link #DISABLE_COMPLEMENT}.\n   * @param complementThreshold the complement threshold to set\n   */\n  public void setComplementThreshold(double complementThreshold) {\n    this.complementThreshold = complementThreshold;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fad1351342e15571fed2a68feaed0a8a3a18e5da","date":1327959908,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#setComplementThreshold(double).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#setComplementThreshold(double).mjava","sourceNew":"  /**\n   * Set the complement threshold.\n   * This threshold will dictate whether the complements optimization is applied.\n   * The optimization is to count for less documents. It is useful when the same \n   * FacetSearchParams are used for varying sets of documents. The first time \n   * complements is used the \"total counts\" are computed - counting for all the \n   * documents in the collection. Then, only the complementing set of documents\n   * is considered, and used to decrement from the overall counts, thereby \n   * walking through less documents, which is faster.\n   * <p>\n   * For the default settings see {@link #DEFAULT_COMPLEMENT_THRESHOLD}.\n   * <p>\n   * To forcing complements in all cases pass {@link #FORCE_COMPLEMENT}.\n   * This is mostly useful for testing purposes, as forcing complements when only \n   * tiny fraction of available documents match the query does not make sense and \n   * would incur performance degradations.\n   * <p>\n   * To disable complements pass {@link #DISABLE_COMPLEMENT}.\n   * @param complementThreshold the complement threshold to set\n   */\n  public void setComplementThreshold(double complementThreshold) {\n    this.complementThreshold = complementThreshold;\n  }\n\n","sourceOld":"  /**\n   * Set the complement threshold.\n   * This threshold will dictate whether the complements optimization is applied.\n   * The optimization is to count for less documents. It is useful when the same \n   * FacetSearchParams are used for varying sets of documents. The first time \n   * complements is used the \"total counts\" are computed - counting for all the \n   * documents in the collection. Then, only the complementing set of documents\n   * is considered, and used to decrement from the overall counts, thereby \n   * walking through less documents, which is faster.\n   * <p>\n   * Note that this optimization is only available when searching an index\n   * whose {@link IndexReader} implements both \n   * {@link IndexReader#directory()} and {@link IndexReader#getVersion()} \n   * otherwise the optimization is silently disabled regardless of\n   * the complement threshold settings.\n   * <p>\n   * For the default settings see {@link #DEFAULT_COMPLEMENT_THRESHOLD}.\n   * <p>\n   * To forcing complements in all cases pass {@link #FORCE_COMPLEMENT}.\n   * This is mostly useful for testing purposes, as forcing complements when only \n   * tiny fraction of available documents match the query does not make sense and \n   * would incur performance degradations.\n   * <p>\n   * To disable complements pass {@link #DISABLE_COMPLEMENT}.\n   * @param complementThreshold the complement threshold to set\n   */\n  public void setComplementThreshold(double complementThreshold) {\n    this.complementThreshold = complementThreshold;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#setComplementThreshold(double).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#setComplementThreshold(double).mjava","sourceNew":"  /**\n   * Set the complement threshold.\n   * This threshold will dictate whether the complements optimization is applied.\n   * The optimization is to count for less documents. It is useful when the same \n   * FacetSearchParams are used for varying sets of documents. The first time \n   * complements is used the \"total counts\" are computed - counting for all the \n   * documents in the collection. Then, only the complementing set of documents\n   * is considered, and used to decrement from the overall counts, thereby \n   * walking through less documents, which is faster.\n   * <p>\n   * For the default settings see {@link #DEFAULT_COMPLEMENT_THRESHOLD}.\n   * <p>\n   * To forcing complements in all cases pass {@link #FORCE_COMPLEMENT}.\n   * This is mostly useful for testing purposes, as forcing complements when only \n   * tiny fraction of available documents match the query does not make sense and \n   * would incur performance degradations.\n   * <p>\n   * To disable complements pass {@link #DISABLE_COMPLEMENT}.\n   * @param complementThreshold the complement threshold to set\n   */\n  public void setComplementThreshold(double complementThreshold) {\n    this.complementThreshold = complementThreshold;\n  }\n\n","sourceOld":"  /**\n   * Set the complement threshold.\n   * This threshold will dictate whether the complements optimization is applied.\n   * The optimization is to count for less documents. It is useful when the same \n   * FacetSearchParams are used for varying sets of documents. The first time \n   * complements is used the \"total counts\" are computed - counting for all the \n   * documents in the collection. Then, only the complementing set of documents\n   * is considered, and used to decrement from the overall counts, thereby \n   * walking through less documents, which is faster.\n   * <p>\n   * Note that this optimization is only available when searching an index\n   * whose {@link IndexReader} implements both \n   * {@link IndexReader#directory()} and {@link IndexReader#getVersion()} \n   * otherwise the optimization is silently disabled regardless of\n   * the complement threshold settings.\n   * <p>\n   * For the default settings see {@link #DEFAULT_COMPLEMENT_THRESHOLD}.\n   * <p>\n   * To forcing complements in all cases pass {@link #FORCE_COMPLEMENT}.\n   * This is mostly useful for testing purposes, as forcing complements when only \n   * tiny fraction of available documents match the query does not make sense and \n   * would incur performance degradations.\n   * <p>\n   * To disable complements pass {@link #DISABLE_COMPLEMENT}.\n   * @param complementThreshold the complement threshold to set\n   */\n  public void setComplementThreshold(double complementThreshold) {\n    this.complementThreshold = complementThreshold;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#setComplementThreshold(double).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#setComplementThreshold(double).mjava","sourceNew":"  /**\n   * Set the complement threshold.\n   * This threshold will dictate whether the complements optimization is applied.\n   * The optimization is to count for less documents. It is useful when the same \n   * FacetSearchParams are used for varying sets of documents. The first time \n   * complements is used the \"total counts\" are computed - counting for all the \n   * documents in the collection. Then, only the complementing set of documents\n   * is considered, and used to decrement from the overall counts, thereby \n   * walking through less documents, which is faster.\n   * <p>\n   * For the default settings see {@link #DEFAULT_COMPLEMENT_THRESHOLD}.\n   * <p>\n   * To forcing complements in all cases pass {@link #FORCE_COMPLEMENT}.\n   * This is mostly useful for testing purposes, as forcing complements when only \n   * tiny fraction of available documents match the query does not make sense and \n   * would incur performance degradations.\n   * <p>\n   * To disable complements pass {@link #DISABLE_COMPLEMENT}.\n   * @param complementThreshold the complement threshold to set\n   */\n  public void setComplementThreshold(double complementThreshold) {\n    this.complementThreshold = complementThreshold;\n  }\n\n","sourceOld":"  /**\n   * Set the complement threshold.\n   * This threshold will dictate whether the complements optimization is applied.\n   * The optimization is to count for less documents. It is useful when the same \n   * FacetSearchParams are used for varying sets of documents. The first time \n   * complements is used the \"total counts\" are computed - counting for all the \n   * documents in the collection. Then, only the complementing set of documents\n   * is considered, and used to decrement from the overall counts, thereby \n   * walking through less documents, which is faster.\n   * <p>\n   * For the default settings see {@link #DEFAULT_COMPLEMENT_THRESHOLD}.\n   * <p>\n   * To forcing complements in all cases pass {@link #FORCE_COMPLEMENT}.\n   * This is mostly useful for testing purposes, as forcing complements when only \n   * tiny fraction of available documents match the query does not make sense and \n   * would incur performance degradations.\n   * <p>\n   * To disable complements pass {@link #DISABLE_COMPLEMENT}.\n   * @param complementThreshold the complement threshold to set\n   */\n  public void setComplementThreshold(double complementThreshold) {\n    this.complementThreshold = complementThreshold;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["89f15687f60bd49cd3d9de427e85c17fd9397d61","fad1351342e15571fed2a68feaed0a8a3a18e5da"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["fad1351342e15571fed2a68feaed0a8a3a18e5da","d083e83f225b11e5fdd900e83d26ddb385b6955c","5cab9a86bd67202d20b6adc463008c8e982b070a","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}