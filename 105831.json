{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n   // System.out.println(\"sync failed, delete our election node:\"\n   //     + leaderSeqPath);\n    zkController.publish(core, ZkStateReader.DOWN);\n    zkClient.delete(leaderSeqPath, -1, true);\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    \n    leaderElector.joinElection(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n   // System.out.println(\"sync failed, delete our election node:\"\n   //     + leaderSeqPath);\n    zkController.publish(core, ZkStateReader.DOWN);\n    zkClient.delete(leaderSeqPath, -1, true);\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    \n    leaderElector.joinElection(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n   // System.out.println(\"sync failed, delete our election node:\"\n   //     + leaderSeqPath);\n    zkController.publish(core, ZkStateReader.DOWN);\n    zkClient.delete(leaderSeqPath, -1, true);\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    \n    leaderElector.joinElection(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n   // System.out.println(\"sync failed, delete our election node:\"\n   //     + leaderSeqPath);\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    zkClient.delete(leaderSeqPath, -1, true);\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    \n    leaderElector.joinElection(this, null);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n   // System.out.println(\"sync failed, delete our election node:\"\n   //     + leaderSeqPath);\n    zkController.publish(core, ZkStateReader.DOWN);\n    zkClient.delete(leaderSeqPath, -1, true);\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    \n    leaderElector.joinElection(this);\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44","date":1329921256,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    zkClient.delete(leaderSeqPath, -1, true);\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    \n    leaderElector.joinElection(this, null); // don't pass core, pass null\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n   // System.out.println(\"sync failed, delete our election node:\"\n   //     + leaderSeqPath);\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    zkClient.delete(leaderSeqPath, -1, true);\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    \n    leaderElector.joinElection(this, null);\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"221ff19d62d5ff429ffecf8e7f3e01ff93754854","date":1329974551,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    zkClient.delete(leaderSeqPath, -1, true);\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this, null); // don't pass core, pass null\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    zkClient.delete(leaderSeqPath, -1, true);\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    \n    leaderElector.joinElection(this, null); // don't pass core, pass null\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2557ec1f68a440db7fbccbff249a98c54fd1a2f3","date":1329981577,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this, null); // don't pass core, pass null\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    zkClient.delete(leaderSeqPath, -1, true);\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this, null); // don't pass core, pass null\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this, null); // don't pass core, pass null\n  }\n\n","bugFix":null,"bugIntro":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n   // System.out.println(\"sync failed, delete our election node:\"\n   //     + leaderSeqPath);\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    zkClient.delete(leaderSeqPath, -1, true);\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    \n    leaderElector.joinElection(this, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c1ff733203127a15576e08da8e7bbf4ba29ca95","date":1342825060,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this);\n  }\n\n","bugFix":null,"bugIntro":["1525b4dfbc0d413b8d7247da232009778e624836"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n\n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    try {\n      zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to publish down state\", t);\n    }\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    // System.out.println(\"sync failed, delete our election node:\"\n    // + leaderSeqPath);\n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    \n    leaderElector.joinElection(this);\n  }\n\n","bugFix":["7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44","221ff19d62d5ff429ffecf8e7f3e01ff93754854","3a80994db3380cd78c6f65b84515e2e931b6b3da"],"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","1525b4dfbc0d413b8d7247da232009778e624836"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"88f39c3b3a16aebc5a91335341c7ad5b560e2277","date":1350066344,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    try {\n      zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to publish down state\", t);\n    }\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    try {\n      zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to publish down state\", t);\n    }\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this);\n  }\n\n","bugFix":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    try {\n      zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to publish down state\", t);\n    }\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    try {\n      zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to publish down state\", t);\n    }\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    try {\n      zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to publish down state\", t);\n    }\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    try {\n      zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to publish down state\", t);\n    }\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1525b4dfbc0d413b8d7247da232009778e624836","date":1351101135,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There may be a better leader candidate than us - going back into recovery\");\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    try {\n      zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to publish down state\", t);\n    }\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","bugFix":["0c1ff733203127a15576e08da8e7bbf4ba29ca95","a6378064655e76cd7b908b1cab4ce425b384b508"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There may be a better leader candidate than us - going back into recovery\");\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There is a better leader candidate than us - going back into recovery\");\n    \n    try {\n      zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to publish down state\", t);\n    }\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There may be a better leader candidate than us - going back into recovery\");\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There may be a better leader candidate than us - going back into recovery\");\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getName());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There may be a better leader candidate than us - going back into recovery\");\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There may be a better leader candidate than us - going back into recovery\");\n    \n    cancelElection();\n    \n    try {\n      core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n    } catch (Throwable t) {\n      SolrException.log(log, \"Error trying to start recovery\", t);\n    }\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","bugFix":["a6378064655e76cd7b908b1cab4ce425b384b508","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is close\");\n      return;\n    }\n    \n    log.info(\"There may be a better leader candidate than us - going back into recovery\");\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is shutdown\");\n      return;\n    }\n    \n    log.info(\"There may be a better leader candidate than us - going back into recovery\");\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is closed\");\n      return;\n    }\n    \n    log.info(\"There may be a better leader candidate than us - going back into recovery\");\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is close\");\n      return;\n    }\n    \n    log.info(\"There may be a better leader candidate than us - going back into recovery\");\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#rejoinLeaderElection(String,SolrCore).mjava","sourceNew":"  private void rejoinLeaderElection(SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is closed\");\n      return;\n    }\n    \n    log.info(\"There may be a better leader candidate than us - going back into recovery\");\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","sourceOld":"  private void rejoinLeaderElection(String leaderSeqPath, SolrCore core)\n      throws InterruptedException, KeeperException, IOException {\n    // remove our ephemeral and re join the election\n    if (cc.isShutDown()) {\n      log.info(\"Not rejoining election because CoreContainer is close\");\n      return;\n    }\n    \n    log.info(\"There may be a better leader candidate than us - going back into recovery\");\n    \n    cancelElection();\n    \n    core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n    \n    leaderElector.joinElection(this, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["9813dd0748537c429b7c0a9b4723ea1ba496c047","0c1ff733203127a15576e08da8e7bbf4ba29ca95"],"d82832af39f94dbb58a3130fd216ff1d49435589":["a6378064655e76cd7b908b1cab4ce425b384b508","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["a6378064655e76cd7b908b1cab4ce425b384b508"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["9813dd0748537c429b7c0a9b4723ea1ba496c047","0c1ff733203127a15576e08da8e7bbf4ba29ca95"],"2557ec1f68a440db7fbccbff249a98c54fd1a2f3":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"f2126b84bd093fa3d921582a109a0ee578c28126":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","1525b4dfbc0d413b8d7247da232009778e624836"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a6378064655e76cd7b908b1cab4ce425b384b508","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a6378064655e76cd7b908b1cab4ce425b384b508":["0c1ff733203127a15576e08da8e7bbf4ba29ca95"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["d0ef034a4f10871667ae75181537775ddcf8ade4","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"0c1ff733203127a15576e08da8e7bbf4ba29ca95":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["1525b4dfbc0d413b8d7247da232009778e624836"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1525b4dfbc0d413b8d7247da232009778e624836":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5455c7b3fed6c1671990a44c19071cb0488c2c25"]},"commit2Childs":{"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["2557ec1f68a440db7fbccbff249a98c54fd1a2f3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["d82832af39f94dbb58a3130fd216ff1d49435589","db4fdbf3d262768eabc027cd8321edca0cd11fa8","1525b4dfbc0d413b8d7247da232009778e624836"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"2557ec1f68a440db7fbccbff249a98c54fd1a2f3":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","0c1ff733203127a15576e08da8e7bbf4ba29ca95"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["f2126b84bd093fa3d921582a109a0ee578c28126"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6378064655e76cd7b908b1cab4ce425b384b508":["d82832af39f94dbb58a3130fd216ff1d49435589","88f39c3b3a16aebc5a91335341c7ad5b560e2277","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"0c1ff733203127a15576e08da8e7bbf4ba29ca95":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","a6378064655e76cd7b908b1cab4ce425b384b508"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["5455c7b3fed6c1671990a44c19071cb0488c2c25","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","3a80994db3380cd78c6f65b84515e2e931b6b3da"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7af9dc61d8ae794e76a6fcc104dacc7e2f3cab44"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"1525b4dfbc0d413b8d7247da232009778e624836":["f2126b84bd093fa3d921582a109a0ee578c28126","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","d82832af39f94dbb58a3130fd216ff1d49435589","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","f2126b84bd093fa3d921582a109a0ee578c28126","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}