{"path":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) {}\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":["6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) {}\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) {}\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) {}\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) {}\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) {}\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      LeafCollector acc = cc.getLeafCollector(null);\n      acc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        acc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new SimpleCollector() {\n        int prevDocID = -1;\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) {}\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      LeafCollector acc = cc.getLeafCollector(null);\n      acc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        acc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new SimpleCollector() {\n        int prevDocID = -1;\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) {}\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(), cacheScores, 1.0);\n      LeafCollector acc = cc.getLeafCollector(null);\n      acc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        acc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new SimpleCollector() {\n        int prevDocID = -1;\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      LeafCollector acc = cc.getLeafCollector(null);\n      acc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        acc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new SimpleCollector() {\n        int prevDocID = -1;\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(), cacheScores, 1.0);\n      LeafCollector acc = cc.getLeafCollector(null);\n      acc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        acc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new SimpleCollector() {\n        int prevDocID = -1;\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(), cacheScores, 1.0);\n      LeafCollector acc = cc.getLeafCollector(null);\n      acc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        acc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new SimpleCollector() {\n        int prevDocID = -1;\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(), cacheScores, 1.0);\n      LeafCollector acc = cc.getLeafCollector(null);\n      acc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        acc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new SimpleCollector() {\n        int prevDocID = -1;\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n        \n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(), cacheScores, 1.0);\n      LeafCollector acc = cc.getLeafCollector(null);\n      acc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        acc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new SimpleCollector() {\n        int prevDocID = -1;\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(), cacheScores, 1.0);\n      LeafCollector acc = cc.getLeafCollector(null);\n      acc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        acc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new SimpleCollector() {\n        int prevDocID = -1;\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n        \n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(), cacheScores, 1.0);\n      LeafCollector acc = cc.getLeafCollector(null);\n      acc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        acc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new SimpleCollector() {\n        int prevDocID = -1;\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n        \n        @Override\n        public boolean needsScores() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(), cacheScores, 1.0);\n      LeafCollector acc = cc.getLeafCollector(null);\n      acc.setScorer(new MockScorable());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        acc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new SimpleCollector() {\n        int prevDocID = -1;\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n        \n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(), cacheScores, 1.0);\n      LeafCollector acc = cc.getLeafCollector(null);\n      acc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        acc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new SimpleCollector() {\n        int prevDocID = -1;\n\n        @Override\n        public void collect(int doc) {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n        \n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["417142ff08fda9cf0b72d5133e63097a166c6458"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"417142ff08fda9cf0b72d5133e63097a166c6458":["781239fc84d36be12b84e4d3e2618f5f07a182e3","9fc47cb7b4346802411bb432f501ed0673d7119e"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["ae73da626f97850c922c42736f808d0378e165f0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["19275ba31e621f6da1b83bf13af75233876fd3d4","ae73da626f97850c922c42736f808d0378e165f0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"]},"commit2Childs":{"781239fc84d36be12b84e4d3e2618f5f07a182e3":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["19275ba31e621f6da1b83bf13af75233876fd3d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}