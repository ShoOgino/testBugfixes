{"path":"lucene/backwards/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","sourceNew":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","sourceOld":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/payloads/TestPayloadTermQuery#testNoPayload().mjava","sourceNew":null,"sourceOld":"  public void testNoPayload() throws Exception {\n    PayloadTermQuery q1 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"zero\"),\n            new MaxPayloadFunction());\n    PayloadTermQuery q2 = new PayloadTermQuery(new Term(PayloadHelper.NO_PAYLOAD_FIELD, \"foo\"),\n            new MaxPayloadFunction());\n    BooleanClause c1 = new BooleanClause(q1, BooleanClause.Occur.MUST);\n    BooleanClause c2 = new BooleanClause(q2, BooleanClause.Occur.MUST_NOT);\n    BooleanQuery query = new BooleanQuery();\n    query.add(c1);\n    query.add(c2);\n    TopDocs hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"hits Size: \" + hits.totalHits + \" is not: \" + 1, hits.totalHits == 1);\n    int[] results = new int[1];\n    results[0] = 0;//hits.scoreDocs[0].doc;\n    CheckHits.checkHitCollector(query, PayloadHelper.NO_PAYLOAD_FIELD, searcher, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}