{"path":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd0f953fbccd59aa346f280fe7e30a698f5ecb04","date":1331511349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.type());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    final LineFileDocs docs = new LineFileDocs(random);\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random.nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6550af40a4977993323e8fd3b3222a2402084800","date":1334548895,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75b4d037d2c8fd7d68c07be61d25c0260cf8091e","date":1336829560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    // TODO: what is the checkindex problem?\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b2a0f7efff91a413da6cc75c82ef07af7baba4","date":1338485531,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    // TODO: what is the checkindex problem?\n    dir.setCheckIndexOnClose(false); // can't set sim to checkindex yet\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new Field(floatTestField, \"\" + nextFloat, TextField.TYPE_STORED);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.simpleNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.simpleNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(floatTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FLOAT_32, normValues.getType());\n    float[] norms = (float[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, norms[i], 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04","9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1151ecb4798f5c31137aec032c241638018ed20","date":1394284367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random()));\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.shutdown();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues norms = open.getNormValues(floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, Float.intBitsToFloat((int)norms.longValue()), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, Float.intBitsToFloat((int)norms.longValue()), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, Float.intBitsToFloat((int)norms.longValue()), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(expected, Float.intBitsToFloat((int)norms.get(i)), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(floatTestField, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(floatTestField).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      float nextFloat = random().nextFloat();\n      Field f = new TextField(floatTestField, \"\" + nextFloat, Field.Store.YES);\n      f.setBoost(nextFloat);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      float expected = Float.parseFloat(document.get(floatTestField));\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, Float.intBitsToFloat((int)norms.longValue()), 0.0f);\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(FLOAT_TEST_FIELD, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(FLOAT_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, FLOAT_TEST_FIELD);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(FLOAT_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(floatTestField, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(floatTestField).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(FLOAT_TEST_FIELD, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(FLOAT_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, FLOAT_TEST_FIELD);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(FLOAT_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(floatTestField, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(floatTestField);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, floatTestField);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(floatTestField).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83b6127882c0ab8b61e2f7dc703d0fffa3cf58d9","date":1562742594,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCustomNorms#testFloatNorms().mjava","sourceNew":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 2, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(FLOAT_TEST_FIELD, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(FLOAT_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, FLOAT_TEST_FIELD);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(FLOAT_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","sourceOld":"  public void testFloatNorms() throws IOException {\n\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    IndexWriterConfig config = newIndexWriterConfig(analyzer);\n    Similarity provider = new MySimProvider();\n    config.setSimilarity(provider);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    final LineFileDocs docs = new LineFileDocs(random());\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      Document doc = docs.nextDoc();\n      int boost = TestUtil.nextInt(random(), 1, 10);\n      String value = IntStream.range(0, boost).mapToObj(k -> Integer.toString(boost)).collect(Collectors.joining(\" \"));\n      Field f = new TextField(FLOAT_TEST_FIELD, value, Field.Store.YES);\n\n      doc.add(f);\n      writer.addDocument(doc);\n      doc.removeField(FLOAT_TEST_FIELD);\n      if (rarely()) {\n        writer.commit();\n      }\n    }\n    writer.commit();\n    writer.close();\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues norms = MultiDocValues.getNormValues(open, FLOAT_TEST_FIELD);\n    assertNotNull(norms);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(FLOAT_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, norms.nextDoc());\n      assertEquals(expected, norms.longValue());\n    }\n    open.close();\n    dir.close();\n    docs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"5de502b5478255493125e7e801411ba17a6682ec":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["d4d69c535930b5cce125cff868d40f6373dc27d4","e1151ecb4798f5c31137aec032c241638018ed20"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["acd9883560fd89e6448b2b447302fe543040cd4f"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["6550af40a4977993323e8fd3b3222a2402084800"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"e1151ecb4798f5c31137aec032c241638018ed20":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["f0b2a0f7efff91a413da6cc75c82ef07af7baba4"],"1d028314cced5858683a1bb4741423d0f934257b":["d19974432be9aed28ee7dca73bdf01d139e763a9","aba371508186796cc6151d8223a5b4e16d02e26e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","d19974432be9aed28ee7dca73bdf01d139e763a9"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"0837ab0472feecb3a54260729d845f839e1cbd72":["1d028314cced5858683a1bb4741423d0f934257b"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e1151ecb4798f5c31137aec032c241638018ed20"],"f0b2a0f7efff91a413da6cc75c82ef07af7baba4":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6550af40a4977993323e8fd3b3222a2402084800":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"83b6127882c0ab8b61e2f7dc703d0fffa3cf58d9":["5de502b5478255493125e7e801411ba17a6682ec"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"acd9883560fd89e6448b2b447302fe543040cd4f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83b6127882c0ab8b61e2f7dc703d0fffa3cf58d9"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["aba371508186796cc6151d8223a5b4e16d02e26e"],"5de502b5478255493125e7e801411ba17a6682ec":["83b6127882c0ab8b61e2f7dc703d0fffa3cf58d9"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["f0b2a0f7efff91a413da6cc75c82ef07af7baba4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e1151ecb4798f5c31137aec032c241638018ed20":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"1d028314cced5858683a1bb4741423d0f934257b":["0837ab0472feecb3a54260729d845f839e1cbd72","d4d69c535930b5cce125cff868d40f6373dc27d4"],"aba371508186796cc6151d8223a5b4e16d02e26e":["1d028314cced5858683a1bb4741423d0f934257b"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","acd9883560fd89e6448b2b447302fe543040cd4f"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"f0b2a0f7efff91a413da6cc75c82ef07af7baba4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6550af40a4977993323e8fd3b3222a2402084800":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","e1151ecb4798f5c31137aec032c241638018ed20"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["1d028314cced5858683a1bb4741423d0f934257b","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"83b6127882c0ab8b61e2f7dc703d0fffa3cf58d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6550af40a4977993323e8fd3b3222a2402084800"],"acd9883560fd89e6448b2b447302fe543040cd4f":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","6f20fd35e3055a0c5b387df0b986a68d65d86441","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","38e3b736c7ca086d61b7dbb841c905ee115490da","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}