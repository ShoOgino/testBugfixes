{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createRequest(SolrRequest,String).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createRequest(SolrRequest,String).mjava","pathOld":"/dev/null","sourceNew":"  private Request createRequest(SolrRequest solrRequest, String collection) throws IOException, SolrServerException {\n    if (solrRequest.getBasePath() == null && serverBaseUrl == null)\n      throw new IllegalArgumentException(\"Destination node is not provided!\");\n\n    if (solrRequest instanceof V2RequestSupport) {\n      solrRequest = ((V2RequestSupport) solrRequest).getV2Request();\n    }\n    SolrParams params = solrRequest.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(solrRequest);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(solrRequest) : null;\n    String path = requestWriter.getPath(solrRequest);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n\n    ResponseParser parser = solrRequest.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n\n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n\n    //TODO add invariantParams support\n\n    String basePath = solrRequest.getBasePath() == null ? serverBaseUrl : solrRequest.getBasePath();\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (solrRequest instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = serverBaseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = serverBaseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == solrRequest.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return httpClient.newRequest(basePath + path + wparams.toQueryString()).method(HttpMethod.GET);\n    }\n\n    if (SolrRequest.METHOD.DELETE == solrRequest.getMethod()) {\n      return httpClient.newRequest(basePath + path + wparams.toQueryString()).method(HttpMethod.DELETE);\n    }\n\n    if (SolrRequest.METHOD.POST == solrRequest.getMethod() || SolrRequest.METHOD.PUT == solrRequest.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        hasNullStreamName = streams.stream().anyMatch(cs -> cs.getName() == null);\n      }\n\n      boolean isMultipart = streams != null && streams.size() > 1 && !hasNullStreamName;\n\n      HttpMethod method = SolrRequest.METHOD.POST == solrRequest.getMethod() ? HttpMethod.POST : HttpMethod.PUT;\n\n      if (contentWriter != null) {\n        Request req = httpClient\n            .newRequest(url + wparams.toQueryString())\n            .method(method);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        contentWriter.write(baos);\n\n        //TODO reduce memory usage\n        return req.content(new BytesContentProvider(contentWriter.getContentType(), baos.toByteArray()));\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(solrRequest.getQueryParams(), wparams));\n        Request req = httpClient\n            .newRequest(url + queryParams.toQueryString())\n            .method(method);\n        return fillContentStream(req, streams, wparams, isMultipart);\n      } else {\n        // It is has one stream, it is the post body, put the params in the URL\n        ContentStream contentStream = streams.iterator().next();\n        return httpClient\n            .newRequest(url + wparams.toQueryString())\n            .method(method)\n            .content(new InputStreamContentProvider(contentStream.getStream()), contentStream.getContentType());\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + solrRequest.getMethod());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51aeac3c35e69d5e76df30ad382f32f993d5f05","date":1567649655,"type":3,"author":"Megan Carey","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createRequest(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createRequest(SolrRequest,String).mjava","sourceNew":"  private Request createRequest(SolrRequest solrRequest, String collection) throws IOException, SolrServerException {\n    if (solrRequest.getBasePath() == null && serverBaseUrl == null)\n      throw new IllegalArgumentException(\"Destination node is not provided!\");\n\n    if (solrRequest instanceof V2RequestSupport) {\n      solrRequest = ((V2RequestSupport) solrRequest).getV2Request();\n    }\n    SolrParams params = solrRequest.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(solrRequest);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(solrRequest) : null;\n    String path = requestWriter.getPath(solrRequest);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n\n    ResponseParser parser = solrRequest.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n\n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n\n    //TODO add invariantParams support\n\n    String basePath = solrRequest.getBasePath() == null ? serverBaseUrl : solrRequest.getBasePath();\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (solrRequest instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = changeV2RequestEndpoint(basePath);\n      } else {\n        basePath = serverBaseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == solrRequest.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return httpClient.newRequest(basePath + path + wparams.toQueryString()).method(HttpMethod.GET);\n    }\n\n    if (SolrRequest.METHOD.DELETE == solrRequest.getMethod()) {\n      return httpClient.newRequest(basePath + path + wparams.toQueryString()).method(HttpMethod.DELETE);\n    }\n\n    if (SolrRequest.METHOD.POST == solrRequest.getMethod() || SolrRequest.METHOD.PUT == solrRequest.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        hasNullStreamName = streams.stream().anyMatch(cs -> cs.getName() == null);\n      }\n\n      boolean isMultipart = streams != null && streams.size() > 1 && !hasNullStreamName;\n\n      HttpMethod method = SolrRequest.METHOD.POST == solrRequest.getMethod() ? HttpMethod.POST : HttpMethod.PUT;\n\n      if (contentWriter != null) {\n        Request req = httpClient\n            .newRequest(url + wparams.toQueryString())\n            .method(method);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        contentWriter.write(baos);\n\n        //TODO reduce memory usage\n        return req.content(new BytesContentProvider(contentWriter.getContentType(), baos.toByteArray()));\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(solrRequest.getQueryParams(), wparams));\n        Request req = httpClient\n            .newRequest(url + queryParams.toQueryString())\n            .method(method);\n        return fillContentStream(req, streams, wparams, isMultipart);\n      } else {\n        // It is has one stream, it is the post body, put the params in the URL\n        ContentStream contentStream = streams.iterator().next();\n        return httpClient\n            .newRequest(url + wparams.toQueryString())\n            .method(method)\n            .content(new InputStreamContentProvider(contentStream.getStream()), contentStream.getContentType());\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + solrRequest.getMethod());\n  }\n\n","sourceOld":"  private Request createRequest(SolrRequest solrRequest, String collection) throws IOException, SolrServerException {\n    if (solrRequest.getBasePath() == null && serverBaseUrl == null)\n      throw new IllegalArgumentException(\"Destination node is not provided!\");\n\n    if (solrRequest instanceof V2RequestSupport) {\n      solrRequest = ((V2RequestSupport) solrRequest).getV2Request();\n    }\n    SolrParams params = solrRequest.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(solrRequest);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(solrRequest) : null;\n    String path = requestWriter.getPath(solrRequest);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n\n    ResponseParser parser = solrRequest.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n\n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n\n    //TODO add invariantParams support\n\n    String basePath = solrRequest.getBasePath() == null ? serverBaseUrl : solrRequest.getBasePath();\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (solrRequest instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = serverBaseUrl.replace(\"/solr\", \"/api\");\n      } else {\n        basePath = serverBaseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == solrRequest.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return httpClient.newRequest(basePath + path + wparams.toQueryString()).method(HttpMethod.GET);\n    }\n\n    if (SolrRequest.METHOD.DELETE == solrRequest.getMethod()) {\n      return httpClient.newRequest(basePath + path + wparams.toQueryString()).method(HttpMethod.DELETE);\n    }\n\n    if (SolrRequest.METHOD.POST == solrRequest.getMethod() || SolrRequest.METHOD.PUT == solrRequest.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        hasNullStreamName = streams.stream().anyMatch(cs -> cs.getName() == null);\n      }\n\n      boolean isMultipart = streams != null && streams.size() > 1 && !hasNullStreamName;\n\n      HttpMethod method = SolrRequest.METHOD.POST == solrRequest.getMethod() ? HttpMethod.POST : HttpMethod.PUT;\n\n      if (contentWriter != null) {\n        Request req = httpClient\n            .newRequest(url + wparams.toQueryString())\n            .method(method);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        contentWriter.write(baos);\n\n        //TODO reduce memory usage\n        return req.content(new BytesContentProvider(contentWriter.getContentType(), baos.toByteArray()));\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(solrRequest.getQueryParams(), wparams));\n        Request req = httpClient\n            .newRequest(url + queryParams.toQueryString())\n            .method(method);\n        return fillContentStream(req, streams, wparams, isMultipart);\n      } else {\n        // It is has one stream, it is the post body, put the params in the URL\n        ContentStream contentStream = streams.iterator().next();\n        return httpClient\n            .newRequest(url + wparams.toQueryString())\n            .method(method)\n            .content(new InputStreamContentProvider(contentStream.getStream()), contentStream.getContentType());\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + solrRequest.getMethod());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createRequest(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createRequest(SolrRequest,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private Request createRequest(@SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest, String collection) throws IOException, SolrServerException {\n    if (solrRequest.getBasePath() == null && serverBaseUrl == null)\n      throw new IllegalArgumentException(\"Destination node is not provided!\");\n\n    if (solrRequest instanceof V2RequestSupport) {\n      solrRequest = ((V2RequestSupport) solrRequest).getV2Request();\n    }\n    SolrParams params = solrRequest.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(solrRequest);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(solrRequest) : null;\n    String path = requestWriter.getPath(solrRequest);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n\n    ResponseParser parser = solrRequest.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n\n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n\n    //TODO add invariantParams support\n\n    String basePath = solrRequest.getBasePath() == null ? serverBaseUrl : solrRequest.getBasePath();\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (solrRequest instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = changeV2RequestEndpoint(basePath);\n      } else {\n        basePath = serverBaseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == solrRequest.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return httpClient.newRequest(basePath + path + wparams.toQueryString()).method(HttpMethod.GET);\n    }\n\n    if (SolrRequest.METHOD.DELETE == solrRequest.getMethod()) {\n      return httpClient.newRequest(basePath + path + wparams.toQueryString()).method(HttpMethod.DELETE);\n    }\n\n    if (SolrRequest.METHOD.POST == solrRequest.getMethod() || SolrRequest.METHOD.PUT == solrRequest.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        hasNullStreamName = streams.stream().anyMatch(cs -> cs.getName() == null);\n      }\n\n      boolean isMultipart = streams != null && streams.size() > 1 && !hasNullStreamName;\n\n      HttpMethod method = SolrRequest.METHOD.POST == solrRequest.getMethod() ? HttpMethod.POST : HttpMethod.PUT;\n\n      if (contentWriter != null) {\n        Request req = httpClient\n            .newRequest(url + wparams.toQueryString())\n            .method(method);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        contentWriter.write(baos);\n\n        //TODO reduce memory usage\n        return req.content(new BytesContentProvider(contentWriter.getContentType(), baos.toByteArray()));\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(solrRequest.getQueryParams(), wparams));\n        Request req = httpClient\n            .newRequest(url + queryParams.toQueryString())\n            .method(method);\n        return fillContentStream(req, streams, wparams, isMultipart);\n      } else {\n        // It is has one stream, it is the post body, put the params in the URL\n        ContentStream contentStream = streams.iterator().next();\n        return httpClient\n            .newRequest(url + wparams.toQueryString())\n            .method(method)\n            .content(new InputStreamContentProvider(contentStream.getStream()), contentStream.getContentType());\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + solrRequest.getMethod());\n  }\n\n","sourceOld":"  private Request createRequest(SolrRequest solrRequest, String collection) throws IOException, SolrServerException {\n    if (solrRequest.getBasePath() == null && serverBaseUrl == null)\n      throw new IllegalArgumentException(\"Destination node is not provided!\");\n\n    if (solrRequest instanceof V2RequestSupport) {\n      solrRequest = ((V2RequestSupport) solrRequest).getV2Request();\n    }\n    SolrParams params = solrRequest.getParams();\n    RequestWriter.ContentWriter contentWriter = requestWriter.getContentWriter(solrRequest);\n    Collection<ContentStream> streams = contentWriter == null ? requestWriter.getContentStreams(solrRequest) : null;\n    String path = requestWriter.getPath(solrRequest);\n    if (path == null || !path.startsWith(\"/\")) {\n      path = DEFAULT_PATH;\n    }\n\n    ResponseParser parser = solrRequest.getResponseParser();\n    if (parser == null) {\n      parser = this.parser;\n    }\n\n    // The parser 'wt=' and 'version=' params are used instead of the original\n    // params\n    ModifiableSolrParams wparams = new ModifiableSolrParams(params);\n    if (parser != null) {\n      wparams.set(CommonParams.WT, parser.getWriterType());\n      wparams.set(CommonParams.VERSION, parser.getVersion());\n    }\n\n    //TODO add invariantParams support\n\n    String basePath = solrRequest.getBasePath() == null ? serverBaseUrl : solrRequest.getBasePath();\n    if (collection != null)\n      basePath += \"/\" + collection;\n\n    if (solrRequest instanceof V2Request) {\n      if (System.getProperty(\"solr.v2RealPath\") == null) {\n        basePath = changeV2RequestEndpoint(basePath);\n      } else {\n        basePath = serverBaseUrl + \"/____v2\";\n      }\n    }\n\n    if (SolrRequest.METHOD.GET == solrRequest.getMethod()) {\n      if (streams != null || contentWriter != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\");\n      }\n\n      return httpClient.newRequest(basePath + path + wparams.toQueryString()).method(HttpMethod.GET);\n    }\n\n    if (SolrRequest.METHOD.DELETE == solrRequest.getMethod()) {\n      return httpClient.newRequest(basePath + path + wparams.toQueryString()).method(HttpMethod.DELETE);\n    }\n\n    if (SolrRequest.METHOD.POST == solrRequest.getMethod() || SolrRequest.METHOD.PUT == solrRequest.getMethod()) {\n\n      String url = basePath + path;\n      boolean hasNullStreamName = false;\n      if (streams != null) {\n        hasNullStreamName = streams.stream().anyMatch(cs -> cs.getName() == null);\n      }\n\n      boolean isMultipart = streams != null && streams.size() > 1 && !hasNullStreamName;\n\n      HttpMethod method = SolrRequest.METHOD.POST == solrRequest.getMethod() ? HttpMethod.POST : HttpMethod.PUT;\n\n      if (contentWriter != null) {\n        Request req = httpClient\n            .newRequest(url + wparams.toQueryString())\n            .method(method);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        contentWriter.write(baos);\n\n        //TODO reduce memory usage\n        return req.content(new BytesContentProvider(contentWriter.getContentType(), baos.toByteArray()));\n      } else if (streams == null || isMultipart) {\n        // send server list and request list as query string params\n        ModifiableSolrParams queryParams = calculateQueryParams(this.queryParams, wparams);\n        queryParams.add(calculateQueryParams(solrRequest.getQueryParams(), wparams));\n        Request req = httpClient\n            .newRequest(url + queryParams.toQueryString())\n            .method(method);\n        return fillContentStream(req, streams, wparams, isMultipart);\n      } else {\n        // It is has one stream, it is the post body, put the params in the URL\n        ContentStream contentStream = streams.iterator().next();\n        return httpClient\n            .newRequest(url + wparams.toQueryString())\n            .method(method)\n            .content(new InputStreamContentProvider(contentStream.getStream()), contentStream.getContentType());\n      }\n    }\n\n    throw new SolrServerException(\"Unsupported method: \" + solrRequest.getMethod());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["a51aeac3c35e69d5e76df30ad382f32f993d5f05"],"a51aeac3c35e69d5e76df30ad382f32f993d5f05":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a51aeac3c35e69d5e76df30ad382f32f993d5f05"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a51aeac3c35e69d5e76df30ad382f32f993d5f05":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}