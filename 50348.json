{"path":"solr/core/src/java/org/apache/solr/core/SolrCoreDiscoverer#walkFromHere(File,CoreContainer,Map[String,CoreDescriptor]).mjava","commits":[{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCoreDiscoverer#walkFromHere(File,CoreContainer,Map[String,CoreDescriptor]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#walkFromHere(File,CoreContainer,Map[String,String],HashMap[String,String]).mjava","sourceNew":"  // Basic recursive tree walking, looking for \"core.properties\" files. Once one is found, we'll stop going any\n  // deeper in the tree.\n  //\n  private void walkFromHere(File file, CoreContainer container, Map<String,CoreDescriptor> coreDescriptorMap)\n      throws IOException {\n    log.info(\"Looking for cores in \" + file.getCanonicalPath());\n    if (! file.exists()) return;\n\n    for (File childFile : file.listFiles()) {\n      // This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed\n      // in. In other words we're looking for core.properties in the grandchild directories of the parameter passed\n      // in. That allows us to gracefully top recursing deep but continue looking wide.\n      File propFile = new File(childFile, CORE_PROP_FILE);\n      if (propFile.exists()) { // Stop looking after processing this file!\n        addCore(container, childFile, propFile, coreDescriptorMap);\n        continue; // Go on to the sibling directory, don't descend any deeper.\n      }\n      if (childFile.isDirectory()) {\n        walkFromHere(childFile, container, coreDescriptorMap);\n      }\n    }\n  }\n\n","sourceOld":"  // Basic recursive tree walking, looking for \"core.properties\" files. Once one is found, we'll stop going any\n  // deeper in the tree.\n  //\n  // @param file - the directory we're to either read the properties file from or recurse into.\n  private void walkFromHere(File file, CoreContainer container, Map<String, String> seenDirs, HashMap<String, String> seenCores)\n      throws IOException {\n    log.info(\"Looking for cores in \" + file.getCanonicalPath());\n    if (! file.exists()) return;\n\n    for (File childFile : file.listFiles()) {\n      // This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed\n      // in. In other words we're looking for core.properties in the grandchild directories of the parameter passed\n      // in. That allows us to gracefully top recursing deep but continue looking wide.\n      File propFile = new File(childFile, CORE_PROP_FILE);\n      if (propFile.exists()) { // Stop looking after processing this file!\n        addCore(container, seenDirs, seenCores, childFile, propFile);\n        continue; // Go on to the sibling directory, don't descend any deeper.\n      }\n      if (childFile.isDirectory()) {\n        walkFromHere(childFile, container, seenDirs, seenCores);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba8a535881bd36c93b6eb3ccce91f29f5fa20fdf","date":1367328423,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCoreDiscoverer#walkFromHere(File,CoreContainer,Map[String,CoreDescriptor]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCoreDiscoverer#walkFromHere(File,CoreContainer,Map[String,CoreDescriptor]).mjava","sourceNew":"  // Basic recursive tree walking, looking for \"core.properties\" files. Once one is found, we'll stop going any\n  // deeper in the tree.\n  //\n  private void walkFromHere(File file, CoreContainer container, Map<String,CoreDescriptor> coreDescriptorMap)\n      throws IOException {\n    log.info(\"Looking for cores in \" + file.getCanonicalPath());\n    if (! file.exists()) return;\n\n    for (File childFile : file.listFiles()) {\n      // This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed\n      // in. In other words we're looking for core.properties in the grandchild directories of the parameter passed\n      // in. That allows us to gracefully stop recursing deep but continue looking wide.\n      File propFile = new File(childFile, CORE_PROP_FILE);\n      if (propFile.exists()) { // Stop looking after processing this file!\n        addCore(container, childFile, propFile, coreDescriptorMap);\n        continue; // Go on to the sibling directory, don't descend any deeper.\n      }\n      if (childFile.isDirectory()) {\n        walkFromHere(childFile, container, coreDescriptorMap);\n      }\n    }\n  }\n\n","sourceOld":"  // Basic recursive tree walking, looking for \"core.properties\" files. Once one is found, we'll stop going any\n  // deeper in the tree.\n  //\n  private void walkFromHere(File file, CoreContainer container, Map<String,CoreDescriptor> coreDescriptorMap)\n      throws IOException {\n    log.info(\"Looking for cores in \" + file.getCanonicalPath());\n    if (! file.exists()) return;\n\n    for (File childFile : file.listFiles()) {\n      // This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed\n      // in. In other words we're looking for core.properties in the grandchild directories of the parameter passed\n      // in. That allows us to gracefully top recursing deep but continue looking wide.\n      File propFile = new File(childFile, CORE_PROP_FILE);\n      if (propFile.exists()) { // Stop looking after processing this file!\n        addCore(container, childFile, propFile, coreDescriptorMap);\n        continue; // Go on to the sibling directory, don't descend any deeper.\n      }\n      if (childFile.isDirectory()) {\n        walkFromHere(childFile, container, coreDescriptorMap);\n      }\n    }\n  }\n\n","bugFix":["e475642767c688ede5728d7918326f70b4e0bf3a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCoreDiscoverer#walkFromHere(File,CoreContainer,Map[String,CoreDescriptor]).mjava","sourceNew":null,"sourceOld":"  // Basic recursive tree walking, looking for \"core.properties\" files. Once one is found, we'll stop going any\n  // deeper in the tree.\n  //\n  private void walkFromHere(File file, CoreContainer container, Map<String,CoreDescriptor> coreDescriptorMap)\n      throws IOException {\n    log.info(\"Looking for cores in \" + file.getCanonicalPath());\n    if (! file.exists()) return;\n\n    for (File childFile : file.listFiles()) {\n      // This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed\n      // in. In other words we're looking for core.properties in the grandchild directories of the parameter passed\n      // in. That allows us to gracefully stop recursing deep but continue looking wide.\n      File propFile = new File(childFile, CORE_PROP_FILE);\n      if (propFile.exists()) { // Stop looking after processing this file!\n        addCore(container, childFile, propFile, coreDescriptorMap);\n        continue; // Go on to the sibling directory, don't descend any deeper.\n      }\n      if (childFile.isDirectory()) {\n        walkFromHere(childFile, container, coreDescriptorMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCoreDiscoverer#walkFromHere(File,CoreContainer,Map[String,CoreDescriptor]).mjava","sourceNew":null,"sourceOld":"  // Basic recursive tree walking, looking for \"core.properties\" files. Once one is found, we'll stop going any\n  // deeper in the tree.\n  //\n  private void walkFromHere(File file, CoreContainer container, Map<String,CoreDescriptor> coreDescriptorMap)\n      throws IOException {\n    log.info(\"Looking for cores in \" + file.getCanonicalPath());\n    if (! file.exists()) return;\n\n    for (File childFile : file.listFiles()) {\n      // This is a little tricky, we are asking if core.properties exists in a child directory of the directory passed\n      // in. In other words we're looking for core.properties in the grandchild directories of the parameter passed\n      // in. That allows us to gracefully stop recursing deep but continue looking wide.\n      File propFile = new File(childFile, CORE_PROP_FILE);\n      if (propFile.exists()) { // Stop looking after processing this file!\n        addCore(container, childFile, propFile, coreDescriptorMap);\n        continue; // Go on to the sibling directory, don't descend any deeper.\n      }\n      if (childFile.isDirectory()) {\n        walkFromHere(childFile, container, coreDescriptorMap);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b29abed5661c7911e4b45d5a3d79a186268e28c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["ba8a535881bd36c93b6eb3ccce91f29f5fa20fdf","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba8a535881bd36c93b6eb3ccce91f29f5fa20fdf":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["ba8a535881bd36c93b6eb3ccce91f29f5fa20fdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"]},"commit2Childs":{"b29abed5661c7911e4b45d5a3d79a186268e28c4":["ba8a535881bd36c93b6eb3ccce91f29f5fa20fdf"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"ba8a535881bd36c93b6eb3ccce91f29f5fa20fdf":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}