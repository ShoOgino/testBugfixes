{"path":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","commits":[{"id":"45ae8f6354b0826d27014deff71fe330604a9783","date":1378195819,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n      throws IOException {\n    if (textTerms == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Long output = 0l;\n    TokenStream tokenStream = analyzer.tokenStream(textFieldName,\n        new StringReader(text));\n    CharTermAttribute charTermAttribute = tokenStream\n        .addAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n    while (tokenStream.incrementToken()) {\n      String s = charTermAttribute.toString();\n      Long d = Util.get(fst, new BytesRef(s));\n      if (d != null) {\n        output += d;\n      }\n    }\n    tokenStream.end();\n    tokenStream.close();\n\n    return new ClassificationResult<>(output >= threshold, output.doubleValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n      throws IOException {\n    if (textTerms == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n        .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    return new ClassificationResult<>(output >= threshold, output.doubleValue());\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n      throws IOException {\n    if (textTerms == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Long output = 0l;\n    TokenStream tokenStream = analyzer.tokenStream(textFieldName,\n        new StringReader(text));\n    CharTermAttribute charTermAttribute = tokenStream\n        .addAttribute(CharTermAttribute.class);\n    tokenStream.reset();\n    while (tokenStream.incrementToken()) {\n      String s = charTermAttribute.toString();\n      Long d = Util.get(fst, new BytesRef(s));\n      if (d != null) {\n        output += d;\n      }\n    }\n    tokenStream.end();\n    tokenStream.close();\n\n    return new ClassificationResult<>(output >= threshold, output.doubleValue());\n  }\n\n","bugFix":["45ae8f6354b0826d27014deff71fe330604a9783"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44","date":1415781486,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n      throws IOException {\n    if (textTerms == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n          .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n      throws IOException {\n    if (textTerms == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n        .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    return new ClassificationResult<>(output >= threshold, output.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    if (textTerms == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n      throws IOException {\n    if (textTerms == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n          .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b1d9c529eb221063d2cb164d05be5f922980ac7","date":1430403225,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    if (textTerms == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n      tokenStream.close();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f71444b947a2941c0e12d40225501190333449f9","date":1445162893,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n      tokenStream.close();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"444d4b906d0e3398f87d6a5c4967c508f11a7f0b","date":1466507434,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0L;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0L;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0l;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f47bd829c0cc2c9959c321f4b5ffba15e58fa41","date":1491555560,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0L;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(bias - output.doubleValue()) / bias);\n    return new ClassificationResult<>(output >= bias, score);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0L;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0L;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(bias - output.doubleValue()) / bias);\n    return new ClassificationResult<>(output >= bias, score);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0L;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(threshold - output.doubleValue()) / threshold);\n    return new ClassificationResult<>(output >= threshold, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","sourceNew":"  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0L;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(bias - output.doubleValue()) / bias);\n    return new ClassificationResult<>(output >= bias, score);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0L;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(bias - output.doubleValue()) / bias);\n    return new ClassificationResult<>(output >= bias, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/BooleanPerceptronClassifier#assignClass(String).mjava","sourceNew":"  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0L;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(bias - output.doubleValue()) / bias);\n    return new ClassificationResult<>(output >= bias, score);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ClassificationResult<Boolean> assignClass(String text)\n          throws IOException {\n    Long output = 0L;\n    try (TokenStream tokenStream = analyzer.tokenStream(textFieldName, text)) {\n      CharTermAttribute charTermAttribute = tokenStream\n              .addAttribute(CharTermAttribute.class);\n      tokenStream.reset();\n      while (tokenStream.incrementToken()) {\n        String s = charTermAttribute.toString();\n        Long d = Util.get(fst, new BytesRef(s));\n        if (d != null) {\n          output += d;\n        }\n      }\n      tokenStream.end();\n    }\n\n    double score = 1 - Math.exp(-1 * Math.abs(bias - output.doubleValue()) / bias);\n    return new ClassificationResult<>(output >= bias, score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["f71444b947a2941c0e12d40225501190333449f9"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"b94236357aaa22b76c10629851fe4e376e0cea82":["0f47bd829c0cc2c9959c321f4b5ffba15e58fa41","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["0f47bd829c0cc2c9959c321f4b5ffba15e58fa41"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["45ae8f6354b0826d27014deff71fe330604a9783"],"1b1d9c529eb221063d2cb164d05be5f922980ac7":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f71444b947a2941c0e12d40225501190333449f9","444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44"],"45ae8f6354b0826d27014deff71fe330604a9783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["1b1d9c529eb221063d2cb164d05be5f922980ac7"],"e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f47bd829c0cc2c9959c321f4b5ffba15e58fa41":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"f71444b947a2941c0e12d40225501190333449f9":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"]},"commit2Childs":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0f47bd829c0cc2c9959c321f4b5ffba15e58fa41"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44"],"1b1d9c529eb221063d2cb164d05be5f922980ac7":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"45ae8f6354b0826d27014deff71fe330604a9783":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["1b1d9c529eb221063d2cb164d05be5f922980ac7"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["f71444b947a2941c0e12d40225501190333449f9"],"e7e9c8ade373b2cc85c2a51c4f5961bb0695cc44":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ae8f6354b0826d27014deff71fe330604a9783"],"0f47bd829c0cc2c9959c321f4b5ffba15e58fa41":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"f71444b947a2941c0e12d40225501190333449f9":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}