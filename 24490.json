{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#assertRangeQuery(NumberType,NumberType,boolean,boolean,int).mjava","commits":[{"id":"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d","date":1310245513,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#assertRangeQuery(NumberType,NumberType,boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  public void assertRangeQuery(NumberType lowerType, NumberType upperType,\n      boolean upperInclusive, boolean lowerInclusive, int expectedDocCount)\n      throws QueryNodeException, IOException {\n    \n    StringBuilder sb = new StringBuilder();\n    \n    String lowerInclusiveStr = (lowerInclusive ? \"[\" : \"{\");\n    String upperInclusiveStr = (upperInclusive ? \"]\" : \"}\");\n    \n    for (NumericField.DataType type : NumericField.DataType.values()) {\n      String lowerStr = numberToString(getNumberType(lowerType, type.name()));\n      String upperStr = numberToString(getNumberType(upperType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(':').append(lowerInclusiveStr)\n          .append('\"').append(lowerStr).append(\"\\\" TO \\\"\").append(upperStr)\n          .append('\"').append(upperInclusiveStr).append(' ');\n    }\n    \n    String lowerDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(lowerType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    String upperDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(upperType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(':')\n        .append(lowerInclusiveStr).append('\"').append(lowerDateStr).append(\n            \"\\\" TO \\\"\").append(upperDateStr).append('\"').append(\n            upperInclusiveStr);\n    \n    testQuery(sb.toString(), expectedDocCount);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","e91b7614171e0a6a82351457c2870d2a0124ba9a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#assertRangeQuery(NumberType,NumberType,boolean,boolean,int).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestNumericQueryParser#assertRangeQuery(NumberType,NumberType,boolean,boolean,int).mjava","sourceNew":"  public void assertRangeQuery(NumberType lowerType, NumberType upperType,\n      boolean upperInclusive, boolean lowerInclusive, int expectedDocCount)\n      throws QueryNodeException, IOException {\n    \n    StringBuilder sb = new StringBuilder();\n    \n    String lowerInclusiveStr = (lowerInclusive ? \"[\" : \"{\");\n    String upperInclusiveStr = (upperInclusive ? \"]\" : \"}\");\n    \n    for (NumericField.DataType type : NumericField.DataType.values()) {\n      String lowerStr = numberToString(getNumberType(lowerType, type.name()));\n      String upperStr = numberToString(getNumberType(upperType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(':').append(lowerInclusiveStr)\n          .append('\"').append(lowerStr).append(\"\\\" TO \\\"\").append(upperStr)\n          .append('\"').append(upperInclusiveStr).append(' ');\n    }\n    \n    String lowerDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(lowerType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    String upperDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(upperType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(':')\n        .append(lowerInclusiveStr).append('\"').append(lowerDateStr).append(\n            \"\\\" TO \\\"\").append(upperDateStr).append('\"').append(\n            upperInclusiveStr);\n    \n    testQuery(sb.toString(), expectedDocCount);\n    \n  }\n\n","sourceOld":"  public void assertRangeQuery(NumberType lowerType, NumberType upperType,\n      boolean upperInclusive, boolean lowerInclusive, int expectedDocCount)\n      throws QueryNodeException, IOException {\n    \n    StringBuilder sb = new StringBuilder();\n    \n    String lowerInclusiveStr = (lowerInclusive ? \"[\" : \"{\");\n    String upperInclusiveStr = (upperInclusive ? \"]\" : \"}\");\n    \n    for (NumericField.DataType type : NumericField.DataType.values()) {\n      String lowerStr = numberToString(getNumberType(lowerType, type.name()));\n      String upperStr = numberToString(getNumberType(upperType, type.name()));\n      \n      sb.append(\"+\").append(type.name()).append(':').append(lowerInclusiveStr)\n          .append('\"').append(lowerStr).append(\"\\\" TO \\\"\").append(upperStr)\n          .append('\"').append(upperInclusiveStr).append(' ');\n    }\n    \n    String lowerDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(lowerType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    String upperDateStr = ESCAPER.escape(\n        DATE_FORMAT.format(new Date(getNumberType(upperType, DATE_FIELD_NAME)\n            .longValue())), LOCALE, EscapeQuerySyntax.Type.STRING).toString();\n    \n    sb.append(\"+\").append(DATE_FIELD_NAME).append(':')\n        .append(lowerInclusiveStr).append('\"').append(lowerDateStr).append(\n            \"\\\" TO \\\"\").append(upperDateStr).append('\"').append(\n            upperInclusiveStr);\n    \n    testQuery(sb.toString(), expectedDocCount);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}