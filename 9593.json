{"path":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#test().mjava","commits":[{"id":"5220c264531ed933424a495eb8ed8ada158961cc","date":1493367833,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws SolrServerException, IOException {\n    final boolean asc = random().nextBoolean();\n    final String dir = asc ? \"asc\": \"desc\";\n    final String parentFilter = \"+parentFilter_s:(\"+matchingParent+\" \"+anyValsSpaceDelim(2)+\")^=0\";\n    String childFilter = \"+childFilter_s:(\"+matchingChild+\" \"+anyValsSpaceDelim(4)+\")^=0\";\n    final String fl = \"id,type_s,parent_id_s1,val_s1,score,parentFilter_s,childFilter_s,parentTie_s1\";\n    String sortClause = \"val_s1 \"+dir+\", \"+\"parent_id_s1 \"+ascDesc();\n    if(rarely()) {\n      sortClause =\"parentTie_s1 \"+ascDesc()+\",\"+sortClause;\n    }\n    final SolrQuery q = new SolrQuery(\"q\", \"+type_s:child^=0 \"+parentFilter+\" \"+\n          childFilter ,\n        \"sort\", sortClause, \n        \"rows\", \"\"+maxDocs,\n        \"fl\",fl);\n\n    final QueryResponse children = client.query(q);\n    \n    final SolrQuery bjq = new SolrQuery(\"q\", \"{!parent which=type_s:parent}(+type_s:child^=0 \"+parentFilter+\" \"+\n        childFilter+\")\",\n       \"sort\", sortClause.replace(\"val_s1 \", \"childfield(val_s1)\"),\n        \"rows\", \"\"+maxDocs, \"fl\", fl);\n\n    final QueryResponse parents = client.query(bjq);\n    \n    Set<String> parentIds = new LinkedHashSet<>();\n    assertTrue(\"it can never be empty for sure\", parents.getResults().size()>0);\n    for(Iterator<SolrDocument> parentIter = parents.getResults().iterator(); parentIter.hasNext();) {\n      for (SolrDocument child : children.getResults()) {\n        assertEquals(\"child\", child.getFirstValue(\"type_s\"));\n        final String parentId = (String) child.getFirstValue(\"parent_id_s1\");\n        if( parentIds.add(parentId) ) { // in children the next parent appears, it should be next at parents \n          final SolrDocument parent = parentIter.next();\n          assertEquals(\"parent\", parent.getFirstValue(\"type_s\"));\n          final String actParentId = \"\"+ parent.get(\"id\");\n          if (!actParentId.equals(parentId)) {\n            final String chDump = children.toString().replace(\"SolrDocument\",\"\\nSolrDocument\");\n            System.out.println(\"\\n\\n\"+chDump.substring(0,5000)+\"\\n\\n\");\n            System.out.println(\"\\n\\n\"+chDump\n                +\"\\n\\n\");\n          }\n          assertEquals(actParentId, parentId);\n        }\n      }\n    }\n\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02ea2fa46568487e04cba3f11bf8bfc7e2c08a1f","date":1493463311,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#test().mjava","sourceNew":"  @Test @Repeat(iterations=2)\n  public void test() throws SolrServerException, IOException {\n    final boolean asc = random().nextBoolean();\n    final String dir = asc ? \"asc\": \"desc\";\n    final String parentFilter = \"+parentFilter_s:(\"+matchingParent+\" \"+anyValsSpaceDelim(2)+\")^=0\";\n    String childFilter = \"+childFilter_s:(\"+matchingChild+\" \"+anyValsSpaceDelim(4)+\")^=0\";\n    final String fl = \"id,type_s,parent_id_s1,val_s1,score,parentFilter_s,childFilter_s,parentTie_s1\";\n    String sortClause = \"val_s1 \"+dir+\", \"+\"parent_id_s1 \"+ascDesc();\n    if(rarely()) {\n      sortClause =\"parentTie_s1 \"+ascDesc()+\",\"+sortClause;\n    }\n    final SolrQuery q = new SolrQuery(\"q\", \"+type_s:child^=0 \"+parentFilter+\" \"+\n          childFilter ,\n        \"sort\", sortClause, \n        \"rows\", \"\"+maxDocs,\n        \"fl\",fl);\n\n    final QueryResponse children = client.query(q);\n    \n    final SolrQuery bjq = new SolrQuery(\"q\", \"{!parent which=type_s:parent}(+type_s:child^=0 \"+parentFilter+\" \"+\n        childFilter+\")\",\n       \"sort\", sortClause.replace(\"val_s1 \", \"childfield(val_s1)\"),\n        \"rows\", \"\"+maxDocs, \"fl\", fl);\n\n    final QueryResponse parents = client.query(bjq);\n    \n    Set<String> parentIds = new LinkedHashSet<>();\n    assertTrue(\"it can never be empty for sure\", parents.getResults().size()>0);\n    for(Iterator<SolrDocument> parentIter = parents.getResults().iterator(); parentIter.hasNext();) {\n      for (SolrDocument child : children.getResults()) {\n        assertEquals(\"child\", child.getFirstValue(\"type_s\"));\n        final String parentId = (String) child.getFirstValue(\"parent_id_s1\");\n        if( parentIds.add(parentId) ) { // in children the next parent appears, it should be next at parents \n          final SolrDocument parent = parentIter.next();\n          assertEquals(\"parent\", parent.getFirstValue(\"type_s\"));\n          final String actParentId = \"\"+ parent.get(\"id\");\n          if (!actParentId.equals(parentId)) {\n            final String chDump = children.toString().replace(\"SolrDocument\",\"\\nSolrDocument\");\n            System.out.println(\"\\n\\n\"+chDump.substring(0,5000)+\"\\n\\n\");\n            System.out.println(\"\\n\\n\"+chDump\n                +\"\\n\\n\");\n          }\n          assertEquals(actParentId, parentId);\n        }\n      }\n    }\n\n    \n  }\n\n","sourceOld":"  @Test\n  public void test() throws SolrServerException, IOException {\n    final boolean asc = random().nextBoolean();\n    final String dir = asc ? \"asc\": \"desc\";\n    final String parentFilter = \"+parentFilter_s:(\"+matchingParent+\" \"+anyValsSpaceDelim(2)+\")^=0\";\n    String childFilter = \"+childFilter_s:(\"+matchingChild+\" \"+anyValsSpaceDelim(4)+\")^=0\";\n    final String fl = \"id,type_s,parent_id_s1,val_s1,score,parentFilter_s,childFilter_s,parentTie_s1\";\n    String sortClause = \"val_s1 \"+dir+\", \"+\"parent_id_s1 \"+ascDesc();\n    if(rarely()) {\n      sortClause =\"parentTie_s1 \"+ascDesc()+\",\"+sortClause;\n    }\n    final SolrQuery q = new SolrQuery(\"q\", \"+type_s:child^=0 \"+parentFilter+\" \"+\n          childFilter ,\n        \"sort\", sortClause, \n        \"rows\", \"\"+maxDocs,\n        \"fl\",fl);\n\n    final QueryResponse children = client.query(q);\n    \n    final SolrQuery bjq = new SolrQuery(\"q\", \"{!parent which=type_s:parent}(+type_s:child^=0 \"+parentFilter+\" \"+\n        childFilter+\")\",\n       \"sort\", sortClause.replace(\"val_s1 \", \"childfield(val_s1)\"),\n        \"rows\", \"\"+maxDocs, \"fl\", fl);\n\n    final QueryResponse parents = client.query(bjq);\n    \n    Set<String> parentIds = new LinkedHashSet<>();\n    assertTrue(\"it can never be empty for sure\", parents.getResults().size()>0);\n    for(Iterator<SolrDocument> parentIter = parents.getResults().iterator(); parentIter.hasNext();) {\n      for (SolrDocument child : children.getResults()) {\n        assertEquals(\"child\", child.getFirstValue(\"type_s\"));\n        final String parentId = (String) child.getFirstValue(\"parent_id_s1\");\n        if( parentIds.add(parentId) ) { // in children the next parent appears, it should be next at parents \n          final SolrDocument parent = parentIter.next();\n          assertEquals(\"parent\", parent.getFirstValue(\"type_s\"));\n          final String actParentId = \"\"+ parent.get(\"id\");\n          if (!actParentId.equals(parentId)) {\n            final String chDump = children.toString().replace(\"SolrDocument\",\"\\nSolrDocument\");\n            System.out.println(\"\\n\\n\"+chDump.substring(0,5000)+\"\\n\\n\");\n            System.out.println(\"\\n\\n\"+chDump\n                +\"\\n\\n\");\n          }\n          assertEquals(actParentId, parentId);\n        }\n      }\n    }\n\n    \n  }\n\n","bugFix":null,"bugIntro":["fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test @Repeat(iterations=2)\n  public void test() throws SolrServerException, IOException {\n    final boolean asc = random().nextBoolean();\n    final String dir = asc ? \"asc\": \"desc\";\n    final String parentFilter = \"+parentFilter_s:(\"+matchingParent+\" \"+anyValsSpaceDelim(2)+\")^=0\";\n    String childFilter = \"+childFilter_s:(\"+matchingChild+\" \"+anyValsSpaceDelim(4)+\")^=0\";\n    final String fl = \"id,type_s,parent_id_s1,val_s1,score,parentFilter_s,childFilter_s,parentTie_s1\";\n    String sortClause = \"val_s1 \"+dir+\", \"+\"parent_id_s1 \"+ascDesc();\n    if(rarely()) {\n      sortClause =\"parentTie_s1 \"+ascDesc()+\",\"+sortClause;\n    }\n    final SolrQuery q = new SolrQuery(\"q\", \"+type_s:child^=0 \"+parentFilter+\" \"+\n          childFilter ,\n        \"sort\", sortClause, \n        \"rows\", \"\"+maxDocs,\n        \"fl\",fl);\n\n    final QueryResponse children = client.query(q);\n    \n    final SolrQuery bjq = new SolrQuery(\"q\", \"{!parent which=type_s:parent}(+type_s:child^=0 \"+parentFilter+\" \"+\n        childFilter+\")\",\n       \"sort\", sortClause.replace(\"val_s1 \", \"childfield(val_s1)\"),\n        \"rows\", \"\"+maxDocs, \"fl\", fl);\n\n    final QueryResponse parents = client.query(bjq);\n    \n    Set<String> parentIds = new LinkedHashSet<>();\n    assertTrue(\"it can never be empty for sure\", parents.getResults().size()>0);\n    for(Iterator<SolrDocument> parentIter = parents.getResults().iterator(); parentIter.hasNext();) {\n      for (SolrDocument child : children.getResults()) {\n        assertEquals(\"child\", child.getFirstValue(\"type_s\"));\n        final String parentId = (String) child.getFirstValue(\"parent_id_s1\");\n        if( parentIds.add(parentId) ) { // in children the next parent appears, it should be next at parents \n          final SolrDocument parent = parentIter.next();\n          assertEquals(\"parent\", parent.getFirstValue(\"type_s\"));\n          final String actParentId = \"\"+ parent.get(\"id\");\n          if (!actParentId.equals(parentId)) {\n            final String chDump = children.toString().replace(\"SolrDocument\",\"\\nSolrDocument\");\n            System.out.println(\"\\n\\n\"+chDump.substring(0,5000)+\"\\n\\n\");\n            System.out.println(\"\\n\\n\"+chDump\n                +\"\\n\\n\");\n          }\n          assertEquals(actParentId, parentId);\n        }\n      }\n    }\n\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322","date":1499326969,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#test().mjava","sourceNew":"  @Test \n  public void test() throws SolrServerException, IOException {\n    final boolean asc = random().nextBoolean();\n    final String dir = asc ? \"asc\": \"desc\";\n    final String parentFilter = \"+parentFilter_s:(\"+matchingParent+\" \"+anyValsSpaceDelim(2)+\")^=0\";\n    String childFilter = \"+childFilter_s:(\"+matchingChild+\" \"+anyValsSpaceDelim(4)+\")^=0\";\n    final String fl = \"id,type_s,parent_id_s1,val_s1,score,parentFilter_s,childFilter_s,parentTie_s1\";\n    String sortClause = \"val_s1 \"+dir+\", \"+\"parent_id_s1 \"+ascDesc();\n    if(rarely()) {\n      sortClause =\"parentTie_s1 \"+ascDesc()+\",\"+sortClause;\n    }\n    final SolrQuery q = new SolrQuery(\"q\", \"+type_s:child^=0 \"+parentFilter+\" \"+\n          childFilter ,\n        \"sort\", sortClause, \n        \"rows\", \"\"+maxDocs,\n        \"fl\",fl);\n\n    final QueryResponse children = client.query(q);\n    \n    final SolrQuery bjq = random().nextBoolean() ? \n         new SolrQuery(// top level bjq\n           \"q\", \"{!parent which=type_s:parent}(+type_s:child^=0 \"+parentFilter+\" \"+ childFilter+\")\",\n           \"sort\", sortClause.replace(\"val_s1\", \"childfield(val_s1)\"),\n           \"rows\", \"\"+maxDocs, \"fl\", fl)\n         :\n        new SolrQuery(// same bjq as a subordinate clause\n           \"q\", \"+type_s:parent \"+parentFilter+\" +{!v=$parentcaluse}\",\n           \"parentcaluse\",\"{!parent which=type_s:parent v='\"+(childFilter).replace(\"+\", \"\")+\"'}\",\n           \"sort\", sortClause.replace(\"val_s1\", \"childfield(val_s1,$parentcaluse)\"),\n           \"rows\", \"\"+maxDocs, \"fl\", fl);\n\n    final QueryResponse parents = client.query(bjq);\n    \n    Set<String> parentIds = new LinkedHashSet<>();\n    assertTrue(\"it can never be empty for sure\", parents.getResults().size()>0);\n    for(Iterator<SolrDocument> parentIter = parents.getResults().iterator(); parentIter.hasNext();) {\n      for (SolrDocument child : children.getResults()) {\n        assertEquals(\"child\", child.getFirstValue(\"type_s\"));\n        final String parentId = (String) child.getFirstValue(\"parent_id_s1\");\n        if( parentIds.add(parentId) ) { // in children the next parent appears, it should be next at parents \n          final SolrDocument parent = parentIter.next();\n          assertEquals(\"parent\", parent.getFirstValue(\"type_s\"));\n          final String actParentId = \"\"+ parent.get(\"id\");\n          if (!actParentId.equals(parentId)) {\n            final String chDump = children.toString().replace(\"SolrDocument\",\"\\nSolrDocument\");\n            System.out.println(\"\\n\\n\"+chDump+\"\\n\\n\");\n            System.out.println(\"\\n\\n\"+parents.toString().replace(\"SolrDocument\",\"\\nSolrDocument\")\n                +\"\\n\\n\");\n          }\n          assertEquals(\"\"+child+\"\\n\"+parent,actParentId, parentId);\n        }\n      }\n    }\n\n    \n  }\n\n","sourceOld":"  @Test @Repeat(iterations=2)\n  public void test() throws SolrServerException, IOException {\n    final boolean asc = random().nextBoolean();\n    final String dir = asc ? \"asc\": \"desc\";\n    final String parentFilter = \"+parentFilter_s:(\"+matchingParent+\" \"+anyValsSpaceDelim(2)+\")^=0\";\n    String childFilter = \"+childFilter_s:(\"+matchingChild+\" \"+anyValsSpaceDelim(4)+\")^=0\";\n    final String fl = \"id,type_s,parent_id_s1,val_s1,score,parentFilter_s,childFilter_s,parentTie_s1\";\n    String sortClause = \"val_s1 \"+dir+\", \"+\"parent_id_s1 \"+ascDesc();\n    if(rarely()) {\n      sortClause =\"parentTie_s1 \"+ascDesc()+\",\"+sortClause;\n    }\n    final SolrQuery q = new SolrQuery(\"q\", \"+type_s:child^=0 \"+parentFilter+\" \"+\n          childFilter ,\n        \"sort\", sortClause, \n        \"rows\", \"\"+maxDocs,\n        \"fl\",fl);\n\n    final QueryResponse children = client.query(q);\n    \n    final SolrQuery bjq = new SolrQuery(\"q\", \"{!parent which=type_s:parent}(+type_s:child^=0 \"+parentFilter+\" \"+\n        childFilter+\")\",\n       \"sort\", sortClause.replace(\"val_s1 \", \"childfield(val_s1)\"),\n        \"rows\", \"\"+maxDocs, \"fl\", fl);\n\n    final QueryResponse parents = client.query(bjq);\n    \n    Set<String> parentIds = new LinkedHashSet<>();\n    assertTrue(\"it can never be empty for sure\", parents.getResults().size()>0);\n    for(Iterator<SolrDocument> parentIter = parents.getResults().iterator(); parentIter.hasNext();) {\n      for (SolrDocument child : children.getResults()) {\n        assertEquals(\"child\", child.getFirstValue(\"type_s\"));\n        final String parentId = (String) child.getFirstValue(\"parent_id_s1\");\n        if( parentIds.add(parentId) ) { // in children the next parent appears, it should be next at parents \n          final SolrDocument parent = parentIter.next();\n          assertEquals(\"parent\", parent.getFirstValue(\"type_s\"));\n          final String actParentId = \"\"+ parent.get(\"id\");\n          if (!actParentId.equals(parentId)) {\n            final String chDump = children.toString().replace(\"SolrDocument\",\"\\nSolrDocument\");\n            System.out.println(\"\\n\\n\"+chDump.substring(0,5000)+\"\\n\\n\");\n            System.out.println(\"\\n\\n\"+chDump\n                +\"\\n\\n\");\n          }\n          assertEquals(actParentId, parentId);\n        }\n      }\n    }\n\n    \n  }\n\n","bugFix":["02ea2fa46568487e04cba3f11bf8bfc7e2c08a1f","5220c264531ed933424a495eb8ed8ada158961cc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/TestCloudNestedDocsSort#test().mjava","sourceNew":"  @Test \n  public void test() throws SolrServerException, IOException {\n    final boolean asc = random().nextBoolean();\n    final String dir = asc ? \"asc\": \"desc\";\n    final String parentFilter = \"+parentFilter_s:(\"+matchingParent+\" \"+anyValsSpaceDelim(2)+\")^=0\";\n    String childFilter = \"+childFilter_s:(\"+matchingChild+\" \"+anyValsSpaceDelim(4)+\")^=0\";\n    final String fl = \"id,type_s,parent_id_s1,val_s1,score,parentFilter_s,childFilter_s,parentTie_s1\";\n    String sortClause = \"val_s1 \"+dir+\", \"+\"parent_id_s1 \"+ascDesc();\n    if(rarely()) {\n      sortClause =\"parentTie_s1 \"+ascDesc()+\",\"+sortClause;\n    }\n    final SolrQuery q = new SolrQuery(\"q\", \"+type_s:child^=0 \"+parentFilter+\" \"+\n          childFilter ,\n        \"sort\", sortClause, \n        \"rows\", \"\"+maxDocs,\n        \"fl\",fl);\n\n    final QueryResponse children = client.query(q);\n    \n    final SolrQuery bjq = random().nextBoolean() ? \n         new SolrQuery(// top level bjq\n           \"q\", \"{!parent which=type_s:parent}(+type_s:child^=0 \"+parentFilter+\" \"+ childFilter+\")\",\n           \"sort\", sortClause.replace(\"val_s1\", \"childfield(val_s1)\"),\n           \"rows\", \"\"+maxDocs, \"fl\", fl)\n         :\n        new SolrQuery(// same bjq as a subordinate clause\n           \"q\", \"+type_s:parent \"+parentFilter+\" +{!v=$parentcaluse}\",\n           \"parentcaluse\",\"{!parent which=type_s:parent v='\"+(childFilter).replace(\"+\", \"\")+\"'}\",\n           \"sort\", sortClause.replace(\"val_s1\", \"childfield(val_s1,$parentcaluse)\"),\n           \"rows\", \"\"+maxDocs, \"fl\", fl);\n\n    final QueryResponse parents = client.query(bjq);\n    \n    Set<String> parentIds = new LinkedHashSet<>();\n    assertTrue(\"it can never be empty for sure\", parents.getResults().size()>0);\n    for(Iterator<SolrDocument> parentIter = parents.getResults().iterator(); parentIter.hasNext();) {\n      for (SolrDocument child : children.getResults()) {\n        assertEquals(\"child\", child.getFirstValue(\"type_s\"));\n        final String parentId = (String) child.getFirstValue(\"parent_id_s1\");\n        if( parentIds.add(parentId) ) { // in children the next parent appears, it should be next at parents \n          final SolrDocument parent = parentIter.next();\n          assertEquals(\"parent\", parent.getFirstValue(\"type_s\"));\n          final String actParentId = \"\"+ parent.get(\"id\");\n          if (!actParentId.equals(parentId)) {\n            final String chDump = children.toString().replace(\"SolrDocument\",\"\\nSolrDocument\");\n            System.out.println(\"\\n\\n\"+chDump+\"\\n\\n\");\n            System.out.println(\"\\n\\n\"+parents.toString().replace(\"SolrDocument\",\"\\nSolrDocument\")\n                +\"\\n\\n\");\n          }\n          assertEquals(\"\"+child+\"\\n\"+parent,actParentId, parentId);\n        }\n      }\n    }\n\n    \n  }\n\n","sourceOld":"  @Test @Repeat(iterations=2)\n  public void test() throws SolrServerException, IOException {\n    final boolean asc = random().nextBoolean();\n    final String dir = asc ? \"asc\": \"desc\";\n    final String parentFilter = \"+parentFilter_s:(\"+matchingParent+\" \"+anyValsSpaceDelim(2)+\")^=0\";\n    String childFilter = \"+childFilter_s:(\"+matchingChild+\" \"+anyValsSpaceDelim(4)+\")^=0\";\n    final String fl = \"id,type_s,parent_id_s1,val_s1,score,parentFilter_s,childFilter_s,parentTie_s1\";\n    String sortClause = \"val_s1 \"+dir+\", \"+\"parent_id_s1 \"+ascDesc();\n    if(rarely()) {\n      sortClause =\"parentTie_s1 \"+ascDesc()+\",\"+sortClause;\n    }\n    final SolrQuery q = new SolrQuery(\"q\", \"+type_s:child^=0 \"+parentFilter+\" \"+\n          childFilter ,\n        \"sort\", sortClause, \n        \"rows\", \"\"+maxDocs,\n        \"fl\",fl);\n\n    final QueryResponse children = client.query(q);\n    \n    final SolrQuery bjq = new SolrQuery(\"q\", \"{!parent which=type_s:parent}(+type_s:child^=0 \"+parentFilter+\" \"+\n        childFilter+\")\",\n       \"sort\", sortClause.replace(\"val_s1 \", \"childfield(val_s1)\"),\n        \"rows\", \"\"+maxDocs, \"fl\", fl);\n\n    final QueryResponse parents = client.query(bjq);\n    \n    Set<String> parentIds = new LinkedHashSet<>();\n    assertTrue(\"it can never be empty for sure\", parents.getResults().size()>0);\n    for(Iterator<SolrDocument> parentIter = parents.getResults().iterator(); parentIter.hasNext();) {\n      for (SolrDocument child : children.getResults()) {\n        assertEquals(\"child\", child.getFirstValue(\"type_s\"));\n        final String parentId = (String) child.getFirstValue(\"parent_id_s1\");\n        if( parentIds.add(parentId) ) { // in children the next parent appears, it should be next at parents \n          final SolrDocument parent = parentIter.next();\n          assertEquals(\"parent\", parent.getFirstValue(\"type_s\"));\n          final String actParentId = \"\"+ parent.get(\"id\");\n          if (!actParentId.equals(parentId)) {\n            final String chDump = children.toString().replace(\"SolrDocument\",\"\\nSolrDocument\");\n            System.out.println(\"\\n\\n\"+chDump.substring(0,5000)+\"\\n\\n\");\n            System.out.println(\"\\n\\n\"+chDump\n                +\"\\n\\n\");\n          }\n          assertEquals(actParentId, parentId);\n        }\n      }\n    }\n\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02ea2fa46568487e04cba3f11bf8bfc7e2c08a1f"],"fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322":["02ea2fa46568487e04cba3f11bf8bfc7e2c08a1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e73d8d559120669b47658108d818b637df5456ea":["e9017cf144952056066919f1ebc7897ff9bd71b1","fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322"],"02ea2fa46568487e04cba3f11bf8bfc7e2c08a1f":["5220c264531ed933424a495eb8ed8ada158961cc"],"5220c264531ed933424a495eb8ed8ada158961cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["e73d8d559120669b47658108d818b637df5456ea"],"fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","5220c264531ed933424a495eb8ed8ada158961cc"],"e73d8d559120669b47658108d818b637df5456ea":[],"02ea2fa46568487e04cba3f11bf8bfc7e2c08a1f":["e9017cf144952056066919f1ebc7897ff9bd71b1","fa0dc67e6d1044f8b1ed34eadb08da2b9f17e322"],"5220c264531ed933424a495eb8ed8ada158961cc":["02ea2fa46568487e04cba3f11bf8bfc7e2c08a1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}