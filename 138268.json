{"path":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermOffsetVectors().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermOffsetVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermOffsetVectors().mjava","sourceNew":"  public void testTermOffsetVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"fifty\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(100, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        \n        //assertTrue();\n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testTermOffsetVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"fifty\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(100, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        \n        //assertTrue();\n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermOffsetVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermOffsetVectors().mjava","sourceNew":"  public void testTermOffsetVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"fifty\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n    }\n  }\n\n","sourceOld":"  public void testTermOffsetVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"fifty\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(100, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        \n        //assertTrue();\n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermOffsetVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermOffsetVectors().mjava","sourceNew":"  public void testTermOffsetVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"fifty\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n    }\n  }\n\n","sourceOld":"  public void testTermOffsetVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"fifty\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(100, hits.length);\n      \n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}