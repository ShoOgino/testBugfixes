{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(String,EnumSet[Replica.Type]).mjava","commits":[{"id":"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65","date":1509551229,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(String,EnumSet[Replica.Type]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(SolrQueryRequest,String,EnumSet[Replica.Type]).mjava","sourceNew":"  private List<Node> getCollectionUrls(String collection, EnumSet<Replica.Type> types) {\n    ClusterState clusterState = zkController.getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(SolrQueryRequest req, String collection, EnumSet<Replica.Type> types) {\n    ClusterState clusterState = req.getCore()\n        .getCoreContainer().getZkController().getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(String,EnumSet[Replica.Type],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getCollectionUrls(String,EnumSet[Replica.Type]).mjava","sourceNew":"  private List<Node> getCollectionUrls(String collection, EnumSet<Replica.Type> types, boolean onlyLeaders) {\n    ClusterState clusterState = zkController.getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n      if (onlyLeaders) {\n        Replica replica = docCollection.getLeader(replicas.getName());\n        if (replica != null) {\n          ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(replica);\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n        continue;\n      }\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","sourceOld":"  private List<Node> getCollectionUrls(String collection, EnumSet<Replica.Type> types) {\n    ClusterState clusterState = zkController.getClusterState();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (collection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + clusterState);\n    }\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    final List<Node> urls = new ArrayList<>(slices.size());\n    for (Map.Entry<String,Slice> sliceEntry : slices.entrySet()) {\n      Slice replicas = slices.get(sliceEntry.getKey());\n\n      Map<String,Replica> shardMap = replicas.getReplicasMap();\n      \n      for (Entry<String,Replica> entry : shardMap.entrySet()) {\n        if (!types.contains(entry.getValue().getType())) {\n          continue;\n        }\n        ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n        if (clusterState.liveNodesContain(nodeProps.getNodeName())) {\n          urls.add(new StdNode(nodeProps, collection, replicas.getName()));\n        }\n      }\n    }\n    if (urls.isEmpty()) {\n      return null;\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ad55ff45b3a5483090d87a63019d0e6a8d4b5a65"],"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad55ff45b3a5483090d87a63019d0e6a8d4b5a65":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad55ff45b3a5483090d87a63019d0e6a8d4b5a65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}