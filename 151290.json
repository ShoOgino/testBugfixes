{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","commits":[{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#newInstance(String,String[],Class[],Object[]).mjava","sourceNew":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = clazz.getConstructor(params);\n      obj = constructor.newInstance(args);\n    }\n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoMBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoMBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","sourceOld":"  public Object newInstance(String cName, String [] subPackages, Class[] params, Object[] args){\n    Class clazz = findClass(cName,subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    Object obj = null;\n    try {\n\n      Constructor constructor = clazz.getConstructor(params);\n      obj = constructor.newInstance(args);\n    }\n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoMBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoMBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aad06c3f73bfa47f773a2dbb4795b22a5395d90e","date":1336102310,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","sourceNew":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = clazz.getConstructor(params);\n      obj = constructor.newInstance(args);\n    }\n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if (org.apache.solr.util.plugin.ResourceLoaderAware.class.isInstance(obj)) {\n        log.warn(\"Class [{}] uses org.apache.solr.util.plugin.ResourceLoaderAware \" +\n            \"which is deprecated. Change to org.apache.lucene.analysis.util.ResourceLoaderAware.\", cName);\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoMBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoMBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","sourceOld":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = clazz.getConstructor(params);\n      obj = constructor.newInstance(args);\n    }\n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoMBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoMBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c630823e52a651e16e3a73743e11465ac856eed","date":1420742337,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","sourceNew":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = clazz.getConstructor(params);\n      obj = constructor.newInstance(args);\n\n    } catch (Error err) {\n      log.error(\"Loading Class \" + cName + \" (\"+clazz.getName() + \") triggered serious java error: \"\n                + err.getClass().getName(), err);\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if (org.apache.solr.util.plugin.ResourceLoaderAware.class.isInstance(obj)) {\n        log.warn(\"Class [{}] uses org.apache.solr.util.plugin.ResourceLoaderAware \" +\n            \"which is deprecated. Change to org.apache.lucene.analysis.util.ResourceLoaderAware.\", cName);\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoMBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoMBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","sourceOld":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = clazz.getConstructor(params);\n      obj = constructor.newInstance(args);\n    }\n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if (org.apache.solr.util.plugin.ResourceLoaderAware.class.isInstance(obj)) {\n        log.warn(\"Class [{}] uses org.apache.solr.util.plugin.ResourceLoaderAware \" +\n            \"which is deprecated. Change to org.apache.lucene.analysis.util.ResourceLoaderAware.\", cName);\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoMBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoMBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","bugFix":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","sourceNew":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = clazz.getConstructor(params);\n      obj = constructor.newInstance(args);\n\n    } catch (Error err) {\n      log.error(\"Loading Class \" + cName + \" (\"+clazz.getName() + \") triggered serious java error: \"\n                + err.getClass().getName(), err);\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoMBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoMBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","sourceOld":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = clazz.getConstructor(params);\n      obj = constructor.newInstance(args);\n\n    } catch (Error err) {\n      log.error(\"Loading Class \" + cName + \" (\"+clazz.getName() + \") triggered serious java error: \"\n                + err.getClass().getName(), err);\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if (org.apache.solr.util.plugin.ResourceLoaderAware.class.isInstance(obj)) {\n        log.warn(\"Class [{}] uses org.apache.solr.util.plugin.ResourceLoaderAware \" +\n            \"which is deprecated. Change to org.apache.lucene.analysis.util.ResourceLoaderAware.\", cName);\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoMBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoMBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d8478e1507f625c01f80a2f9f6dccd426a95708","date":1449667316,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","sourceNew":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class \" + cName + \" (\"+clazz.getName() + \") triggered serious java error: \"\n                + err.getClass().getName(), err);\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoMBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoMBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","sourceOld":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = clazz.getConstructor(params);\n      obj = constructor.newInstance(args);\n\n    } catch (Error err) {\n      log.error(\"Loading Class \" + cName + \" (\"+clazz.getName() + \") triggered serious java error: \"\n                + err.getClass().getName(), err);\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoMBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoMBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","sourceNew":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class \" + cName + \" (\"+clazz.getName() + \") triggered serious java error: \"\n                + err.getClass().getName(), err);\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","sourceOld":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class \" + cName + \" (\"+clazz.getName() + \") triggered serious java error: \"\n                + err.getClass().getName(), err);\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoMBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoMBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","sourceNew":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class \" + cName + \" (\"+clazz.getName() + \") triggered serious java error: \"\n                + err.getClass().getName(), err);\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","sourceOld":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class \" + cName + \" (\"+clazz.getName() + \") triggered serious java error: \"\n                + err.getClass().getName(), err);\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoMBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoMBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","sourceNew":"  public <T> T newInstance(String cName, Class<T> expectedType, String[] subPackages, Class[] params, Object[] args) {\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if (clazz == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \" + cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class \" + cName + \" (\" + clazz.getName() + \") triggered serious java error: \"\n          + err.getClass().getName(), err);\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName() + \"'\", e);\n    }\n\n    if (!live) {\n      if (obj instanceof SolrCoreAware) {\n        assertAwareCompatibility(SolrCoreAware.class, obj);\n        waitingForCore.add((SolrCoreAware) obj);\n      }\n      if (obj instanceof ResourceLoaderAware) {\n        assertAwareCompatibility(ResourceLoaderAware.class, obj);\n        waitingForResources.add((ResourceLoaderAware) obj);\n      }\n      if (obj instanceof SolrInfoBean) {\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","sourceOld":"  public <T> T newInstance(String cName, Class<T> expectedType, String [] subPackages, Class[] params, Object[] args){\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class \" + cName + \" (\"+clazz.getName() + \") triggered serious java error: \"\n                + err.getClass().getName(), err);\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e);\n    }\n\n    if (!live) {\n      if( obj instanceof SolrCoreAware ) {\n        assertAwareCompatibility( SolrCoreAware.class, obj );\n        waitingForCore.add( (SolrCoreAware)obj );\n      }\n      if( obj instanceof ResourceLoaderAware ) {\n        assertAwareCompatibility( ResourceLoaderAware.class, obj );\n        waitingForResources.add( (ResourceLoaderAware)obj );\n      }\n      if (obj instanceof SolrInfoBean){\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","sourceNew":"  public <T> T newInstance(String cName, Class<T> expectedType, String[] subPackages, Class[] params, Object[] args) {\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if (clazz == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \" + cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class {} ({}) triggered serious java error: {}\", cName, clazz.getName(),\n          err.getClass().getName(), err);\n\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName() + \"'\", e);\n    }\n\n    if (!live) {\n      if (obj instanceof SolrCoreAware) {\n        assertAwareCompatibility(SolrCoreAware.class, obj);\n        waitingForCore.add((SolrCoreAware) obj);\n      }\n      if (obj instanceof ResourceLoaderAware) {\n        assertAwareCompatibility(ResourceLoaderAware.class, obj);\n        waitingForResources.add((ResourceLoaderAware) obj);\n      }\n      if (obj instanceof SolrInfoBean) {\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","sourceOld":"  public <T> T newInstance(String cName, Class<T> expectedType, String[] subPackages, Class[] params, Object[] args) {\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if (clazz == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \" + cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class \" + cName + \" (\" + clazz.getName() + \") triggered serious java error: \"\n          + err.getClass().getName(), err);\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName() + \"'\", e);\n    }\n\n    if (!live) {\n      if (obj instanceof SolrCoreAware) {\n        assertAwareCompatibility(SolrCoreAware.class, obj);\n        waitingForCore.add((SolrCoreAware) obj);\n      }\n      if (obj instanceof ResourceLoaderAware) {\n        assertAwareCompatibility(ResourceLoaderAware.class, obj);\n        waitingForResources.add((ResourceLoaderAware) obj);\n      }\n      if (obj instanceof SolrInfoBean) {\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7757ad4a47d8b36bb6894c5ad33f766b4ddfa389","date":1591056099,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","sourceNew":"  public <T> T newInstance(String cName, Class<T> expectedType, String[] subPackages, Class[] params, Object[] args) {\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if (clazz == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Can not find class: \" + cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class {} ({}) triggered serious java error: {}\", cName, clazz.getName(),\n          err.getClass().getName(), err);\n\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error instantiating class: '\" + clazz.getName() + \"'\", e);\n    }\n\n    addToCoreAware(obj);\n    addToResourceLoaderAware(obj);\n    addToInfoBeans(obj);\n    return obj;\n  }\n\n","sourceOld":"  public <T> T newInstance(String cName, Class<T> expectedType, String[] subPackages, Class[] params, Object[] args) {\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if (clazz == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \" + cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class {} ({}) triggered serious java error: {}\", cName, clazz.getName(),\n          err.getClass().getName(), err);\n\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName() + \"'\", e);\n    }\n\n    if (!live) {\n      if (obj instanceof SolrCoreAware) {\n        assertAwareCompatibility(SolrCoreAware.class, obj);\n        waitingForCore.add((SolrCoreAware) obj);\n      }\n      if (obj instanceof ResourceLoaderAware) {\n        assertAwareCompatibility(ResourceLoaderAware.class, obj);\n        waitingForResources.add((ResourceLoaderAware) obj);\n      }\n      if (obj instanceof SolrInfoBean) {\n        //TODO: Assert here?\n        infoMBeans.add((SolrInfoBean) obj);\n      }\n    }\n\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#[T]_newInstance(String,Class[T],String[],Class[],Object[]).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public <T> T newInstance(String cName, Class<T> expectedType, String[] subPackages, Class[] params, Object[] args) {\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if (clazz == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Can not find class: \" + cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class {} ({}) triggered serious java error: {}\", cName, clazz.getName(),\n          err.getClass().getName(), err);\n\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error instantiating class: '\" + clazz.getName() + \"'\", e);\n    }\n\n    addToCoreAware(obj);\n    addToResourceLoaderAware(obj);\n    addToInfoBeans(obj);\n    return obj;\n  }\n\n","sourceOld":"  public <T> T newInstance(String cName, Class<T> expectedType, String[] subPackages, Class[] params, Object[] args) {\n    Class<? extends T> clazz = findClass(cName, expectedType, subPackages);\n    if (clazz == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Can not find class: \" + cName + \" in \" + classLoader);\n    }\n\n    T obj = null;\n    try {\n\n      Constructor<? extends T> constructor = null;\n      try {\n        constructor = clazz.getConstructor(params);\n        obj = constructor.newInstance(args);\n      } catch (NoSuchMethodException e) {\n        //look for a zero arg constructor if the constructor args do not match\n        try {\n          constructor = clazz.getConstructor();\n          obj = constructor.newInstance();\n        } catch (NoSuchMethodException e1) {\n          throw e;\n        }\n      }\n\n    } catch (Error err) {\n      log.error(\"Loading Class {} ({}) triggered serious java error: {}\", cName, clazz.getName(),\n          err.getClass().getName(), err);\n\n      throw err;\n\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error instantiating class: '\" + clazz.getName() + \"'\", e);\n    }\n\n    addToCoreAware(obj);\n    addToResourceLoaderAware(obj);\n    addToInfoBeans(obj);\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["5d8478e1507f625c01f80a2f9f6dccd426a95708"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["7757ad4a47d8b36bb6894c5ad33f766b4ddfa389"],"5d8478e1507f625c01f80a2f9f6dccd426a95708":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"816521ebaad5add9cb96bb88c577394e2938c40b":["5d8478e1507f625c01f80a2f9f6dccd426a95708"],"aad06c3f73bfa47f773a2dbb4795b22a5395d90e":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["4c630823e52a651e16e3a73743e11465ac856eed"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["816521ebaad5add9cb96bb88c577394e2938c40b"],"4c630823e52a651e16e3a73743e11465ac856eed":["aad06c3f73bfa47f773a2dbb4795b22a5395d90e"],"140be51d03394488536f4aacedace29f9b318347":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7757ad4a47d8b36bb6894c5ad33f766b4ddfa389":["140be51d03394488536f4aacedace29f9b318347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d8478e1507f625c01f80a2f9f6dccd426a95708":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"aad06c3f73bfa47f773a2dbb4795b22a5395d90e":["4c630823e52a651e16e3a73743e11465ac856eed"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["5d8478e1507f625c01f80a2f9f6dccd426a95708"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["140be51d03394488536f4aacedace29f9b318347"],"4c630823e52a651e16e3a73743e11465ac856eed":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["aad06c3f73bfa47f773a2dbb4795b22a5395d90e"],"140be51d03394488536f4aacedace29f9b318347":["7757ad4a47d8b36bb6894c5ad33f766b4ddfa389"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"7757ad4a47d8b36bb6894c5ad33f766b4ddfa389":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}