{"path":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[BytesRef],Analyzer).mjava","commits":[{"id":"1d70dbb6b688e5d00fdf510da452291910f5efa4","date":1357228093,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[BytesRef],Analyzer).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier,Analyzer).mjava","sourceNew":"  protected void checkCorrectClassification(Classifier<BytesRef> classifier, Analyzer analyzer) throws Exception {\n    SlowCompositeReaderWrapper compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = new SlowCompositeReaderWrapper(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      String newText = \"Much is made of what the likes of Facebook, Google and Apple know about users. Truth is, Amazon may know more.\";\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(newText);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(new BytesRef(\"technology\"), classificationResult.getAssignedClass());\n      assertTrue(classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier classifier, Analyzer analyzer) throws Exception {\n    SlowCompositeReaderWrapper compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = new SlowCompositeReaderWrapper(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      String newText = \"Much is made of what the likes of Facebook, Google and Apple know about users. Truth is, Amazon may know more.\";\n      ClassificationResult classificationResult = classifier.assignClass(newText);\n      assertEquals(\"technology\", classificationResult.getAssignedClass());\n      assertTrue(classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[BytesRef],Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkCorrectClassification(Classifier<BytesRef> classifier, Analyzer analyzer) throws Exception {\n    SlowCompositeReaderWrapper compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = new SlowCompositeReaderWrapper(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      String newText = \"Much is made of what the likes of Facebook, Google and Apple know about users. Truth is, Amazon may know more.\";\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(newText);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(new BytesRef(\"technology\"), classificationResult.getAssignedClass());\n      assertTrue(classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6965197f9fe6d03eb332e2bd4e44e905f83f83d","date":1365412474,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],T,Analyzer,String).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[BytesRef],Analyzer).mjava","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, T expectedResult, Analyzer analyzer, String classFieldName) throws Exception {\n    SlowCompositeReaderWrapper compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = new SlowCompositeReaderWrapper(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      String newText = \"Much is made of what the likes of Facebook, Google and Apple know about users. Truth is, Amazon may know more.\";\n      ClassificationResult<T> classificationResult = classifier.assignClass(newText);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier<BytesRef> classifier, Analyzer analyzer) throws Exception {\n    SlowCompositeReaderWrapper compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = new SlowCompositeReaderWrapper(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      String newText = \"Much is made of what the likes of Facebook, Google and Apple know about users. Truth is, Amazon may know more.\";\n      ClassificationResult<BytesRef> classificationResult = classifier.assignClass(newText);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(new BytesRef(\"technology\"), classificationResult.getAssignedClass());\n      assertTrue(classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6965197f9fe6d03eb332e2bd4e44e905f83f83d":["1d70dbb6b688e5d00fdf510da452291910f5efa4"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1d70dbb6b688e5d00fdf510da452291910f5efa4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d70dbb6b688e5d00fdf510da452291910f5efa4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d6965197f9fe6d03eb332e2bd4e44e905f83f83d"]},"commit2Childs":{"d6965197f9fe6d03eb332e2bd4e44e905f83f83d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1d70dbb6b688e5d00fdf510da452291910f5efa4"],"1d70dbb6b688e5d00fdf510da452291910f5efa4":["d6965197f9fe6d03eb332e2bd4e44e905f83f83d","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}