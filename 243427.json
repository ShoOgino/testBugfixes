{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","commits":[{"id":"eabd392326444185db24d1533c1f69dfbb54fc71","date":1304638205,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      endPosition = delimiterPositions.get(delimitersCount-1 - skip);\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      endPosition = delimiterPositions.get(delimitersCount-1 - skip);\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      endPosition = delimiterPositions.get(delimitersCount-1 - skip);\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a92b21feea3b1b4d7ad5a06439333c4f757318f","date":1333977928,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      int idx = delimitersCount-1 - skip;\n      if (idx >= 0) {\n        // otherwise its ok, because we will skip and return false\n        endPosition = delimiterPositions.get(idx);\n      }\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      endPosition = delimiterPositions.get(delimitersCount-1 - skip);\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      int idx = delimitersCount-1 - skip;\n      if (idx >= 0) {\n        // otherwise its ok, because we will skip and return false\n        endPosition = delimiterPositions.get(idx);\n      }\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      endPosition = delimiterPositions.get(delimitersCount-1 - skip);\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":["eabd392326444185db24d1533c1f69dfbb54fc71"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      int idx = delimitersCount-1 - skip;\n      if (idx >= 0) {\n        // otherwise its ok, because we will skip and return false\n        endPosition = delimiterPositions.get(idx);\n      }\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if(delimitersCount == -1){\n      int length = 0;\n      delimiterPositions.add(0);\n      while (true) {\n        int c = input.read();\n        if( c < 0 ) {\n          break;\n        }\n        length++;\n        if( c == delimiter ) {\n          delimiterPositions.add(length);\n          resultToken.append(replacement);\n        }\n        else{\n          resultToken.append((char)c);\n        }\n      }\n      delimitersCount = delimiterPositions.size();\n      if( delimiterPositions.get(delimitersCount-1) < length ){\n        delimiterPositions.add(length);\n        delimitersCount++;\n      }\n      if( resultTokenBuffer.length < resultToken.length() ){\n        resultTokenBuffer = new char[resultToken.length()];\n      }\n      resultToken.getChars(0, resultToken.length(), resultTokenBuffer, 0);\n      resultToken.setLength(0);\n      int idx = delimitersCount-1 - skip;\n      if (idx >= 0) {\n        // otherwise its ok, because we will skip and return false\n        endPosition = delimiterPositions.get(idx);\n      }\n      finalOffset = correctOffset(length);\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n\n    while( skipped < delimitersCount-skip-1 ){\n      int start = delimiterPositions.get(skipped);\n      termAtt.copyBuffer(resultTokenBuffer, start, endPosition - start);\n      offsetAtt.setOffset(correctOffset(start), correctOffset(endPosition));\n      skipped++;\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["eabd392326444185db24d1533c1f69dfbb54fc71","5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eabd392326444185db24d1533c1f69dfbb54fc71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eabd392326444185db24d1533c1f69dfbb54fc71"],"eabd392326444185db24d1533c1f69dfbb54fc71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["eabd392326444185db24d1533c1f69dfbb54fc71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","eabd392326444185db24d1533c1f69dfbb54fc71"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"eabd392326444185db24d1533c1f69dfbb54fc71":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}