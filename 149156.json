{"path":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"/dev/null","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":null,"sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"/dev/null","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75ed70ebff903842ce0bf09b37df09f11f89ad4f","date":1276477396,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":["da0acfe5ceed804451d76c8f887855b3d060e132"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof List) {\n      writeArray((List) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"755f2f419306d7297c8feee10d1897addf4b2dd0","date":1294442354,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeKnownType(Object).mjava","sourceNew":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean writeKnownType(Object val) throws IOException {\n    if (writePrimitive(val)) return true;\n    if (val instanceof NamedList) {\n      writeNamedList((NamedList<?>) val);\n      return true;\n    }\n    if (val instanceof SolrDocumentList) { // SolrDocumentList is a List, so must come before List check\n      writeSolrDocumentList((SolrDocumentList) val);\n      return true;\n    }\n    if (val instanceof Collection) {\n      writeArray((Collection) val);\n      return true;\n    }\n    if (val instanceof Object[]) {\n      writeArray((Object[]) val);\n      return true;\n    }\n    if (val instanceof SolrDocument) {\n      //this needs special treatment to know which fields are to be written\n      if (resolver == null) {\n        writeSolrDocument((SolrDocument) val);\n      } else {\n        Object retVal = resolver.resolve(val, this);\n        if (retVal != null) {\n          if (retVal instanceof SolrDocument) {\n            writeSolrDocument((SolrDocument) retVal);\n          } else {\n            writeVal(retVal);\n          }\n        }\n      }\n      return true;\n    }\n    if (val instanceof Map) {\n      writeMap((Map) val);\n      return true;\n    }\n    if (val instanceof Iterator) {\n      writeIterator((Iterator) val);\n      return true;\n    }\n    if (val instanceof Iterable) {\n      writeIterator(((Iterable) val).iterator());\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["755f2f419306d7297c8feee10d1897addf4b2dd0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"75ed70ebff903842ce0bf09b37df09f11f89ad4f":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["75ed70ebff903842ce0bf09b37df09f11f89ad4f","755f2f419306d7297c8feee10d1897addf4b2dd0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["5f4e87790277826a2aea119328600dfb07761f32","755f2f419306d7297c8feee10d1897addf4b2dd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"75ed70ebff903842ce0bf09b37df09f11f89ad4f":["5f4e87790277826a2aea119328600dfb07761f32","755f2f419306d7297c8feee10d1897addf4b2dd0","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}