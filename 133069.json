{"path":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","pathOld":"/dev/null","sourceNew":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException \n  {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n    \n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {  \n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n      \n      SolrException.logOnce(log,null,ex );\n      \n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warning( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d","date":1203633859,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException \n  {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n    \n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {  \n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n      \n      SolrException.logOnce(log,null,ex );\n      \n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warning( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }    \n\n","sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException \n  {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n    \n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {  \n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n      \n      SolrException.logOnce(log,null,ex );\n      \n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warning( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58b41d4093a9662306bdc051e4b46643deff70de","date":1205090944,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n    \n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {  \n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n      \n      SolrException.logOnce(log,null,ex );\n      \n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warning( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }    \n\n","sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException \n  {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n    \n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {  \n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n      \n      SolrException.logOnce(log,null,ex );\n      \n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warning( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c","date":1208435858,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.logOnce(log,null,ex );\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warning( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n    \n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {  \n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n      \n      SolrException.logOnce(log,null,ex );\n      \n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warning( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.logOnce(log,null,ex );\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.logOnce(log,null,ex );\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warning( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#sendError(HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.logOnce(log,null,ex );\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","sourceOld":"  protected void sendError(HttpServletResponse res, Throwable ex) throws IOException {\n    int code=500;\n    String trace = \"\";\n    if( ex instanceof SolrException ) {\n      code = ((SolrException)ex).code();\n    }\n\n    // For any regular code, don't include the stack trace\n    if( code == 500 || code < 100 ) {\n      StringWriter sw = new StringWriter();\n      ex.printStackTrace(new PrintWriter(sw));\n      trace = \"\\n\\n\"+sw.toString();\n\n      SolrException.logOnce(log,null,ex );\n\n      // non standard codes have undefined results with various servers\n      if( code < 100 ) {\n        log.warn( \"invalid return code: \"+code );\n        code = 500;\n      }\n    }\n    res.sendError( code, ex.getMessage() + trace );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c":["58b41d4093a9662306bdc051e4b46643deff70de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"58b41d4093a9662306bdc051e4b46643deff70de":["b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d"],"b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d":["d80013b5e260def972025c93a0b08524f9c38f49"],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"58b41d4093a9662306bdc051e4b46643deff70de":["ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c"],"b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d":["58b41d4093a9662306bdc051e4b46643deff70de"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"d80013b5e260def972025c93a0b08524f9c38f49":["b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}