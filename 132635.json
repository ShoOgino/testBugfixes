{"path":"solr/core/src/java/org/apache/solr/search/SurroundQParser[SurroundQParserPlugin]#parse().mjava","commits":[{"id":"401ea1a2f466e72dbbfe83d8ec4d6e378904424b","date":1315403659,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SurroundQParser[SurroundQParserPlugin]#parse().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query parse()\n      throws org.apache.lucene.queryparser.classic.ParseException {\n    SrndQuery sq;\n    String qstr = getString();\n    if (qstr == null)\n      return null;\n    String mbqparam = getParam(MBQParam);\n    if (mbqparam == null) {\n      this.maxBasicQueries = DEFMAXBASICQUERIES;\n    } else {\n      try {\n        this.maxBasicQueries = Integer.parseInt(mbqparam);\n      } catch (Exception e) {\n        LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      }\n    }\n    // ugh .. colliding ParseExceptions\n    try {\n      sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n          .parse(qstr);\n    } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n      throw new org.apache.lucene.queryparser.classic.ParseException(\n          pe.getMessage());\n    }\n    \n    // so what do we do with the SrndQuery ??\n    // processing based on example in LIA Ch 9\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField == null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n\n    BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n    Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n    return lquery;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"220acde8206f5221383e3777429a4fb84bed289f","date":1339892825,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SurroundQParser[SurroundQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SurroundQParser[SurroundQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse()\n      throws org.apache.lucene.queryparser.classic.ParseException {\n    SrndQuery sq;\n    String qstr = getString();\n    if (qstr == null)\n      return null;\n    String mbqparam = getParam(MBQParam);\n    if (mbqparam == null) {\n      this.maxBasicQueries = DEFMAXBASICQUERIES;\n    } else {\n      try {\n        this.maxBasicQueries = Integer.parseInt(mbqparam);\n      } catch (Exception e) {\n        LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      }\n    }\n    // ugh .. colliding ParseExceptions\n    try {\n      sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n          .parse(qstr);\n    } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n      throw new org.apache.lucene.queryparser.classic.ParseException(\n          pe.getMessage());\n    }\n    \n    // so what do we do with the SrndQuery ??\n    // processing based on example in LIA Ch 9\n\n    BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n    String defaultField = QueryParsing.getDefaultField(getReq().getSchema(),getParam(CommonParams.DF));\n    Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n    return lquery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse()\n      throws org.apache.lucene.queryparser.classic.ParseException {\n    SrndQuery sq;\n    String qstr = getString();\n    if (qstr == null)\n      return null;\n    String mbqparam = getParam(MBQParam);\n    if (mbqparam == null) {\n      this.maxBasicQueries = DEFMAXBASICQUERIES;\n    } else {\n      try {\n        this.maxBasicQueries = Integer.parseInt(mbqparam);\n      } catch (Exception e) {\n        LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      }\n    }\n    // ugh .. colliding ParseExceptions\n    try {\n      sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n          .parse(qstr);\n    } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n      throw new org.apache.lucene.queryparser.classic.ParseException(\n          pe.getMessage());\n    }\n    \n    // so what do we do with the SrndQuery ??\n    // processing based on example in LIA Ch 9\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField == null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n\n    BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n    Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n    return lquery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SurroundQParser[SurroundQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SurroundQParser[SurroundQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse()\n      throws SyntaxError {\n    SrndQuery sq;\n    String qstr = getString();\n    if (qstr == null)\n      return null;\n    String mbqparam = getParam(MBQParam);\n    if (mbqparam == null) {\n      this.maxBasicQueries = DEFMAXBASICQUERIES;\n    } else {\n      try {\n        this.maxBasicQueries = Integer.parseInt(mbqparam);\n      } catch (Exception e) {\n        LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      }\n    }\n    // ugh .. colliding ParseExceptions\n    try {\n      sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n          .parse(qstr);\n    } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n      throw new SyntaxError(pe);\n    }\n    \n    // so what do we do with the SrndQuery ??\n    // processing based on example in LIA Ch 9\n\n    BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n    String defaultField = QueryParsing.getDefaultField(getReq().getSchema(),getParam(CommonParams.DF));\n    Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n    return lquery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse()\n      throws org.apache.lucene.queryparser.classic.ParseException {\n    SrndQuery sq;\n    String qstr = getString();\n    if (qstr == null)\n      return null;\n    String mbqparam = getParam(MBQParam);\n    if (mbqparam == null) {\n      this.maxBasicQueries = DEFMAXBASICQUERIES;\n    } else {\n      try {\n        this.maxBasicQueries = Integer.parseInt(mbqparam);\n      } catch (Exception e) {\n        LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      }\n    }\n    // ugh .. colliding ParseExceptions\n    try {\n      sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n          .parse(qstr);\n    } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n      throw new org.apache.lucene.queryparser.classic.ParseException(\n          pe.getMessage());\n    }\n    \n    // so what do we do with the SrndQuery ??\n    // processing based on example in LIA Ch 9\n\n    BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n    String defaultField = QueryParsing.getDefaultField(getReq().getSchema(),getParam(CommonParams.DF));\n    Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n    return lquery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SurroundQParser[SurroundQParserPlugin]#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SurroundQParser[SurroundQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse()\n      throws SyntaxError {\n    SrndQuery sq;\n    String qstr = getString();\n    if (qstr == null)\n      return null;\n    String mbqparam = getParam(MBQParam);\n    if (mbqparam == null) {\n      this.maxBasicQueries = DEFMAXBASICQUERIES;\n    } else {\n      try {\n        this.maxBasicQueries = Integer.parseInt(mbqparam);\n      } catch (Exception e) {\n        LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      }\n    }\n    // ugh .. colliding ParseExceptions\n    try {\n      sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n          .parse(qstr);\n    } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n      throw new SyntaxError(pe);\n    }\n    \n    // so what do we do with the SrndQuery ??\n    // processing based on example in LIA Ch 9\n\n    BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n    String defaultField = QueryParsing.getDefaultField(getReq().getSchema(),getParam(CommonParams.DF));\n    Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n    return lquery;\n  }\n\n","sourceOld":"  @Override\n  public Query parse()\n      throws org.apache.lucene.queryparser.classic.ParseException {\n    SrndQuery sq;\n    String qstr = getString();\n    if (qstr == null)\n      return null;\n    String mbqparam = getParam(MBQParam);\n    if (mbqparam == null) {\n      this.maxBasicQueries = DEFMAXBASICQUERIES;\n    } else {\n      try {\n        this.maxBasicQueries = Integer.parseInt(mbqparam);\n      } catch (Exception e) {\n        LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      }\n    }\n    // ugh .. colliding ParseExceptions\n    try {\n      sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n          .parse(qstr);\n    } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n      throw new org.apache.lucene.queryparser.classic.ParseException(\n          pe.getMessage());\n    }\n    \n    // so what do we do with the SrndQuery ??\n    // processing based on example in LIA Ch 9\n\n    BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n    String defaultField = QueryParsing.getDefaultField(getReq().getSchema(),getParam(CommonParams.DF));\n    Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n    return lquery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SurroundQParser[SurroundQParserPlugin]#parse().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query parse()\n      throws SyntaxError {\n    SrndQuery sq;\n    String qstr = getString();\n    if (qstr == null)\n      return null;\n    String mbqparam = getParam(MBQParam);\n    if (mbqparam == null) {\n      this.maxBasicQueries = DEFMAXBASICQUERIES;\n    } else {\n      try {\n        this.maxBasicQueries = Integer.parseInt(mbqparam);\n      } catch (Exception e) {\n        LOG.warn(\"Couldn't parse maxBasicQueries value \" + mbqparam +\", using default of 1000\");\n        this.maxBasicQueries = DEFMAXBASICQUERIES;\n      }\n    }\n    // ugh .. colliding ParseExceptions\n    try {\n      sq = org.apache.lucene.queryparser.surround.parser.QueryParser\n          .parse(qstr);\n    } catch (org.apache.lucene.queryparser.surround.parser.ParseException pe) {\n      throw new SyntaxError(pe);\n    }\n    \n    // so what do we do with the SrndQuery ??\n    // processing based on example in LIA Ch 9\n\n    BasicQueryFactory bqFactory = new BasicQueryFactory(this.maxBasicQueries);\n    String defaultField = QueryParsing.getDefaultField(getReq().getSchema(),getParam(CommonParams.DF));\n    Query lquery = sq.makeLuceneQueryField(defaultField, bqFactory);\n    return lquery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"401ea1a2f466e72dbbfe83d8ec4d6e378904424b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"220acde8206f5221383e3777429a4fb84bed289f":["401ea1a2f466e72dbbfe83d8ec4d6e378904424b"],"3cdb67100dc016748799a77218aa409478372d79":["220acde8206f5221383e3777429a4fb84bed289f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["220acde8206f5221383e3777429a4fb84bed289f","3cdb67100dc016748799a77218aa409478372d79"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["3cdb67100dc016748799a77218aa409478372d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9367dbf5b00d7764583d991c1888f4acc9c9991a"]},"commit2Childs":{"401ea1a2f466e72dbbfe83d8ec4d6e378904424b":["220acde8206f5221383e3777429a4fb84bed289f"],"220acde8206f5221383e3777429a4fb84bed289f":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["401ea1a2f466e72dbbfe83d8ec4d6e378904424b"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}