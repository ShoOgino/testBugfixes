{"path":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Recursively parses and breaks down the expression string to build a numeric ValueSource.\n   * \n   * @param schema The schema to pull fields from.\n   * @param expressionString The expression string to build a ValueSource from.\n   * @return The value source represented by the given expressionString\n   */\n  private static ValueSource buildNumericSource(IndexSchema schema, String expressionString) {\n    int paren = expressionString.indexOf('(');\n    String[] arguments;\n    String operands;\n    if (paren<0) {\n      return buildFieldSource(schema,expressionString,NUMBER_TYPE);\n    } else {\n      try {\n        operands = expressionString.substring(paren+1, expressionString.lastIndexOf(')')).trim();\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expressionString+\"]\");\n      }\n      arguments = ExpressionFactory.getArguments(operands);\n    }\n    String operation = expressionString.substring(0, paren).trim();\n    if (operation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The constant number declaration [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      return new ConstDoubleSource(Double.parseDouble(arguments[0]));\n    } else if (operation.equals(AnalyticsParams.NEGATE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The negate operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new NegateDoubleFunction(argSource);\n    }  else if (operation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The absolute value operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new AbsoluteValueDoubleFunction(argSource);\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return buildFilterSource(schema, operands, NUMBER_TYPE);\n    }\n    List<ValueSource> subExpressions = new ArrayList<ValueSource>();\n    for (String argument : arguments) {\n      ValueSource argSource = buildNumericSource(schema, argument);\n      if (argSource == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" requires numeric fields or operations as arguments. \\\"\"+argument+\"\\\" is not a numeric field or operation.\");\n      }\n      subExpressions.add(argSource);\n    }\n    if (operation.equals(AnalyticsParams.ADD)) {\n      return new AddDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.MULTIPLY)) {\n      return new MultiplyDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.DIVIDE)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The divide operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new DivDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.POWER)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The power operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new PowDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.LOG)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The log operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new LogDoubleFunction(subExpressions.get(0), subExpressions.get(1));\n    } \n    if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)||AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return null;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation [\"+expressionString+\"] is not supported.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Recursively parses and breaks down the expression string to build a numeric ValueSource.\n   * \n   * @param schema The schema to pull fields from.\n   * @param expressionString The expression string to build a ValueSource from.\n   * @return The value source represented by the given expressionString\n   */\n  private static ValueSource buildNumericSource(IndexSchema schema, String expressionString) {\n    int paren = expressionString.indexOf('(');\n    String[] arguments;\n    String operands;\n    if (paren<0) {\n      return buildFieldSource(schema,expressionString,NUMBER_TYPE);\n    } else {\n      try {\n        operands = expressionString.substring(paren+1, expressionString.lastIndexOf(')')).trim();\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expressionString+\"]\");\n      }\n      arguments = ExpressionFactory.getArguments(operands);\n    }\n    String operation = expressionString.substring(0, paren).trim();\n    if (operation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The constant number declaration [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      return new ConstDoubleSource(Double.parseDouble(arguments[0]));\n    } else if (operation.equals(AnalyticsParams.NEGATE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The negate operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new NegateDoubleFunction(argSource);\n    }  else if (operation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The absolute value operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new AbsoluteValueDoubleFunction(argSource);\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return buildFilterSource(schema, operands, NUMBER_TYPE);\n    }\n    List<ValueSource> subExpressions = new ArrayList<ValueSource>();\n    for (String argument : arguments) {\n      ValueSource argSource = buildNumericSource(schema, argument);\n      if (argSource == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" requires numeric fields or operations as arguments. \\\"\"+argument+\"\\\" is not a numeric field or operation.\");\n      }\n      subExpressions.add(argSource);\n    }\n    if (operation.equals(AnalyticsParams.ADD)) {\n      return new AddDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.MULTIPLY)) {\n      return new MultiplyDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.DIVIDE)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The divide operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new DivDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.POWER)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The power operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new PowDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.LOG)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The log operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new LogDoubleFunction(subExpressions.get(0), subExpressions.get(1));\n    } \n    if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)||AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return null;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation [\"+expressionString+\"] is not supported.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","sourceNew":"  /**\n   * Recursively parses and breaks down the expression string to build a numeric ValueSource.\n   * \n   * @param schema The schema to pull fields from.\n   * @param expressionString The expression string to build a ValueSource from.\n   * @return The value source represented by the given expressionString\n   */\n  private static ValueSource buildNumericSource(IndexSchema schema, String expressionString) {\n    int paren = expressionString.indexOf('(');\n    String[] arguments;\n    String operands;\n    if (paren<0) {\n      return buildFieldSource(schema,expressionString,NUMBER_TYPE);\n    } else {\n      try {\n        operands = expressionString.substring(paren+1, expressionString.lastIndexOf(')')).trim();\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expressionString+\"]\");\n      }\n      arguments = ExpressionFactory.getArguments(operands);\n    }\n    String operation = expressionString.substring(0, paren).trim();\n    if (operation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The constant number declaration [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      return new ConstDoubleSource(Double.parseDouble(arguments[0]));\n    } else if (operation.equals(AnalyticsParams.NEGATE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The negate operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new NegateDoubleFunction(argSource);\n    }  else if (operation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The absolute value operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new AbsoluteValueDoubleFunction(argSource);\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return buildFilterSource(schema, operands, NUMBER_TYPE);\n    }\n    List<ValueSource> subExpressions = new ArrayList<>();\n    for (String argument : arguments) {\n      ValueSource argSource = buildNumericSource(schema, argument);\n      if (argSource == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" requires numeric fields or operations as arguments. \\\"\"+argument+\"\\\" is not a numeric field or operation.\");\n      }\n      subExpressions.add(argSource);\n    }\n    if (operation.equals(AnalyticsParams.ADD)) {\n      return new AddDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.MULTIPLY)) {\n      return new MultiplyDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.DIVIDE)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The divide operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new DivDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.POWER)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The power operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new PowDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.LOG)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The log operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new LogDoubleFunction(subExpressions.get(0), subExpressions.get(1));\n    } \n    if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)||AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return null;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation [\"+expressionString+\"] is not supported.\");\n  }\n\n","sourceOld":"  /**\n   * Recursively parses and breaks down the expression string to build a numeric ValueSource.\n   * \n   * @param schema The schema to pull fields from.\n   * @param expressionString The expression string to build a ValueSource from.\n   * @return The value source represented by the given expressionString\n   */\n  private static ValueSource buildNumericSource(IndexSchema schema, String expressionString) {\n    int paren = expressionString.indexOf('(');\n    String[] arguments;\n    String operands;\n    if (paren<0) {\n      return buildFieldSource(schema,expressionString,NUMBER_TYPE);\n    } else {\n      try {\n        operands = expressionString.substring(paren+1, expressionString.lastIndexOf(')')).trim();\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expressionString+\"]\");\n      }\n      arguments = ExpressionFactory.getArguments(operands);\n    }\n    String operation = expressionString.substring(0, paren).trim();\n    if (operation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The constant number declaration [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      return new ConstDoubleSource(Double.parseDouble(arguments[0]));\n    } else if (operation.equals(AnalyticsParams.NEGATE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The negate operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new NegateDoubleFunction(argSource);\n    }  else if (operation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The absolute value operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new AbsoluteValueDoubleFunction(argSource);\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return buildFilterSource(schema, operands, NUMBER_TYPE);\n    }\n    List<ValueSource> subExpressions = new ArrayList<ValueSource>();\n    for (String argument : arguments) {\n      ValueSource argSource = buildNumericSource(schema, argument);\n      if (argSource == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" requires numeric fields or operations as arguments. \\\"\"+argument+\"\\\" is not a numeric field or operation.\");\n      }\n      subExpressions.add(argSource);\n    }\n    if (operation.equals(AnalyticsParams.ADD)) {\n      return new AddDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.MULTIPLY)) {\n      return new MultiplyDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.DIVIDE)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The divide operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new DivDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.POWER)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The power operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new PowDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.LOG)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The log operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new LogDoubleFunction(subExpressions.get(0), subExpressions.get(1));\n    } \n    if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)||AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return null;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation [\"+expressionString+\"] is not supported.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","sourceNew":"  /**\n   * Recursively parses and breaks down the expression string to build a numeric ValueSource.\n   * \n   * @param schema The schema to pull fields from.\n   * @param expressionString The expression string to build a ValueSource from.\n   * @return The value source represented by the given expressionString\n   */\n  private static ValueSource buildNumericSource(IndexSchema schema, String expressionString) {\n    int paren = expressionString.indexOf('(');\n    String[] arguments;\n    String operands;\n    if (paren<0) {\n      return buildFieldSource(schema,expressionString,NUMBER_TYPE);\n    } else {\n      try {\n        operands = expressionString.substring(paren+1, expressionString.lastIndexOf(')')).trim();\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expressionString+\"]\");\n      }\n      arguments = ExpressionFactory.getArguments(operands);\n    }\n    String operation = expressionString.substring(0, paren).trim();\n    if (operation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The constant number declaration [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      return new ConstDoubleSource(Double.parseDouble(arguments[0]));\n    } else if (operation.equals(AnalyticsParams.NEGATE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The negate operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new NegateDoubleFunction(argSource);\n    }  else if (operation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The absolute value operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new AbsoluteValueDoubleFunction(argSource);\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return buildFilterSource(schema, operands, NUMBER_TYPE);\n    }\n    List<ValueSource> subExpressions = new ArrayList<>();\n    for (String argument : arguments) {\n      ValueSource argSource = buildNumericSource(schema, argument);\n      if (argSource == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" requires numeric fields or operations as arguments. \\\"\"+argument+\"\\\" is not a numeric field or operation.\");\n      }\n      subExpressions.add(argSource);\n    }\n    if (operation.equals(AnalyticsParams.ADD)) {\n      return new AddDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.MULTIPLY)) {\n      return new MultiplyDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.DIVIDE)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The divide operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new DivDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.POWER)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The power operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new PowDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.LOG)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The log operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new LogDoubleFunction(subExpressions.get(0), subExpressions.get(1));\n    } \n    if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)||AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return null;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation [\"+expressionString+\"] is not supported.\");\n  }\n\n","sourceOld":"  /**\n   * Recursively parses and breaks down the expression string to build a numeric ValueSource.\n   * \n   * @param schema The schema to pull fields from.\n   * @param expressionString The expression string to build a ValueSource from.\n   * @return The value source represented by the given expressionString\n   */\n  private static ValueSource buildNumericSource(IndexSchema schema, String expressionString) {\n    int paren = expressionString.indexOf('(');\n    String[] arguments;\n    String operands;\n    if (paren<0) {\n      return buildFieldSource(schema,expressionString,NUMBER_TYPE);\n    } else {\n      try {\n        operands = expressionString.substring(paren+1, expressionString.lastIndexOf(')')).trim();\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expressionString+\"]\");\n      }\n      arguments = ExpressionFactory.getArguments(operands);\n    }\n    String operation = expressionString.substring(0, paren).trim();\n    if (operation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The constant number declaration [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      return new ConstDoubleSource(Double.parseDouble(arguments[0]));\n    } else if (operation.equals(AnalyticsParams.NEGATE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The negate operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new NegateDoubleFunction(argSource);\n    }  else if (operation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The absolute value operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new AbsoluteValueDoubleFunction(argSource);\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return buildFilterSource(schema, operands, NUMBER_TYPE);\n    }\n    List<ValueSource> subExpressions = new ArrayList<>();\n    for (String argument : arguments) {\n      ValueSource argSource = buildNumericSource(schema, argument);\n      if (argSource == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" requires numeric fields or operations as arguments. \\\"\"+argument+\"\\\" is not a numeric field or operation.\");\n      }\n      subExpressions.add(argSource);\n    }\n    if (operation.equals(AnalyticsParams.ADD)) {\n      return new AddDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.MULTIPLY)) {\n      return new MultiplyDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.DIVIDE)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The divide operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new DivDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.POWER)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The power operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new PowDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.LOG)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The log operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new LogDoubleFunction(subExpressions.get(0), subExpressions.get(1));\n    } \n    if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)||AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return null;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation [\"+expressionString+\"] is not supported.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff403346522eaa9de75403763e297e83a3ea585c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}