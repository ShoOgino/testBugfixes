{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","commits":[{"id":"404bbb5c1692276fefc358d0d4a9ccb74ed2518e","date":1451595423,"type":0,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean lineCrossesLine(final double aX1, final double aY1, final double aX2, final double aY2,\n                                         final double bX1, final double bY1, final double bX2, final double bY2) {\n    // determine if three points are ccw (right-hand rule) by computing the determinate\n    final double aX2X1d = aX2 - aX1;\n    final double aY2Y1d = aY2 - aY1;\n    final double bX2X1d = bX2 - bX1;\n    final double bY2Y1d = bY2 - bY1;\n\n    final double t1B = aX2X1d * (bY2 - aY1) - aY2Y1d * (bX2 - aX1);\n    final double test1 = (aX2X1d * (bY1 - aY1) - aY2Y1d * (bX1 - aX1)) * t1B;\n    final double t2B = bX2X1d * (aY2 - bY1) - bY2Y1d * (aX2 - bX1);\n    final double test2 = (bX2X1d * (aY1 - bY1) - bY2Y1d * (aX1 - bX1)) * t2B;\n\n    if (test1 < 0 && test2 < 0) {\n      return true;\n    }\n\n    if (test1 == 0 || test2 == 0) {\n      // vertically collinear\n      if (aX1 == aX2 || bX1 == bX2) {\n        final double minAy = Math.min(aY1, aY2);\n        final double maxAy = Math.max(aY1, aY2);\n        final double minBy = Math.min(bY1, bY2);\n        final double maxBy = Math.max(bY1, bY2);\n\n        return !(minBy > maxAy || maxBy < minAy) || !(minAy > maxBy || maxAy < minBy);\n      }\n      // horizontally collinear\n      final double minAx = Math.min(aX1, aX2);\n      final double maxAx = Math.max(aX1, aY2);\n      final double minBx = Math.min(bX1, bX2);\n      final double maxBx = Math.max(bX1, bX2);\n\n      return !(minBx >= maxAx || maxBx <= minAx) || !(minAx >= maxBx || maxAx <= minBx);\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf9a8d5f45f860aa6168bfae285d452e7f9ff218","date":1453387722,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","sourceNew":"  private static boolean lineCrossesLine(final double aX1, final double aY1, final double aX2, final double aY2,\n                                         final double bX1, final double bY1, final double bX2, final double bY2) {\n    // determine if three points are ccw (right-hand rule) by computing the determinate\n    final double aX2X1d = aX2 - aX1;\n    final double aY2Y1d = aY2 - aY1;\n    final double bX2X1d = bX2 - bX1;\n    final double bY2Y1d = bY2 - bY1;\n\n    final double t1B = aX2X1d * (bY2 - aY1) - aY2Y1d * (bX2 - aX1);\n    final double test1 = (aX2X1d * (bY1 - aY1) - aY2Y1d * (bX1 - aX1)) * t1B;\n    final double t2B = bX2X1d * (aY2 - bY1) - bY2Y1d * (aX2 - bX1);\n    final double test2 = (bX2X1d * (aY1 - bY1) - bY2Y1d * (aX1 - bX1)) * t2B;\n\n    if (test1 < 0 && test2 < 0) {\n      return true;\n    }\n\n    if (test1 == 0 || test2 == 0) {\n      // vertically collinear\n      if (aX1 == aX2 || bX1 == bX2) {\n        final double minAy = Math.min(aY1, aY2);\n        final double maxAy = Math.max(aY1, aY2);\n        final double minBy = Math.min(bY1, bY2);\n        final double maxBy = Math.max(bY1, bY2);\n\n        return !(minBy >= maxAy || maxBy <= minAy);\n      }\n      // horizontally collinear\n      final double minAx = Math.min(aX1, aX2);\n      final double maxAx = Math.max(aX1, aX2);\n      final double minBx = Math.min(bX1, bX2);\n      final double maxBx = Math.max(bX1, bX2);\n\n      return !(minBx >= maxAx || maxBx <= minAx);\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean lineCrossesLine(final double aX1, final double aY1, final double aX2, final double aY2,\n                                         final double bX1, final double bY1, final double bX2, final double bY2) {\n    // determine if three points are ccw (right-hand rule) by computing the determinate\n    final double aX2X1d = aX2 - aX1;\n    final double aY2Y1d = aY2 - aY1;\n    final double bX2X1d = bX2 - bX1;\n    final double bY2Y1d = bY2 - bY1;\n\n    final double t1B = aX2X1d * (bY2 - aY1) - aY2Y1d * (bX2 - aX1);\n    final double test1 = (aX2X1d * (bY1 - aY1) - aY2Y1d * (bX1 - aX1)) * t1B;\n    final double t2B = bX2X1d * (aY2 - bY1) - bY2Y1d * (aX2 - bX1);\n    final double test2 = (bX2X1d * (aY1 - bY1) - bY2Y1d * (aX1 - bX1)) * t2B;\n\n    if (test1 < 0 && test2 < 0) {\n      return true;\n    }\n\n    if (test1 == 0 || test2 == 0) {\n      // vertically collinear\n      if (aX1 == aX2 || bX1 == bX2) {\n        final double minAy = Math.min(aY1, aY2);\n        final double maxAy = Math.max(aY1, aY2);\n        final double minBy = Math.min(bY1, bY2);\n        final double maxBy = Math.max(bY1, bY2);\n\n        return !(minBy > maxAy || maxBy < minAy) || !(minAy > maxBy || maxAy < minBy);\n      }\n      // horizontally collinear\n      final double minAx = Math.min(aX1, aX2);\n      final double maxAx = Math.max(aX1, aY2);\n      final double minBx = Math.min(bX1, bX2);\n      final double maxBx = Math.max(bX1, bX2);\n\n      return !(minBx >= maxAx || maxBx <= minAx) || !(minAx >= maxBx || maxAx <= minBx);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","sourceNew":"  private static boolean lineCrossesLine(final double aX1, final double aY1, final double aX2, final double aY2,\n                                         final double bX1, final double bY1, final double bX2, final double bY2) {\n    // determine if three points are ccw (right-hand rule) by computing the determinate\n    final double aX2X1d = aX2 - aX1;\n    final double aY2Y1d = aY2 - aY1;\n    final double bX2X1d = bX2 - bX1;\n    final double bY2Y1d = bY2 - bY1;\n\n    final double t1B = aX2X1d * (bY2 - aY1) - aY2Y1d * (bX2 - aX1);\n    final double test1 = (aX2X1d * (bY1 - aY1) - aY2Y1d * (bX1 - aX1)) * t1B;\n    final double t2B = bX2X1d * (aY2 - bY1) - bY2Y1d * (aX2 - bX1);\n    final double test2 = (bX2X1d * (aY1 - bY1) - bY2Y1d * (aX1 - bX1)) * t2B;\n\n    if (test1 < 0 && test2 < 0) {\n      return true;\n    }\n\n    if (test1 == 0 || test2 == 0) {\n      // vertically collinear\n      if (aX1 == aX2 || bX1 == bX2) {\n        final double minAy = Math.min(aY1, aY2);\n        final double maxAy = Math.max(aY1, aY2);\n        final double minBy = Math.min(bY1, bY2);\n        final double maxBy = Math.max(bY1, bY2);\n\n        return !(minBy >= maxAy || maxBy <= minAy);\n      }\n      // horizontally collinear\n      final double minAx = Math.min(aX1, aX2);\n      final double maxAx = Math.max(aX1, aX2);\n      final double minBx = Math.min(bX1, bX2);\n      final double maxBx = Math.max(bX1, bX2);\n\n      return !(minBx >= maxAx || maxBx <= minAx);\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean lineCrossesLine(final double aX1, final double aY1, final double aX2, final double aY2,\n                                         final double bX1, final double bY1, final double bX2, final double bY2) {\n    // determine if three points are ccw (right-hand rule) by computing the determinate\n    final double aX2X1d = aX2 - aX1;\n    final double aY2Y1d = aY2 - aY1;\n    final double bX2X1d = bX2 - bX1;\n    final double bY2Y1d = bY2 - bY1;\n\n    final double t1B = aX2X1d * (bY2 - aY1) - aY2Y1d * (bX2 - aX1);\n    final double test1 = (aX2X1d * (bY1 - aY1) - aY2Y1d * (bX1 - aX1)) * t1B;\n    final double t2B = bX2X1d * (aY2 - bY1) - bY2Y1d * (aX2 - bX1);\n    final double test2 = (bX2X1d * (aY1 - bY1) - bY2Y1d * (aX1 - bX1)) * t2B;\n\n    if (test1 < 0 && test2 < 0) {\n      return true;\n    }\n\n    if (test1 == 0 || test2 == 0) {\n      // vertically collinear\n      if (aX1 == aX2 || bX1 == bX2) {\n        final double minAy = Math.min(aY1, aY2);\n        final double maxAy = Math.max(aY1, aY2);\n        final double minBy = Math.min(bY1, bY2);\n        final double maxBy = Math.max(bY1, bY2);\n\n        return !(minBy >= maxAy || maxBy <= minAy);\n      }\n      // horizontally collinear\n      final double minAx = Math.min(aX1, aX2);\n      final double maxAx = Math.max(aX1, aX2);\n      final double minBx = Math.min(bX1, bX2);\n      final double maxBx = Math.max(bX1, bX2);\n\n      return !(minBx >= maxAx || maxBx <= minAx);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#lineCrossesLine(double,double,double,double,double,double,double,double).mjava","sourceNew":"  private static boolean lineCrossesLine(final double aX1, final double aY1, final double aX2, final double aY2,\n                                         final double bX1, final double bY1, final double bX2, final double bY2) {\n    // determine if three points are ccw (right-hand rule) by computing the determinate\n    final double aX2X1d = aX2 - aX1;\n    final double aY2Y1d = aY2 - aY1;\n    final double bX2X1d = bX2 - bX1;\n    final double bY2Y1d = bY2 - bY1;\n\n    final double t1B = aX2X1d * (bY2 - aY1) - aY2Y1d * (bX2 - aX1);\n    final double test1 = (aX2X1d * (bY1 - aY1) - aY2Y1d * (bX1 - aX1)) * t1B;\n    final double t2B = bX2X1d * (aY2 - bY1) - bY2Y1d * (aX2 - bX1);\n    final double test2 = (bX2X1d * (aY1 - bY1) - bY2Y1d * (aX1 - bX1)) * t2B;\n\n    if (test1 < 0 && test2 < 0) {\n      return true;\n    }\n\n    if (test1 == 0 || test2 == 0) {\n      // vertically collinear\n      if (aX1 == aX2 || bX1 == bX2) {\n        final double minAy = Math.min(aY1, aY2);\n        final double maxAy = Math.max(aY1, aY2);\n        final double minBy = Math.min(bY1, bY2);\n        final double maxBy = Math.max(bY1, bY2);\n\n        return !(minBy >= maxAy || maxBy <= minAy);\n      }\n      // horizontally collinear\n      final double minAx = Math.min(aX1, aX2);\n      final double maxAx = Math.max(aX1, aX2);\n      final double minBx = Math.min(bX1, bX2);\n      final double maxBx = Math.max(bX1, bX2);\n\n      return !(minBx >= maxAx || maxBx <= minAx);\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean lineCrossesLine(final double aX1, final double aY1, final double aX2, final double aY2,\n                                         final double bX1, final double bY1, final double bX2, final double bY2) {\n    // determine if three points are ccw (right-hand rule) by computing the determinate\n    final double aX2X1d = aX2 - aX1;\n    final double aY2Y1d = aY2 - aY1;\n    final double bX2X1d = bX2 - bX1;\n    final double bY2Y1d = bY2 - bY1;\n\n    final double t1B = aX2X1d * (bY2 - aY1) - aY2Y1d * (bX2 - aX1);\n    final double test1 = (aX2X1d * (bY1 - aY1) - aY2Y1d * (bX1 - aX1)) * t1B;\n    final double t2B = bX2X1d * (aY2 - bY1) - bY2Y1d * (aX2 - bX1);\n    final double test2 = (bX2X1d * (aY1 - bY1) - bY2Y1d * (aX1 - bX1)) * t2B;\n\n    if (test1 < 0 && test2 < 0) {\n      return true;\n    }\n\n    if (test1 == 0 || test2 == 0) {\n      // vertically collinear\n      if (aX1 == aX2 || bX1 == bX2) {\n        final double minAy = Math.min(aY1, aY2);\n        final double maxAy = Math.max(aY1, aY2);\n        final double minBy = Math.min(bY1, bY2);\n        final double maxBy = Math.max(bY1, bY2);\n\n        return !(minBy >= maxAy || maxBy <= minAy);\n      }\n      // horizontally collinear\n      final double minAx = Math.min(aX1, aX2);\n      final double maxAx = Math.max(aX1, aX2);\n      final double minBx = Math.min(bX1, bX2);\n      final double maxBx = Math.max(bX1, bX2);\n\n      return !(minBx >= maxAx || maxBx <= minAx);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"404bbb5c1692276fefc358d0d4a9ccb74ed2518e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["bf9a8d5f45f860aa6168bfae285d452e7f9ff218","937923083e4d137932336fc80f3d78758ff698a6"],"bf9a8d5f45f860aa6168bfae285d452e7f9ff218":["404bbb5c1692276fefc358d0d4a9ccb74ed2518e"],"937923083e4d137932336fc80f3d78758ff698a6":["bf9a8d5f45f860aa6168bfae285d452e7f9ff218"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"404bbb5c1692276fefc358d0d4a9ccb74ed2518e":["bf9a8d5f45f860aa6168bfae285d452e7f9ff218"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["404bbb5c1692276fefc358d0d4a9ccb74ed2518e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"bf9a8d5f45f860aa6168bfae285d452e7f9ff218":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}