{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/PackedQuadPrefixTree.PackedQuadCell#nextCell(boolean).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/PackedQuadPrefixTree.PackedQuadCell#nextCell(boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/PackedQuadPrefixTree.PackedQuadCell#nextCell(boolean).mjava","sourceNew":"    /**\n     * Get the next cell in the tree without using recursion. descend parameter requests traversal to the child nodes,\n     * setting this to false will step to the next sibling.\n     * Note: This complies with lexicographical ordering, once you've moved to the next sibling there is no backtracking.\n     */\n    public PackedQuadCell nextCell(boolean descend) {\n      final int level = getLevel();\n      final int shift = getShiftForLevel(level);\n      // base case: can't go further\n      if ( (!descend && isEnd(level, shift)) || isEnd(maxLevels, getShiftForLevel(maxLevels))) {\n        return null;\n      }\n      long newTerm;\n      final boolean isLeaf = (term&0x1L)==0x1L;\n      // if descend requested && we're not at the maxLevel\n      if ((descend && !isLeaf && (level != maxLevels)) || level == 0) {\n        // simple case: increment level bits (next level)\n        newTerm = ((term>>>1)+0x1L)<<1;\n      } else {  // we're not descending or we can't descend\n        newTerm = term + (0x1L<<shift);\n        // we're at the last sibling...force descend\n        if (((term>>>shift)&0x3L) == 0x3L) {\n          // adjust level for number popping up\n          newTerm = ((newTerm>>>1) - (Long.numberOfTrailingZeros(newTerm>>>shift)>>>1))<<1;\n        }\n      }\n      return new PackedQuadCell(newTerm);\n    }\n\n","sourceOld":"    /**\n     * Get the next cell in the tree without using recursion. descend parameter requests traversal to the child nodes,\n     * setting this to false will step to the next sibling.\n     * Note: This complies with lexicographical ordering, once you've moved to the next sibling there is no backtracking.\n     */\n    public PackedQuadCell nextCell(boolean descend) {\n      final int level = getLevel();\n      final int shift = getShiftForLevel(level);\n      // base case: can't go further\n      if ( (!descend && isEnd(level, shift)) || isEnd(maxLevels, getShiftForLevel(maxLevels))) {\n        return null;\n      }\n      long newTerm;\n      final boolean isLeaf = (term&0x1L)==0x1L;\n      // if descend requested && we're not at the maxLevel\n      if ((descend && !isLeaf && (level != maxLevels)) || level == 0) {\n        // simple case: increment level bits (next level)\n        newTerm = ((term>>>1)+0x1L)<<1;\n      } else {  // we're not descending or we can't descend\n        newTerm = term + (0x1L<<shift);\n        // we're at the last sibling...force descend\n        if (((term>>>shift)&0x3L) == 0x3L) {\n          // adjust level for number popping up\n          newTerm = ((newTerm>>>1) - (Long.numberOfTrailingZeros(newTerm>>>shift)>>>1))<<1;\n        }\n      }\n      return new PackedQuadCell(newTerm);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/PackedQuadPrefixTree.PackedQuadCell#nextCell(boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/PackedQuadPrefixTree.PackedQuadCell#nextCell(boolean).mjava","sourceNew":"    /**\n     * Get the next cell in the tree without using recursion. descend parameter requests traversal to the child nodes,\n     * setting this to false will step to the next sibling.\n     * Note: This complies with lexicographical ordering, once you've moved to the next sibling there is no backtracking.\n     */\n    public PackedQuadCell nextCell(boolean descend) {\n      final int level = getLevel();\n      final int shift = getShiftForLevel(level);\n      // base case: can't go further\n      if ( (!descend && isEnd(level, shift)) || isEnd(maxLevels, getShiftForLevel(maxLevels))) {\n        return null;\n      }\n      long newTerm;\n      final boolean isLeaf = (term&0x1L)==0x1L;\n      // if descend requested && we're not at the maxLevel\n      if ((descend && !isLeaf && (level != maxLevels)) || level == 0) {\n        // simple case: increment level bits (next level)\n        newTerm = ((term>>>1)+0x1L)<<1;\n      } else {  // we're not descending or we can't descend\n        newTerm = term + (0x1L<<shift);\n        // we're at the last sibling...force descend\n        if (((term>>>shift)&0x3L) == 0x3L) {\n          // adjust level for number popping up\n          newTerm = ((newTerm>>>1) - (Long.numberOfTrailingZeros(newTerm>>>shift)>>>1))<<1;\n        }\n      }\n      return new PackedQuadCell(newTerm);\n    }\n\n","sourceOld":"    /**\n     * Get the next cell in the tree without using recursion. descend parameter requests traversal to the child nodes,\n     * setting this to false will step to the next sibling.\n     * Note: This complies with lexicographical ordering, once you've moved to the next sibling there is no backtracking.\n     */\n    public PackedQuadCell nextCell(boolean descend) {\n      final int level = getLevel();\n      final int shift = getShiftForLevel(level);\n      // base case: can't go further\n      if ( (!descend && isEnd(level, shift)) || isEnd(maxLevels, getShiftForLevel(maxLevels))) {\n        return null;\n      }\n      long newTerm;\n      final boolean isLeaf = (term&0x1L)==0x1L;\n      // if descend requested && we're not at the maxLevel\n      if ((descend && !isLeaf && (level != maxLevels)) || level == 0) {\n        // simple case: increment level bits (next level)\n        newTerm = ((term>>>1)+0x1L)<<1;\n      } else {  // we're not descending or we can't descend\n        newTerm = term + (0x1L<<shift);\n        // we're at the last sibling...force descend\n        if (((term>>>shift)&0x3L) == 0x3L) {\n          // adjust level for number popping up\n          newTerm = ((newTerm>>>1) - (Long.numberOfTrailingZeros(newTerm>>>shift)>>>1))<<1;\n        }\n      }\n      return new PackedQuadCell(newTerm);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}