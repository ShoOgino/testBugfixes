{"path":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc4_Query4_All_Slops_Should_match().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc4_Query4_All_Slops_Should_match().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc4_Query4_All_Slops_Should_match().mjava","sourceNew":"  /**\n   * Test DOC_4 and QUERY_4.\n   * QUERY_4 has a fuzzy (len=1) match to DOC_4, so all slop values > 0 should succeed.\n   * But only the 3rd sequence of A's in DOC_4 will do.\n   */\n  public void testDoc4_Query4_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      int numResultsExpected = slop<1 ? 0 : 1;\n      checkPhraseQuery(DOC_4, QUERY_4, slop, numResultsExpected);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test DOC_4 and QUERY_4.\n   * QUERY_4 has a fuzzy (len=1) match to DOC_4, so all slop values > 0 should succeed.\n   * But only the 3rd sequence of A's in DOC_4 will do.\n   */\n  public void testDoc4_Query4_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      int numResultsExpected = slop<1 ? 0 : 1;\n      checkPhraseQuery(DOC_4, QUERY_4, slop, numResultsExpected);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc4_Query4_All_Slops_Should_match().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc4_Query4_All_Slops_Should_match().mjava","sourceNew":"  /**\n   * Test DOC_4 and QUERY_4.\n   * QUERY_4 has a fuzzy (len=1) match to DOC_4, so all slop values > 0 should succeed.\n   * But only the 3rd sequence of A's in DOC_4 will do.\n   */\n  public void testDoc4_Query4_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      int numResultsExpected = slop<1 ? 0 : 1;\n      checkPhraseQuery(DOC_4, QUERY_4, slop, numResultsExpected);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test DOC_4 and QUERY_4.\n   * QUERY_4 has a fuzzy (len=1) match to DOC_4, so all slop values > 0 should succeed.\n   * But only the 3rd sequence of A's in DOC_4 will do.\n   */\n  public void testDoc4_Query4_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      int numResultsExpected = slop<1 ? 0 : 1;\n      checkPhraseQuery(DOC_4, QUERY_4, slop, numResultsExpected);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc4_Query4_All_Slops_Should_match().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc4_Query4_All_Slops_Should_match().mjava","sourceNew":"  /**\n   * Test DOC_4 and QUERY_4.\n   * QUERY_4 has a fuzzy (len=1) match to DOC_4, so all slop values > 0 should succeed.\n   * But only the 3rd sequence of A's in DOC_4 will do.\n   */\n  public void testDoc4_Query4_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      int numResultsExpected = slop<1 ? 0 : 1;\n      checkPhraseQuery(DOC_4, QUERY_4, slop, numResultsExpected);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test DOC_4 and QUERY_4.\n   * QUERY_4 has a fuzzy (len=1) match to DOC_4, so all slop values > 0 should succeed.\n   * But only the 3rd sequence of A's in DOC_4 will do.\n   */\n  public void testDoc4_Query4_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      int numResultsExpected = slop<1 ? 0 : 1;\n      checkPhraseQuery(DOC_4, QUERY_4, slop, numResultsExpected);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc4_Query4_All_Slops_Should_match().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#testDoc4_Query4_All_Slops_Should_match().mjava","sourceNew":"  /**\n   * Test DOC_4 and QUERY_4.\n   * QUERY_4 has a fuzzy (len=1) match to DOC_4, so all slop values &gt; 0 should succeed.\n   * But only the 3rd sequence of A's in DOC_4 will do.\n   */\n  public void testDoc4_Query4_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      int numResultsExpected = slop<1 ? 0 : 1;\n      checkPhraseQuery(DOC_4, QUERY_4, slop, numResultsExpected);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test DOC_4 and QUERY_4.\n   * QUERY_4 has a fuzzy (len=1) match to DOC_4, so all slop values > 0 should succeed.\n   * But only the 3rd sequence of A's in DOC_4 will do.\n   */\n  public void testDoc4_Query4_All_Slops_Should_match() throws Exception {\n    for (int slop=0; slop<30; slop++) {\n      int numResultsExpected = slop<1 ? 0 : 1;\n      checkPhraseQuery(DOC_4, QUERY_4, slop, numResultsExpected);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1eb427f2c6beed80d1724555fc1db003ccf3030"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}