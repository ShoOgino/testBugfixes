{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#next(Token).mjava","commits":[{"id":"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f","date":1215042831,"type":0,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#next(Token).mjava","pathOld":"/dev/null","sourceNew":"  public Token next(Token token) throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && (currentPermutationRows.get(currentPermutationTokensStartOffset).getColumn().isFirst() || currentPermutationRows.get(currentPermutationTokensStartOffset).getColumn().isLast())) {\n          return next(token);\n        }\n\n        int termLength = 0;\n\n        List<Token> shingle = new ArrayList<Token>();\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.termLength();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return next(token);\n        }\n\n        // shingle token factory\n        StringBuilder sb = new StringBuilder(termLength + 10); // paranormal abillity to forsay the future.\n        for (Token shingleToken : shingle) {\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.termBuffer(), 0, shingleToken.termLength());\n        }\n        token.setTermText(sb.toString());\n        updateToken(token, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return token;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return next(token);\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rith of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List<Token> deletedColumnTokens = new ArrayList<Token>();\n          for (Matrix.Column.Row row : deletedColumn.getRows()) {\n            for (Token shingleToken : row.getTokens()) {\n              deletedColumnTokens.add(shingleToken);\n            }\n          }\n          for (Iterator<List<Token>> shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List<Token> shingle = shinglesSeenIterator.next();\n            for (Token deletedColumnToken : deletedColumnTokens) {\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return next(token);\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return next(token);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#next(Token).mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && (currentPermutationRows.get(currentPermutationTokensStartOffset).getColumn().isFirst() || currentPermutationRows.get(currentPermutationTokensStartOffset).getColumn().isLast())) {\n          return next(reusableToken);\n        }\n\n        int termLength = 0;\n\n        List<Token> shingle = new ArrayList<Token>();\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.termLength();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return next(reusableToken);\n        }\n\n        // shingle token factory\n        StringBuilder sb = new StringBuilder(termLength + 10); // paranormal ability to foresee the future.\n        for (Token shingleToken : shingle) {\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.termBuffer(), 0, shingleToken.termLength());\n        }\n        reusableToken.setTermBuffer(sb.toString());\n        updateToken(reusableToken, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return reusableToken;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return next(reusableToken);\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rith of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List<Token> deletedColumnTokens = new ArrayList<Token>();\n          for (Matrix.Column.Row row : deletedColumn.getRows()) {\n            for (Token shingleToken : row.getTokens()) {\n              deletedColumnTokens.add(shingleToken);\n            }\n          }\n          for (Iterator<List<Token>> shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List<Token> shingle = shinglesSeenIterator.next();\n            for (Token deletedColumnToken : deletedColumnTokens) {\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return next(reusableToken);\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return next(reusableToken);\n  }\n\n","sourceOld":"  public Token next(Token token) throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && (currentPermutationRows.get(currentPermutationTokensStartOffset).getColumn().isFirst() || currentPermutationRows.get(currentPermutationTokensStartOffset).getColumn().isLast())) {\n          return next(token);\n        }\n\n        int termLength = 0;\n\n        List<Token> shingle = new ArrayList<Token>();\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.termLength();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return next(token);\n        }\n\n        // shingle token factory\n        StringBuilder sb = new StringBuilder(termLength + 10); // paranormal abillity to forsay the future.\n        for (Token shingleToken : shingle) {\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.termBuffer(), 0, shingleToken.termLength());\n        }\n        token.setTermText(sb.toString());\n        updateToken(token, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return token;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return next(token);\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rith of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List<Token> deletedColumnTokens = new ArrayList<Token>();\n          for (Matrix.Column.Row row : deletedColumn.getRows()) {\n            for (Token shingleToken : row.getTokens()) {\n              deletedColumnTokens.add(shingleToken);\n            }\n          }\n          for (Iterator<List<Token>> shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List<Token> shingle = shinglesSeenIterator.next();\n            for (Token deletedColumnToken : deletedColumnTokens) {\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return next(token);\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return next(token);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56","date":1221157398,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#next(Token).mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && (((Matrix.Column.Row) currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isFirst() || ((Matrix.Column.Row) currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isLast())) {\n          return next(reusableToken);\n        }\n\n        int termLength = 0;\n\n        List shingle = new ArrayList();\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = (Token) currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.termLength();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return next(reusableToken);\n        }\n\n        // shingle token factory\n        StringBuffer sb = new StringBuffer(termLength + 10); // paranormal ability to foresee the future.\n        for (Iterator iterator = shingle.iterator(); iterator.hasNext();) {\n          Token shingleToken = (Token) iterator.next();\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.termBuffer(), 0, shingleToken.termLength());\n        }\n        reusableToken.setTermBuffer(sb.toString());\n        updateToken(reusableToken, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return reusableToken;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return next(reusableToken);\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rith of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = (Matrix.Column) matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List deletedColumnTokens = new ArrayList();\n          for (Iterator iterator = deletedColumn.getRows().iterator(); iterator.hasNext();) {\n            Matrix.Column.Row row = (Matrix.Column.Row) iterator.next();\n            for (Iterator rowIter = row.getTokens().iterator(); rowIter.hasNext();) {\n              Object o = rowIter.next();//Token\n              deletedColumnTokens.add(o);\n            }\n\n          }\n          for (Iterator shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List shingle = (List) shinglesSeenIterator.next();\n            for (Iterator deletedIter = deletedColumnTokens.iterator(); deletedIter.hasNext();) {\n              Token deletedColumnToken = (Token) deletedIter.next();\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return next(reusableToken);\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return next(reusableToken);\n  }\n\n","sourceOld":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && (currentPermutationRows.get(currentPermutationTokensStartOffset).getColumn().isFirst() || currentPermutationRows.get(currentPermutationTokensStartOffset).getColumn().isLast())) {\n          return next(reusableToken);\n        }\n\n        int termLength = 0;\n\n        List<Token> shingle = new ArrayList<Token>();\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.termLength();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return next(reusableToken);\n        }\n\n        // shingle token factory\n        StringBuilder sb = new StringBuilder(termLength + 10); // paranormal ability to foresee the future.\n        for (Token shingleToken : shingle) {\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.termBuffer(), 0, shingleToken.termLength());\n        }\n        reusableToken.setTermBuffer(sb.toString());\n        updateToken(reusableToken, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return reusableToken;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return next(reusableToken);\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rith of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List<Token> deletedColumnTokens = new ArrayList<Token>();\n          for (Matrix.Column.Row row : deletedColumn.getRows()) {\n            for (Token shingleToken : row.getTokens()) {\n              deletedColumnTokens.add(shingleToken);\n            }\n          }\n          for (Iterator<List<Token>> shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List<Token> shingle = shinglesSeenIterator.next();\n            for (Token deletedColumnToken : deletedColumnTokens) {\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return next(reusableToken);\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return next(reusableToken);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c81967f51992d18add7103c5f04fb70cbdab9bd4","date":1231515292,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#next(Token).mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    return token;\n  }\n\n","sourceOld":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    if (currentPermuationTokens != null) {\n      currentShingleLength++;\n\n      if (currentShingleLength + currentPermutationTokensStartOffset <= currentPermuationTokens.size()\n          && currentShingleLength <= maximumShingleSize) {\n\n        // it is possible to create at least one more shingle of the current matrix permutation\n\n        if (ignoringSinglePrefixOrSuffixShingle\n            && currentShingleLength == 1\n            && (((Matrix.Column.Row) currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isFirst() || ((Matrix.Column.Row) currentPermutationRows.get(currentPermutationTokensStartOffset)).getColumn().isLast())) {\n          return next(reusableToken);\n        }\n\n        int termLength = 0;\n\n        List shingle = new ArrayList();\n\n        for (int i = 0; i < currentShingleLength; i++) {\n          Token shingleToken = (Token) currentPermuationTokens.get(i + currentPermutationTokensStartOffset);\n          termLength += shingleToken.termLength();\n          shingle.add(shingleToken);\n        }\n        if (spacerCharacter != null) {\n          termLength += currentShingleLength - 1;\n        }\n\n        // only produce shingles that not already has been created\n        if (!shinglesSeen.add(shingle)) {\n          return next(reusableToken);\n        }\n\n        // shingle token factory\n        StringBuffer sb = new StringBuffer(termLength + 10); // paranormal ability to foresee the future.\n        for (Iterator iterator = shingle.iterator(); iterator.hasNext();) {\n          Token shingleToken = (Token) iterator.next();\n          if (spacerCharacter != null && sb.length() > 0) {\n            sb.append(spacerCharacter);\n          }\n          sb.append(shingleToken.termBuffer(), 0, shingleToken.termLength());\n        }\n        reusableToken.setTermBuffer(sb.toString());\n        updateToken(reusableToken, shingle, currentPermutationTokensStartOffset, currentPermutationRows, currentPermuationTokens);\n\n        return reusableToken;\n\n      } else {\n\n        // it is NOT possible to create one more shingles of the current matrix permutation\n\n        if (currentPermutationTokensStartOffset < currentPermuationTokens.size() - 1) {\n          // reset shingle size and move one step to the right in the current tokens permutation\n          currentPermutationTokensStartOffset++;\n          currentShingleLength = minimumShingleSize - 1;\n          return next(reusableToken);\n        }\n\n\n        if (permutations == null) {\n          // todo does this ever occur?\n          return null;\n        }\n\n\n        if (!permutations.hasNext()) {\n\n          // load more data (if available) to the matrix\n\n          if (input != null && readColumn()) {\n            // don't really care, we just read it.\n          }\n\n          // get rith of resources\n\n          // delete the first column in the matrix\n          Matrix.Column deletedColumn = (Matrix.Column) matrix.columns.remove(0);\n\n          // remove all shingles seen that include any of the tokens from the deleted column.\n          List deletedColumnTokens = new ArrayList();\n          for (Iterator iterator = deletedColumn.getRows().iterator(); iterator.hasNext();) {\n            Matrix.Column.Row row = (Matrix.Column.Row) iterator.next();\n            for (Iterator rowIter = row.getTokens().iterator(); rowIter.hasNext();) {\n              Object o = rowIter.next();//Token\n              deletedColumnTokens.add(o);\n            }\n\n          }\n          for (Iterator shinglesSeenIterator = shinglesSeen.iterator(); shinglesSeenIterator.hasNext();) {\n            List shingle = (List) shinglesSeenIterator.next();\n            for (Iterator deletedIter = deletedColumnTokens.iterator(); deletedIter.hasNext();) {\n              Token deletedColumnToken = (Token) deletedIter.next();\n              if (shingle.contains(deletedColumnToken)) {\n                shinglesSeenIterator.remove();\n                break;\n              }\n            }\n          }\n\n\n          if (matrix.columns.size() < minimumShingleSize) {\n            // exhausted\n            return null;\n          }\n\n          // create permutations of the matrix it now looks\n          permutations = matrix.permutationIterator();\n        }\n\n        nextTokensPermutation();\n        return next(reusableToken);\n\n      }\n    }\n\n    if (permutations == null) {\n      permutations = matrix.permutationIterator();\n    }\n\n    if (!permutations.hasNext()) {\n      return null;\n    }\n\n    nextTokensPermutation();\n\n    return next(reusableToken);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#next(Token).mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    return token;\n  }\n\n","sourceOld":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    return token;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["c81967f51992d18add7103c5f04fb70cbdab9bd4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c81967f51992d18add7103c5f04fb70cbdab9bd4":["cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56"],"cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"c81967f51992d18add7103c5f04fb70cbdab9bd4":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56":["c81967f51992d18add7103c5f04fb70cbdab9bd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}