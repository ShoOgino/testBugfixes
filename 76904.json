{"path":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#resolveTransitively(File).mjava","commits":[{"id":"b3e4bd3aed493904d0bbb6c6e0394f619e175087","date":1401446035,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#resolveTransitively(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Transitively resolves all dependencies in the given ivy.xml file,\n   * looking for indirect dependencies with versions that conflict\n   * with those of direct dependencies.  Versions conflict when a\n   * direct dependency's version is older than that of an indirect\n   * dependency with the same /org/name.\n   * \n   * Returns true if no version conflicts are found and no resolution\n   * errors occurred, false otherwise.\n   */\n  private boolean resolveTransitively(File ivyXmlFile) {\n    boolean success = true;\n\n    ResolveOptions options = new ResolveOptions();\n    options.setDownload(false);           // Download only module descriptors, not artifacts\n    options.setTransitive(true);          // Resolve transitively, if not already specified in the ivy.xml file\n    options.setUseCacheOnly(false);       // Download the internet!\n    options.setOutputReport(false);       // Don't print to the console\n    options.setLog(LogOptions.LOG_QUIET); // Don't log to the console\n    options.setConfs(new String[] {\"*\"}); // Resolve all configurations\n\n    // Rewrite the ivy.xml, replacing all 'transitive=\"false\"' with 'transitive=\"true\"'\n    // The Ivy API is file-based, so we have to write the result to the filesystem.\n    String moduleName = \"unknown\";\n    String ivyXmlContent = xmlToString(ivyXmlFile);\n    Matcher matcher = MODULE_NAME_PATTERN.matcher(ivyXmlContent);\n    if (matcher.find()) {\n      moduleName = matcher.group(1);\n    }\n    ivyXmlContent = ivyXmlContent.replaceAll(\"\\\\btransitive\\\\s*=\\\\s*[\\\"']false[\\\"']\", \"transitive=\\\"true\\\"\");\n    File transitiveIvyXmlFile = null;\n    try {\n      File buildDir = new File(commonBuildDir, \"ivy-transitive-resolve\");\n      if ( ! buildDir.exists() && ! buildDir.mkdirs()) {\n        throw new BuildException(\"Could not create temp directory \" + buildDir.getPath());\n      }\n      matcher = MODULE_DIRECTORY_PATTERN.matcher(ivyXmlFile.getCanonicalPath());\n      if ( ! matcher.matches()) {\n        throw new BuildException(\"Unknown ivy.xml module directory: \" + ivyXmlFile.getCanonicalPath());\n      }\n      String moduleDirPrefix = matcher.group(1).replaceAll(\"[/\\\\\\\\]\", \".\");\n      transitiveIvyXmlFile = new File(buildDir, \"transitive.\" + moduleDirPrefix + \".ivy.xml\");\n      try (Writer writer = new OutputStreamWriter(new FileOutputStream(transitiveIvyXmlFile), StandardCharsets.UTF_8)) {\n        writer.write(ivyXmlContent);\n      }\n      ResolveReport resolveReport = ivy.resolve(transitiveIvyXmlFile.toURI().toURL(), options);\n      IvyNodeElement root = IvyNodeElementAdapter.adapt(resolveReport);\n      for (IvyNodeElement directDependency : root.getDependencies()) {\n        String coordinate = \"/\" + directDependency.getOrganization() + \"/\" + directDependency.getName();\n        Versions versions = directDependencies.get(coordinate);\n        if (null == versions) {\n          log(\"ERROR: the following coordinate key does not appear in \" \n              + centralizedVersionsFile.getName() + \": \" + coordinate);\n          success = false;\n        } else {\n          versions.directlyReferenced = true;\n          if (collectConflicts(directDependency, directDependency, moduleName)) {\n            success = false;\n          }\n        }\n      }\n    } catch (ParseException | IOException e) {\n      if (null != transitiveIvyXmlFile) {\n        log(\"Exception reading \" + transitiveIvyXmlFile.getPath() + \": \" + e.toString());\n      }\n      success = false;\n    }\n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151d28379beec3adbc4c091c633cb33e496a2de3","date":1401909314,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#resolveTransitively(File).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#resolveTransitively(File).mjava","sourceNew":"  /**\n   * Transitively resolves all dependencies in the given ivy.xml file,\n   * looking for indirect dependencies with versions that conflict\n   * with those of direct dependencies.  Dependency conflict when a\n   * direct dependency's version is older than that of an indirect\n   * dependency with the same /org/name.\n   * \n   * Returns true if no version conflicts are found and no resolution\n   * errors occurred, false otherwise.\n   */\n  private boolean resolveTransitively(File ivyXmlFile) {\n    boolean success = true;\n\n    ResolveOptions options = new ResolveOptions();\n    options.setDownload(false);           // Download only module descriptors, not artifacts\n    options.setTransitive(true);          // Resolve transitively, if not already specified in the ivy.xml file\n    options.setUseCacheOnly(false);       // Download the internet!\n    options.setOutputReport(false);       // Don't print to the console\n    options.setLog(LogOptions.LOG_QUIET); // Don't log to the console\n    options.setConfs(new String[] {\"*\"}); // Resolve all configurations\n\n    // Rewrite the ivy.xml, replacing all 'transitive=\"false\"' with 'transitive=\"true\"'\n    // The Ivy API is file-based, so we have to write the result to the filesystem.\n    String moduleName = \"unknown\";\n    String ivyXmlContent = xmlToString(ivyXmlFile);\n    Matcher matcher = MODULE_NAME_PATTERN.matcher(ivyXmlContent);\n    if (matcher.find()) {\n      moduleName = matcher.group(1);\n    }\n    ivyXmlContent = ivyXmlContent.replaceAll(\"\\\\btransitive\\\\s*=\\\\s*[\\\"']false[\\\"']\", \"transitive=\\\"true\\\"\");\n    File transitiveIvyXmlFile = null;\n    try {\n      File buildDir = new File(commonBuildDir, \"ivy-transitive-resolve\");\n      if ( ! buildDir.exists() && ! buildDir.mkdirs()) {\n        throw new BuildException(\"Could not create temp directory \" + buildDir.getPath());\n      }\n      matcher = MODULE_DIRECTORY_PATTERN.matcher(ivyXmlFile.getCanonicalPath());\n      if ( ! matcher.matches()) {\n        throw new BuildException(\"Unknown ivy.xml module directory: \" + ivyXmlFile.getCanonicalPath());\n      }\n      String moduleDirPrefix = matcher.group(1).replaceAll(\"[/\\\\\\\\]\", \".\");\n      transitiveIvyXmlFile = new File(buildDir, \"transitive.\" + moduleDirPrefix + \".ivy.xml\");\n      try (Writer writer = new OutputStreamWriter(new FileOutputStream(transitiveIvyXmlFile), StandardCharsets.UTF_8)) {\n        writer.write(ivyXmlContent);\n      }\n      ResolveReport resolveReport = ivy.resolve(transitiveIvyXmlFile.toURI().toURL(), options);\n      IvyNodeElement root = IvyNodeElementAdapter.adapt(resolveReport);\n      for (IvyNodeElement directDependency : root.getDependencies()) {\n        String coordinate = \"/\" + directDependency.getOrganization() + \"/\" + directDependency.getName();\n        Dependency dependency = directDependencies.get(coordinate);\n        if (null == dependency) {\n          log(\"ERROR: the following coordinate key does not appear in \" \n              + centralizedVersionsFile.getName() + \": \" + coordinate);\n          success = false;\n        } else {\n          dependency.directlyReferenced = true;\n          if (collectConflicts(directDependency, directDependency, moduleName)) {\n            success = false;\n          }\n        }\n      }\n    } catch (ParseException | IOException e) {\n      if (null != transitiveIvyXmlFile) {\n        log(\"Exception reading \" + transitiveIvyXmlFile.getPath() + \": \" + e.toString());\n      }\n      success = false;\n    }\n    return success;\n  }\n\n","sourceOld":"  /**\n   * Transitively resolves all dependencies in the given ivy.xml file,\n   * looking for indirect dependencies with versions that conflict\n   * with those of direct dependencies.  Versions conflict when a\n   * direct dependency's version is older than that of an indirect\n   * dependency with the same /org/name.\n   * \n   * Returns true if no version conflicts are found and no resolution\n   * errors occurred, false otherwise.\n   */\n  private boolean resolveTransitively(File ivyXmlFile) {\n    boolean success = true;\n\n    ResolveOptions options = new ResolveOptions();\n    options.setDownload(false);           // Download only module descriptors, not artifacts\n    options.setTransitive(true);          // Resolve transitively, if not already specified in the ivy.xml file\n    options.setUseCacheOnly(false);       // Download the internet!\n    options.setOutputReport(false);       // Don't print to the console\n    options.setLog(LogOptions.LOG_QUIET); // Don't log to the console\n    options.setConfs(new String[] {\"*\"}); // Resolve all configurations\n\n    // Rewrite the ivy.xml, replacing all 'transitive=\"false\"' with 'transitive=\"true\"'\n    // The Ivy API is file-based, so we have to write the result to the filesystem.\n    String moduleName = \"unknown\";\n    String ivyXmlContent = xmlToString(ivyXmlFile);\n    Matcher matcher = MODULE_NAME_PATTERN.matcher(ivyXmlContent);\n    if (matcher.find()) {\n      moduleName = matcher.group(1);\n    }\n    ivyXmlContent = ivyXmlContent.replaceAll(\"\\\\btransitive\\\\s*=\\\\s*[\\\"']false[\\\"']\", \"transitive=\\\"true\\\"\");\n    File transitiveIvyXmlFile = null;\n    try {\n      File buildDir = new File(commonBuildDir, \"ivy-transitive-resolve\");\n      if ( ! buildDir.exists() && ! buildDir.mkdirs()) {\n        throw new BuildException(\"Could not create temp directory \" + buildDir.getPath());\n      }\n      matcher = MODULE_DIRECTORY_PATTERN.matcher(ivyXmlFile.getCanonicalPath());\n      if ( ! matcher.matches()) {\n        throw new BuildException(\"Unknown ivy.xml module directory: \" + ivyXmlFile.getCanonicalPath());\n      }\n      String moduleDirPrefix = matcher.group(1).replaceAll(\"[/\\\\\\\\]\", \".\");\n      transitiveIvyXmlFile = new File(buildDir, \"transitive.\" + moduleDirPrefix + \".ivy.xml\");\n      try (Writer writer = new OutputStreamWriter(new FileOutputStream(transitiveIvyXmlFile), StandardCharsets.UTF_8)) {\n        writer.write(ivyXmlContent);\n      }\n      ResolveReport resolveReport = ivy.resolve(transitiveIvyXmlFile.toURI().toURL(), options);\n      IvyNodeElement root = IvyNodeElementAdapter.adapt(resolveReport);\n      for (IvyNodeElement directDependency : root.getDependencies()) {\n        String coordinate = \"/\" + directDependency.getOrganization() + \"/\" + directDependency.getName();\n        Versions versions = directDependencies.get(coordinate);\n        if (null == versions) {\n          log(\"ERROR: the following coordinate key does not appear in \" \n              + centralizedVersionsFile.getName() + \": \" + coordinate);\n          success = false;\n        } else {\n          versions.directlyReferenced = true;\n          if (collectConflicts(directDependency, directDependency, moduleName)) {\n            success = false;\n          }\n        }\n      }\n    } catch (ParseException | IOException e) {\n      if (null != transitiveIvyXmlFile) {\n        log(\"Exception reading \" + transitiveIvyXmlFile.getPath() + \": \" + e.toString());\n      }\n      success = false;\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#resolveTransitively(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Transitively resolves all dependencies in the given ivy.xml file,\n   * looking for indirect dependencies with versions that conflict\n   * with those of direct dependencies.  Dependency conflict when a\n   * direct dependency's version is older than that of an indirect\n   * dependency with the same /org/name.\n   * \n   * Returns true if no version conflicts are found and no resolution\n   * errors occurred, false otherwise.\n   */\n  private boolean resolveTransitively(File ivyXmlFile) {\n    boolean success = true;\n\n    ResolveOptions options = new ResolveOptions();\n    options.setDownload(false);           // Download only module descriptors, not artifacts\n    options.setTransitive(true);          // Resolve transitively, if not already specified in the ivy.xml file\n    options.setUseCacheOnly(false);       // Download the internet!\n    options.setOutputReport(false);       // Don't print to the console\n    options.setLog(LogOptions.LOG_QUIET); // Don't log to the console\n    options.setConfs(new String[] {\"*\"}); // Resolve all configurations\n\n    // Rewrite the ivy.xml, replacing all 'transitive=\"false\"' with 'transitive=\"true\"'\n    // The Ivy API is file-based, so we have to write the result to the filesystem.\n    String moduleName = \"unknown\";\n    String ivyXmlContent = xmlToString(ivyXmlFile);\n    Matcher matcher = MODULE_NAME_PATTERN.matcher(ivyXmlContent);\n    if (matcher.find()) {\n      moduleName = matcher.group(1);\n    }\n    ivyXmlContent = ivyXmlContent.replaceAll(\"\\\\btransitive\\\\s*=\\\\s*[\\\"']false[\\\"']\", \"transitive=\\\"true\\\"\");\n    File transitiveIvyXmlFile = null;\n    try {\n      File buildDir = new File(commonBuildDir, \"ivy-transitive-resolve\");\n      if ( ! buildDir.exists() && ! buildDir.mkdirs()) {\n        throw new BuildException(\"Could not create temp directory \" + buildDir.getPath());\n      }\n      matcher = MODULE_DIRECTORY_PATTERN.matcher(ivyXmlFile.getCanonicalPath());\n      if ( ! matcher.matches()) {\n        throw new BuildException(\"Unknown ivy.xml module directory: \" + ivyXmlFile.getCanonicalPath());\n      }\n      String moduleDirPrefix = matcher.group(1).replaceAll(\"[/\\\\\\\\]\", \".\");\n      transitiveIvyXmlFile = new File(buildDir, \"transitive.\" + moduleDirPrefix + \".ivy.xml\");\n      try (Writer writer = new OutputStreamWriter(new FileOutputStream(transitiveIvyXmlFile), StandardCharsets.UTF_8)) {\n        writer.write(ivyXmlContent);\n      }\n      ResolveReport resolveReport = ivy.resolve(transitiveIvyXmlFile.toURI().toURL(), options);\n      IvyNodeElement root = IvyNodeElementAdapter.adapt(resolveReport);\n      for (IvyNodeElement directDependency : root.getDependencies()) {\n        String coordinate = \"/\" + directDependency.getOrganization() + \"/\" + directDependency.getName();\n        Dependency dependency = directDependencies.get(coordinate);\n        if (null == dependency) {\n          log(\"ERROR: the following coordinate key does not appear in \" \n              + centralizedVersionsFile.getName() + \": \" + coordinate);\n          success = false;\n        } else {\n          dependency.directlyReferenced = true;\n          if (collectConflicts(directDependency, directDependency, moduleName)) {\n            success = false;\n          }\n        }\n      }\n    } catch (ParseException | IOException e) {\n      if (null != transitiveIvyXmlFile) {\n        log(\"Exception reading \" + transitiveIvyXmlFile.getPath() + \": \" + e.toString());\n      }\n      success = false;\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"151d28379beec3adbc4c091c633cb33e496a2de3":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["151d28379beec3adbc4c091c633cb33e496a2de3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"]},"commit2Childs":{"151d28379beec3adbc4c091c633cb33e496a2de3":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["151d28379beec3adbc4c091c633cb33e496a2de3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}