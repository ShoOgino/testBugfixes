{"path":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest#testMaxCoresPerNode().mjava","commits":[{"id":"fbed9f780536d62957bf82cf6c87b75c5b4cd30b","date":1462731618,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest#testMaxCoresPerNode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMaxCoresPerNode() {\n    Result result = buildClusterState(\"csr*sr2\", 1, 1, NODE2);\n    String createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(\"csr*sr2\", 1, 2, NODE2);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertEquals(NODE2_URL, createUrl);\n\n    result = buildClusterState(\"csr*sr2sr3sr4\", 1, 1, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(\"csr*sr2sr3sr4\", 1, 2, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertTrue(createUrl.equals(NODE3_URL) || createUrl.equals(NODE4_URL));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7e7599efe704cd8a873a909e546525ace4b5502"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55a4fb564f94e7d0f0dfce705d51533be9f1c22e","date":1462769458,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest#testMaxCoresPerNode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMaxCoresPerNode() {\n    Result result = buildClusterState(\"csr*sr2\", 1, 1, NODE2);\n    String createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(\"csr*sr2\", 1, 2, NODE2);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertEquals(NODE2_URL, createUrl);\n\n    result = buildClusterState(\"csr*sr2sr3sr4\", 1, 1, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(\"csr*sr2sr3sr4\", 1, 2, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertTrue(createUrl.equals(NODE3_URL) || createUrl.equals(NODE4_URL));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest#testMaxCoresPerNode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMaxCoresPerNode() {\n    Result result = buildClusterState(\"csr*sr2\", 1, 1, NODE2);\n    String createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(\"csr*sr2\", 1, 2, NODE2);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertEquals(NODE2_URL, createUrl);\n\n    result = buildClusterState(\"csr*sr2sr3sr4\", 1, 1, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(\"csr*sr2sr3sr4\", 1, 2, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertTrue(createUrl.equals(NODE3_URL) || createUrl.equals(NODE4_URL));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest#testMaxCoresPerNode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMaxCoresPerNode() {\n    Result result = buildClusterState(\"csr*sr2\", 1, 1, NODE2);\n    String createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(\"csr*sr2\", 1, 2, NODE2);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertEquals(NODE2_URL, createUrl);\n\n    result = buildClusterState(\"csr*sr2sr3sr4\", 1, 1, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(\"csr*sr2sr3sr4\", 1, 2, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertTrue(createUrl.equals(NODE3_URL) || createUrl.equals(NODE4_URL));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7e7599efe704cd8a873a909e546525ace4b5502","date":1491388304,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest#testMaxCoresPerNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest#testMaxCoresPerNode().mjava","sourceNew":"  @Test\n  public void testMaxCoresPerNode() {\n    ClusterStateMockUtil.Result result = buildClusterState(results, \"csr*sr2\", 1, 1, NODE2);\n    String createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(results, \"csr*sr2\", 1, 2, NODE2);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertEquals(NODE2_URL, createUrl);\n\n    result = buildClusterState(results, \"csr*sr2sr3sr4\", 1, 1, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(results, \"csr*sr2sr3sr4\", 1, 2, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertTrue(createUrl.equals(NODE3_URL) || createUrl.equals(NODE4_URL));\n  }\n\n","sourceOld":"  @Test\n  public void testMaxCoresPerNode() {\n    Result result = buildClusterState(\"csr*sr2\", 1, 1, NODE2);\n    String createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(\"csr*sr2\", 1, 2, NODE2);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertEquals(NODE2_URL, createUrl);\n\n    result = buildClusterState(\"csr*sr2sr3sr4\", 1, 1, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(\"csr*sr2sr3sr4\", 1, 2, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertTrue(createUrl.equals(NODE3_URL) || createUrl.equals(NODE4_URL));\n  }\n\n","bugFix":["fbed9f780536d62957bf82cf6c87b75c5b4cd30b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest#testMaxCoresPerNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest#testMaxCoresPerNode().mjava","sourceNew":"  @Test\n  public void testMaxCoresPerNode() {\n    ClusterStateMockUtil.Result result = buildClusterState(results, \"csr*sr2\", 1, 1, NODE2);\n    String createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(results, \"csr*sr2\", 1, 2, NODE2);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertEquals(NODE2_URL, createUrl);\n\n    result = buildClusterState(results, \"csr*sr2sr3sr4\", 1, 1, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(results, \"csr*sr2sr3sr4\", 1, 2, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertTrue(createUrl.equals(NODE3_URL) || createUrl.equals(NODE4_URL));\n  }\n\n","sourceOld":"  @Test\n  public void testMaxCoresPerNode() {\n    Result result = buildClusterState(\"csr*sr2\", 1, 1, NODE2);\n    String createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(\"csr*sr2\", 1, 2, NODE2);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertEquals(NODE2_URL, createUrl);\n\n    result = buildClusterState(\"csr*sr2sr3sr4\", 1, 1, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(\"csr*sr2sr3sr4\", 1, 2, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertTrue(createUrl.equals(NODE3_URL) || createUrl.equals(NODE4_URL));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest#testMaxCoresPerNode().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testMaxCoresPerNode() {\n    ClusterStateMockUtil.Result result = buildClusterState(results, \"csr*sr2\", 1, 1, NODE2);\n    String createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(results, \"csr*sr2\", 1, 2, NODE2);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertEquals(NODE2_URL, createUrl);\n\n    result = buildClusterState(results, \"csr*sr2sr3sr4\", 1, 1, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(results, \"csr*sr2sr3sr4\", 1, 2, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertTrue(createUrl.equals(NODE3_URL) || createUrl.equals(NODE4_URL));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest#testMaxCoresPerNode().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testMaxCoresPerNode() {\n    ClusterStateMockUtil.Result result = buildClusterState(results, \"csr*sr2\", 1, 1, NODE2);\n    String createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(results, \"csr*sr2\", 1, 2, NODE2);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertEquals(NODE2_URL, createUrl);\n\n    result = buildClusterState(results, \"csr*sr2sr3sr4\", 1, 1, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(results, \"csr*sr2sr3sr4\", 1, 2, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertTrue(createUrl.equals(NODE3_URL) || createUrl.equals(NODE4_URL));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverUtilsTest#testMaxCoresPerNode().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testMaxCoresPerNode() {\n    ClusterStateMockUtil.Result result = buildClusterState(results, \"csr*sr2\", 1, 1, NODE2);\n    String createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(results, \"csr*sr2\", 1, 2, NODE2);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertEquals(NODE2_URL, createUrl);\n\n    result = buildClusterState(results, \"csr*sr2sr3sr4\", 1, 1, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 1);\n    assertNull(createUrl);\n\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertNull(createUrl);\n\n    result = buildClusterState(results, \"csr*sr2sr3sr4\", 1, 2, NODE2, NODE3, NODE4);\n    createUrl = OverseerAutoReplicaFailoverThread.getBestCreateUrl(result.reader, result.badReplica, 2);\n    assertTrue(createUrl.equals(NODE3_URL) || createUrl.equals(NODE4_URL));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["55a4fb564f94e7d0f0dfce705d51533be9f1c22e"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["f7e7599efe704cd8a873a909e546525ace4b5502","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"55a4fb564f94e7d0f0dfce705d51533be9f1c22e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbed9f780536d62957bf82cf6c87b75c5b4cd30b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55a4fb564f94e7d0f0dfce705d51533be9f1c22e"],"560c18d71dad43d675158783c3840f8c80d6d39c":["f7e7599efe704cd8a873a909e546525ace4b5502","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"fbed9f780536d62957bf82cf6c87b75c5b4cd30b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55a4fb564f94e7d0f0dfce705d51533be9f1c22e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"],"f7e7599efe704cd8a873a909e546525ace4b5502":["55a4fb564f94e7d0f0dfce705d51533be9f1c22e"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"55a4fb564f94e7d0f0dfce705d51533be9f1c22e":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f7e7599efe704cd8a873a909e546525ace4b5502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55a4fb564f94e7d0f0dfce705d51533be9f1c22e","e66a459d38c1c4a2f97128433dab546f683a9fed","fbed9f780536d62957bf82cf6c87b75c5b4cd30b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbed9f780536d62957bf82cf6c87b75c5b4cd30b":["55a4fb564f94e7d0f0dfce705d51533be9f1c22e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f7e7599efe704cd8a873a909e546525ace4b5502":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}