{"path":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (charArr == null || charArr.length < sz) {\n      charArr = new char[sz];\n    }\n    readChars(dis, charArr, 0, sz);\n    return new String(charArr, 0, sz);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":null,"sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (charArr == null || charArr.length < sz) {\n      charArr = new char[sz];\n    }\n    readChars(dis, charArr, 0, sz);\n    return new String(charArr, 0, sz);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (charArr == null || charArr.length < sz) {\n      charArr = new char[sz];\n    }\n    readChars(dis, charArr, 0, sz);\n    return new String(charArr, 0, sz);\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (charArr == null || charArr.length < sz) {\n      charArr = new char[sz];\n    }\n    readChars(dis, charArr, 0, sz);\n    return new String(charArr, 0, sz);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (charArr == null || charArr.length < sz) {\n      charArr = new char[sz];\n    }\n    readChars(dis, charArr, 0, sz);\n    return new String(charArr, 0, sz);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75db8ef3eec8aa3c49d42c476471ae9935bbdc6c","date":1282923617,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (charArr == null || charArr.length < sz) {\n      charArr = new char[sz];\n    }\n    readChars(dis, charArr, 0, sz);\n    return new String(charArr, 0, sz);\n  }\n\n","bugFix":["da0acfe5ceed804451d76c8f887855b3d060e132","18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (charArr == null || charArr.length < sz) {\n      charArr = new char[sz];\n    }\n    readChars(dis, charArr, 0, sz);\n    return new String(charArr, 0, sz);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#readStr(FastInputStream).mjava","sourceNew":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","sourceOld":"  public String readStr(FastInputStream dis) throws IOException {\n    int sz = readSize(dis);\n    if (chars == null || chars.length < sz) chars = new char[sz];\n    if (bytes == null || bytes.length < sz) bytes = new byte[sz];\n    dis.readFully(bytes, 0, sz);\n    int outUpto=0;\n    for (int i = 0; i < sz;) {\n      final int b = bytes[i++]&0xff;\n      final int ch;\n      if (b < 0xc0) {\n        assert b < 0x80;\n        ch = b;\n      } else if (b < 0xe0) {\n        ch = ((b&0x1f)<<6) + (bytes[i++]&0x3f);\n      } else if (b < 0xf0) {\n        ch = ((b&0xf)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      } else {\n        assert b < 0xf8;\n        ch = ((b&0x7)<<18) + ((bytes[i++]&0x3f)<<12) + ((bytes[i++]&0x3f)<<6) + (bytes[i++]&0x3f);\n      }\n      if (ch <= 0xFFFF) {\n        // target is a character <= 0xFFFF\n        chars[outUpto++] = (char) ch;\n      } else {\n        // target is a character in range 0xFFFF - 0x10FFFF\n        final int chHalf = ch - 0x10000;\n        chars[outUpto++] = (char) ((chHalf >> 0xA) + 0xD800);\n        chars[outUpto++] = (char) ((chHalf & 0x3FF) + 0xDC00);\n      }\n    }\n    return new String(chars, 0, outUpto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["75db8ef3eec8aa3c49d42c476471ae9935bbdc6c"],"75db8ef3eec8aa3c49d42c476471ae9935bbdc6c":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["75db8ef3eec8aa3c49d42c476471ae9935bbdc6c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["75db8ef3eec8aa3c49d42c476471ae9935bbdc6c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","75db8ef3eec8aa3c49d42c476471ae9935bbdc6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["75db8ef3eec8aa3c49d42c476471ae9935bbdc6c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"75db8ef3eec8aa3c49d42c476471ae9935bbdc6c":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}