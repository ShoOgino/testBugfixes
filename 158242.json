{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#assertDateRangeQueryEquals(StandardQueryParser,String,String,String,Date,DateTools.Resolution).mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#assertDateRangeQueryEquals(StandardQueryParser,String,String,String,Date,DateTools.Resolution).mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQPHelper#assertDateRangeQueryEquals(OriginalQueryParserHelper,String,String,String,Date,DateTools.Resolution).mjava","sourceNew":"  public void assertDateRangeQueryEquals(StandardQueryParser qp,\n      String field, String startDate, String endDate, Date endDateInclusive,\n      DateTools.Resolution resolution) throws Exception {\n    assertQueryEquals(qp, field, field + \":[\" + startDate + \" TO \" + endDate\n        + \"]\", \"[\" + getDate(startDate, resolution) + \" TO \"\n        + getDate(endDateInclusive, resolution) + \"]\");\n    assertQueryEquals(qp, field, field + \":{\" + startDate + \" TO \" + endDate\n        + \"}\", \"{\" + getDate(startDate, resolution) + \" TO \"\n        + getDate(endDate, resolution) + \"}\");\n  }\n\n","sourceOld":"  public void assertDateRangeQueryEquals(OriginalQueryParserHelper qp,\n      String field, String startDate, String endDate, Date endDateInclusive,\n      DateTools.Resolution resolution) throws Exception {\n    assertQueryEquals(qp, field, field + \":[\" + startDate + \" TO \" + endDate\n        + \"]\", \"[\" + getDate(startDate, resolution) + \" TO \"\n        + getDate(endDateInclusive, resolution) + \"]\");\n    assertQueryEquals(qp, field, field + \":{\" + startDate + \" TO \" + endDate\n        + \"}\", \"{\" + getDate(startDate, resolution) + \" TO \"\n        + getDate(endDate, resolution) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66d254749b46a8bd2bdc913c9fb8e06e3fe7f286","date":1251181154,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#assertDateRangeQueryEquals(StandardQueryParser,String,String,String,Date,DateTools.Resolution).mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#assertDateRangeQueryEquals(StandardQueryParser,String,String,String,Date,DateTools.Resolution).mjava","sourceNew":"  public void assertDateRangeQueryEquals(StandardQueryParser qp,\n      String field, String startDate, String endDate, Date endDateInclusive,\n      DateTools.Resolution resolution) throws Exception {\n    assertQueryEquals(qp, field, field + \":[\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate)\n        + \"]\", \"[\" + getDate(startDate, resolution) + \" TO \"\n        + getDate(endDateInclusive, resolution) + \"]\");\n    assertQueryEquals(qp, field, field + \":{\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate)\n        + \"}\", \"{\" + getDate(startDate, resolution) + \" TO \"\n        + getDate(endDate, resolution) + \"}\");\n  }\n\n","sourceOld":"  public void assertDateRangeQueryEquals(StandardQueryParser qp,\n      String field, String startDate, String endDate, Date endDateInclusive,\n      DateTools.Resolution resolution) throws Exception {\n    assertQueryEquals(qp, field, field + \":[\" + startDate + \" TO \" + endDate\n        + \"]\", \"[\" + getDate(startDate, resolution) + \" TO \"\n        + getDate(endDateInclusive, resolution) + \"]\");\n    assertQueryEquals(qp, field, field + \":{\" + startDate + \" TO \" + endDate\n        + \"}\", \"{\" + getDate(startDate, resolution) + \" TO \"\n        + getDate(endDate, resolution) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#assertDateRangeQueryEquals(StandardQueryParser,String,String,String,Date,DateTools.Resolution).mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#assertDateRangeQueryEquals(StandardQueryParser,String,String,String,Date,DateTools.Resolution).mjava","sourceNew":"  public void assertDateRangeQueryEquals(StandardQueryParser qp,\n      String field, String startDate, String endDate, Date endDateInclusive,\n      DateTools.Resolution resolution) throws Exception {\n    assertQueryEquals(qp, field, field + \":[\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate)\n        + \"]\", \"[\" + getDate(startDate, resolution) + \" TO \"\n        + getDate(endDateInclusive, resolution) + \"]\");\n    assertQueryEquals(qp, field, field + \":{\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate)\n        + \"}\", \"{\" + getDate(startDate, resolution) + \" TO \"\n        + getDate(endDate, resolution) + \"}\");\n  }\n\n","sourceOld":"  public void assertDateRangeQueryEquals(StandardQueryParser qp,\n      String field, String startDate, String endDate, Date endDateInclusive,\n      DateTools.Resolution resolution) throws Exception {\n    assertQueryEquals(qp, field, field + \":[\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate)\n        + \"]\", \"[\" + getDate(startDate, resolution) + \" TO \"\n        + getDate(endDateInclusive, resolution) + \"]\");\n    assertQueryEquals(qp, field, field + \":{\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate)\n        + \"}\", \"{\" + getDate(startDate, resolution) + \" TO \"\n        + getDate(endDate, resolution) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"66d254749b46a8bd2bdc913c9fb8e06e3fe7f286":["e8a848e758754282137f42bf85793c278e250390"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["66d254749b46a8bd2bdc913c9fb8e06e3fe7f286"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["66d254749b46a8bd2bdc913c9fb8e06e3fe7f286"],"66d254749b46a8bd2bdc913c9fb8e06e3fe7f286":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}