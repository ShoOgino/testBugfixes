{"path":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#doTest(int,IntsRef[]).mjava","commits":[{"id":"5ebe14aae60589c9bb6423f3cce02d5f599e1540","date":1348361556,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#doTest(int,IntsRef[]).mjava","pathOld":"/dev/null","sourceNew":"  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n        }\n        final Object output;\n        if (random().nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          }\n          List<Long> values = new ArrayList<Long>();\n          values.add(value);\n          values.add(value2);\n          output = values;\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false) {\n        @Override\n        protected boolean outputsEqual(Object output1, Object output2) {\n          if (output1 instanceof TwoLongs && output2 instanceof List) {\n            TwoLongs twoLongs1 = (TwoLongs) output1;\n            return Arrays.asList(new Long[] {twoLongs1.first, twoLongs1.second}).equals(output2);\n          } else if (output2 instanceof TwoLongs && output1 instanceof List) {\n            TwoLongs twoLongs2 = (TwoLongs) output2;\n            return Arrays.asList(new Long[] {twoLongs2.first, twoLongs2.second}).equals(output1);\n          }\n          return output1.equals(output2);\n        }\n      }.doTest(false);\n    }\n\n    // ListOfOutputs(PositiveIntOutputs), generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test OneOrMoreOutputs\");\n      }\n      final PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n      final ListOfOutputs<Long> outputs = new ListOfOutputs<Long>(_outputs);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        \n        int outputCount = _TestUtil.nextInt(random(), 1, 7);\n        List<Long> values = new ArrayList<Long>();\n        for(int i=0;i<outputCount;i++) {\n          // Sometimes go backwards\n          long value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          while(value < 0) {\n            value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          }\n          values.add(value);\n          lastOutput = value;\n        }\n\n        final Object output;\n        if (values.size() == 1) {\n          output = values.get(0);\n        } else {\n          output = values;\n        }\n\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#doTest(int,IntsRef[]).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#doTest(int,IntsRef[]).mjava","sourceNew":"  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n        while(value < 0) {\n          value = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n        }\n        final Object output;\n        if (random().nextInt(5) == 3) {\n          long value2 = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n          }\n          List<Long> values = new ArrayList<Long>();\n          values.add(value);\n          values.add(value2);\n          output = values;\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false) {\n        @Override\n        protected boolean outputsEqual(Object output1, Object output2) {\n          if (output1 instanceof TwoLongs && output2 instanceof List) {\n            TwoLongs twoLongs1 = (TwoLongs) output1;\n            return Arrays.asList(new Long[] {twoLongs1.first, twoLongs1.second}).equals(output2);\n          } else if (output2 instanceof TwoLongs && output1 instanceof List) {\n            TwoLongs twoLongs2 = (TwoLongs) output2;\n            return Arrays.asList(new Long[] {twoLongs2.first, twoLongs2.second}).equals(output1);\n          }\n          return output1.equals(output2);\n        }\n      }.doTest(false);\n    }\n\n    // ListOfOutputs(PositiveIntOutputs), generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test OneOrMoreOutputs\");\n      }\n      final PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n      final ListOfOutputs<Long> outputs = new ListOfOutputs<Long>(_outputs);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        \n        int outputCount = TestUtil.nextInt(random(), 1, 7);\n        List<Long> values = new ArrayList<Long>();\n        for(int i=0;i<outputCount;i++) {\n          // Sometimes go backwards\n          long value = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n          while(value < 0) {\n            value = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n          }\n          values.add(value);\n          lastOutput = value;\n        }\n\n        final Object output;\n        if (values.size() == 1) {\n          output = values.get(0);\n        } else {\n          output = values;\n        }\n\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(false);\n    }\n  }\n\n","sourceOld":"  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n        }\n        final Object output;\n        if (random().nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          }\n          List<Long> values = new ArrayList<Long>();\n          values.add(value);\n          values.add(value2);\n          output = values;\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false) {\n        @Override\n        protected boolean outputsEqual(Object output1, Object output2) {\n          if (output1 instanceof TwoLongs && output2 instanceof List) {\n            TwoLongs twoLongs1 = (TwoLongs) output1;\n            return Arrays.asList(new Long[] {twoLongs1.first, twoLongs1.second}).equals(output2);\n          } else if (output2 instanceof TwoLongs && output1 instanceof List) {\n            TwoLongs twoLongs2 = (TwoLongs) output2;\n            return Arrays.asList(new Long[] {twoLongs2.first, twoLongs2.second}).equals(output1);\n          }\n          return output1.equals(output2);\n        }\n      }.doTest(false);\n    }\n\n    // ListOfOutputs(PositiveIntOutputs), generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test OneOrMoreOutputs\");\n      }\n      final PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n      final ListOfOutputs<Long> outputs = new ListOfOutputs<Long>(_outputs);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        \n        int outputCount = _TestUtil.nextInt(random(), 1, 7);\n        List<Long> values = new ArrayList<Long>();\n        for(int i=0;i<outputCount;i++) {\n          // Sometimes go backwards\n          long value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          while(value < 0) {\n            value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          }\n          values.add(value);\n          lastOutput = value;\n        }\n\n        final Object output;\n        if (values.size() == 1) {\n          output = values.get(0);\n        } else {\n          output = values;\n        }\n\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#doTest(int,IntsRef[]).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/util/fst/TestFSTsMisc#doTest(int,IntsRef[]).mjava","sourceNew":"  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n        while(value < 0) {\n          value = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n        }\n        final Object output;\n        if (random().nextInt(5) == 3) {\n          long value2 = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n          }\n          List<Long> values = new ArrayList<>();\n          values.add(value);\n          values.add(value2);\n          output = values;\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false) {\n        @Override\n        protected boolean outputsEqual(Object output1, Object output2) {\n          if (output1 instanceof TwoLongs && output2 instanceof List) {\n            TwoLongs twoLongs1 = (TwoLongs) output1;\n            return Arrays.asList(new Long[] {twoLongs1.first, twoLongs1.second}).equals(output2);\n          } else if (output2 instanceof TwoLongs && output1 instanceof List) {\n            TwoLongs twoLongs2 = (TwoLongs) output2;\n            return Arrays.asList(new Long[] {twoLongs2.first, twoLongs2.second}).equals(output1);\n          }\n          return output1.equals(output2);\n        }\n      }.doTest(false);\n    }\n\n    // ListOfOutputs(PositiveIntOutputs), generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test OneOrMoreOutputs\");\n      }\n      final PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n      final ListOfOutputs<Long> outputs = new ListOfOutputs<>(_outputs);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        \n        int outputCount = TestUtil.nextInt(random(), 1, 7);\n        List<Long> values = new ArrayList<>();\n        for(int i=0;i<outputCount;i++) {\n          // Sometimes go backwards\n          long value = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n          while(value < 0) {\n            value = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n          }\n          values.add(value);\n          lastOutput = value;\n        }\n\n        final Object output;\n        if (values.size() == 1) {\n          output = values.get(0);\n        } else {\n          output = values;\n        }\n\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], output));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(false);\n    }\n  }\n\n","sourceOld":"  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n        while(value < 0) {\n          value = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n        }\n        final Object output;\n        if (random().nextInt(5) == 3) {\n          long value2 = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n          }\n          List<Long> values = new ArrayList<Long>();\n          values.add(value);\n          values.add(value2);\n          output = values;\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false) {\n        @Override\n        protected boolean outputsEqual(Object output1, Object output2) {\n          if (output1 instanceof TwoLongs && output2 instanceof List) {\n            TwoLongs twoLongs1 = (TwoLongs) output1;\n            return Arrays.asList(new Long[] {twoLongs1.first, twoLongs1.second}).equals(output2);\n          } else if (output2 instanceof TwoLongs && output1 instanceof List) {\n            TwoLongs twoLongs2 = (TwoLongs) output2;\n            return Arrays.asList(new Long[] {twoLongs2.first, twoLongs2.second}).equals(output1);\n          }\n          return output1.equals(output2);\n        }\n      }.doTest(false);\n    }\n\n    // ListOfOutputs(PositiveIntOutputs), generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test OneOrMoreOutputs\");\n      }\n      final PositiveIntOutputs _outputs = PositiveIntOutputs.getSingleton();\n      final ListOfOutputs<Long> outputs = new ListOfOutputs<Long>(_outputs);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        \n        int outputCount = TestUtil.nextInt(random(), 1, 7);\n        List<Long> values = new ArrayList<Long>();\n        for(int i=0;i<outputCount;i++) {\n          // Sometimes go backwards\n          long value = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n          while(value < 0) {\n            value = lastOutput + TestUtil.nextInt(random(), -100, 1000);\n          }\n          values.add(value);\n          lastOutput = value;\n        }\n\n        final Object output;\n        if (values.size() == 1) {\n          output = values.get(0);\n        } else {\n          output = values;\n        }\n\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}