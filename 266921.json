{"path":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseAlternateSingleValuesBooleans().mjava","commits":[{"id":"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","date":1372293867,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseAlternateSingleValuesBooleans().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseAlternateSingleValuesBooleans() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"boolean1_b\")); // should match dynamic field \"*_b\"\n    assertNotNull(schema.getFieldOrNull(\"boolean2_b\")); // should match dynamic field \"*_b\"\n    boolean[] values      = { true, false };\n    String[] stringValues = { \"yup\", \"nope\" };\n    String[] fieldNames   = { \"boolean1_b\", \"boolean2_b\" };\n    SolrInputDocument d = doc(f(\"id\", \"59\"));\n    for (int i = 0 ; i < values.length ; ++i) {\n      d.addField(fieldNames[i], stringValues[i]);\n    }\n    d = processAdd(\"parse-boolean-alternate-single-values-no-run-processor\", d);\n    assertNotNull(d);\n\n    for (int i = 0 ; i < values.length ; ++i) {\n      assertTrue(d.getFieldValue(fieldNames[i]) instanceof Boolean);\n      assertEquals(values[i], d.getFieldValue(fieldNames[i]));\n    }\n\n    // Standard boolean values should not be mutated, since they're not configured\n    stringValues = new String[] { \"true\", \"false\" };\n    d = doc(f(\"id\", \"593\"));\n    for (int i = 0 ; i < values.length ; ++i) {\n      d.addField(fieldNames[i], stringValues[i]);\n    }\n    d = processAdd(\"parse-boolean-alternate-single-values-no-run-processor\", d);\n    assertNotNull(d);\n\n    for (int i = 0 ; i < values.length ; ++i) {\n      assertTrue(d.getFieldValue(fieldNames[i]) instanceof String);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseAlternateSingleValuesBooleans().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseAlternateSingleValuesBooleans() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"boolean1_b\")); // should match dynamic field \"*_b\"\n    assertNotNull(schema.getFieldOrNull(\"boolean2_b\")); // should match dynamic field \"*_b\"\n    boolean[] values      = { true, false };\n    String[] stringValues = { \"yup\", \"nope\" };\n    String[] fieldNames   = { \"boolean1_b\", \"boolean2_b\" };\n    SolrInputDocument d = doc(f(\"id\", \"59\"));\n    for (int i = 0 ; i < values.length ; ++i) {\n      d.addField(fieldNames[i], stringValues[i]);\n    }\n    d = processAdd(\"parse-boolean-alternate-single-values-no-run-processor\", d);\n    assertNotNull(d);\n\n    for (int i = 0 ; i < values.length ; ++i) {\n      assertTrue(d.getFieldValue(fieldNames[i]) instanceof Boolean);\n      assertEquals(values[i], d.getFieldValue(fieldNames[i]));\n    }\n\n    // Standard boolean values should not be mutated, since they're not configured\n    stringValues = new String[] { \"true\", \"false\" };\n    d = doc(f(\"id\", \"593\"));\n    for (int i = 0 ; i < values.length ; ++i) {\n      d.addField(fieldNames[i], stringValues[i]);\n    }\n    d = processAdd(\"parse-boolean-alternate-single-values-no-run-processor\", d);\n    assertNotNull(d);\n\n    for (int i = 0 ; i < values.length ; ++i) {\n      assertTrue(d.getFieldValue(fieldNames[i]) instanceof String);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f","date":1561505163,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseAlternateSingleValuesBooleans().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseAlternateSingleValuesBooleans().mjava","sourceNew":"  public void testParseAlternateSingleValuesBooleans() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"boolean1_b\")); // should match dynamic field \"*_b\"\n    assertNotNull(schema.getFieldOrNull(\"boolean2_b\")); // should match dynamic field \"*_b\"\n    boolean[] values      = { true, false };\n    String[] stringValues = { \"yup\", \"nope\" };\n    String[] fieldNames   = { \"boolean1_b\", \"boolean2_b\" };\n    SolrInputDocument d = doc(f(\"id\", \"59\"));\n    for (int i = 0 ; i < values.length ; ++i) {\n      d.addField(fieldNames[i], stringValues[i]);\n    }\n    d = processAdd(\"parse-boolean-alternate-single-values-no-run-processor\", d);\n    assertNotNull(d);\n\n    for (int i = 0 ; i < values.length ; ++i) {\n      assertThat(d.getFieldValue(fieldNames[i]), IS_BOOLEAN);\n      assertEquals(values[i], d.getFieldValue(fieldNames[i]));\n    }\n\n    // Standard boolean values should not be mutated, since they're not configured\n    stringValues = new String[] { \"true\", \"false\" };\n    d = doc(f(\"id\", \"593\"));\n    for (int i = 0 ; i < values.length ; ++i) {\n      d.addField(fieldNames[i], stringValues[i]);\n    }\n    d = processAdd(\"parse-boolean-alternate-single-values-no-run-processor\", d);\n    assertNotNull(d);\n\n    for (int i = 0 ; i < values.length ; ++i) {\n      assertThat(d.getFieldValue(fieldNames[i]), IS_STRING);\n    }\n  }\n\n","sourceOld":"  public void testParseAlternateSingleValuesBooleans() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"boolean1_b\")); // should match dynamic field \"*_b\"\n    assertNotNull(schema.getFieldOrNull(\"boolean2_b\")); // should match dynamic field \"*_b\"\n    boolean[] values      = { true, false };\n    String[] stringValues = { \"yup\", \"nope\" };\n    String[] fieldNames   = { \"boolean1_b\", \"boolean2_b\" };\n    SolrInputDocument d = doc(f(\"id\", \"59\"));\n    for (int i = 0 ; i < values.length ; ++i) {\n      d.addField(fieldNames[i], stringValues[i]);\n    }\n    d = processAdd(\"parse-boolean-alternate-single-values-no-run-processor\", d);\n    assertNotNull(d);\n\n    for (int i = 0 ; i < values.length ; ++i) {\n      assertTrue(d.getFieldValue(fieldNames[i]) instanceof Boolean);\n      assertEquals(values[i], d.getFieldValue(fieldNames[i]));\n    }\n\n    // Standard boolean values should not be mutated, since they're not configured\n    stringValues = new String[] { \"true\", \"false\" };\n    d = doc(f(\"id\", \"593\"));\n    for (int i = 0 ; i < values.length ; ++i) {\n      d.addField(fieldNames[i], stringValues[i]);\n    }\n    d = processAdd(\"parse-boolean-alternate-single-values-no-run-processor\", d);\n    assertNotNull(d);\n\n    for (int i = 0 ; i < values.length ; ++i) {\n      assertTrue(d.getFieldValue(fieldNames[i]) instanceof String);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}