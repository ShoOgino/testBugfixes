{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","commits":[{"id":"baf341ad3a1a8fb73fb37091af85f8aef0398367","date":1352222680,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.proprties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.proprties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      @SuppressWarnings(\"rawtypes\")\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      @SuppressWarnings(\"rawtypes\")\n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.delete();\n    }\n  }  \n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.proprties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.proprties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.properties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.properties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      @SuppressWarnings(\"rawtypes\")\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      @SuppressWarnings(\"rawtypes\")\n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.delete();\n    }\n  }  \n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.proprties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.proprties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      @SuppressWarnings(\"rawtypes\")\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      @SuppressWarnings(\"rawtypes\")\n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.delete();\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.properties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.properties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      @SuppressWarnings(\"rawtypes\")\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      @SuppressWarnings(\"rawtypes\")\n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.delete();\n    }\n  }  \n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.proprties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.proprties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      @SuppressWarnings(\"rawtypes\")\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      @SuppressWarnings(\"rawtypes\")\n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.delete();\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.properties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.properties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      @SuppressWarnings(\"rawtypes\")\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      @SuppressWarnings(\"rawtypes\")\n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.setWritable(true);\n    }\n  }  \n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.properties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.properties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      @SuppressWarnings(\"rawtypes\")\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      @SuppressWarnings(\"rawtypes\")\n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.delete();\n    }\n  }  \n\n","bugFix":["b9f747c87024425da9f2e93a8329d664f8df1615"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9bdc6e6fa37065f8ea72e963b1b323a3ba131d","date":1521819343,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      // we don't use assume because if no tests executes when you run a single test\n      // it's considered a fail\n      \n      if (!(f.exists() || f.createNewFile()))  {\n        System.err.println(\"No dataimport.properties file, skipping rest of test ...\");\n        return;\n      }\n      \n      if (!f.setReadOnly())  {\n        System.err.println(\"dataimport.properties can't be set read only, skipping rest of test ...\");\n        return;\n      }\n      \n      if (f.canWrite())  {\n        System.err.println(\"dataimport.properties is still writable even though \\\" + \\n\" + \n            \"                  \\\"marked readonly - test running as superuser?, skipping rest of test ...\");\n        return;\n      }\n\n      ignoreException(\"Properties is not writable\");\n\n      @SuppressWarnings(\"rawtypes\")\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      @SuppressWarnings(\"rawtypes\")\n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.setWritable(true);\n    }\n  }  \n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.properties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.properties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      @SuppressWarnings(\"rawtypes\")\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      @SuppressWarnings(\"rawtypes\")\n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.setWritable(true);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b9c209edef136014b06483ce2e29a9116276cf","date":1521830037,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    ignoreException(\"Properties is not writable\");\n\n    @SuppressWarnings(\"rawtypes\")\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n    @SuppressWarnings(\"rawtypes\")\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"hello\"));\n    MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n    runFullImport(dataConfig_delta);\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n  }  \n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      // we don't use assume because if no tests executes when you run a single test\n      // it's considered a fail\n      \n      if (!(f.exists() || f.createNewFile()))  {\n        System.err.println(\"No dataimport.properties file, skipping rest of test ...\");\n        return;\n      }\n      \n      if (!f.setReadOnly())  {\n        System.err.println(\"dataimport.properties can't be set read only, skipping rest of test ...\");\n        return;\n      }\n      \n      if (f.canWrite())  {\n        System.err.println(\"dataimport.properties is still writable even though \\\" + \\n\" + \n            \"                  \\\"marked readonly - test running as superuser?, skipping rest of test ...\");\n        return;\n      }\n\n      ignoreException(\"Properties is not writable\");\n\n      @SuppressWarnings(\"rawtypes\")\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      @SuppressWarnings(\"rawtypes\")\n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.setWritable(true);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fa95fb629298e03fe5e3d71a0ce792f1256f711","date":1521903809,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    ignoreException(\"Properties is not writable\");\n\n    @SuppressWarnings(\"rawtypes\")\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n    @SuppressWarnings(\"rawtypes\")\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"hello\"));\n    MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n    runFullImport(dataConfig_delta);\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n  }  \n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    // See SOLR-2551\n    String configDir = h.getCore().getResourceLoader().getConfigDir();\n    String filePath = configDir;\n    if (configDir != null && !configDir.endsWith(File.separator))\n      filePath += File.separator;\n    filePath += \"dataimport.properties\";\n    File f = new File(filePath);\n\n    try {\n      // execute the test only if we are able to set file to read only mode\n      assumeTrue(\"No dataimport.properties file\", f.exists() || f.createNewFile());\n      assumeTrue(\"dataimport.properties can't be set read only\", f.setReadOnly());\n      assumeFalse(\"dataimport.properties is still writable even though \" + \n                  \"marked readonly - test running as superuser?\", f.canWrite());\n\n      ignoreException(\"Properties is not writable\");\n\n      @SuppressWarnings(\"rawtypes\")\n      List parentRow = new ArrayList();\n      parentRow.add(createMap(\"id\", \"1\"));\n      MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n      @SuppressWarnings(\"rawtypes\")\n      List childRow = new ArrayList();\n      childRow.add(createMap(\"desc\", \"hello\"));\n      MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n      runFullImport(dataConfig_delta);\n      assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    } finally {\n      f.setWritable(true);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestNonWritablePersistFile#testNonWritablePersistFile().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testNonWritablePersistFile() throws Exception {\n    ignoreException(\"Properties is not writable\");\n\n    @SuppressWarnings(\"rawtypes\")\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(FULLIMPORT_QUERY, parentRow.iterator());\n      \n    @SuppressWarnings(\"rawtypes\")\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"hello\"));\n    MockDataSource.setIterator(\"select * from y where y.A='1'\",\n                                 childRow.iterator());\n      \n    runFullImport(dataConfig_delta);\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["3fa95fb629298e03fe5e3d71a0ce792f1256f711"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"3fa95fb629298e03fe5e3d71a0ce792f1256f711":["cbc3688252d4a8045d69a164236b2cf87b721f17","96b9c209edef136014b06483ce2e29a9116276cf"],"96b9c209edef136014b06483ce2e29a9116276cf":["9d9bdc6e6fa37065f8ea72e963b1b323a3ba131d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7605579001505896d48b07160075a5c8b8e128e":["baf341ad3a1a8fb73fb37091af85f8aef0398367","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"9d9bdc6e6fa37065f8ea72e963b1b323a3ba131d":["cbc3688252d4a8045d69a164236b2cf87b721f17"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["3fa95fb629298e03fe5e3d71a0ce792f1256f711","9d9bdc6e6fa37065f8ea72e963b1b323a3ba131d"],"3fa95fb629298e03fe5e3d71a0ce792f1256f711":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"96b9c209edef136014b06483ce2e29a9116276cf":["3fa95fb629298e03fe5e3d71a0ce792f1256f711"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"b7605579001505896d48b07160075a5c8b8e128e":[],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["cbc3688252d4a8045d69a164236b2cf87b721f17","b7605579001505896d48b07160075a5c8b8e128e"],"9d9bdc6e6fa37065f8ea72e963b1b323a3ba131d":["96b9c209edef136014b06483ce2e29a9116276cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}