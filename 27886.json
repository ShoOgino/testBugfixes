{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","sourceNew":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        if( Math.abs( nextPos - pos - 1 ) > slop ) return false;\n        pos = nextPos;\n      }\n      return true;\n    }\n\n","sourceOld":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        if( Math.abs( nextPos - pos - 1 ) > slop ) return false;\n        pos = nextPos;\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","sourceNew":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        if( Math.abs( nextPos - pos - 1 ) > slop ) return false;\n        pos = nextPos;\n      }\n      return true;\n    }\n\n","sourceOld":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        if( Math.abs( nextPos - pos - 1 ) > slop ) return false;\n        pos = nextPos;\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}