{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain.JoinDomain#applyDomainToQuery(String,SolrParams).mjava","commits":[{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain.JoinDomain#applyDomainToQuery(String,SolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.JoinDomain#applyDomainToQuery(String,SolrParams).mjava","sourceNew":"    /** \n     * Given some original SolrParams, returns new SolrParams where the original \"q\" param is wrapped\n     * as needed to apply the equivalent transformation to a query as this domain would to a facet\n     */\n    public SolrParams applyDomainToQuery(String safeKey, SolrParams in) {\n      assert null == in.get(safeKey); // shouldn't be possible if every facet uses a unique key string\n      \n      String q = in.get(\"q\");\n      final ModifiableSolrParams out = new ModifiableSolrParams(in);\n      if (null != from) {\n        out.set(safeKey, in.get(\"q\"));\n        q =  \"{!join from=\"+from+\" to=\"+to+\" v=$\"+safeKey+\"}\";\n      }\n      if (null != filter) {\n        q = filter + \" AND \" + q;\n      }\n      out.set(\"q\", q);\n      return out;\n    }\n\n","sourceOld":"    /** \n     * Given some original SolrParams, returns new SolrParams where the original \"q\" param is wrapped\n     * as needed to apply the equivalent transformation to a query as this domain would to a facet\n     */\n    public SolrParams applyDomainToQuery(String safeKey, SolrParams in) {\n      assert null == in.get(safeKey); // shouldn't be possible if every facet uses a unique key string\n      \n      String q = in.get(\"q\");\n      final ModifiableSolrParams out = new ModifiableSolrParams(in);\n      if (null != from) {\n        out.set(safeKey, in.get(\"q\"));\n        q =  \"{!join from=\"+from+\" to=\"+to+\" v=$\"+safeKey+\"}\";\n      }\n      if (null != filter) {\n        q = filter + \" AND \" + q;\n      }\n      out.set(\"q\", q);\n      return out;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}