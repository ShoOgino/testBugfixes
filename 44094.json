{"path":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"7a744f34b732efe0beb11df92bde24ccc01460dc","date":1094656002,"type":1,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,Analyzer,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n    }\n    catch (Exception e) { }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                Analyzer analyzer,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n    }\n    catch (Exception e) { }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf","date":1103065373,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n    }\n    catch (Exception e) { }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n    }\n    catch (Exception e) { }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce48e56956c287f0fdb295c2c2f5b7c68ae8798b","date":1138567903,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n    }\n    catch (Exception e) { }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n    }\n    catch (Exception e) { }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe05d78659c647b5665db68d3848e0c081c1d167","date":1163625969,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n    }\n    catch (Exception e) { }\n\n    if(useOldRangeQuery)\n    {\n            return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n    }\n    else\n    {\n      return new ConstantScoreRangeQuery(field,part1,part2,inclusive,inclusive);\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n    }\n    catch (Exception e) { }\n\n    return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9159d2966a77ae7e472d435eb5c9c5cad7f820","date":1168286571,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      DateTools.Resolution resolution = getDateResolution(field);\n      if (resolution == null) {\n        // no default or field specific date resolution has been set,\n        // use deprecated DateField to maintain compatibilty with\n        // pre-1.9 Lucene versions.\n        part1 = DateField.dateToString(d1);\n        part2 = DateField.dateToString(d2);\n      } else {\n        part1 = DateTools.dateToString(d1, resolution);\n        part2 = DateTools.dateToString(d2, resolution);\n      }\n    }\n    catch (Exception e) { }\n\n    if(useOldRangeQuery)\n    {\n            return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n    }\n    else\n    {\n      return new ConstantScoreRangeQuery(field,part1,part2,inclusive,inclusive);\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part1 = DateField.dateToString(d1);\n      part2 = DateField.dateToString(d2);\n    }\n    catch (Exception e) { }\n\n    if(useOldRangeQuery)\n    {\n            return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n    }\n    else\n    {\n      return new ConstantScoreRangeQuery(field,part1,part2,inclusive,inclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a28fe77124a2ece3a2af0a5c1b264e07c7cae728","date":1220116339,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      DateTools.Resolution resolution = getDateResolution(field);\n      if (resolution == null) {\n        // no default or field specific date resolution has been set,\n        // use deprecated DateField to maintain compatibilty with\n        // pre-1.9 Lucene versions.\n        part1 = DateField.dateToString(d1);\n        part2 = DateField.dateToString(d2);\n      } else {\n        part1 = DateTools.dateToString(d1, resolution);\n        part2 = DateTools.dateToString(d2, resolution);\n      }\n    }\n    catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      DateTools.Resolution resolution = getDateResolution(field);\n      if (resolution == null) {\n        // no default or field specific date resolution has been set,\n        // use deprecated DateField to maintain compatibilty with\n        // pre-1.9 Lucene versions.\n        part1 = DateField.dateToString(d1);\n        part2 = DateField.dateToString(d2);\n      } else {\n        part1 = DateTools.dateToString(d1, resolution);\n        part2 = DateTools.dateToString(d2, resolution);\n      }\n    }\n    catch (Exception e) { }\n\n    if(useOldRangeQuery)\n    {\n            return new RangeQuery(new Term(field, part1),\n                          new Term(field, part2),\n                          inclusive);\n    }\n    else\n    {\n      return new ConstantScoreRangeQuery(field,part1,part2,inclusive,inclusive);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      DateTools.Resolution resolution = getDateResolution(field);\n      if (resolution == null) {\n        // no default or field specific date resolution has been set,\n        // use deprecated DateField to maintain compatibility with\n        // pre-1.9 Lucene versions.\n        part1 = DateField.dateToString(d1);\n        part2 = DateField.dateToString(d2);\n      } else {\n        part1 = DateTools.dateToString(d1, resolution);\n        part2 = DateTools.dateToString(d2, resolution);\n      }\n    }\n    catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      DateTools.Resolution resolution = getDateResolution(field);\n      if (resolution == null) {\n        // no default or field specific date resolution has been set,\n        // use deprecated DateField to maintain compatibilty with\n        // pre-1.9 Lucene versions.\n        part1 = DateField.dateToString(d1);\n        part2 = DateField.dateToString(d2);\n      } else {\n        part1 = DateTools.dateToString(d1, resolution);\n        part2 = DateTools.dateToString(d2, resolution);\n      }\n    }\n    catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      DateTools.Resolution resolution = getDateResolution(field);\n      if (resolution == null) {\n        // no default or field specific date resolution has been set,\n        // use deprecated DateField to maintain compatibility with\n        // pre-1.9 Lucene versions.\n        part1 = DateField.dateToString(d1);\n        part2 = DateField.dateToString(d2);\n      } else {\n        part1 = DateTools.dateToString(d1, resolution);\n        part2 = DateTools.dateToString(d2, resolution);\n      }\n    }\n    catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      DateTools.Resolution resolution = getDateResolution(field);\n      if (resolution == null) {\n        // no default or field specific date resolution has been set,\n        // use deprecated DateField to maintain compatibility with\n        // pre-1.9 Lucene versions.\n        part1 = DateField.dateToString(d1);\n        part2 = DateField.dateToString(d2);\n      } else {\n        part1 = DateTools.dateToString(d1, resolution);\n        part2 = DateTools.dateToString(d2, resolution);\n      }\n    }\n    catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe05d78659c647b5665db68d3848e0c081c1d167":["ce48e56956c287f0fdb295c2c2f5b7c68ae8798b"],"7a744f34b732efe0beb11df92bde24ccc01460dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf":["7a744f34b732efe0beb11df92bde24ccc01460dc"],"ce48e56956c287f0fdb295c2c2f5b7c68ae8798b":["10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a28fe77124a2ece3a2af0a5c1b264e07c7cae728":["bd9159d2966a77ae7e472d435eb5c9c5cad7f820"],"bd9159d2966a77ae7e472d435eb5c9c5cad7f820":["fe05d78659c647b5665db68d3848e0c081c1d167"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["a28fe77124a2ece3a2af0a5c1b264e07c7cae728"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"fe05d78659c647b5665db68d3848e0c081c1d167":["bd9159d2966a77ae7e472d435eb5c9c5cad7f820"],"7a744f34b732efe0beb11df92bde24ccc01460dc":["10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf"],"10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf":["ce48e56956c287f0fdb295c2c2f5b7c68ae8798b"],"ce48e56956c287f0fdb295c2c2f5b7c68ae8798b":["fe05d78659c647b5665db68d3848e0c081c1d167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a744f34b732efe0beb11df92bde24ccc01460dc"],"a28fe77124a2ece3a2af0a5c1b264e07c7cae728":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"bd9159d2966a77ae7e472d435eb5c9c5cad7f820":["a28fe77124a2ece3a2af0a5c1b264e07c7cae728"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}