{"path":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","sourceNew":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      writeHeader(out);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      writeHeader(out);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129c6e8ac0c0d9a110ba29e4b5f1889374f30076","date":1337725510,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","sourceNew":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      writeHeader(out);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      writeHeader(out);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","sourceNew":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      writeHeader(out);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      writeHeader(out);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexWriter#VariableGapTermsIndexWriter(SegmentWriteState,IndexTermSelector).mjava","sourceNew":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      writeHeader(out);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexWriter(SegmentWriteState state, IndexTermSelector policy) throws IOException {\n    final String indexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n    out = state.directory.createOutput(indexFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.policy = policy;\n      writeHeader(out);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}