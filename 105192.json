{"path":"lucene/src/java/org/apache/lucene/util/CharsRef#charsEquals(CharsRef).mjava","commits":[{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CharsRef#charsEquals(CharsRef).mjava","pathOld":"/dev/null","sourceNew":"  public boolean charsEquals(CharsRef other) {\n    if (length == other.length) {\n      int otherUpto = other.offset;\n      final char[] otherChars = other.chars;\n      final int end = offset + length;\n      for (int upto = offset; upto < end; upto++, otherUpto++) {\n        if (chars[upto] != otherChars[otherUpto]) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CharsRef#charsEquals(CharsRef).mjava","pathOld":"/dev/null","sourceNew":"  public boolean charsEquals(CharsRef other) {\n    if (length == other.length) {\n      int otherUpto = other.offset;\n      final char[] otherChars = other.chars;\n      final int end = offset + length;\n      for (int upto = offset; upto < end; upto++, otherUpto++) {\n        if (chars[upto] != otherChars[otherUpto]) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CharsRef#charsEquals(CharsRef).mjava","pathOld":"/dev/null","sourceNew":"  public boolean charsEquals(CharsRef other) {\n    if (length == other.length) {\n      int otherUpto = other.offset;\n      final char[] otherChars = other.chars;\n      final int end = offset + length;\n      for (int upto = offset; upto < end; upto++, otherUpto++) {\n        if (chars[upto] != otherChars[otherUpto]) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CharsRef#charsEquals(CharsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CharsRef#charsEquals(CharsRef).mjava","sourceNew":"  public boolean charsEquals(CharsRef other) {\n    if (length == other.length) {\n      int otherUpto = other.offset;\n      final char[] otherChars = other.chars;\n      final int end = offset + length;\n      for (int upto = offset; upto < end; upto++, otherUpto++) {\n        if (chars[upto] != otherChars[otherUpto]) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  public boolean charsEquals(CharsRef other) {\n    if (length == other.length) {\n      int otherUpto = other.offset;\n      final char[] otherChars = other.chars;\n      final int end = offset + length;\n      for (int upto = offset; upto < end; upto++, otherUpto++) {\n        if (chars[upto] != otherChars[otherUpto]) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3a119bbc8703c10faa329ec201c654b3a35a1e3e","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}