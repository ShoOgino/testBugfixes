{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new FieldInfos();\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new FieldInfos();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    // nocommit: this can probably have a much simpler implementation\n    fieldInfos = new MutableFieldInfos();\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new FieldInfos();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new MemoryFieldInfos();\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    // nocommit: this can probably have a much simpler implementation\n    fieldInfos = new MutableFieldInfos();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new MemoryFieldInfos();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new FieldInfos();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  public MemoryIndex(boolean storeOffsets) {\n    this(storeOffsets, 0);\n    \n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f657d9837900f4519ca1cbd5e98d86d4bba4dab","date":1417790596,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  public MemoryIndex(boolean storeOffsets) {\n    this(storeOffsets, 0);\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  public MemoryIndex(boolean storeOffsets) {\n    this(storeOffsets, 0);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","date":1420550360,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.  But\n   * it will not store payloads; use another constructor for that.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  public MemoryIndex(boolean storeOffsets) {\n    this(storeOffsets, false);\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  public MemoryIndex(boolean storeOffsets) {\n    this(storeOffsets, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a851824c09818632c94eba41e60ef5e72e323c8e"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"a851824c09818632c94eba41e60ef5e72e323c8e":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["a851824c09818632c94eba41e60ef5e72e323c8e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a851824c09818632c94eba41e60ef5e72e323c8e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}