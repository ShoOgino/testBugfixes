{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return similarity.decodeNormValue(norms.get(doc));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return similarity.decodeNormValue(norms.get(doc));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return similarity.decodeNormValue(norms.get(doc));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return similarity.decodeNormValue(norms.get(doc));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as DefaultSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return similarity.decodeNormValue(norms.get(doc));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > norms.docID()) {\n          norms.advance(docID);\n        }\n        long norm;\n        if (docID == norms.docID()) {\n          norm = norms.longValue();\n        } else {\n          norm = 0;\n        }\n        return similarity.decodeNormValue(norm);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return similarity.decodeNormValue(norms.get(doc));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > norms.docID()) {\n          norms.advance(docID);\n        }\n        long norm;\n        if (docID == norms.docID()) {\n          norm = norms.longValue();\n        } else {\n          norm = 0;\n        }\n        return similarity.decodeNormValue(norm);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return similarity.decodeNormValue(norms.get(doc));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > norms.docID()) {\n          norms.advance(docID);\n        }\n        long norm;\n        if (docID == norms.docID()) {\n          norm = norms.longValue();\n        } else {\n          norm = 0;\n        }\n        return similarity.decodeNormValue(norm);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return similarity.decodeNormValue(norms.get(doc));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimWeight simWeight = similarity.computeWeight(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final SimScorer simScorer = similarity.simScorer(simWeight, readerContext);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return simScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > norms.docID()) {\n          norms.advance(docID);\n        }\n        long norm;\n        if (docID == norms.docID()) {\n          norm = norms.longValue();\n        } else {\n          norm = 0;\n        }\n        return similarity.decodeNormValue(norm);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimWeight simWeight = similarity.computeWeight(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final SimScorer simScorer = similarity.simScorer(simWeight, readerContext);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return simScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    final NumericDocValues norms = readerContext.reader().getNormValues(field);\n\n    if (norms == null) {\n      return new ConstDoubleDocValues(0.0, this);\n    }\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > norms.docID()) {\n          norms.advance(docID);\n        }\n        long norm;\n        if (docID == norms.docID()) {\n          norm = norms.longValue();\n        } else {\n          norm = 0;\n        }\n        return similarity.decodeNormValue(norm);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), true, Float.POSITIVE_INFINITY);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimWeight simWeight = similarity.computeWeight(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final SimScorer simScorer = similarity.simScorer(simWeight, readerContext);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return simScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c68bfb3354451a11c895b36484af94f27530b79","date":1515505336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), true, Float.MAX_VALUE);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), true, Float.POSITIVE_INFINITY);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), true, Float.MAX_VALUE);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(true), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimWeight simWeight = similarity.computeWeight(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final SimScorer simScorer = similarity.simScorer(simWeight, readerContext);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return simScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ea90bc076fbe82be472db33fc80b00eb0bff44f","date":1526486036,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), field, true);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), true, Float.MAX_VALUE);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), field, true);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), field, true);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), field, true);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), field, true);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":5,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NormValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), field, true);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    final TFIDFSimilarity similarity = IDFValueSource.asTFIDF(searcher.getSimilarity(), field);\n    if (similarity == null) {\n      throw new UnsupportedOperationException(\"requires a TFIDFSimilarity (such as ClassicSimilarity)\");\n    }\n    // Only works if the contribution of the tf is 1 when the freq is 1 and contribution of the idf\n    // is 1 when docCount == docFreq == 1\n    final SimScorer simScorer = similarity.scorer(1f,\n        new CollectionStatistics(field, 1, 1, 1, 1),\n        new TermStatistics(new BytesRef(\"bogus\"), 1, 1));\n    final LeafSimScorer leafSimScorer = new LeafSimScorer(simScorer, readerContext.reader(), field, true);\n    \n    return new FloatDocValues(this) {\n      int lastDocID = -1;\n      @Override\n      public float floatVal(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new AssertionError(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        lastDocID = docID;\n        return leafSimScorer.score(docID, 1f);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["615370d2b876c3435773b5174df2e2242ad7981a","0c68bfb3354451a11c895b36484af94f27530b79"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"485545da3b4429d6f138b4baac573a97820ee93b":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["485545da3b4429d6f138b4baac573a97820ee93b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0c68bfb3354451a11c895b36484af94f27530b79":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["615370d2b876c3435773b5174df2e2242ad7981a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["81d0720146de53dd3a4a023d2a3d1089d86d748d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"485545da3b4429d6f138b4baac573a97820ee93b":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["485545da3b4429d6f138b4baac573a97820ee93b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0c68bfb3354451a11c895b36484af94f27530b79":["b94236357aaa22b76c10629851fe4e376e0cea82"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["0c68bfb3354451a11c895b36484af94f27530b79"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}