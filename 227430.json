{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDownInternal().mjava","commits":[{"id":"1e6d0f38037e0125421d8e737992d511b5567b26","date":1329215236,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDownInternal().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Clean up after tests.\n   */\n  private final void tearDownInternal() throws Exception {\n    Throwable problem = null;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    // this won't throw any exceptions or fail the test\n    // if we change this, then change this logic\n    checkRogueThreadsAfter();\n    // restore the default uncaught exception handler\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    \n    try {\n      checkUncaughtExceptionsAfter();\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    try {\n      // calling assertSaneFieldCaches here isn't as useful as having test\n      // classes call it directly from the scope where the index readers\n      // are used, because they could be gc'ed just before this tearDown\n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact\n      // \"violates\" FieldCache sanity, then you should either explicitly\n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are\n      // isolated in distinct test methods\n      assertSaneFieldCaches(getTestLabel());\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    purgeFieldCache(FieldCache.DEFAULT);\n    \n    if (problem != null) {\n      reportAdditionalFailureInfo();\n      // TODO: simply rethrow problem, without wrapping?\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd","date":1331279405,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDownInternal().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDownInternal().mjava","sourceNew":"  /**\n   * Clean up after tests.\n   */\n  private final void tearDownInternal() throws Exception {\n    Throwable problem = null;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    // this won't throw any exceptions or fail the test\n    // if we change this, then change this logic\n    checkRogueThreadsAfter();\n\n    try {\n      // calling assertSaneFieldCaches here isn't as useful as having test\n      // classes call it directly from the scope where the index readers\n      // are used, because they could be gc'ed just before this tearDown\n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact\n      // \"violates\" FieldCache sanity, then you should either explicitly\n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are\n      // isolated in distinct test methods\n      assertSaneFieldCaches(getTestLabel());\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    purgeFieldCache(FieldCache.DEFAULT);\n    \n    if (problem != null) {\n      reportAdditionalFailureInfo();\n      // TODO: simply rethrow problem, without wrapping?\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  /**\n   * Clean up after tests.\n   */\n  private final void tearDownInternal() throws Exception {\n    Throwable problem = null;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    // this won't throw any exceptions or fail the test\n    // if we change this, then change this logic\n    checkRogueThreadsAfter();\n    // restore the default uncaught exception handler\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    \n    try {\n      checkUncaughtExceptionsAfter();\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    try {\n      // calling assertSaneFieldCaches here isn't as useful as having test\n      // classes call it directly from the scope where the index readers\n      // are used, because they could be gc'ed just before this tearDown\n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact\n      // \"violates\" FieldCache sanity, then you should either explicitly\n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are\n      // isolated in distinct test methods\n      assertSaneFieldCaches(getTestLabel());\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    purgeFieldCache(FieldCache.DEFAULT);\n    \n    if (problem != null) {\n      reportAdditionalFailureInfo();\n      // TODO: simply rethrow problem, without wrapping?\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDownInternal().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDownInternal().mjava","sourceNew":"  /**\n   * Clean up after tests.\n   */\n  private final void tearDownInternal() throws Exception {\n    Throwable problem = null;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    // this won't throw any exceptions or fail the test\n    // if we change this, then change this logic\n    checkRogueThreadsAfter();\n\n    try {\n      // calling assertSaneFieldCaches here isn't as useful as having test\n      // classes call it directly from the scope where the index readers\n      // are used, because they could be gc'ed just before this tearDown\n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact\n      // \"violates\" FieldCache sanity, then you should either explicitly\n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are\n      // isolated in distinct test methods\n      assertSaneFieldCaches(getTestLabel());\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    purgeFieldCache(FieldCache.DEFAULT);\n    \n    if (problem != null) {\n      reportAdditionalFailureInfo();\n      // TODO: simply rethrow problem, without wrapping?\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  /**\n   * Clean up after tests.\n   */\n  private final void tearDownInternal() throws Exception {\n    Throwable problem = null;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    // this won't throw any exceptions or fail the test\n    // if we change this, then change this logic\n    checkRogueThreadsAfter();\n    // restore the default uncaught exception handler\n    Thread.setDefaultUncaughtExceptionHandler(savedUncaughtExceptionHandler);\n    \n    try {\n      checkUncaughtExceptionsAfter();\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    try {\n      // calling assertSaneFieldCaches here isn't as useful as having test\n      // classes call it directly from the scope where the index readers\n      // are used, because they could be gc'ed just before this tearDown\n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact\n      // \"violates\" FieldCache sanity, then you should either explicitly\n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are\n      // isolated in distinct test methods\n      assertSaneFieldCaches(getTestLabel());\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    purgeFieldCache(FieldCache.DEFAULT);\n    \n    if (problem != null) {\n      reportAdditionalFailureInfo();\n      // TODO: simply rethrow problem, without wrapping?\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#tearDownInternal().mjava","sourceNew":null,"sourceOld":"  /**\n   * Clean up after tests.\n   */\n  private final void tearDownInternal() throws Exception {\n    Throwable problem = null;\n    BooleanQuery.setMaxClauseCount(savedBoolMaxClauseCount);\n\n    // this won't throw any exceptions or fail the test\n    // if we change this, then change this logic\n    checkRogueThreadsAfter();\n\n    try {\n      // calling assertSaneFieldCaches here isn't as useful as having test\n      // classes call it directly from the scope where the index readers\n      // are used, because they could be gc'ed just before this tearDown\n      // method is called.\n      //\n      // But it's better then nothing.\n      //\n      // If you are testing functionality that you know for a fact\n      // \"violates\" FieldCache sanity, then you should either explicitly\n      // call purgeFieldCache at the end of your test method, or refactor\n      // your Test class so that the inconsistant FieldCache usages are\n      // isolated in distinct test methods\n      assertSaneFieldCaches(getTestLabel());\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    purgeFieldCache(FieldCache.DEFAULT);\n    \n    if (problem != null) {\n      reportAdditionalFailureInfo();\n      // TODO: simply rethrow problem, without wrapping?\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["1e6d0f38037e0125421d8e737992d511b5567b26","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"1e6d0f38037e0125421d8e737992d511b5567b26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["1e6d0f38037e0125421d8e737992d511b5567b26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5da0b42730b6b99b31389ef94cb97384e83b9ede"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"1e6d0f38037e0125421d8e737992d511b5567b26":["38e3b736c7ca086d61b7dbb841c905ee115490da","6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6d0f38037e0125421d8e737992d511b5567b26"],"6c7c93dea6a7e2cd67285cfa6cc4f2404ae098cd":["38e3b736c7ca086d61b7dbb841c905ee115490da","5da0b42730b6b99b31389ef94cb97384e83b9ede"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}