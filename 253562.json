{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getNextMerge().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getNextMerge().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#getNextMerge().mjava","sourceNew":"  /**\n   * Expert: the {@link MergeScheduler} calls this method to retrieve the next\n   * merge requested by the MergePolicy\n   * \n   * @lucene.experimental\n   */\n  public synchronized MergePolicy.OneMerge getNextMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      // Advance the merge from pending to running\n      MergePolicy.OneMerge merge = pendingMerges.removeFirst();\n      runningMerges.add(merge);\n      return merge;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: the {@link MergeScheduler} calls this method to retrieve the next\n   * merge requested by the MergePolicy\n   * \n   * @lucene.experimental\n   */\n  public synchronized MergePolicy.OneMerge getNextMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      // Advance the merge from pending to running\n      MergePolicy.OneMerge merge = pendingMerges.removeFirst();\n      runningMerges.add(merge);\n      return merge;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getNextMerge().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getNextMerge().mjava","sourceNew":"  /**\n   * Expert: the {@link MergeScheduler} calls this method to retrieve the next\n   * merge requested by the MergePolicy\n   * \n   * @lucene.experimental\n   */\n  public synchronized MergePolicy.OneMerge getNextMerge() {\n    if (pendingMerges.size() == 0) {\n      return null;\n    } else {\n      // Advance the merge from pending to running\n      MergePolicy.OneMerge merge = pendingMerges.removeFirst();\n      runningMerges.add(merge);\n      return merge;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: the {@link MergeScheduler} calls this method to retrieve the next\n   * merge requested by the MergePolicy\n   * \n   * @lucene.experimental\n   */\n  public synchronized MergePolicy.OneMerge getNextMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      // Advance the merge from pending to running\n      MergePolicy.OneMerge merge = pendingMerges.removeFirst();\n      runningMerges.add(merge);\n      return merge;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getNextMerge().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getNextMerge().mjava","sourceNew":"  /**\n   * Expert: the {@link MergeScheduler} calls this method to retrieve the next\n   * merge requested by the MergePolicy\n   * \n   * @lucene.experimental\n   */\n  public synchronized MergePolicy.OneMerge getNextMerge() {\n    if (pendingMerges.size() == 0) {\n      return null;\n    } else {\n      // Advance the merge from pending to running\n      MergePolicy.OneMerge merge = pendingMerges.removeFirst();\n      runningMerges.add(merge);\n      return merge;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: the {@link MergeScheduler} calls this method to retrieve the next\n   * merge requested by the MergePolicy\n   * \n   * @lucene.experimental\n   */\n  public synchronized MergePolicy.OneMerge getNextMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      // Advance the merge from pending to running\n      MergePolicy.OneMerge merge = pendingMerges.removeFirst();\n      runningMerges.add(merge);\n      return merge;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getNextMerge().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#getNextMerge().mjava","sourceNew":"  /**\n   * Expert: the {@link MergeScheduler} calls this method to retrieve the next\n   * merge requested by the MergePolicy\n   * \n   * @lucene.experimental\n   */\n  private synchronized MergePolicy.OneMerge getNextMerge() {\n    if (pendingMerges.size() == 0) {\n      return null;\n    } else {\n      // Advance the merge from pending to running\n      MergePolicy.OneMerge merge = pendingMerges.removeFirst();\n      runningMerges.add(merge);\n      return merge;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: the {@link MergeScheduler} calls this method to retrieve the next\n   * merge requested by the MergePolicy\n   * \n   * @lucene.experimental\n   */\n  public synchronized MergePolicy.OneMerge getNextMerge() {\n    if (pendingMerges.size() == 0) {\n      return null;\n    } else {\n      // Advance the merge from pending to running\n      MergePolicy.OneMerge merge = pendingMerges.removeFirst();\n      runningMerges.add(merge);\n      return merge;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["89697e7abc9807639c384eecf5a2a6eef1080426"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}