{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","sourceNew":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","sourceOld":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","sourceNew":null,"sourceOld":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","sourceNew":null,"sourceOld":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}