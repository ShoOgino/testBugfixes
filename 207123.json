{"path":"lucene/core/src/test/org/apache/lucene/util/TestByteBlockPool#testCopyRefAndWrite().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestByteBlockPool#testCopyRefAndWrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestByteBlockPool#testCopyRefAndWrite().mjava","sourceNew":"  public void testCopyRefAndWrite() throws IOException {\n    List<String> list = new ArrayList<String>();\n    int maxLength = atLeast(500);\n    ByteBlockPool pool = new ByteBlockPool(new ByteBlockPool.DirectAllocator());\n    pool.nextBuffer();\n    final int numValues = atLeast(100);\n    BytesRef ref = new BytesRef();\n    for (int i = 0; i < numValues; i++) {\n      final String value = _TestUtil.randomRealisticUnicodeString(random,\n          maxLength);\n      list.add(value);\n      ref.copyChars(value);\n      pool.copy(ref);\n    }\n    RAMDirectory dir = new RAMDirectory();\n    IndexOutput stream = dir.createOutput(\"foo.txt\", newIOContext(random));\n    pool.writePool(stream);\n    stream.flush();\n    stream.close();\n    IndexInput input = dir.openInput(\"foo.txt\", newIOContext(random));\n    assertEquals(pool.byteOffset + pool.byteUpto, stream.length());\n    BytesRef expected = new BytesRef();\n    BytesRef actual = new BytesRef();\n    for (String string : list) {\n      expected.copyChars(string);\n      actual.grow(expected.length);\n      actual.length = expected.length;\n      input.readBytes(actual.bytes, 0, actual.length);\n      assertEquals(expected, actual);\n    }\n    try {\n      input.readByte();\n      fail(\"must be EOF\");\n    } catch (EOFException e) {\n      // expected - read past EOF\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testCopyRefAndWrite() throws IOException {\n    List<String> list = new ArrayList<String>();\n    int maxLength = atLeast(500);\n    ByteBlockPool pool = new ByteBlockPool(new ByteBlockPool.DirectAllocator());\n    pool.nextBuffer();\n    final int numValues = atLeast(100);\n    BytesRef ref = new BytesRef();\n    for (int i = 0; i < numValues; i++) {\n      final String value = _TestUtil.randomRealisticUnicodeString(random,\n          maxLength);\n      list.add(value);\n      ref.copyChars(value);\n      pool.copy(ref);\n    }\n    RAMDirectory dir = new RAMDirectory();\n    IndexOutput stream = dir.createOutput(\"foo.txt\", newIOContext(random));\n    pool.writePool(stream);\n    stream.flush();\n    stream.close();\n    IndexInput input = dir.openInput(\"foo.txt\", newIOContext(random));\n    assertEquals(pool.byteOffset + pool.byteUpto, stream.length());\n    BytesRef expected = new BytesRef();\n    BytesRef actual = new BytesRef();\n    for (String string : list) {\n      expected.copyChars(string);\n      actual.grow(expected.length);\n      actual.length = expected.length;\n      input.readBytes(actual.bytes, 0, actual.length);\n      assertEquals(expected, actual);\n    }\n    try {\n      input.readByte();\n      fail(\"must be EOF\");\n    } catch (EOFException e) {\n      // expected - read past EOF\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestByteBlockPool#testCopyRefAndWrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestByteBlockPool#testCopyRefAndWrite().mjava","sourceNew":"  public void testCopyRefAndWrite() throws IOException {\n    List<String> list = new ArrayList<String>();\n    int maxLength = atLeast(500);\n    ByteBlockPool pool = new ByteBlockPool(new ByteBlockPool.DirectAllocator());\n    pool.nextBuffer();\n    final int numValues = atLeast(100);\n    BytesRef ref = new BytesRef();\n    for (int i = 0; i < numValues; i++) {\n      final String value = _TestUtil.randomRealisticUnicodeString(random(),\n          maxLength);\n      list.add(value);\n      ref.copyChars(value);\n      pool.copy(ref);\n    }\n    RAMDirectory dir = new RAMDirectory();\n    IndexOutput stream = dir.createOutput(\"foo.txt\", newIOContext(random()));\n    pool.writePool(stream);\n    stream.flush();\n    stream.close();\n    IndexInput input = dir.openInput(\"foo.txt\", newIOContext(random()));\n    assertEquals(pool.byteOffset + pool.byteUpto, stream.length());\n    BytesRef expected = new BytesRef();\n    BytesRef actual = new BytesRef();\n    for (String string : list) {\n      expected.copyChars(string);\n      actual.grow(expected.length);\n      actual.length = expected.length;\n      input.readBytes(actual.bytes, 0, actual.length);\n      assertEquals(expected, actual);\n    }\n    try {\n      input.readByte();\n      fail(\"must be EOF\");\n    } catch (EOFException e) {\n      // expected - read past EOF\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testCopyRefAndWrite() throws IOException {\n    List<String> list = new ArrayList<String>();\n    int maxLength = atLeast(500);\n    ByteBlockPool pool = new ByteBlockPool(new ByteBlockPool.DirectAllocator());\n    pool.nextBuffer();\n    final int numValues = atLeast(100);\n    BytesRef ref = new BytesRef();\n    for (int i = 0; i < numValues; i++) {\n      final String value = _TestUtil.randomRealisticUnicodeString(random,\n          maxLength);\n      list.add(value);\n      ref.copyChars(value);\n      pool.copy(ref);\n    }\n    RAMDirectory dir = new RAMDirectory();\n    IndexOutput stream = dir.createOutput(\"foo.txt\", newIOContext(random));\n    pool.writePool(stream);\n    stream.flush();\n    stream.close();\n    IndexInput input = dir.openInput(\"foo.txt\", newIOContext(random));\n    assertEquals(pool.byteOffset + pool.byteUpto, stream.length());\n    BytesRef expected = new BytesRef();\n    BytesRef actual = new BytesRef();\n    for (String string : list) {\n      expected.copyChars(string);\n      actual.grow(expected.length);\n      actual.length = expected.length;\n      input.readBytes(actual.bytes, 0, actual.length);\n      assertEquals(expected, actual);\n    }\n    try {\n      input.readByte();\n      fail(\"must be EOF\");\n    } catch (EOFException e) {\n      // expected - read past EOF\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestByteBlockPool#testCopyRefAndWrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestByteBlockPool#testCopyRefAndWrite().mjava","sourceNew":"  public void testCopyRefAndWrite() throws IOException {\n    Counter bytesUsed = Counter.newCounter();\n    ByteBlockPool pool = new ByteBlockPool(new ByteBlockPool.DirectTrackingAllocator(bytesUsed));\n    pool.nextBuffer();\n    boolean reuseFirst = random().nextBoolean();\n    for (int j = 0; j < 2; j++) {\n        \n      List<String> list = new ArrayList<String>();\n      int maxLength = atLeast(500);\n      final int numValues = atLeast(100);\n      BytesRef ref = new BytesRef();\n      for (int i = 0; i < numValues; i++) {\n        final String value = _TestUtil.randomRealisticUnicodeString(random(),\n            maxLength);\n        list.add(value);\n        ref.copyChars(value);\n        pool.copy(ref);\n      }\n      RAMDirectory dir = new RAMDirectory();\n      IndexOutput stream = dir.createOutput(\"foo.txt\", newIOContext(random()));\n      pool.writePool(stream);\n      stream.flush();\n      stream.close();\n      IndexInput input = dir.openInput(\"foo.txt\", newIOContext(random()));\n      assertEquals(pool.byteOffset + pool.byteUpto, stream.length());\n      BytesRef expected = new BytesRef();\n      BytesRef actual = new BytesRef();\n      for (String string : list) {\n        expected.copyChars(string);\n        actual.grow(expected.length);\n        actual.length = expected.length;\n        input.readBytes(actual.bytes, 0, actual.length);\n        assertEquals(expected, actual);\n      }\n      try {\n        input.readByte();\n        fail(\"must be EOF\");\n      } catch (EOFException e) {\n        // expected - read past EOF\n      }\n      pool.reset(random().nextBoolean(), reuseFirst);\n      if (reuseFirst) {\n        assertEquals(ByteBlockPool.BYTE_BLOCK_SIZE, bytesUsed.get());\n      } else {\n        assertEquals(0, bytesUsed.get());\n        pool.nextBuffer(); // prepare for next iter\n      }\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testCopyRefAndWrite() throws IOException {\n    List<String> list = new ArrayList<String>();\n    int maxLength = atLeast(500);\n    ByteBlockPool pool = new ByteBlockPool(new ByteBlockPool.DirectAllocator());\n    pool.nextBuffer();\n    final int numValues = atLeast(100);\n    BytesRef ref = new BytesRef();\n    for (int i = 0; i < numValues; i++) {\n      final String value = _TestUtil.randomRealisticUnicodeString(random(),\n          maxLength);\n      list.add(value);\n      ref.copyChars(value);\n      pool.copy(ref);\n    }\n    RAMDirectory dir = new RAMDirectory();\n    IndexOutput stream = dir.createOutput(\"foo.txt\", newIOContext(random()));\n    pool.writePool(stream);\n    stream.flush();\n    stream.close();\n    IndexInput input = dir.openInput(\"foo.txt\", newIOContext(random()));\n    assertEquals(pool.byteOffset + pool.byteUpto, stream.length());\n    BytesRef expected = new BytesRef();\n    BytesRef actual = new BytesRef();\n    for (String string : list) {\n      expected.copyChars(string);\n      actual.grow(expected.length);\n      actual.length = expected.length;\n      input.readBytes(actual.bytes, 0, actual.length);\n      assertEquals(expected, actual);\n    }\n    try {\n      input.readByte();\n      fail(\"must be EOF\");\n    } catch (EOFException e) {\n      // expected - read past EOF\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3608fdc19fd70645d52a947214e126ab56cc2b05","date":1359064554,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestByteBlockPool#testCopyRefAndWrite().mjava","sourceNew":null,"sourceOld":"  public void testCopyRefAndWrite() throws IOException {\n    Counter bytesUsed = Counter.newCounter();\n    ByteBlockPool pool = new ByteBlockPool(new ByteBlockPool.DirectTrackingAllocator(bytesUsed));\n    pool.nextBuffer();\n    boolean reuseFirst = random().nextBoolean();\n    for (int j = 0; j < 2; j++) {\n        \n      List<String> list = new ArrayList<String>();\n      int maxLength = atLeast(500);\n      final int numValues = atLeast(100);\n      BytesRef ref = new BytesRef();\n      for (int i = 0; i < numValues; i++) {\n        final String value = _TestUtil.randomRealisticUnicodeString(random(),\n            maxLength);\n        list.add(value);\n        ref.copyChars(value);\n        pool.copy(ref);\n      }\n      RAMDirectory dir = new RAMDirectory();\n      IndexOutput stream = dir.createOutput(\"foo.txt\", newIOContext(random()));\n      pool.writePool(stream);\n      stream.flush();\n      stream.close();\n      IndexInput input = dir.openInput(\"foo.txt\", newIOContext(random()));\n      assertEquals(pool.byteOffset + pool.byteUpto, stream.length());\n      BytesRef expected = new BytesRef();\n      BytesRef actual = new BytesRef();\n      for (String string : list) {\n        expected.copyChars(string);\n        actual.grow(expected.length);\n        actual.length = expected.length;\n        input.readBytes(actual.bytes, 0, actual.length);\n        assertEquals(expected, actual);\n      }\n      try {\n        input.readByte();\n        fail(\"must be EOF\");\n      } catch (EOFException e) {\n        // expected - read past EOF\n      }\n      pool.reset(random().nextBoolean(), reuseFirst);\n      if (reuseFirst) {\n        assertEquals(ByteBlockPool.BYTE_BLOCK_SIZE, bytesUsed.get());\n      } else {\n        assertEquals(0, bytesUsed.get());\n        pool.nextBuffer(); // prepare for next iter\n      }\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestByteBlockPool#testCopyRefAndWrite().mjava","sourceNew":null,"sourceOld":"  public void testCopyRefAndWrite() throws IOException {\n    Counter bytesUsed = Counter.newCounter();\n    ByteBlockPool pool = new ByteBlockPool(new ByteBlockPool.DirectTrackingAllocator(bytesUsed));\n    pool.nextBuffer();\n    boolean reuseFirst = random().nextBoolean();\n    for (int j = 0; j < 2; j++) {\n        \n      List<String> list = new ArrayList<String>();\n      int maxLength = atLeast(500);\n      final int numValues = atLeast(100);\n      BytesRef ref = new BytesRef();\n      for (int i = 0; i < numValues; i++) {\n        final String value = _TestUtil.randomRealisticUnicodeString(random(),\n            maxLength);\n        list.add(value);\n        ref.copyChars(value);\n        pool.copy(ref);\n      }\n      RAMDirectory dir = new RAMDirectory();\n      IndexOutput stream = dir.createOutput(\"foo.txt\", newIOContext(random()));\n      pool.writePool(stream);\n      stream.flush();\n      stream.close();\n      IndexInput input = dir.openInput(\"foo.txt\", newIOContext(random()));\n      assertEquals(pool.byteOffset + pool.byteUpto, stream.length());\n      BytesRef expected = new BytesRef();\n      BytesRef actual = new BytesRef();\n      for (String string : list) {\n        expected.copyChars(string);\n        actual.grow(expected.length);\n        actual.length = expected.length;\n        input.readBytes(actual.bytes, 0, actual.length);\n        assertEquals(expected, actual);\n      }\n      try {\n        input.readByte();\n        fail(\"must be EOF\");\n      } catch (EOFException e) {\n        // expected - read past EOF\n      }\n      pool.reset(random().nextBoolean(), reuseFirst);\n      if (reuseFirst) {\n        assertEquals(ByteBlockPool.BYTE_BLOCK_SIZE, bytesUsed.get());\n      } else {\n        assertEquals(0, bytesUsed.get());\n        pool.nextBuffer(); // prepare for next iter\n      }\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63","3608fdc19fd70645d52a947214e126ab56cc2b05"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3608fdc19fd70645d52a947214e126ab56cc2b05":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3608fdc19fd70645d52a947214e126ab56cc2b05":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["d4d69c535930b5cce125cff868d40f6373dc27d4","3608fdc19fd70645d52a947214e126ab56cc2b05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}