{"path":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","commits":[{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the bit at index <tt>i</tt>.\n   */\n  public void set(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    if (index == 0) {\n      // if the index is 0, it means that we just found a block of 4096 bits\n      // that has no bit that is set yet. So let's initialize a new block:\n      indices[i4096] = 1L << i64; // shifts are mod 64 in java\n      assert bits[i4096] == null;\n      bits[i4096] = new long[] { 1L << i }; // shifts are mod 64 in java\n      ++nonZeroLongCount;\n      ramBytesUsed += SINGLE_ELEMENT_ARRAY_BYTES_USED;\n    } else if ((index & (1L << i64)) == 0) {\n      // in that case we found a block of 4096 bits that has some values, but\n      // the sub-block of 64 bits that we are interested in has no value yet,\n      // so we need to insert a new long\n      insertLong(i4096, i64, i, index);\n    } else {\n      // in that case the sub 64-bits block we are interested in already exists,\n      // we just need to set a bit in an existing long: the number of ones on\n      // the right of i64 gives us the index of the long we need to update\n      bits[i4096][Long.bitCount(index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5132ed7492455ab92d26486037983253997f6c65","9a786641be13f4046757b33d3c0226ca3cb92ae2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the bit at index <tt>i</tt>.\n   */\n  public void set(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    if (index == 0) {\n      // if the index is 0, it means that we just found a block of 4096 bits\n      // that has no bit that is set yet. So let's initialize a new block:\n      indices[i4096] = 1L << i64; // shifts are mod 64 in java\n      assert bits[i4096] == null;\n      bits[i4096] = new long[] { 1L << i }; // shifts are mod 64 in java\n      ++nonZeroLongCount;\n      ramBytesUsed += SINGLE_ELEMENT_ARRAY_BYTES_USED;\n    } else if ((index & (1L << i64)) == 0) {\n      // in that case we found a block of 4096 bits that has some values, but\n      // the sub-block of 64 bits that we are interested in has no value yet,\n      // so we need to insert a new long\n      insertLong(i4096, i64, i, index);\n    } else {\n      // in that case the sub 64-bits block we are interested in already exists,\n      // we just need to set a bit in an existing long: the number of ones on\n      // the right of i64 gives us the index of the long we need to update\n      bits[i4096][Long.bitCount(index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a786641be13f4046757b33d3c0226ca3cb92ae2","date":1412940633,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","sourceNew":"  /**\n   * Set the bit at index <tt>i</tt>.\n   */\n  public void set(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    if ((index & (1L << i64)) != 0) {\n      // in that case the sub 64-bits block we are interested in already exists,\n      // we just need to set a bit in an existing long: the number of ones on\n      // the right of i64 gives us the index of the long we need to update\n      bits[i4096][Long.bitCount(index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java\n    } else if (index == 0) {\n      // if the index is 0, it means that we just found a block of 4096 bits\n      // that has no bit that is set yet. So let's initialize a new block:\n      insertBlock(i4096, i64, i);\n    } else {\n      // in that case we found a block of 4096 bits that has some values, but\n      // the sub-block of 64 bits that we are interested in has no value yet,\n      // so we need to insert a new long\n      insertLong(i4096, i64, i, index);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the bit at index <tt>i</tt>.\n   */\n  public void set(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    if (index == 0) {\n      // if the index is 0, it means that we just found a block of 4096 bits\n      // that has no bit that is set yet. So let's initialize a new block:\n      indices[i4096] = 1L << i64; // shifts are mod 64 in java\n      assert bits[i4096] == null;\n      bits[i4096] = new long[] { 1L << i }; // shifts are mod 64 in java\n      ++nonZeroLongCount;\n      ramBytesUsed += SINGLE_ELEMENT_ARRAY_BYTES_USED;\n    } else if ((index & (1L << i64)) == 0) {\n      // in that case we found a block of 4096 bits that has some values, but\n      // the sub-block of 64 bits that we are interested in has no value yet,\n      // so we need to insert a new long\n      insertLong(i4096, i64, i, index);\n    } else {\n      // in that case the sub 64-bits block we are interested in already exists,\n      // we just need to set a bit in an existing long: the number of ones on\n      // the right of i64 gives us the index of the long we need to update\n      bits[i4096][Long.bitCount(index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java\n    }\n  }\n\n","bugFix":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"bugIntro":["5132ed7492455ab92d26486037983253997f6c65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","sourceNew":"  /**\n   * Set the bit at index <tt>i</tt>.\n   */\n  public void set(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    if ((index & (1L << i64)) != 0) {\n      // in that case the sub 64-bits block we are interested in already exists,\n      // we just need to set a bit in an existing long: the number of ones on\n      // the right of i64 gives us the index of the long we need to update\n      bits[i4096][Long.bitCount(index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java\n    } else if (index == 0) {\n      // if the index is 0, it means that we just found a block of 4096 bits\n      // that has no bit that is set yet. So let's initialize a new block:\n      insertBlock(i4096, i64, i);\n    } else {\n      // in that case we found a block of 4096 bits that has some values, but\n      // the sub-block of 64 bits that we are interested in has no value yet,\n      // so we need to insert a new long\n      insertLong(i4096, i64, i, index);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the bit at index <tt>i</tt>.\n   */\n  public void set(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    if (index == 0) {\n      // if the index is 0, it means that we just found a block of 4096 bits\n      // that has no bit that is set yet. So let's initialize a new block:\n      indices[i4096] = 1L << i64; // shifts are mod 64 in java\n      assert bits[i4096] == null;\n      bits[i4096] = new long[] { 1L << i }; // shifts are mod 64 in java\n      ++nonZeroLongCount;\n      ramBytesUsed += SINGLE_ELEMENT_ARRAY_BYTES_USED;\n    } else if ((index & (1L << i64)) == 0) {\n      // in that case we found a block of 4096 bits that has some values, but\n      // the sub-block of 64 bits that we are interested in has no value yet,\n      // so we need to insert a new long\n      insertLong(i4096, i64, i, index);\n    } else {\n      // in that case the sub 64-bits block we are interested in already exists,\n      // we just need to set a bit in an existing long: the number of ones on\n      // the right of i64 gives us the index of the long we need to update\n      bits[i4096][Long.bitCount(index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5132ed7492455ab92d26486037983253997f6c65","date":1413792495,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","sourceNew":"  /**\n   * Set the bit at index <tt>i</tt>.\n   */\n  public void set(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final Block block = blocks[i4096];\n    final int i64 = i >>> 6;\n    if (block == null) {\n      blocks[i4096] = new Block(i);\n      ++nonZeroLongCount;\n      ramBytesUsed += Block.BASE_RAM_BYTES_USED;\n    } else if ((block.index & (1L << i64)) != 0) {\n      // in that case the sub 64-bits block we are interested in already exists,\n      // we just need to set a bit in an existing long: the number of ones on\n      // the right of i64 gives us the index of the long we need to update\n      block.bits[Long.bitCount(block.index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java\n    } else {\n      // in that case we found a block of 4096 bits that has some values, but\n      // the sub-block of 64 bits that we are interested in has no value yet,\n      // so we need to insert a new long\n      insertLong(block, i64, i);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the bit at index <tt>i</tt>.\n   */\n  public void set(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    if ((index & (1L << i64)) != 0) {\n      // in that case the sub 64-bits block we are interested in already exists,\n      // we just need to set a bit in an existing long: the number of ones on\n      // the right of i64 gives us the index of the long we need to update\n      bits[i4096][Long.bitCount(index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java\n    } else if (index == 0) {\n      // if the index is 0, it means that we just found a block of 4096 bits\n      // that has no bit that is set yet. So let's initialize a new block:\n      insertBlock(i4096, i64, i);\n    } else {\n      // in that case we found a block of 4096 bits that has some values, but\n      // the sub-block of 64 bits that we are interested in has no value yet,\n      // so we need to insert a new long\n      insertLong(i4096, i64, i, index);\n    }\n  }\n\n","bugFix":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","9a786641be13f4046757b33d3c0226ca3cb92ae2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b97a073eaa927466c93dba638b34d56f1beef80a","date":1413793531,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","sourceNew":"  /**\n   * Set the bit at index <tt>i</tt>.\n   */\n  public void set(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    if ((index & (1L << i64)) != 0) {\n      // in that case the sub 64-bits block we are interested in already exists,\n      // we just need to set a bit in an existing long: the number of ones on\n      // the right of i64 gives us the index of the long we need to update\n      bits[i4096][Long.bitCount(index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java\n    } else if (index == 0) {\n      // if the index is 0, it means that we just found a block of 4096 bits\n      // that has no bit that is set yet. So let's initialize a new block:\n      insertBlock(i4096, i64, i);\n    } else {\n      // in that case we found a block of 4096 bits that has some values, but\n      // the sub-block of 64 bits that we are interested in has no value yet,\n      // so we need to insert a new long\n      insertLong(i4096, i64, i, index);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the bit at index <tt>i</tt>.\n   */\n  public void set(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final Block block = blocks[i4096];\n    final int i64 = i >>> 6;\n    if (block == null) {\n      blocks[i4096] = new Block(i);\n      ++nonZeroLongCount;\n      ramBytesUsed += Block.BASE_RAM_BYTES_USED;\n    } else if ((block.index & (1L << i64)) != 0) {\n      // in that case the sub 64-bits block we are interested in already exists,\n      // we just need to set a bit in an existing long: the number of ones on\n      // the right of i64 gives us the index of the long we need to update\n      block.bits[Long.bitCount(block.index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java\n    } else {\n      // in that case we found a block of 4096 bits that has some values, but\n      // the sub-block of 64 bits that we are interested in has no value yet,\n      // so we need to insert a new long\n      insertLong(block, i64, i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e3751ad4cc85eb979419cf5469dfba266eae56a","date":1581046252,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#set(int).mjava","sourceNew":"  /**\n   * Set the bit at index <code>i</code>.\n   */\n  public void set(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    if ((index & (1L << i64)) != 0) {\n      // in that case the sub 64-bits block we are interested in already exists,\n      // we just need to set a bit in an existing long: the number of ones on\n      // the right of i64 gives us the index of the long we need to update\n      bits[i4096][Long.bitCount(index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java\n    } else if (index == 0) {\n      // if the index is 0, it means that we just found a block of 4096 bits\n      // that has no bit that is set yet. So let's initialize a new block:\n      insertBlock(i4096, i64, i);\n    } else {\n      // in that case we found a block of 4096 bits that has some values, but\n      // the sub-block of 64 bits that we are interested in has no value yet,\n      // so we need to insert a new long\n      insertLong(i4096, i64, i, index);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the bit at index <tt>i</tt>.\n   */\n  public void set(int i) {\n    assert consistent(i);\n    final int i4096 = i >>> 12;\n    final long index = indices[i4096];\n    final int i64 = i >>> 6;\n    if ((index & (1L << i64)) != 0) {\n      // in that case the sub 64-bits block we are interested in already exists,\n      // we just need to set a bit in an existing long: the number of ones on\n      // the right of i64 gives us the index of the long we need to update\n      bits[i4096][Long.bitCount(index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java\n    } else if (index == 0) {\n      // if the index is 0, it means that we just found a block of 4096 bits\n      // that has no bit that is set yet. So let's initialize a new block:\n      insertBlock(i4096, i64, i);\n    } else {\n      // in that case we found a block of 4096 bits that has some values, but\n      // the sub-block of 64 bits that we are interested in has no value yet,\n      // so we need to insert a new long\n      insertLong(i4096, i64, i, index);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5132ed7492455ab92d26486037983253997f6c65":["9a786641be13f4046757b33d3c0226ca3cb92ae2"],"b97a073eaa927466c93dba638b34d56f1beef80a":["5132ed7492455ab92d26486037983253997f6c65"],"9e3751ad4cc85eb979419cf5469dfba266eae56a":["b97a073eaa927466c93dba638b34d56f1beef80a"],"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","9a786641be13f4046757b33d3c0226ca3cb92ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a786641be13f4046757b33d3c0226ca3cb92ae2":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e3751ad4cc85eb979419cf5469dfba266eae56a"]},"commit2Childs":{"5132ed7492455ab92d26486037983253997f6c65":["b97a073eaa927466c93dba638b34d56f1beef80a"],"b97a073eaa927466c93dba638b34d56f1beef80a":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"9e3751ad4cc85eb979419cf5469dfba266eae56a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"9a786641be13f4046757b33d3c0226ca3cb92ae2":["5132ed7492455ab92d26486037983253997f6c65","55980207f1977bd1463465de1659b821347e2fa8"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["9a786641be13f4046757b33d3c0226ca3cb92ae2","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}