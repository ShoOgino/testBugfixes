{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#sumValues(List[MatchingDocs],boolean,ValueSource).mjava","commits":[{"id":"519ac3b8f2711b5bfeb1c90c77bb007032270a41","date":1384456090,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#sumValues(List[MatchingDocs],boolean,ValueSource).mjava","pathOld":"/dev/null","sourceNew":"  private final void sumValues(List<MatchingDocs> matchingDocs, boolean keepScores, ValueSource valueSource) throws IOException {\n    final FakeScorer scorer = new FakeScorer();\n    Map<String, Scorer> context = new HashMap<String, Scorer>();\n    context.put(\"scorer\", scorer);\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(facetsFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      int scoresIdx = 0;\n      BytesRef scratch = new BytesRef();\n      float[] scores = hits.scores;\n\n      FunctionValues functionValues = valueSource.getValues(context, hits.context);\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        dv.get(doc, scratch);\n        if (keepScores) {\n          scorer.docID = doc;\n          scorer.score = scores[scoresIdx++];\n        }\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int ord = 0;\n        int offset = scratch.offset;\n        int prev = 0;\n\n        float value = (float) functionValues.doubleVal(doc);\n\n        while (offset < end) {\n          byte b = bytes[offset++];\n          if (b >= 0) {\n            prev = ord = ((ord << 7) | b) + prev;\n            values[ord] += value;\n            ord = 0;\n          } else {\n            ord = (ord << 7) | (b & 0x7F);\n          }\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : facetsConfig.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new CategoryPath(dim));\n        assert dimRootOrd > 0;\n        values[dimRootOrd] += rollup(children[dimRootOrd]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#sumValues(List[MatchingDocs],boolean,ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#sumValues(List[MatchingDocs],boolean,ValueSource).mjava","sourceNew":"  private final void sumValues(List<MatchingDocs> matchingDocs, boolean keepScores, ValueSource valueSource) throws IOException {\n    final FakeScorer scorer = new FakeScorer();\n    Map<String, Scorer> context = new HashMap<String, Scorer>();\n    context.put(\"scorer\", scorer);\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(facetsFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      int scoresIdx = 0;\n      BytesRef scratch = new BytesRef();\n      float[] scores = hits.scores;\n\n      FunctionValues functionValues = valueSource.getValues(context, hits.context);\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        dv.get(doc, scratch);\n        if (keepScores) {\n          scorer.docID = doc;\n          scorer.score = scores[scoresIdx++];\n        }\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int ord = 0;\n        int offset = scratch.offset;\n        int prev = 0;\n\n        float value = (float) functionValues.doubleVal(doc);\n\n        while (offset < end) {\n          byte b = bytes[offset++];\n          if (b >= 0) {\n            prev = ord = ((ord << 7) | b) + prev;\n            values[ord] += value;\n            ord = 0;\n          } else {\n            ord = (ord << 7) | (b & 0x7F);\n          }\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : facetsConfig.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        assert dimRootOrd > 0;\n        values[dimRootOrd] += rollup(children[dimRootOrd]);\n      }\n    }\n  }\n\n","sourceOld":"  private final void sumValues(List<MatchingDocs> matchingDocs, boolean keepScores, ValueSource valueSource) throws IOException {\n    final FakeScorer scorer = new FakeScorer();\n    Map<String, Scorer> context = new HashMap<String, Scorer>();\n    context.put(\"scorer\", scorer);\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(facetsFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      int scoresIdx = 0;\n      BytesRef scratch = new BytesRef();\n      float[] scores = hits.scores;\n\n      FunctionValues functionValues = valueSource.getValues(context, hits.context);\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        dv.get(doc, scratch);\n        if (keepScores) {\n          scorer.docID = doc;\n          scorer.score = scores[scoresIdx++];\n        }\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int ord = 0;\n        int offset = scratch.offset;\n        int prev = 0;\n\n        float value = (float) functionValues.doubleVal(doc);\n\n        while (offset < end) {\n          byte b = bytes[offset++];\n          if (b >= 0) {\n            prev = ord = ((ord << 7) | b) + prev;\n            values[ord] += value;\n            ord = 0;\n          } else {\n            ord = (ord << 7) | (b & 0x7F);\n          }\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : facetsConfig.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new CategoryPath(dim));\n        assert dimRootOrd > 0;\n        values[dimRootOrd] += rollup(children[dimRootOrd]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"798b82b2c9877fae10a0a7d2025c05cac832bda2","date":1384710991,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#sumValues(List[MatchingDocs],boolean,ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#sumValues(List[MatchingDocs],boolean,ValueSource).mjava","sourceNew":"  private final void sumValues(List<MatchingDocs> matchingDocs, boolean keepScores, ValueSource valueSource) throws IOException {\n    final FakeScorer scorer = new FakeScorer();\n    Map<String, Scorer> context = new HashMap<String, Scorer>();\n    context.put(\"scorer\", scorer);\n    IntsRef scratch = new IntsRef();\n    for(MatchingDocs hits : matchingDocs) {\n      OrdinalsReader.OrdinalsSegmentReader ords = ordinalsReader.getReader(hits.context);\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      int scoresIdx = 0;\n      float[] scores = hits.scores;\n\n      FunctionValues functionValues = valueSource.getValues(context, hits.context);\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        ords.get(doc, scratch);\n        if (keepScores) {\n          scorer.docID = doc;\n          scorer.score = scores[scoresIdx++];\n        }\n        float value = (float) functionValues.doubleVal(doc);\n        for(int i=0;i<scratch.length;i++) {\n          values[scratch.ints[i]] += value;\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : facetsConfig.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        assert dimRootOrd > 0;\n        values[dimRootOrd] += rollup(children[dimRootOrd]);\n      }\n    }\n  }\n\n","sourceOld":"  private final void sumValues(List<MatchingDocs> matchingDocs, boolean keepScores, ValueSource valueSource) throws IOException {\n    final FakeScorer scorer = new FakeScorer();\n    Map<String, Scorer> context = new HashMap<String, Scorer>();\n    context.put(\"scorer\", scorer);\n    for(MatchingDocs hits : matchingDocs) {\n      BinaryDocValues dv = hits.context.reader().getBinaryDocValues(facetsFieldName);\n      if (dv == null) { // this reader does not have DocValues for the requested category list\n        continue;\n      }\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      int scoresIdx = 0;\n      BytesRef scratch = new BytesRef();\n      float[] scores = hits.scores;\n\n      FunctionValues functionValues = valueSource.getValues(context, hits.context);\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        dv.get(doc, scratch);\n        if (keepScores) {\n          scorer.docID = doc;\n          scorer.score = scores[scoresIdx++];\n        }\n        byte[] bytes = scratch.bytes;\n        int end = scratch.offset + scratch.length;\n        int ord = 0;\n        int offset = scratch.offset;\n        int prev = 0;\n\n        float value = (float) functionValues.doubleVal(doc);\n\n        while (offset < end) {\n          byte b = bytes[offset++];\n          if (b >= 0) {\n            prev = ord = ((ord << 7) | b) + prev;\n            values[ord] += value;\n            ord = 0;\n          } else {\n            ord = (ord << 7) | (b & 0x7F);\n          }\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : facetsConfig.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        assert dimRootOrd > 0;\n        values[dimRootOrd] += rollup(children[dimRootOrd]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18edd2e3f5560087a37442fa424cbbed7c295ebc","date":1384813900,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#sumValues(List[MatchingDocs],boolean,ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#sumValues(List[MatchingDocs],boolean,ValueSource).mjava","sourceNew":"  private final void sumValues(List<MatchingDocs> matchingDocs, boolean keepScores, ValueSource valueSource) throws IOException {\n    final FakeScorer scorer = new FakeScorer();\n    Map<String, Scorer> context = new HashMap<String, Scorer>();\n    context.put(\"scorer\", scorer);\n    IntsRef scratch = new IntsRef();\n    for(MatchingDocs hits : matchingDocs) {\n      OrdinalsReader.OrdinalsSegmentReader ords = ordinalsReader.getReader(hits.context);\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      int scoresIdx = 0;\n      float[] scores = hits.scores;\n\n      FunctionValues functionValues = valueSource.getValues(context, hits.context);\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        ords.get(doc, scratch);\n        if (keepScores) {\n          scorer.docID = doc;\n          scorer.score = scores[scoresIdx++];\n        }\n        float value = (float) functionValues.doubleVal(doc);\n        for(int i=0;i<scratch.length;i++) {\n          values[scratch.ints[i]] += value;\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        assert dimRootOrd > 0;\n        values[dimRootOrd] += rollup(children[dimRootOrd]);\n      }\n    }\n  }\n\n","sourceOld":"  private final void sumValues(List<MatchingDocs> matchingDocs, boolean keepScores, ValueSource valueSource) throws IOException {\n    final FakeScorer scorer = new FakeScorer();\n    Map<String, Scorer> context = new HashMap<String, Scorer>();\n    context.put(\"scorer\", scorer);\n    IntsRef scratch = new IntsRef();\n    for(MatchingDocs hits : matchingDocs) {\n      OrdinalsReader.OrdinalsSegmentReader ords = ordinalsReader.getReader(hits.context);\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      int scoresIdx = 0;\n      float[] scores = hits.scores;\n\n      FunctionValues functionValues = valueSource.getValues(context, hits.context);\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        ords.get(doc, scratch);\n        if (keepScores) {\n          scorer.docID = doc;\n          scorer.score = scores[scoresIdx++];\n        }\n        float value = (float) functionValues.doubleVal(doc);\n        for(int i=0;i<scratch.length;i++) {\n          values[scratch.ints[i]] += value;\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : facetsConfig.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        assert dimRootOrd > 0;\n        values[dimRootOrd] += rollup(children[dimRootOrd]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#sumValues(List[MatchingDocs],boolean,ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#sumValues(List[MatchingDocs],boolean,ValueSource).mjava","sourceNew":"  private final void sumValues(List<MatchingDocs> matchingDocs, boolean keepScores, ValueSource valueSource) throws IOException {\n    final FakeScorer scorer = new FakeScorer();\n    Map<String, Scorer> context = new HashMap<String, Scorer>();\n    if (keepScores) {\n      context.put(\"scorer\", scorer);\n    }\n    IntsRef scratch = new IntsRef();\n    for(MatchingDocs hits : matchingDocs) {\n      OrdinalsReader.OrdinalsSegmentReader ords = ordinalsReader.getReader(hits.context);\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      int scoresIdx = 0;\n      float[] scores = hits.scores;\n\n      FunctionValues functionValues = valueSource.getValues(context, hits.context);\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        ords.get(doc, scratch);\n        if (keepScores) {\n          scorer.docID = doc;\n          scorer.score = scores[scoresIdx++];\n        }\n        float value = (float) functionValues.doubleVal(doc);\n        for(int i=0;i<scratch.length;i++) {\n          values[scratch.ints[i]] += value;\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        assert dimRootOrd > 0;\n        values[dimRootOrd] += rollup(children[dimRootOrd]);\n      }\n    }\n  }\n\n","sourceOld":"  private final void sumValues(List<MatchingDocs> matchingDocs, boolean keepScores, ValueSource valueSource) throws IOException {\n    final FakeScorer scorer = new FakeScorer();\n    Map<String, Scorer> context = new HashMap<String, Scorer>();\n    context.put(\"scorer\", scorer);\n    IntsRef scratch = new IntsRef();\n    for(MatchingDocs hits : matchingDocs) {\n      OrdinalsReader.OrdinalsSegmentReader ords = ordinalsReader.getReader(hits.context);\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      int scoresIdx = 0;\n      float[] scores = hits.scores;\n\n      FunctionValues functionValues = valueSource.getValues(context, hits.context);\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        ords.get(doc, scratch);\n        if (keepScores) {\n          scorer.docID = doc;\n          scorer.score = scores[scoresIdx++];\n        }\n        float value = (float) functionValues.doubleVal(doc);\n        for(int i=0;i<scratch.length;i++) {\n          values[scratch.ints[i]] += value;\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        assert dimRootOrd > 0;\n        values[dimRootOrd] += rollup(children[dimRootOrd]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/TaxonomyFacetSumValueSource#sumValues(List[MatchingDocs],boolean,ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#sumValues(List[MatchingDocs],boolean,ValueSource).mjava","sourceNew":"  private final void sumValues(List<MatchingDocs> matchingDocs, boolean keepScores, ValueSource valueSource) throws IOException {\n    final FakeScorer scorer = new FakeScorer();\n    Map<String, Scorer> context = new HashMap<String, Scorer>();\n    if (keepScores) {\n      context.put(\"scorer\", scorer);\n    }\n    IntsRef scratch = new IntsRef();\n    for(MatchingDocs hits : matchingDocs) {\n      OrdinalsReader.OrdinalsSegmentReader ords = ordinalsReader.getReader(hits.context);\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      int scoresIdx = 0;\n      float[] scores = hits.scores;\n\n      FunctionValues functionValues = valueSource.getValues(context, hits.context);\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        ords.get(doc, scratch);\n        if (keepScores) {\n          scorer.docID = doc;\n          scorer.score = scores[scoresIdx++];\n        }\n        float value = (float) functionValues.doubleVal(doc);\n        for(int i=0;i<scratch.length;i++) {\n          values[scratch.ints[i]] += value;\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        assert dimRootOrd > 0;\n        values[dimRootOrd] += rollup(children[dimRootOrd]);\n      }\n    }\n  }\n\n","sourceOld":"  private final void sumValues(List<MatchingDocs> matchingDocs, boolean keepScores, ValueSource valueSource) throws IOException {\n    final FakeScorer scorer = new FakeScorer();\n    Map<String, Scorer> context = new HashMap<String, Scorer>();\n    if (keepScores) {\n      context.put(\"scorer\", scorer);\n    }\n    IntsRef scratch = new IntsRef();\n    for(MatchingDocs hits : matchingDocs) {\n      OrdinalsReader.OrdinalsSegmentReader ords = ordinalsReader.getReader(hits.context);\n      FixedBitSet bits = hits.bits;\n    \n      final int length = hits.bits.length();\n      int doc = 0;\n      int scoresIdx = 0;\n      float[] scores = hits.scores;\n\n      FunctionValues functionValues = valueSource.getValues(context, hits.context);\n      while (doc < length && (doc = bits.nextSetBit(doc)) != -1) {\n        ords.get(doc, scratch);\n        if (keepScores) {\n          scorer.docID = doc;\n          scorer.score = scores[scoresIdx++];\n        }\n        float value = (float) functionValues.doubleVal(doc);\n        for(int i=0;i<scratch.length;i++) {\n          values[scratch.ints[i]] += value;\n        }\n        ++doc;\n      }\n    }\n\n    // nocommit we could do this lazily instead:\n\n    // Rollup any necessary dims:\n    for(Map.Entry<String,FacetsConfig.DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      FacetsConfig.DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        assert dimRootOrd > 0;\n        values[dimRootOrd] += rollup(children[dimRootOrd]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18edd2e3f5560087a37442fa424cbbed7c295ebc":["798b82b2c9877fae10a0a7d2025c05cac832bda2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"798b82b2c9877fae10a0a7d2025c05cac832bda2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"21d36d0db865f7b84026b447bec653469a6e66df":["ae75def1e2525383b6e1397ed97c44387da9941c"],"519ac3b8f2711b5bfeb1c90c77bb007032270a41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae75def1e2525383b6e1397ed97c44387da9941c":["18edd2e3f5560087a37442fa424cbbed7c295ebc"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["519ac3b8f2711b5bfeb1c90c77bb007032270a41"]},"commit2Childs":{"18edd2e3f5560087a37442fa424cbbed7c295ebc":["ae75def1e2525383b6e1397ed97c44387da9941c"],"798b82b2c9877fae10a0a7d2025c05cac832bda2":["18edd2e3f5560087a37442fa424cbbed7c295ebc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519ac3b8f2711b5bfeb1c90c77bb007032270a41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"519ac3b8f2711b5bfeb1c90c77bb007032270a41":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["798b82b2c9877fae10a0a7d2025c05cac832bda2"],"ae75def1e2525383b6e1397ed97c44387da9941c":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}