{"path":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":null,"bugIntro":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (!terms[i].field().equals(field)) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}