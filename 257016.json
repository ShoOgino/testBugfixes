{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#fetchClusterState(SolrClient,String).mjava","commits":[{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#fetchClusterState(SolrClient,String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"collection\", collection);\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap = ((NamedList) cluster.get(\"collections\")).asShallowMap();\n    int znodeVersion = (int)((Map<String, Object>)(collectionsMap).get(collection)).get(\"znodeVersion\");\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    return cs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"095183bbba1ca16181a207a7d4d1c394573aaf39","date":1492465186,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#fetchClusterState(SolrClient,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#fetchClusterState(SolrClient,String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"collection\", collection);\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap = Collections.singletonMap(collection,\n        ((NamedList) cluster.get(\"collections\")).get(collection));\n    int znodeVersion = (int)((Map<String, Object>)(collectionsMap).get(collection)).get(\"znodeVersion\");\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    return cs;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"collection\", collection);\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap = ((NamedList) cluster.get(\"collections\")).asShallowMap();\n    int znodeVersion = (int)((Map<String, Object>)(collectionsMap).get(collection)).get(\"znodeVersion\");\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#fetchClusterState(SolrClient,String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"collection\", collection);\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap = Collections.singletonMap(collection,\n        ((NamedList) cluster.get(\"collections\")).get(collection));\n    int znodeVersion = (int)((Map<String, Object>)(collectionsMap).get(collection)).get(\"znodeVersion\");\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    return cs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#fetchClusterState(SolrClient,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#fetchClusterState(SolrClient,String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap = Collections.singletonMap(collection,\n        ((NamedList) cluster.get(\"collections\")).get(collection));\n    int znodeVersion = (int)((Map<String, Object>)(collectionsMap).get(collection)).get(\"znodeVersion\");\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    return cs;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"collection\", collection);\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap = Collections.singletonMap(collection,\n        ((NamedList) cluster.get(\"collections\")).get(collection));\n    int znodeVersion = (int)((Map<String, Object>)(collectionsMap).get(collection)).get(\"znodeVersion\");\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b0975fa00d588fea494a987c39ea9f2dabcb96","date":1508141398,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#fetchClusterState(SolrClient,String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#fetchClusterState(SolrClient,String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    if (collection != null) {\n      znodeVersion =  (int)((Map<String, Object>)(collectionsMap).get(collection)).get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    if (clusterProperties != null) {\n      NamedList properties = (NamedList) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties.asMap(10));\n      }\n    }\n    return cs;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap = Collections.singletonMap(collection,\n        ((NamedList) cluster.get(\"collections\")).get(collection));\n    int znodeVersion = (int)((Map<String, Object>)(collectionsMap).get(collection)).get(\"znodeVersion\");\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":["349f6da2465a17ce3610314b5d24adcd2f8bb3fb","5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a64b273d51a6540272668680ece9f8b686ff0004":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["095183bbba1ca16181a207a7d4d1c394573aaf39"],"095183bbba1ca16181a207a7d4d1c394573aaf39":["a64b273d51a6540272668680ece9f8b686ff0004"],"f0b0975fa00d588fea494a987c39ea9f2dabcb96":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b0975fa00d588fea494a987c39ea9f2dabcb96"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a64b273d51a6540272668680ece9f8b686ff0004":["095183bbba1ca16181a207a7d4d1c394573aaf39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["f0b0975fa00d588fea494a987c39ea9f2dabcb96"],"095183bbba1ca16181a207a7d4d1c394573aaf39":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"f0b0975fa00d588fea494a987c39ea9f2dabcb96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}