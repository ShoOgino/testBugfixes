{"path":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#testMultipleSearchResults().mjava","commits":[{"id":"bdac0dff04219451c7511d62225080a93a0181ea","date":1451212020,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#testMultipleSearchResults().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultipleSearchResults() throws Exception {\n\n    // Three documents with different numbers of values for a field\n    assertU(adoc(\"id\", \"myid1\", \"test_is_dvo\", \"101\", \"test_is_dvo\", \"102\", \"test_is_dvo\", \"103\"));\n    assertU(adoc(\"id\", \"myid2\", \"test_is_dvo\", \"201\", \"test_is_dvo\", \"202\"));\n    assertU(adoc(\"id\", \"myid3\", \"test_is_dvo\", \"301\", \"test_is_dvo\", \"302\",\n        \"test_is_dvo\", \"303\", \"test_is_dvo\", \"304\"));\n\n    // Multivalued and singly valued fields in the same document\n    assertU(adoc(\"id\", \"myid4\", \"test_s_dvo\", \"hello\", \"test_is_dvo\", \"401\", \"test_is_dvo\", \"402\"));\n\n    // Test a field which has useDocValuesAsStored=false\n    assertU(adoc(\"id\", \"myid5\", \"nonstored_dv_str\", \"dont see me\"));\n    assertU(adoc(\"id\", \"myid6\", \"nonstored_dv_str\", \"dont see me\", \"test_s_dvo\", \"hello\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:myid*\", \"fl\", \"*\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid1','test_is_dvo':[101,102,103]},\"\n            + \"{'id':'myid2','test_is_dvo':[201,202]},\"\n            + \"{'id':'myid3','test_is_dvo':[301,302,303,304]},\"\n            + \"{'id':'myid4','test_s_dvo':'hello','test_is_dvo':[401,402]},\"\n            + \"{'id':'myid5'},\"\n            + \"{'id':'myid6','test_s_dvo':'hello'}\"\n            + \"]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5803de0082beb9ca1a9c7be4a0c895f92f30be3a","date":1491842887,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#testMultipleSearchResults().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#testMultipleSearchResults().mjava","sourceNew":"  @Test\n  public void testMultipleSearchResults() throws Exception {\n    // Three documents with different numbers of values for a field\n    assertU(adoc(\"id\", \"myid1\", \"test_is_dvo\", \"101\", \"test_is_dvo\", \"102\", \"test_is_dvo\", \"103\"));\n    assertU(adoc(\"id\", \"myid2\", \"test_is_dvo\", \"201\", \"test_is_dvo\", \"202\"));\n    assertU(adoc(\"id\", \"myid3\", \"test_is_dvo\", \"301\", \"test_is_dvo\", \"302\",\n        \"test_is_dvo\", \"303\", \"test_is_dvo\", \"304\"));\n\n    // Multivalued and singly valued fields in the same document\n    assertU(adoc(\"id\", \"myid4\", \"test_s_dvo\", \"hello\", \"test_is_dvo\", \"401\", \"test_is_dvo\", \"402\"));\n\n    // Test a field which has useDocValuesAsStored=false\n    assertU(adoc(\"id\", \"myid5\", \"nonstored_dv_str\", \"dont see me\"));\n    assertU(adoc(\"id\", \"myid6\", \"nonstored_dv_str\", \"dont see me\", \"test_s_dvo\", \"hello\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:myid*\", \"fl\", \"*\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid1','test_is_dvo':[101,102,103]},\"\n            + \"{'id':'myid2','test_is_dvo':[201,202]},\"\n            + \"{'id':'myid3','test_is_dvo':[301,302,303,304]},\"\n            + \"{'id':'myid4','test_s_dvo':'hello','test_is_dvo':[401,402]},\"\n            + \"{'id':'myid5'},\"\n            + \"{'id':'myid6','test_s_dvo':'hello'}\"\n            + \"]\");\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleSearchResults() throws Exception {\n\n    // Three documents with different numbers of values for a field\n    assertU(adoc(\"id\", \"myid1\", \"test_is_dvo\", \"101\", \"test_is_dvo\", \"102\", \"test_is_dvo\", \"103\"));\n    assertU(adoc(\"id\", \"myid2\", \"test_is_dvo\", \"201\", \"test_is_dvo\", \"202\"));\n    assertU(adoc(\"id\", \"myid3\", \"test_is_dvo\", \"301\", \"test_is_dvo\", \"302\",\n        \"test_is_dvo\", \"303\", \"test_is_dvo\", \"304\"));\n\n    // Multivalued and singly valued fields in the same document\n    assertU(adoc(\"id\", \"myid4\", \"test_s_dvo\", \"hello\", \"test_is_dvo\", \"401\", \"test_is_dvo\", \"402\"));\n\n    // Test a field which has useDocValuesAsStored=false\n    assertU(adoc(\"id\", \"myid5\", \"nonstored_dv_str\", \"dont see me\"));\n    assertU(adoc(\"id\", \"myid6\", \"nonstored_dv_str\", \"dont see me\", \"test_s_dvo\", \"hello\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:myid*\", \"fl\", \"*\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid1','test_is_dvo':[101,102,103]},\"\n            + \"{'id':'myid2','test_is_dvo':[201,202]},\"\n            + \"{'id':'myid3','test_is_dvo':[301,302,303,304]},\"\n            + \"{'id':'myid4','test_s_dvo':'hello','test_is_dvo':[401,402]},\"\n            + \"{'id':'myid5'},\"\n            + \"{'id':'myid6','test_s_dvo':'hello'}\"\n            + \"]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#testMultipleSearchResults().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored#testMultipleSearchResults().mjava","sourceNew":"  @Test\n  public void testMultipleSearchResults() throws Exception {\n    // Three documents with different numbers of values for a field\n    assertU(adoc(\"id\", \"myid1\", \"test_is_dvo\", \"101\", \"test_is_dvo\", \"102\", \"test_is_dvo\", \"103\"));\n    assertU(adoc(\"id\", \"myid2\", \"test_is_dvo\", \"201\", \"test_is_dvo\", \"202\"));\n    assertU(adoc(\"id\", \"myid3\", \"test_is_dvo\", \"301\", \"test_is_dvo\", \"302\",\n        \"test_is_dvo\", \"303\", \"test_is_dvo\", \"304\"));\n\n    // Multivalued and singly valued fields in the same document\n    assertU(adoc(\"id\", \"myid4\", \"test_s_dvo\", \"hello\", \"test_is_dvo\", \"401\", \"test_is_dvo\", \"402\"));\n\n    // Test a field which has useDocValuesAsStored=false\n    assertU(adoc(\"id\", \"myid5\", \"nonstored_dv_str\", \"dont see me\"));\n    assertU(adoc(\"id\", \"myid6\", \"nonstored_dv_str\", \"dont see me\", \"test_s_dvo\", \"hello\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:myid*\", \"fl\", \"*\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid1','test_is_dvo':[101,102,103]},\"\n            + \"{'id':'myid2','test_is_dvo':[201,202]},\"\n            + \"{'id':'myid3','test_is_dvo':[301,302,303,304]},\"\n            + \"{'id':'myid4','test_s_dvo':'hello','test_is_dvo':[401,402]},\"\n            + \"{'id':'myid5'},\"\n            + \"{'id':'myid6','test_s_dvo':'hello'}\"\n            + \"]\");\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleSearchResults() throws Exception {\n\n    // Three documents with different numbers of values for a field\n    assertU(adoc(\"id\", \"myid1\", \"test_is_dvo\", \"101\", \"test_is_dvo\", \"102\", \"test_is_dvo\", \"103\"));\n    assertU(adoc(\"id\", \"myid2\", \"test_is_dvo\", \"201\", \"test_is_dvo\", \"202\"));\n    assertU(adoc(\"id\", \"myid3\", \"test_is_dvo\", \"301\", \"test_is_dvo\", \"302\",\n        \"test_is_dvo\", \"303\", \"test_is_dvo\", \"304\"));\n\n    // Multivalued and singly valued fields in the same document\n    assertU(adoc(\"id\", \"myid4\", \"test_s_dvo\", \"hello\", \"test_is_dvo\", \"401\", \"test_is_dvo\", \"402\"));\n\n    // Test a field which has useDocValuesAsStored=false\n    assertU(adoc(\"id\", \"myid5\", \"nonstored_dv_str\", \"dont see me\"));\n    assertU(adoc(\"id\", \"myid6\", \"nonstored_dv_str\", \"dont see me\", \"test_s_dvo\", \"hello\"));\n    assertU(commit());\n\n    assertJQ(req(\"q\", \"id:myid*\", \"fl\", \"*\"),\n        \"/response/docs==[\"\n            + \"{'id':'myid1','test_is_dvo':[101,102,103]},\"\n            + \"{'id':'myid2','test_is_dvo':[201,202]},\"\n            + \"{'id':'myid3','test_is_dvo':[301,302,303,304]},\"\n            + \"{'id':'myid4','test_s_dvo':'hello','test_is_dvo':[401,402]},\"\n            + \"{'id':'myid5'},\"\n            + \"{'id':'myid6','test_s_dvo':'hello'}\"\n            + \"]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["bdac0dff04219451c7511d62225080a93a0181ea"],"5803de0082beb9ca1a9c7be4a0c895f92f30be3a":["bdac0dff04219451c7511d62225080a93a0181ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bdac0dff04219451c7511d62225080a93a0181ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5803de0082beb9ca1a9c7be4a0c895f92f30be3a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"5803de0082beb9ca1a9c7be4a0c895f92f30be3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bdac0dff04219451c7511d62225080a93a0181ea"],"bdac0dff04219451c7511d62225080a93a0181ea":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5803de0082beb9ca1a9c7be4a0c895f92f30be3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}