{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MemsetEvaluator#evaluate(Tuple).mjava","commits":[{"id":"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc","date":1524237108,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MemsetEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n\n    /*\n    * Read all the tuples from the underlying stream and\n    * load specific fields into arrays. Then return\n    * a map with the variables names bound to the arrays.\n    */\n\n    try {\n      in.setStreamContext(streamContext);\n      in.open();\n      Map<String, List<Number>> arrays = new HashMap();\n\n      //Initialize the variables\n      for(String var : vars) {\n        if(size > -1) {\n          arrays.put(var, new ArrayList(size));\n        } else {\n          arrays.put(var, new ArrayList());\n        }\n      }\n\n      int count = 0;\n\n      while (true) {\n        Tuple t = in.read();\n        if (t.EOF) {\n          break;\n        }\n\n        if(size == -1 || count < size) {\n          for (int i = 0; i < cols.length; i++) {\n            String col = cols[i];\n            String var = vars[i];\n            List<Number> array = arrays.get(var);\n            Number number = (Number) t.get(col);\n            array.add(number);\n          }\n        }\n        ++count;\n      }\n\n      return arrays;\n    } catch (UncheckedIOException e) {\n      throw e.getCause();\n    } finally {\n      in.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MemsetEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MemsetEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n\n    /*\n    * Read all the tuples from the underlying stream and\n    * load specific fields into arrays. Then return\n    * a map with the variables names bound to the arrays.\n    */\n\n    try {\n      in.setStreamContext(streamContext);\n      in.open();\n      Map<String, List<Number>> arrays = new HashMap<>();\n\n      //Initialize the variables\n      for(String var : vars) {\n        if(size > -1) {\n          arrays.put(var, new ArrayList<>(size));\n        } else {\n          arrays.put(var, new ArrayList<>());\n        }\n      }\n\n      int count = 0;\n\n      while (true) {\n        Tuple t = in.read();\n        if (t.EOF) {\n          break;\n        }\n\n        if(size == -1 || count < size) {\n          for (int i = 0; i < cols.length; i++) {\n            String col = cols[i];\n            String var = vars[i];\n            List<Number> array = arrays.get(var);\n            Number number = (Number) t.get(col);\n            array.add(number);\n          }\n        }\n        ++count;\n      }\n\n      return arrays;\n    } catch (UncheckedIOException e) {\n      throw e.getCause();\n    } finally {\n      in.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object evaluate(Tuple tuple) throws IOException {\n\n    /*\n    * Read all the tuples from the underlying stream and\n    * load specific fields into arrays. Then return\n    * a map with the variables names bound to the arrays.\n    */\n\n    try {\n      in.setStreamContext(streamContext);\n      in.open();\n      Map<String, List<Number>> arrays = new HashMap();\n\n      //Initialize the variables\n      for(String var : vars) {\n        if(size > -1) {\n          arrays.put(var, new ArrayList(size));\n        } else {\n          arrays.put(var, new ArrayList());\n        }\n      }\n\n      int count = 0;\n\n      while (true) {\n        Tuple t = in.read();\n        if (t.EOF) {\n          break;\n        }\n\n        if(size == -1 || count < size) {\n          for (int i = 0; i < cols.length; i++) {\n            String col = cols[i];\n            String var = vars[i];\n            List<Number> array = arrays.get(var);\n            Number number = (Number) t.get(col);\n            array.add(number);\n          }\n        }\n        ++count;\n      }\n\n      return arrays;\n    } catch (UncheckedIOException e) {\n      throw e.getCause();\n    } finally {\n      in.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["0e70d554d88e3aea4d497d35dc15dbb191a5d2bc"],"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e70d554d88e3aea4d497d35dc15dbb191a5d2bc":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e70d554d88e3aea4d497d35dc15dbb191a5d2bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}