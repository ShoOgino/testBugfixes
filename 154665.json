{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insert(char,char[],int,char).mjava","commits":[{"id":"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a","date":1210940570,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insert(char,char[],int,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The actual insertion function, recursive version.\n   */\n  private char insert(char p, char[] key, int start, char val) {\n    int len = strlen(key, start);\n    if (p == 0) {\n      // this means there is no branch, this node will start a new branch.\n      // Instead of doing that, we store the key somewhere else and create\n      // only one node with a pointer to the key\n      p = freenode++;\n      eq[p] = val; // holds data\n      length++;\n      hi[p] = 0;\n      if (len > 0) {\n        sc[p] = 0xFFFF; // indicates branch is compressed\n        lo[p] = (char) kv.alloc(len + 1); // use 'lo' to hold pointer to key\n        strcpy(kv.getArray(), lo[p], key, start);\n      } else {\n        sc[p] = 0;\n        lo[p] = 0;\n      }\n      return p;\n    }\n\n    if (sc[p] == 0xFFFF) {\n      // branch is compressed: need to decompress\n      // this will generate garbage in the external key array\n      // but we can do some garbage collection later\n      char pp = freenode++;\n      lo[pp] = lo[p]; // previous pointer to key\n      eq[pp] = eq[p]; // previous pointer to data\n      lo[p] = 0;\n      if (len > 0) {\n        sc[p] = kv.get(lo[pp]);\n        eq[p] = pp;\n        lo[pp]++;\n        if (kv.get(lo[pp]) == 0) {\n          // key completly decompressed leaving garbage in key array\n          lo[pp] = 0;\n          sc[pp] = 0;\n          hi[pp] = 0;\n        } else {\n          // we only got first char of key, rest is still there\n          sc[pp] = 0xFFFF;\n        }\n      } else {\n        // In this case we can save a node by swapping the new node\n        // with the compressed node\n        sc[pp] = 0xFFFF;\n        hi[p] = pp;\n        sc[p] = 0;\n        eq[p] = val;\n        length++;\n        return p;\n      }\n    }\n    char s = key[start];\n    if (s < sc[p]) {\n      lo[p] = insert(lo[p], key, start, val);\n    } else if (s == sc[p]) {\n      if (s != 0) {\n        eq[p] = insert(eq[p], key, start + 1, val);\n      } else {\n        // key already in tree, overwrite data\n        eq[p] = val;\n      }\n    } else {\n      hi[p] = insert(hi[p], key, start, val);\n    }\n    return p;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insert(char,char[],int,char).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#insert(char,char[],int,char).mjava","sourceNew":"  /**\n   * The actual insertion function, recursive version.\n   */\n  private char insert(char p, char[] key, int start, char val) {\n    int len = strlen(key, start);\n    if (p == 0) {\n      // this means there is no branch, this node will start a new branch.\n      // Instead of doing that, we store the key somewhere else and create\n      // only one node with a pointer to the key\n      p = freenode++;\n      eq[p] = val; // holds data\n      length++;\n      hi[p] = 0;\n      if (len > 0) {\n        sc[p] = 0xFFFF; // indicates branch is compressed\n        lo[p] = (char) kv.alloc(len + 1); // use 'lo' to hold pointer to key\n        strcpy(kv.getArray(), lo[p], key, start);\n      } else {\n        sc[p] = 0;\n        lo[p] = 0;\n      }\n      return p;\n    }\n\n    if (sc[p] == 0xFFFF) {\n      // branch is compressed: need to decompress\n      // this will generate garbage in the external key array\n      // but we can do some garbage collection later\n      char pp = freenode++;\n      lo[pp] = lo[p]; // previous pointer to key\n      eq[pp] = eq[p]; // previous pointer to data\n      lo[p] = 0;\n      if (len > 0) {\n        sc[p] = kv.get(lo[pp]);\n        eq[p] = pp;\n        lo[pp]++;\n        if (kv.get(lo[pp]) == 0) {\n          // key completly decompressed leaving garbage in key array\n          lo[pp] = 0;\n          sc[pp] = 0;\n          hi[pp] = 0;\n        } else {\n          // we only got first char of key, rest is still there\n          sc[pp] = 0xFFFF;\n        }\n      } else {\n        // In this case we can save a node by swapping the new node\n        // with the compressed node\n        sc[pp] = 0xFFFF;\n        hi[p] = pp;\n        sc[p] = 0;\n        eq[p] = val;\n        length++;\n        return p;\n      }\n    }\n    char s = key[start];\n    if (s < sc[p]) {\n      lo[p] = insert(lo[p], key, start, val);\n    } else if (s == sc[p]) {\n      if (s != 0) {\n        eq[p] = insert(eq[p], key, start + 1, val);\n      } else {\n        // key already in tree, overwrite data\n        eq[p] = val;\n      }\n    } else {\n      hi[p] = insert(hi[p], key, start, val);\n    }\n    return p;\n  }\n\n","sourceOld":"  /**\n   * The actual insertion function, recursive version.\n   */\n  private char insert(char p, char[] key, int start, char val) {\n    int len = strlen(key, start);\n    if (p == 0) {\n      // this means there is no branch, this node will start a new branch.\n      // Instead of doing that, we store the key somewhere else and create\n      // only one node with a pointer to the key\n      p = freenode++;\n      eq[p] = val; // holds data\n      length++;\n      hi[p] = 0;\n      if (len > 0) {\n        sc[p] = 0xFFFF; // indicates branch is compressed\n        lo[p] = (char) kv.alloc(len + 1); // use 'lo' to hold pointer to key\n        strcpy(kv.getArray(), lo[p], key, start);\n      } else {\n        sc[p] = 0;\n        lo[p] = 0;\n      }\n      return p;\n    }\n\n    if (sc[p] == 0xFFFF) {\n      // branch is compressed: need to decompress\n      // this will generate garbage in the external key array\n      // but we can do some garbage collection later\n      char pp = freenode++;\n      lo[pp] = lo[p]; // previous pointer to key\n      eq[pp] = eq[p]; // previous pointer to data\n      lo[p] = 0;\n      if (len > 0) {\n        sc[p] = kv.get(lo[pp]);\n        eq[p] = pp;\n        lo[pp]++;\n        if (kv.get(lo[pp]) == 0) {\n          // key completly decompressed leaving garbage in key array\n          lo[pp] = 0;\n          sc[pp] = 0;\n          hi[pp] = 0;\n        } else {\n          // we only got first char of key, rest is still there\n          sc[pp] = 0xFFFF;\n        }\n      } else {\n        // In this case we can save a node by swapping the new node\n        // with the compressed node\n        sc[pp] = 0xFFFF;\n        hi[p] = pp;\n        sc[p] = 0;\n        eq[p] = val;\n        length++;\n        return p;\n      }\n    }\n    char s = key[start];\n    if (s < sc[p]) {\n      lo[p] = insert(lo[p], key, start, val);\n    } else if (s == sc[p]) {\n      if (s != 0) {\n        eq[p] = insert(eq[p], key, start + 1, val);\n      } else {\n        // key already in tree, overwrite data\n        eq[p] = val;\n      }\n    } else {\n      hi[p] = insert(hi[p], key, start, val);\n    }\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}