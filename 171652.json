{"path":"solr/core/src/java/org/apache/solr/response/JSONWriter#writeStr(String,String,boolean).mjava","commits":[{"id":"6de1208964ea5a0edc0b215f9707ceb7750740ae","date":1528551353,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter#writeStr(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch < '\\u2028') || ch == ' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': // fallthrough\n          case '\\u2029':\n            unicodeEscape(writer,ch);\n            break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonTextWriter#writeStr(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter#writeStr(String,String,boolean).mjava","sourceNew":"  default void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      _writeChar('\"');\n\n      for (int i = 0; i < val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch < '\\u2028') || ch == ' ') { // fast path\n          _writeChar(ch);\n          continue;\n        }\n        switch (ch) {\n          case '\"':\n          case '\\\\':\n            _writeChar('\\\\');\n            _writeChar(ch);\n            break;\n          case '\\r':\n            _writeChar('\\\\');\n            _writeChar('r');\n            break;\n          case '\\n':\n            _writeChar('\\\\');\n            _writeChar('n');\n            break;\n          case '\\t':\n            _writeChar('\\\\');\n            _writeChar('t');\n            break;\n          case '\\b':\n            _writeChar('\\\\');\n            _writeChar('b');\n            break;\n          case '\\f':\n            _writeChar('\\\\');\n            _writeChar('f');\n            break;\n          case '\\u2028': // fallthrough\n          case '\\u2029':\n            unicodeEscape(getWriter(), ch);\n            break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(getWriter(), ch);\n            } else {\n              _writeChar(ch);\n            }\n          }\n        }\n      }\n\n      _writeChar('\"');\n    } else {\n      _writeChar('\"');\n      _writeStr(val);\n      _writeChar('\"');\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\' && ch < '\\u2028') || ch == ' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          case '\\u2028': // fallthrough\n          case '\\u2029':\n            unicodeEscape(writer,ch);\n            break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"26dad91f15019714a045b4d8c5f40162b2058b54":["6de1208964ea5a0edc0b215f9707ceb7750740ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6de1208964ea5a0edc0b215f9707ceb7750740ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26dad91f15019714a045b4d8c5f40162b2058b54"]},"commit2Childs":{"26dad91f15019714a045b4d8c5f40162b2058b54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6de1208964ea5a0edc0b215f9707ceb7750740ae"],"6de1208964ea5a0edc0b215f9707ceb7750740ae":["26dad91f15019714a045b4d8c5f40162b2058b54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}