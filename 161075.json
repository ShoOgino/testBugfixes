{"path":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","commits":[{"id":"71130cfca9e17db547b4f78cce4b0ad0af72f638","date":1362280541,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void run() {\n    verbose(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    String core = OCCST.getRandomCore();\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      core = OCCST.getRandomCore();\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          server.setBaseURL(baseUrl + core);\n          UpdateResponse response = server.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            verbose(\"Failed to index a document with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n          }\n          server.commit(true, true);\n          Thread.sleep(100L); // Let's not go crazy here.\n          break; // try loop.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            fail(\"Could not reach server while querying for three tries, quitting \" + e.getMessage());\n          } else {\n            verbose(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(100);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    verbose(\"Leaving indexing thread \" + getId());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a3e922257586797a261dd44101d4044e1d0487b","date":1362322627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","sourceNew":"  @Override\n  public void run() {\n    verbose(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    String core = OCCST.getRandomCore();\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      core = OCCST.getRandomCore();\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        UpdateResponse response = new UpdateResponse(); // Just to keep a possible NPE from happening\n        try {\n          server.setBaseURL(baseUrl + core);\n          response = server.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            verbose(\"Failed to index a document with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n          break; // try loop.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            fail(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage() + \" \" + response.toString());\n          } else {\n            verbose(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage()\n                + \" \" + response.toString());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    verbose(\"Leaving indexing thread \" + getId());\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    verbose(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    String core = OCCST.getRandomCore();\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      core = OCCST.getRandomCore();\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          server.setBaseURL(baseUrl + core);\n          UpdateResponse response = server.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            verbose(\"Failed to index a document with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n          }\n          server.commit(true, true);\n          Thread.sleep(100L); // Let's not go crazy here.\n          break; // try loop.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            fail(\"Could not reach server while querying for three tries, quitting \" + e.getMessage());\n          } else {\n            verbose(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(100);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    verbose(\"Leaving indexing thread \" + getId());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4185e899497a40e256a0ae02a47da9e2872d79f2","date":1362408234,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","sourceNew":"  @Override\n  public void run() {\n    verbose(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore();\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          server.setBaseURL(baseUrl + core);\n          UpdateResponse response = server.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            verbose(\"Failed to index a document with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n          break; // try loop.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          log.error(\"EOE dumping stack (indexer)\", e);\n          if (idx == 2) {\n            fail(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            verbose(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    verbose(\"Leaving indexing thread \" + getId());\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    verbose(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    String core = OCCST.getRandomCore();\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      core = OCCST.getRandomCore();\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        UpdateResponse response = new UpdateResponse(); // Just to keep a possible NPE from happening\n        try {\n          server.setBaseURL(baseUrl + core);\n          response = server.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            verbose(\"Failed to index a document with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n          break; // try loop.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            fail(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage() + \" \" + response.toString());\n          } else {\n            verbose(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage()\n                + \" \" + response.toString());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    verbose(\"Leaving indexing thread \" + getId());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b845d126ad5eada643243d20a3cc2c2ff320ffef","date":1362593560,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","sourceNew":"  @Override\n  public void run() {\n    verbose(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore();\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          server.setBaseURL(baseUrl + core);\n          UpdateResponse response = server.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            verbose(\"Failed to index a document with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n          break; // try loop.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            fail(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            verbose(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    verbose(\"Leaving indexing thread \" + getId());\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    verbose(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore();\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          server.setBaseURL(baseUrl + core);\n          UpdateResponse response = server.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            verbose(\"Failed to index a document with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n          break; // try loop.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          log.error(\"EOE dumping stack (indexer)\", e);\n          if (idx == 2) {\n            fail(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            verbose(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    verbose(\"Leaving indexing thread \" + getId());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e","date":1362676527,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","sourceNew":"  @Override\n  public void run() {\n    SolrTestCaseJ4.log.info(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore();\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          server.setBaseURL(baseUrl + core);\n          UpdateResponse response = server.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            SolrTestCaseJ4.log.warn(\"Failed to index a document to core \" + core + \" with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n            break; // retry loop.\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            SolrTestCaseJ4.log.warn(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            SolrTestCaseJ4.log.info(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    SolrTestCaseJ4.log.info(\"Leaving indexing thread \" + getId());\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    verbose(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore();\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          server.setBaseURL(baseUrl + core);\n          UpdateResponse response = server.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            verbose(\"Failed to index a document with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n          break; // try loop.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            fail(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            verbose(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    verbose(\"Leaving indexing thread \" + getId());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"766227a9d9a3552cabc928671006564df47e6d6f","date":1363176788,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","sourceNew":"  @Override\n  public void run() {\n    SolrTestCaseJ4.log.info(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore(random);\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          server.setBaseURL(baseUrl + core);\n          UpdateResponse response = server.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            SolrTestCaseJ4.log.warn(\"Failed to index a document to core \" + core + \" with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n            break; // retry loop.\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            SolrTestCaseJ4.log.warn(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            SolrTestCaseJ4.log.info(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    SolrTestCaseJ4.log.info(\"Leaving indexing thread \" + getId());\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    SolrTestCaseJ4.log.info(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore();\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          server.setBaseURL(baseUrl + core);\n          UpdateResponse response = server.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            SolrTestCaseJ4.log.warn(\"Failed to index a document to core \" + core + \" with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n            break; // retry loop.\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            SolrTestCaseJ4.log.warn(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            SolrTestCaseJ4.log.info(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    SolrTestCaseJ4.log.info(\"Leaving indexing thread \" + getId());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","sourceNew":"  @Override\n  public void run() {\n    SolrTestCaseJ4.log.info(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore(random);\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          client.setBaseURL(baseUrl + core);\n          UpdateResponse response = client.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            SolrTestCaseJ4.log.warn(\"Failed to index a document to core \" + core + \" with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n            break; // retry loop.\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            SolrTestCaseJ4.log.warn(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            SolrTestCaseJ4.log.info(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    SolrTestCaseJ4.log.info(\"Leaving indexing thread \" + getId());\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    SolrTestCaseJ4.log.info(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore(random);\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          server.setBaseURL(baseUrl + core);\n          UpdateResponse response = server.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            SolrTestCaseJ4.log.warn(\"Failed to index a document to core \" + core + \" with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n            break; // retry loop.\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            SolrTestCaseJ4.log.warn(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            SolrTestCaseJ4.log.info(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    SolrTestCaseJ4.log.info(\"Leaving indexing thread \" + getId());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","sourceNew":"  @Override\n  public void run() {\n    SolrTestCaseJ4.log.info(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (! Indexer.stopTimeout.hasTimedOut()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore(random);\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          client.setBaseURL(baseUrl + core);\n          UpdateResponse response = client.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            SolrTestCaseJ4.log.warn(\"Failed to index a document to core \" + core + \" with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n            break; // retry loop.\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            SolrTestCaseJ4.log.warn(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            SolrTestCaseJ4.log.info(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    SolrTestCaseJ4.log.info(\"Leaving indexing thread \" + getId());\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    SolrTestCaseJ4.log.info(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (Indexer.stopTime > System.currentTimeMillis()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore(random);\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          client.setBaseURL(baseUrl + core);\n          UpdateResponse response = client.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            SolrTestCaseJ4.log.warn(\"Failed to index a document to core \" + core + \" with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n            break; // retry loop.\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            SolrTestCaseJ4.log.warn(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            SolrTestCaseJ4.log.info(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    SolrTestCaseJ4.log.info(\"Leaving indexing thread \" + getId());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","sourceNew":"  @Override\n  public void run() {\n    log.info(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (! Indexer.stopTimeout.hasTimedOut()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore(random);\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          client.setBaseURL(baseUrl + core);\n          UpdateResponse response = client.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            log.warn(\"Failed to index a document to core \" + core + \" with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n            break; // retry loop.\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            log.warn(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            log.info(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    log.info(\"Leaving indexing thread \" + getId());\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    SolrTestCaseJ4.log.info(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (! Indexer.stopTimeout.hasTimedOut()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore(random);\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          client.setBaseURL(baseUrl + core);\n          UpdateResponse response = client.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            SolrTestCaseJ4.log.warn(\"Failed to index a document to core \" + core + \" with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n            break; // retry loop.\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            SolrTestCaseJ4.log.warn(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            SolrTestCaseJ4.log.info(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    SolrTestCaseJ4.log.info(\"Leaving indexing thread \" + getId());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6ad96fd05c63ec22c1203121a27e0a1adce4025","date":1552081953,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/OneIndexer[OpenCloseCoreStressTest]#run().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void run() {\n    log.info(String.format(Locale.ROOT, \"Starting indexing thread: \" + getId()));\n\n    while (! Indexer.stopTimeout.hasTimedOut()) {\n      int myId = Indexer.idUnique.incrementAndGet();\n      Indexer.docsThisCycle.incrementAndGet();\n      String core = OCCST.getRandomCore(random);\n      OCCST.incrementCoreCount(core);\n      Indexer.progress(myId, core);\n      for (int idx = 0; idx < 3; ++idx) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id\" + Integer.toString(myId));\n        doc.addField(\"text\", \"text \" + Integer.toString(myId));\n        UpdateRequest update = new UpdateRequest();\n        update.add(doc);\n\n        try {\n          client.setBaseURL(baseUrl + core);\n          UpdateResponse response = client.add(doc, OpenCloseCoreStressTest.COMMIT_WITHIN);\n          if (response.getStatus() != 0) {\n            log.warn(\"Failed to index a document to core \" + core + \" with status \" + response.getStatus());\n          } else {\n            Indexer.qTimesAccum.addAndGet(response.getQTime());\n            Indexer.updateCounts.incrementAndGet();\n            break; // retry loop.\n          }\n          Thread.sleep(100L); // Let's not go crazy here.\n        } catch (Exception e) {\n          if (e instanceof InterruptedException) return;\n          Indexer.errors.incrementAndGet();\n          if (idx == 2) {\n            log.warn(\"Could not reach server while indexing for three tries, quitting \" + e.getMessage());\n          } else {\n            log.info(\"Indexing thread \" + Thread.currentThread().getId() + \" swallowed one exception \" + e.getMessage());\n            try {\n              Thread.sleep(500);\n            } catch (InterruptedException tex) {\n              return;\n            }\n          }\n        }\n      }\n    }\n    log.info(\"Leaving indexing thread \" + getId());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a3e922257586797a261dd44101d4044e1d0487b":["71130cfca9e17db547b4f78cce4b0ad0af72f638"],"766227a9d9a3552cabc928671006564df47e6d6f":["e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e"],"4185e899497a40e256a0ae02a47da9e2872d79f2":["5a3e922257586797a261dd44101d4044e1d0487b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71130cfca9e17db547b4f78cce4b0ad0af72f638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["766227a9d9a3552cabc928671006564df47e6d6f"],"e6ad96fd05c63ec22c1203121a27e0a1adce4025":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e":["b845d126ad5eada643243d20a3cc2c2ff320ffef"],"b845d126ad5eada643243d20a3cc2c2ff320ffef":["4185e899497a40e256a0ae02a47da9e2872d79f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6ad96fd05c63ec22c1203121a27e0a1adce4025"]},"commit2Childs":{"5a3e922257586797a261dd44101d4044e1d0487b":["4185e899497a40e256a0ae02a47da9e2872d79f2"],"766227a9d9a3552cabc928671006564df47e6d6f":["bafca15d8e408346a67f4282ad1143b88023893b"],"4185e899497a40e256a0ae02a47da9e2872d79f2":["b845d126ad5eada643243d20a3cc2c2ff320ffef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71130cfca9e17db547b4f78cce4b0ad0af72f638"],"71130cfca9e17db547b4f78cce4b0ad0af72f638":["5a3e922257586797a261dd44101d4044e1d0487b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"bafca15d8e408346a67f4282ad1143b88023893b":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"e6ad96fd05c63ec22c1203121a27e0a1adce4025":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["e6ad96fd05c63ec22c1203121a27e0a1adce4025"],"e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e":["766227a9d9a3552cabc928671006564df47e6d6f"],"b845d126ad5eada643243d20a3cc2c2ff320ffef":["e4fe02dffcf7ced367f3c6ba797e9c4035f3fd7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}