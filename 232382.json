{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootArcs().mjava","commits":[{"id":"3c7c5f2319949ba567dd867f78f86ea8ff0f1476","date":1375469665,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootArcs().mjava","pathOld":"/dev/null","sourceNew":"  private boolean assertRootArcs() {\n    assert cachedRootArcs != null;\n    assert assertingCachedRootArcs != null;\n    for (int i = 0; i < cachedRootArcs.length; i++) {\n      final Arc<T> root = cachedRootArcs[i];\n      final Arc<T> asserting = assertingCachedRootArcs[i];\n      if (root != null) { \n        assert root.arcIdx == asserting.arcIdx;\n        assert root.bytesPerArc == asserting.bytesPerArc;\n        assert root.flags == asserting.flags;\n        assert root.label == asserting.label;\n        assert root.nextArc == asserting.nextArc;\n        assert root.nextFinalOutput.equals(asserting.nextFinalOutput);\n        assert root.node == asserting.node;\n        assert root.numArcs == asserting.numArcs;\n        assert root.output.equals(asserting.output);\n        assert root.posArcsStart == asserting.posArcsStart;\n        assert root.target == asserting.target;\n      } else {\n        assert root == null && asserting == null;\n      } \n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootArcs().mjava","pathOld":"/dev/null","sourceNew":"  private boolean assertRootArcs() {\n    assert cachedRootArcs != null;\n    assert assertingCachedRootArcs != null;\n    for (int i = 0; i < cachedRootArcs.length; i++) {\n      final Arc<T> root = cachedRootArcs[i];\n      final Arc<T> asserting = assertingCachedRootArcs[i];\n      if (root != null) { \n        assert root.arcIdx == asserting.arcIdx;\n        assert root.bytesPerArc == asserting.bytesPerArc;\n        assert root.flags == asserting.flags;\n        assert root.label == asserting.label;\n        assert root.nextArc == asserting.nextArc;\n        assert root.nextFinalOutput.equals(asserting.nextFinalOutput);\n        assert root.node == asserting.node;\n        assert root.numArcs == asserting.numArcs;\n        assert root.output.equals(asserting.output);\n        assert root.posArcsStart == asserting.posArcsStart;\n        assert root.target == asserting.target;\n      } else {\n        assert root == null && asserting == null;\n      } \n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f32ed90e12610550e1363aea43afe3d6e292cf9","date":1418230105,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootArcs().mjava","sourceNew":null,"sourceOld":"  private boolean assertRootArcs() {\n    assert cachedRootArcs != null;\n    assert assertingCachedRootArcs != null;\n    for (int i = 0; i < cachedRootArcs.length; i++) {\n      final Arc<T> root = cachedRootArcs[i];\n      final Arc<T> asserting = assertingCachedRootArcs[i];\n      if (root != null) { \n        assert root.arcIdx == asserting.arcIdx;\n        assert root.bytesPerArc == asserting.bytesPerArc;\n        assert root.flags == asserting.flags;\n        assert root.label == asserting.label;\n        assert root.nextArc == asserting.nextArc;\n        assert root.nextFinalOutput.equals(asserting.nextFinalOutput);\n        assert root.node == asserting.node;\n        assert root.numArcs == asserting.numArcs;\n        assert root.output.equals(asserting.output);\n        assert root.posArcsStart == asserting.posArcsStart;\n        assert root.target == asserting.target;\n      } else {\n        assert root == null && asserting == null;\n      } \n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c7c5f2319949ba567dd867f78f86ea8ff0f1476":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"7f32ed90e12610550e1363aea43afe3d6e292cf9":["3c7c5f2319949ba567dd867f78f86ea8ff0f1476"]},"commit2Childs":{"3c7c5f2319949ba567dd867f78f86ea8ff0f1476":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c7c5f2319949ba567dd867f78f86ea8ff0f1476","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7f32ed90e12610550e1363aea43afe3d6e292cf9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}