{"path":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      if (solrUIMAConfiguration.isIgnoreErrors())\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString());\n      else{\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      if (solrUIMAConfiguration.isIgnoreErrors())\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString());\n      else{\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      if (solrUIMAConfiguration.isIgnoreErrors())\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString());\n      else{\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"715acd125b69f29831a701a06035e9716b69659f","date":1339106447,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString();\n      }\n      else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(debugString).toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2","date":1350024115,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n              .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString();\n      }\n      else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(debugString).toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString();\n      }\n      else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(debugString).toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6efad415dcdbcca7d440f909743e6e3152eeb6c0","date":1350055371,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n              .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString();\n      }\n      else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(debugString).toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString();\n      }\n      else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(debugString).toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n              .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString();\n      }\n      else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(debugString).toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString();\n      }\n      else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(debugString).toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n              .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = cmd.getReq().getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString();\n      }\n      else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(debugString).toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n              .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString();\n      }\n      else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(debugString).toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8b89d944e345b12f5e7f35159704a6b8fbb3975","date":1369726533,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n              .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = cmd.getReq().getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString();\n      }\n      else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(\"skip the text processing due to {}\",new StringBuilder()\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(debugString));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n              .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = cmd.getReq().getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString();\n      }\n      else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(debugString).toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7f0ce0fa58dfd65f8f8bf1e640cbeaafd227e76","date":1378365130,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* create a JCas which contain the text to analyze */\n          JCas jcas = pool.getJCas(0);\n          try {\n            /* process the text value */\n            processText(text, jcas);\n\n            UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(\n                solrInputDocument, jcas);\n            /* get field mapping from config */\n            Map<String,Map<String,MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                .getTypesFeaturesFieldsMapping();\n            /* map type features on fields */\n            for (Entry<String,Map<String,MapField>> entry : typesAndFeaturesFieldsMap\n                .entrySet()) {\n              uimaToSolrMapper.map(entry.getKey(), entry.getValue());\n            }\n          } finally {\n            pool.releaseJCas(jcas);\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if (logField == null) {\n        SchemaField uniqueKeyField = cmd.getReq().getSchema()\n            .getUniqueKeyField();\n        if (uniqueKeyField != null) {\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\"\n          : new StringBuilder(\". \")\n              .append(logField)\n              .append(\"=\")\n              .append(\n                  (String) cmd.getSolrInputDocument().getField(logField)\n                      .getValue()).append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\")\n            .append(text.substring(0, len)).append(\"...\\\"\").toString();\n      } else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(\n            \"skip the text processing due to {}\",\n            new StringBuilder().append(e.getLocalizedMessage())\n                .append(optionalFieldInfo).append(debugString));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, new StringBuilder(\n            \"processing error \").append(e.getLocalizedMessage())\n            .append(optionalFieldInfo).append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n              .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = cmd.getReq().getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString();\n      }\n      else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(\"skip the text processing due to {}\",new StringBuilder()\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(debugString));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":["0af81b6027da0f3c796972ca2012332d0ff38cbd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0af81b6027da0f3c796972ca2012332d0ff38cbd","date":1452499957,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* create a JCas which contain the text to analyze */\n          JCas jcas = pool.getJCas(0);\n          try {\n            /* process the text value */\n            processText(text, jcas);\n\n            UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(\n                solrInputDocument, jcas);\n            /* get field mapping from config */\n            Map<String,Map<String,MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                .getTypesFeaturesFieldsMapping();\n            /* map type features on fields */\n            for (Entry<String,Map<String,MapField>> entry : typesAndFeaturesFieldsMap\n                .entrySet()) {\n              uimaToSolrMapper.map(entry.getKey(), entry.getValue());\n            }\n          } finally {\n            pool.releaseJCas(jcas);\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if (logField == null) {\n        SchemaField uniqueKeyField = cmd.getReq().getSchema()\n            .getUniqueKeyField();\n        if (uniqueKeyField != null) {\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" : \". \" + logField + \"=\" + cmd.getSolrInputDocument().\n          getField(logField).getValue() + \", \";\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = \" text=\\\"\" + text.substring(0, len) + \"...\\\"\";\n      } else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(\n            \"skip the text processing due to {}\",\n            new StringBuilder().append(e.getLocalizedMessage())\n                .append(optionalFieldInfo).append(debugString));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"processing error \" + e.getLocalizedMessage() +\n            optionalFieldInfo + debugString, e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* create a JCas which contain the text to analyze */\n          JCas jcas = pool.getJCas(0);\n          try {\n            /* process the text value */\n            processText(text, jcas);\n\n            UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(\n                solrInputDocument, jcas);\n            /* get field mapping from config */\n            Map<String,Map<String,MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                .getTypesFeaturesFieldsMapping();\n            /* map type features on fields */\n            for (Entry<String,Map<String,MapField>> entry : typesAndFeaturesFieldsMap\n                .entrySet()) {\n              uimaToSolrMapper.map(entry.getKey(), entry.getValue());\n            }\n          } finally {\n            pool.releaseJCas(jcas);\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if (logField == null) {\n        SchemaField uniqueKeyField = cmd.getReq().getSchema()\n            .getUniqueKeyField();\n        if (uniqueKeyField != null) {\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\"\n          : new StringBuilder(\". \")\n              .append(logField)\n              .append(\"=\")\n              .append(\n                  (String) cmd.getSolrInputDocument().getField(logField)\n                      .getValue()).append(\", \").toString();\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = new StringBuilder(\" text=\\\"\")\n            .append(text.substring(0, len)).append(\"...\\\"\").toString();\n      } else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(\n            \"skip the text processing due to {}\",\n            new StringBuilder().append(e.getLocalizedMessage())\n                .append(optionalFieldInfo).append(debugString));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, new StringBuilder(\n            \"processing error \").append(e.getLocalizedMessage())\n            .append(optionalFieldInfo).append(debugString).toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":["e7f0ce0fa58dfd65f8f8bf1e640cbeaafd227e76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c9a6ea78b00a421744e770568d8c2aab262e4cd","date":1530971937,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* create a JCas which contain the text to analyze */\n          JCas jcas = pool.getJCas(0);\n          try {\n            /* process the text value */\n            processText(text, jcas);\n\n            UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(\n                solrInputDocument, jcas);\n            /* get field mapping from config */\n            Map<String,Map<String,MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                .getTypesFeaturesFieldsMapping();\n            /* map type features on fields */\n            for (Entry<String,Map<String,MapField>> entry : typesAndFeaturesFieldsMap\n                .entrySet()) {\n              uimaToSolrMapper.map(entry.getKey(), entry.getValue());\n            }\n          } finally {\n            pool.releaseJCas(jcas);\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if (logField == null) {\n        SchemaField uniqueKeyField = cmd.getReq().getSchema()\n            .getUniqueKeyField();\n        if (uniqueKeyField != null) {\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" : \". \" + logField + \"=\" + cmd.getSolrInputDocument().\n          getField(logField).getValue() + \", \";\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = \" text=\\\"\" + text.substring(0, len) + \"...\\\"\";\n      } else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(\n            \"skip the text processing due to {}\",\n            new StringBuilder().append(e.getLocalizedMessage())\n                .append(optionalFieldInfo).append(debugString));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"processing error \" + e.getLocalizedMessage() +\n            optionalFieldInfo + debugString, e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* create a JCas which contain the text to analyze */\n          JCas jcas = pool.getJCas(0);\n          try {\n            /* process the text value */\n            processText(text, jcas);\n\n            UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(\n                solrInputDocument, jcas);\n            /* get field mapping from config */\n            Map<String,Map<String,MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                .getTypesFeaturesFieldsMapping();\n            /* map type features on fields */\n            for (Entry<String,Map<String,MapField>> entry : typesAndFeaturesFieldsMap\n                .entrySet()) {\n              uimaToSolrMapper.map(entry.getKey(), entry.getValue());\n            }\n          } finally {\n            pool.releaseJCas(jcas);\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if (logField == null) {\n        SchemaField uniqueKeyField = cmd.getReq().getSchema()\n            .getUniqueKeyField();\n        if (uniqueKeyField != null) {\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" : \". \" + logField + \"=\" + cmd.getSolrInputDocument().\n          getField(logField).getValue() + \", \";\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = \" text=\\\"\" + text.substring(0, len) + \"...\\\"\";\n      } else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(\n            \"skip the text processing due to {}\",\n            new StringBuilder().append(e.getLocalizedMessage())\n                .append(optionalFieldInfo).append(debugString));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"processing error \" + e.getLocalizedMessage() +\n            optionalFieldInfo + debugString, e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (String currentText : texts) {\n        text = currentText;\n        if (text != null && text.length() > 0) {\n          /* create a JCas which contain the text to analyze */\n          JCas jcas = pool.getJCas(0);\n          try {\n            /* process the text value */\n            processText(text, jcas);\n\n            UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(\n                solrInputDocument, jcas);\n            /* get field mapping from config */\n            Map<String,Map<String,MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                .getTypesFeaturesFieldsMapping();\n            /* map type features on fields */\n            for (Entry<String,Map<String,MapField>> entry : typesAndFeaturesFieldsMap\n                .entrySet()) {\n              uimaToSolrMapper.map(entry.getKey(), entry.getValue());\n            }\n          } finally {\n            pool.releaseJCas(jcas);\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if (logField == null) {\n        SchemaField uniqueKeyField = cmd.getReq().getSchema()\n            .getUniqueKeyField();\n        if (uniqueKeyField != null) {\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" : \". \" + logField + \"=\" + cmd.getSolrInputDocument().\n          getField(logField).getValue() + \", \";\n      int len;\n      String debugString;\n      if (text != null && text.length() > 0) {\n        len = Math.min(text.length(), 100);\n        debugString = \" text=\\\"\" + text.substring(0, len) + \"...\\\"\";\n      } else {\n        debugString = \" null text\";\n      }\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(\n            \"skip the text processing due to {}\",\n            new StringBuilder().append(e.getLocalizedMessage())\n                .append(optionalFieldInfo).append(debugString));\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"processing error \" + e.getLocalizedMessage() +\n            optionalFieldInfo + debugString, e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2":["715acd125b69f29831a701a06035e9716b69659f"],"e7f0ce0fa58dfd65f8f8bf1e640cbeaafd227e76":["f8b89d944e345b12f5e7f35159704a6b8fbb3975"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"f8b89d944e345b12f5e7f35159704a6b8fbb3975":["08970e5b8411182a29412c177eff67ec1110095b"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["0af81b6027da0f3c796972ca2012332d0ff38cbd"],"08970e5b8411182a29412c177eff67ec1110095b":["d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2"],"6efad415dcdbcca7d440f909743e6e3152eeb6c0":["715acd125b69f29831a701a06035e9716b69659f","d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["0af81b6027da0f3c796972ca2012332d0ff38cbd","8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d82832af39f94dbb58a3130fd216ff1d49435589":["715acd125b69f29831a701a06035e9716b69659f","d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0af81b6027da0f3c796972ca2012332d0ff38cbd":["e7f0ce0fa58dfd65f8f8bf1e640cbeaafd227e76"],"715acd125b69f29831a701a06035e9716b69659f":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["0af81b6027da0f3c796972ca2012332d0ff38cbd","8c9a6ea78b00a421744e770568d8c2aab262e4cd"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["9ed208afa1e7aa98899ddb1dedfddedddf898253"],"d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2":["08970e5b8411182a29412c177eff67ec1110095b","6efad415dcdbcca7d440f909743e6e3152eeb6c0","d82832af39f94dbb58a3130fd216ff1d49435589"],"e7f0ce0fa58dfd65f8f8bf1e640cbeaafd227e76":["0af81b6027da0f3c796972ca2012332d0ff38cbd"],"c26f00b574427b55127e869b935845554afde1fa":["715acd125b69f29831a701a06035e9716b69659f"],"f8b89d944e345b12f5e7f35159704a6b8fbb3975":["e7f0ce0fa58dfd65f8f8bf1e640cbeaafd227e76"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["c26f00b574427b55127e869b935845554afde1fa"],"08970e5b8411182a29412c177eff67ec1110095b":["f8b89d944e345b12f5e7f35159704a6b8fbb3975"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"6efad415dcdbcca7d440f909743e6e3152eeb6c0":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","9ed208afa1e7aa98899ddb1dedfddedddf898253","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"0af81b6027da0f3c796972ca2012332d0ff38cbd":["8c9a6ea78b00a421744e770568d8c2aab262e4cd","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"715acd125b69f29831a701a06035e9716b69659f":["d45d2ab8ae4e9969914b9c8a761a4cb3a23634c2","6efad415dcdbcca7d440f909743e6e3152eeb6c0","d82832af39f94dbb58a3130fd216ff1d49435589"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["6efad415dcdbcca7d440f909743e6e3152eeb6c0","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d82832af39f94dbb58a3130fd216ff1d49435589","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}