{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","commits":[{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","pathOld":"/dev/null","sourceNew":"  HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e1c8e1340d9e31d2c6bee5f72d9040ce569049","date":1431584404,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","sourceNew":"  HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    this.requestType = RequestType.UNKNOWN;\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n  }\n\n","sourceOld":"  HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02a004d275f491791bf61a9a25ebff624d33da2e","date":1433217521,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","sourceNew":"  public HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    this.requestType = RequestType.UNKNOWN;\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n  }\n\n","sourceOld":"  HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    this.requestType = RequestType.UNKNOWN;\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","sourceNew":"  public HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    this.requestType = RequestType.UNKNOWN;\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n    // set a request timer which can be reused by requests if needed\n    req.setAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE, new RTimerTree());\n    // put the core container in request attribute\n    req.setAttribute(\"org.apache.solr.CoreContainer\", cores);\n    path = req.getServletPath();\n    if (req.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += req.getPathInfo();\n    }\n    req.setAttribute(HttpSolrCall.class.getName(), this);\n  }\n\n","sourceOld":"  public HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    this.requestType = RequestType.UNKNOWN;\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","sourceNew":"  public HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    this.requestType = RequestType.UNKNOWN;\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n    // set a request timer which can be reused by requests if needed\n    req.setAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE, new RTimerTree());\n    // put the core container in request attribute\n    req.setAttribute(\"org.apache.solr.CoreContainer\", cores);\n    path = req.getServletPath();\n    if (req.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += req.getPathInfo();\n    }\n    req.setAttribute(HttpSolrCall.class.getName(), this);\n  }\n\n","sourceOld":"  public HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    this.requestType = RequestType.UNKNOWN;\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b","date":1573537504,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","sourceNew":"  public HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    this.requestType = RequestType.UNKNOWN;\n    req.setAttribute(HttpSolrCall.class.getName(), this);\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n    // set a request timer which can be reused by requests if needed\n    req.setAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE, new RTimerTree());\n    // put the core container in request attribute\n    req.setAttribute(\"org.apache.solr.CoreContainer\", cores);\n    path = req.getServletPath();\n    if (req.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += req.getPathInfo();\n    }\n  }\n\n","sourceOld":"  public HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    this.requestType = RequestType.UNKNOWN;\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n    // set a request timer which can be reused by requests if needed\n    req.setAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE, new RTimerTree());\n    // put the core container in request attribute\n    req.setAttribute(\"org.apache.solr.CoreContainer\", cores);\n    path = req.getServletPath();\n    if (req.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += req.getPathInfo();\n    }\n    req.setAttribute(HttpSolrCall.class.getName(), this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de1f4f89cef95d8efa9877bdd893d1b542c9b140","date":1574241654,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#HttpSolrCall(SolrDispatchFilter,CoreContainer,HttpServletRequest,HttpServletResponse,boolean).mjava","sourceNew":"  public HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    this.requestType = RequestType.UNKNOWN;\n    req.setAttribute(HttpSolrCall.class.getName(), this);\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n    // set a request timer which can be reused by requests if needed\n    req.setAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE, new RTimerTree());\n    // put the core container in request attribute\n    req.setAttribute(\"org.apache.solr.CoreContainer\", cores);\n    path = ServletUtils.getPathAfterContext(req);\n  }\n\n","sourceOld":"  public HttpSolrCall(SolrDispatchFilter solrDispatchFilter, CoreContainer cores,\n               HttpServletRequest request, HttpServletResponse response, boolean retry) {\n    this.solrDispatchFilter = solrDispatchFilter;\n    this.cores = cores;\n    this.req = request;\n    this.response = response;\n    this.retry = retry;\n    this.requestType = RequestType.UNKNOWN;\n    req.setAttribute(HttpSolrCall.class.getName(), this);\n    queryParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n    // set a request timer which can be reused by requests if needed\n    req.setAttribute(SolrRequestParsers.REQUEST_TIMER_SERVLET_ATTRIBUTE, new RTimerTree());\n    // put the core container in request attribute\n    req.setAttribute(\"org.apache.solr.CoreContainer\", cores);\n    path = req.getServletPath();\n    if (req.getPathInfo() != null) {\n      // this lets you handle /update/commit when /update is a servlet\n      path += req.getPathInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["02a004d275f491791bf61a9a25ebff624d33da2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["02a004d275f491791bf61a9a25ebff624d33da2e","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"de1f4f89cef95d8efa9877bdd893d1b542c9b140":["f18dcd5b6e136616bf9b6f9a22a17d26b74b202b"],"02a004d275f491791bf61a9a25ebff624d33da2e":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de1f4f89cef95d8efa9877bdd893d1b542c9b140"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["a760e2135dfe20a04dea360873d4de1c6a0280bb"]},"commit2Childs":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","f18dcd5b6e136616bf9b6f9a22a17d26b74b202b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"f18dcd5b6e136616bf9b6f9a22a17d26b74b202b":["de1f4f89cef95d8efa9877bdd893d1b542c9b140"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["00e1c8e1340d9e31d2c6bee5f72d9040ce569049"],"de1f4f89cef95d8efa9877bdd893d1b542c9b140":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02a004d275f491791bf61a9a25ebff624d33da2e":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"00e1c8e1340d9e31d2c6bee5f72d9040ce569049":["02a004d275f491791bf61a9a25ebff624d33da2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}