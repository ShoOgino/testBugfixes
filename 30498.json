{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","commits":[{"id":"f0a4eeff354e8081247783f424a8e5a0fe106633","date":1355250757,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    workQueueMock = createMock(DistributedQueue.class);\n    shardHandlerMock = createMock(ShardHandler.class);\n    zkStateReaderMock = createMock(ZkStateReader.class);\n    clusterStateMock = createMock(ClusterState.class);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042891089d57d0e6af18ea6cec15f9e9a7da7d25","date":1355271969,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    workQueueMock = createMock(DistributedQueue.class);\n    shardHandlerMock = createMock(ShardHandler.class);\n    zkStateReaderMock = createMock(ZkStateReader.class);\n    clusterStateMock = createMock(ClusterState.class);\n    solrZkClientMock = createMock(SolrZkClient.class);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock);\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    workQueueMock = createMock(DistributedQueue.class);\n    shardHandlerMock = createMock(ShardHandler.class);\n    zkStateReaderMock = createMock(ZkStateReader.class);\n    clusterStateMock = createMock(ClusterState.class);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a57adc9bfabbc207ed17740dd86e0a2401ea385","date":1355507623,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    reset(workQueueMock);\n    reset(workQueueMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock);\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    workQueueMock = createMock(DistributedQueue.class);\n    shardHandlerMock = createMock(ShardHandler.class);\n    zkStateReaderMock = createMock(ZkStateReader.class);\n    clusterStateMock = createMock(ClusterState.class);\n    solrZkClientMock = createMock(SolrZkClient.class);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    reset(workQueueMock);\n    reset(workQueueMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(workQueueMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    reset(workQueueMock);\n    reset(workQueueMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(workQueueMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    reset(workQueueMock);\n    reset(workQueueMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(workQueueMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#setUp().mjava","sourceNew":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionConfigSetProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","sourceOld":"  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    queue.clear();\n    reset(workQueueMock);\n    reset(runningMapMock);\n    reset(completedMapMock);\n    reset(failureMapMock);\n    reset(shardHandlerFactoryMock);\n    reset(shardHandlerMock);\n    reset(zkStateReaderMock);\n    reset(clusterStateMock);\n    reset(solrZkClientMock);\n    underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n        \"1234\", shardHandlerFactoryMock, ADMIN_PATH, workQueueMock, runningMapMock,\n        completedMapMock, failureMapMock);\n    zkMap.clear();\n    collectionsSet.clear();\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"f0a4eeff354e8081247783f424a8e5a0fe106633":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["042891089d57d0e6af18ea6cec15f9e9a7da7d25"],"042891089d57d0e6af18ea6cec15f9e9a7da7d25":["f0a4eeff354e8081247783f424a8e5a0fe106633"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["9a57adc9bfabbc207ed17740dd86e0a2401ea385","1eeda7e62e149f90eee8895af874c74efa7d4852"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["6f26f74e4969851a019d28f10315cb1c77786f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"b7605579001505896d48b07160075a5c8b8e128e":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","6f26f74e4969851a019d28f10315cb1c77786f22"],"6f26f74e4969851a019d28f10315cb1c77786f22":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2209af2c265d2258ec4b29c8cc78622d36994a15"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"f0a4eeff354e8081247783f424a8e5a0fe106633":["042891089d57d0e6af18ea6cec15f9e9a7da7d25"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1eeda7e62e149f90eee8895af874c74efa7d4852"],"042891089d57d0e6af18ea6cec15f9e9a7da7d25":["9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"2209af2c265d2258ec4b29c8cc78622d36994a15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f0a4eeff354e8081247783f424a8e5a0fe106633"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"b7605579001505896d48b07160075a5c8b8e128e":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["2209af2c265d2258ec4b29c8cc78622d36994a15","b7605579001505896d48b07160075a5c8b8e128e"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}