{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#normalizeQuotes(String).mjava","commits":[{"id":"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","date":1404947938,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#normalizeQuotes(String).mjava","pathOld":"/dev/null","sourceNew":"  private static String normalizeQuotes(String text) {\n    StringBuilder out = new StringBuilder(text.length());\n    boolean inDoubleQuotes = false;\n    for (int i = 0; i < text.length(); ++i) {\n      char c = text.charAt(i);\n      if (c == '\\\\') {\n        c = text.charAt(++i);\n        if (c == '\\\\') {\n          out.append('\\\\'); // re-escape the backslash\n        }\n        // no escape for double quote\n      } else if (c == '\\'') {\n        if (inDoubleQuotes) {\n          // escape in output\n          out.append('\\\\');\n        } else {\n          int j = findSingleQuoteStringEnd(text, i);\n          out.append(text, i, j); // copy up to end quote (leave end for append below)\n          i = j;\n        }\n      } else if (c == '\"') {\n        c = '\\''; // change beginning/ending doubles to singles\n        inDoubleQuotes = !inDoubleQuotes;\n      }\n      out.append(c);\n    }\n    return out.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d23d4828afa583ebf35b4a541763af6206133458","date":1438931440,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#normalizeQuotes(String).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#normalizeQuotes(String).mjava","sourceNew":"  static String normalizeQuotes(String text) {\n    StringBuilder out = new StringBuilder(text.length());\n    boolean inDoubleQuotes = false;\n    for (int i = 0; i < text.length(); ++i) {\n      char c = text.charAt(i);\n      if (c == '\\\\') {\n        c = text.charAt(++i);\n        if (c == '\\\\') {\n          out.append('\\\\'); // re-escape the backslash\n        }\n        // no escape for double quote\n      } else if (c == '\\'') {\n        if (inDoubleQuotes) {\n          // escape in output\n          out.append('\\\\');\n        } else {\n          int j = findSingleQuoteStringEnd(text, i);\n          out.append(text, i, j); // copy up to end quote (leave end for append below)\n          i = j;\n        }\n      } else if (c == '\"') {\n        c = '\\''; // change beginning/ending doubles to singles\n        inDoubleQuotes = !inDoubleQuotes;\n      }\n      out.append(c);\n    }\n    return out.toString();\n  }\n\n","sourceOld":"  private static String normalizeQuotes(String text) {\n    StringBuilder out = new StringBuilder(text.length());\n    boolean inDoubleQuotes = false;\n    for (int i = 0; i < text.length(); ++i) {\n      char c = text.charAt(i);\n      if (c == '\\\\') {\n        c = text.charAt(++i);\n        if (c == '\\\\') {\n          out.append('\\\\'); // re-escape the backslash\n        }\n        // no escape for double quote\n      } else if (c == '\\'') {\n        if (inDoubleQuotes) {\n          // escape in output\n          out.append('\\\\');\n        } else {\n          int j = findSingleQuoteStringEnd(text, i);\n          out.append(text, i, j); // copy up to end quote (leave end for append below)\n          i = j;\n        }\n      } else if (c == '\"') {\n        c = '\\''; // change beginning/ending doubles to singles\n        inDoubleQuotes = !inDoubleQuotes;\n      }\n      out.append(c);\n    }\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d23d4828afa583ebf35b4a541763af6206133458":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d23d4828afa583ebf35b4a541763af6206133458"]},"commit2Childs":{"d23d4828afa583ebf35b4a541763af6206133458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["d23d4828afa583ebf35b4a541763af6206133458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}