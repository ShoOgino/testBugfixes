{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/FiniteStringsIteratorTest#testFiniteStringsEatsStack().mjava","commits":[{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/FiniteStringsIteratorTest#testFiniteStringsEatsStack().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testFiniteStringsEatsStack().mjava","sourceNew":"  public void testFiniteStringsEatsStack() {\n    char[] chars = new char[50000];\n    TestUtil.randomFixedLengthUnicodeString(random(), chars, 0, chars.length);\n    String bigString1 = new String(chars);\n    TestUtil.randomFixedLengthUnicodeString(random(), chars, 0, chars.length);\n    String bigString2 = new String(chars);\n    Automaton a = Operations.union(Automata.makeString(bigString1), Automata.makeString(bigString2));\n    FiniteStringsIterator iterator = new FiniteStringsIterator(a);\n    List<IntsRef> actual = getFiniteStrings(iterator);\n    assertEquals(2, actual.size());\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    Util.toUTF32(bigString1.toCharArray(), 0, bigString1.length(), scratch);\n    assertTrue(actual.contains(scratch.get()));\n    Util.toUTF32(bigString2.toCharArray(), 0, bigString2.length(), scratch);\n    assertTrue(actual.contains(scratch.get()));\n  }\n\n","sourceOld":"  public void testFiniteStringsEatsStack() {\n    char[] chars = new char[50000];\n    TestUtil.randomFixedLengthUnicodeString(random(), chars, 0, chars.length);\n    String bigString1 = new String(chars);\n    TestUtil.randomFixedLengthUnicodeString(random(), chars, 0, chars.length);\n    String bigString2 = new String(chars);\n    Automaton a = Operations.union(Automata.makeString(bigString1), Automata.makeString(bigString2));\n    Set<IntsRef> strings = getFiniteStrings(a, -1, false);\n    assertEquals(2, strings.size());\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    Util.toUTF32(bigString1.toCharArray(), 0, bigString1.length(), scratch);\n    assertTrue(strings.contains(scratch.get()));\n    Util.toUTF32(bigString2.toCharArray(), 0, bigString2.length(), scratch);\n    assertTrue(strings.contains(scratch.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}