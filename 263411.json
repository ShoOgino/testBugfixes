{"path":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#setFloorData(ByteArrayDataInput,BytesRef).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#setFloorData(ByteArrayDataInput,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#setFloorData(ByteArrayDataInput,BytesRef).mjava","sourceNew":"        public void setFloorData(ByteArrayDataInput in, BytesRef source) {\n          final int numBytes = source.length - (in.getPosition() - source.offset);\n          if (numBytes > floorData.length) {\n            floorData = new byte[ArrayUtil.oversize(numBytes, 1)];\n          }\n          System.arraycopy(source.bytes, source.offset+in.getPosition(), floorData, 0, numBytes);\n          floorDataReader.reset(floorData, 0, numBytes);\n          numFollowFloorBlocks = floorDataReader.readVInt();\n          nextFloorLabel = floorDataReader.readByte() & 0xff;\n          //if (DEBUG) {\n          //System.out.println(\"    setFloorData fpOrig=\" + fpOrig + \" bytes=\" + new BytesRef(source.bytes, source.offset + in.getPosition(), numBytes) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + toHex(nextFloorLabel));\n          //}\n        }\n\n","sourceOld":"        public void setFloorData(ByteArrayDataInput in, BytesRef source) {\n          final int numBytes = source.length - (in.getPosition() - source.offset);\n          if (numBytes > floorData.length) {\n            floorData = new byte[ArrayUtil.oversize(numBytes, 1)];\n          }\n          System.arraycopy(source.bytes, source.offset+in.getPosition(), floorData, 0, numBytes);\n          floorDataReader.reset(floorData, 0, numBytes);\n          numFollowFloorBlocks = floorDataReader.readVInt();\n          nextFloorLabel = floorDataReader.readByte() & 0xff;\n          //if (DEBUG) {\n          //System.out.println(\"    setFloorData fpOrig=\" + fpOrig + \" bytes=\" + new BytesRef(source.bytes, source.offset + in.getPosition(), numBytes) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + toHex(nextFloorLabel));\n          //}\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#setFloorData(ByteArrayDataInput,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#setFloorData(ByteArrayDataInput,BytesRef).mjava","sourceNew":"        public void setFloorData(ByteArrayDataInput in, BytesRef source) {\n          final int numBytes = source.length - (in.getPosition() - source.offset);\n          if (numBytes > floorData.length) {\n            floorData = new byte[ArrayUtil.oversize(numBytes, 1)];\n          }\n          System.arraycopy(source.bytes, source.offset+in.getPosition(), floorData, 0, numBytes);\n          floorDataReader.reset(floorData, 0, numBytes);\n          numFollowFloorBlocks = floorDataReader.readVInt();\n          nextFloorLabel = floorDataReader.readByte() & 0xff;\n          //if (DEBUG) {\n          //System.out.println(\"    setFloorData fpOrig=\" + fpOrig + \" bytes=\" + new BytesRef(source.bytes, source.offset + in.getPosition(), numBytes) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + toHex(nextFloorLabel));\n          //}\n        }\n\n","sourceOld":"        public void setFloorData(ByteArrayDataInput in, BytesRef source) {\n          final int numBytes = source.length - (in.getPosition() - source.offset);\n          if (numBytes > floorData.length) {\n            floorData = new byte[ArrayUtil.oversize(numBytes, 1)];\n          }\n          System.arraycopy(source.bytes, source.offset+in.getPosition(), floorData, 0, numBytes);\n          floorDataReader.reset(floorData, 0, numBytes);\n          numFollowFloorBlocks = floorDataReader.readVInt();\n          nextFloorLabel = floorDataReader.readByte() & 0xff;\n          //if (DEBUG) {\n          //System.out.println(\"    setFloorData fpOrig=\" + fpOrig + \" bytes=\" + new BytesRef(source.bytes, source.offset + in.getPosition(), numBytes) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks + \" nextFloorLabel=\" + toHex(nextFloorLabel));\n          //}\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}