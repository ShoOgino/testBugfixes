{"path":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int).mjava","commits":[{"id":"f6dba7919de4ff4ed6ff17f90619203772722f08","date":1180451647,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance;\n    try {\n      instance = (SegmentReader)IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n    instance.init(dir, sis, closeDir, ownDir);\n    instance.initialize(si, readBufferSize);\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance;\n    try {\n      instance = (SegmentReader)IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n    instance.init(dir, sis, closeDir, ownDir);\n    instance.initialize(si);\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize)\n    throws CorruptIndexException, IOException {\n    return get(dir, si, sis, closeDir, ownDir, readBufferSize, true);\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance;\n    try {\n      instance = (SegmentReader)IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n    instance.init(dir, sis, closeDir, ownDir);\n    instance.initialize(si, readBufferSize);\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize)\n    throws CorruptIndexException, IOException {\n    return get(READ_ONLY_DEFAULT, dir, si, sis, closeDir, ownDir, readBufferSize, true);\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize)\n    throws CorruptIndexException, IOException {\n    return get(dir, si, sis, closeDir, ownDir, readBufferSize, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dabcca520e81aeff96f5c937b7ffb5617ee69d1","date":1243458018,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize)\n    throws CorruptIndexException, IOException {\n    return get(false, dir, si, sis, closeDir, ownDir, readBufferSize, true);\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize)\n    throws CorruptIndexException, IOException {\n    return get(READ_ONLY_DEFAULT, dir, si, sis, closeDir, ownDir, readBufferSize, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/SegmentReader#get(Directory,SegmentInfo,SegmentInfos,boolean,boolean,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated\n   */\n  public static SegmentReader get(Directory dir, SegmentInfo si,\n                                  SegmentInfos sis,\n                                  boolean closeDir, boolean ownDir,\n                                  int readBufferSize)\n    throws CorruptIndexException, IOException {\n    return get(false, dir, si, sis, closeDir, ownDir, readBufferSize, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"5712975970a595c28f1988efd007e1b8a617a92f":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"f6dba7919de4ff4ed6ff17f90619203772722f08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["5712975970a595c28f1988efd007e1b8a617a92f"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5712975970a595c28f1988efd007e1b8a617a92f":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"f6dba7919de4ff4ed6ff17f90619203772722f08":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["5712975970a595c28f1988efd007e1b8a617a92f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}