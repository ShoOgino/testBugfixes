{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","commits":[{"id":"a5aa159e1ac4009d23cea92797d3804da4f5e7ad","date":1264041909,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a \n   * {@link StandardFilter}, a {@link LowerCaseFilter}, \n   * a {@link StopFilter}, and a {@link SnowballFilter} */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      // Use a special lowercase filter for turkish, the stemmer expects it.\n      if (matchVersion.onOrAfter(Version.LUCENE_31) && name.equals(\"Turkish\"))\n        streams.result = new TurkishLowerCaseFilter(streams.result);\n      else\n        streams.result = new LowerCaseFilter(matchVersion, streams.result);\n      if (stopSet != null)\n        streams.result = new StopFilter(matchVersion,\n                                        streams.result, stopSet);\n      streams.result = new SnowballFilter(streams.result, name);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"  /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a \n   * {@link StandardFilter}, a {@link LowerCaseFilter}, \n   * a {@link StopFilter}, and a {@link SnowballFilter} */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      // Use a special lowercase filter for turkish, the stemmer expects it.\n      if (matchVersion.onOrAfter(Version.LUCENE_31) && name.equals(\"Turkish\"))\n        streams.result = new TurkishLowerCaseFilter(streams.result);\n      else\n        streams.result = new LowerCaseFilter(matchVersion, streams.result);\n      if (stopSet != null)\n        streams.result = new StopFilter(matchVersion,\n                                        streams.result, stopSet);\n      streams.result = new SnowballFilter(streams.result, name);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/snowball/SnowballAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a \n   * {@link StandardFilter}, a {@link LowerCaseFilter}, \n   * a {@link StopFilter}, and a {@link SnowballFilter} */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      // Use a special lowercase filter for turkish, the stemmer expects it.\n      if (matchVersion.onOrAfter(Version.LUCENE_31) && name.equals(\"Turkish\"))\n        streams.result = new TurkishLowerCaseFilter(streams.result);\n      else\n        streams.result = new LowerCaseFilter(matchVersion, streams.result);\n      if (stopSet != null)\n        streams.result = new StopFilter(matchVersion,\n                                        streams.result, stopSet);\n      streams.result = new SnowballFilter(streams.result, name);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","sourceOld":"  /** Returns a (possibly reused) {@link StandardTokenizer} filtered by a \n   * {@link StandardFilter}, a {@link LowerCaseFilter}, \n   * a {@link StopFilter}, and a {@link SnowballFilter} */\n  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      streams.source = new StandardTokenizer(matchVersion, reader);\n      streams.result = new StandardFilter(streams.source);\n      // Use a special lowercase filter for turkish, the stemmer expects it.\n      if (matchVersion.onOrAfter(Version.LUCENE_31) && name.equals(\"Turkish\"))\n        streams.result = new TurkishLowerCaseFilter(streams.result);\n      else\n        streams.result = new LowerCaseFilter(matchVersion, streams.result);\n      if (stopSet != null)\n        streams.result = new StopFilter(matchVersion,\n                                        streams.result, stopSet);\n      streams.result = new SnowballFilter(streams.result, name);\n      setPreviousTokenStream(streams);\n    } else {\n      streams.source.reset(reader);\n    }\n    return streams.result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"]},"commit2Childs":{"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}