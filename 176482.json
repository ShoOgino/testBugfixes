{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean).mjava","commits":[{"id":"699a2199028b8eadcc558eebcf669e5fc708524a","date":1417544403,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,boolean).mjava","sourceNew":"  /**\n   * Create a random instance.\n   */\n  public static CompressingCodec randomInstance(Random random, int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix) {\n    switch (random.nextInt(4)) {\n    case 0:\n      return new FastCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix);\n    case 1:\n      return new FastDecompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix);\n    case 2:\n      return new HighCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix);\n    case 3:\n      return new DummyCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix);\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a random instance.\n   */\n  public static CompressingCodec randomInstance(Random random, int chunkSize, boolean withSegmentSuffix) {\n    switch (random.nextInt(4)) {\n    case 0:\n      return new FastCompressingCodec(chunkSize, withSegmentSuffix);\n    case 1:\n      return new FastDecompressionCompressingCodec(chunkSize, withSegmentSuffix);\n    case 2:\n      return new HighCompressionCompressingCodec(chunkSize, withSegmentSuffix);\n    case 3:\n      return new DummyCompressingCodec(chunkSize, withSegmentSuffix);\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59d4661023aa9541b0a759e4d2e11dcf83b923a0","date":1420124226,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#randomInstance(Random,int,int,boolean).mjava","sourceNew":"  /**\n   * Create a random instance.\n   */\n  public static CompressingCodec randomInstance(Random random, int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix, int blockSize) {\n    switch (random.nextInt(4)) {\n    case 0:\n      return new FastCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);\n    case 1:\n      return new FastDecompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);\n    case 2:\n      return new HighCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);\n    case 3:\n      return new DummyCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a random instance.\n   */\n  public static CompressingCodec randomInstance(Random random, int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix) {\n    switch (random.nextInt(4)) {\n    case 0:\n      return new FastCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix);\n    case 1:\n      return new FastDecompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix);\n    case 2:\n      return new HighCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix);\n    case 3:\n      return new DummyCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix);\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["699a2199028b8eadcc558eebcf669e5fc708524a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"699a2199028b8eadcc558eebcf669e5fc708524a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"]},"commit2Childs":{"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["699a2199028b8eadcc558eebcf669e5fc708524a"],"699a2199028b8eadcc558eebcf669e5fc708524a":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}