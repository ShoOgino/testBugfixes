{"path":"src/apps/SolarTest/src/SolrTest#main(String[]).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/apps/SolarTest/src/SolrTest#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n    int readers=1;\n    int requests=1;\n    int writers=0;\n\n    Logger log = Logger.getLogger(\"solar\");\n    log.setUseParentHandlers(false);\n    log.setLevel(Level.FINEST);\n    Handler handler = new ConsoleHandler();\n    handler.setLevel(Level.FINEST);\n    log.addHandler(handler);\n\n    String filename=\"dict.txt\";\n    String updateFilename=\"update_dict.txt\";\n    String luceneDir=null;\n    String schemaFile=\"schema.xml\";\n    String testFile=null;\n\n    boolean b_numUpdates=false; boolean b_writers=false;\n\n    int i=0; String arg;\n    while (i < args.length && args[i].startsWith(\"-\")) {\n      arg = args[i++];\n      if (arg.equals(\"-verbose\")) {\n        verbose=true;\n      } else if (arg.equals(\"-dict\")) {\n        filename=args[i++];\n      } else if (arg.equals(\"-index\")) {\n        luceneDir=args[i++];\n      } else if (arg.equals(\"-readers\")) {\n        readers=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-numRequests\")) {\n        requests=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-writers\")) {\n        writers=Integer.parseInt(args[i++]);\n        b_writers=true;\n      } else if (arg.equals(\"-schema\")) {\n        schemaFile=args[i++];\n      } else if (arg.equals(\"-test\")) {\n        testFile=args[i++];\n      } else if (arg.equals(\"-noValidate\")) {\n        doValidate=false;\n      } else {\n        System.out.println(\"Unknown option: \" + arg);\n        return;\n      }\n    }\n\n    try {\n\n    IndexSchema schema = new IndexSchema(schemaFile);\n    countdown = requests;\n    core=new SolrCore(luceneDir,schema);\n\n    try {\n      if (readers > 0) requestDict = readDict(filename);\n      if (writers > 0) updateDict = readDict(updateFilename);\n      if (testFile != null) {\n        testDict = readDict(testFile);\n        testDictLineno = lineno;\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n      System.out.println(\"Can't read \"+filename);\n      return;\n    }\n\n    SolrTest[] clients = new SolrTest[readers+writers];\n    for (i=0; i<readers; i++) {\n      clients[i] = new SolrTest();\n      if (testFile != null) clients[i].sequenceTest=true;\n      clients[i].start();\n    }\n    for (i=readers; i<readers+writers; i++) {\n      clients[i] = new SolrTest();\n      clients[i].isWriter = true;\n      clients[i].start();\n    }\n\n    for (i=0; i<readers; i++) {\n      clients[i].join();\n    }\n    for (i=readers; i<readers+writers; i++) {\n      clients[i].join();\n    }\n\n    } finally {\n      if (core != null) core.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"268776364d28ac43d2fac972c45f929978145470","date":1139281135,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/apps/SolarTest/src/SolrTest#main(String[]).mjava","pathOld":"src/apps/SolarTest/src/SolrTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    int readers=1;\n    int requests=1;\n    int writers=0;\n\n    Logger log = Logger.getLogger(\"solar\");\n    log.setUseParentHandlers(false);\n    log.setLevel(Level.FINEST);\n    Handler handler = new ConsoleHandler();\n    handler.setLevel(Level.FINEST);\n    log.addHandler(handler);\n\n    String filename=\"dict.txt\";\n    String updateFilename=\"update_dict.txt\";\n    String dataDir =null;\n    String schemaFile=null;\n    String testFile=null;\n\n    boolean b_numUpdates=false; boolean b_writers=false;\n\n    int i=0; String arg;\n    while (i < args.length && args[i].startsWith(\"-\")) {\n      arg = args[i++];\n      if (arg.equals(\"-verbose\")) {\n        verbose=true;\n      } else if (arg.equals(\"-dict\")) {\n        filename=args[i++];\n      } else if (arg.equals(\"-data\")) {\n        dataDir =args[i++];\n      } else if (arg.equals(\"-readers\")) {\n        readers=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-numRequests\")) {\n        requests=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-writers\")) {\n        writers=Integer.parseInt(args[i++]);\n        b_writers=true;\n      } else if (arg.equals(\"-schema\")) {\n        schemaFile=args[i++];\n      } else if (arg.equals(\"-test\")) {\n        testFile=args[i++];\n      } else if (arg.equals(\"-noValidate\")) {\n        doValidate=false;\n      } else {\n        System.out.println(\"Unknown option: \" + arg);\n        return;\n      }\n    }\n\n    try {\n\n    IndexSchema schema = schemaFile==null ? null : new IndexSchema(schemaFile);\n    countdown = requests;\n    core=new SolrCore(dataDir,schema);\n\n    try {\n      if (testFile != null) {\n        testDict = readDict(testFile);\n        testDictLineno = lineno;\n      }  else {\n        if (readers > 0) requestDict = readDict(filename);\n        if (writers > 0) updateDict = readDict(updateFilename);\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n      System.out.println(\"Can't read \"+filename);\n      return;\n    }\n\n    SolrTest[] clients = new SolrTest[readers+writers];\n    for (i=0; i<readers; i++) {\n      clients[i] = new SolrTest();\n      if (testFile != null) clients[i].sequenceTest=true;\n      clients[i].start();\n    }\n    for (i=readers; i<readers+writers; i++) {\n      clients[i] = new SolrTest();\n      clients[i].isWriter = true;\n      clients[i].start();\n    }\n\n    for (i=0; i<readers; i++) {\n      clients[i].join();\n    }\n    for (i=readers; i<readers+writers; i++) {\n      clients[i].join();\n    }\n\n    } finally {\n      if (core != null) core.close();\n    }\n\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    int readers=1;\n    int requests=1;\n    int writers=0;\n\n    Logger log = Logger.getLogger(\"solar\");\n    log.setUseParentHandlers(false);\n    log.setLevel(Level.FINEST);\n    Handler handler = new ConsoleHandler();\n    handler.setLevel(Level.FINEST);\n    log.addHandler(handler);\n\n    String filename=\"dict.txt\";\n    String updateFilename=\"update_dict.txt\";\n    String luceneDir=null;\n    String schemaFile=\"schema.xml\";\n    String testFile=null;\n\n    boolean b_numUpdates=false; boolean b_writers=false;\n\n    int i=0; String arg;\n    while (i < args.length && args[i].startsWith(\"-\")) {\n      arg = args[i++];\n      if (arg.equals(\"-verbose\")) {\n        verbose=true;\n      } else if (arg.equals(\"-dict\")) {\n        filename=args[i++];\n      } else if (arg.equals(\"-index\")) {\n        luceneDir=args[i++];\n      } else if (arg.equals(\"-readers\")) {\n        readers=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-numRequests\")) {\n        requests=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-writers\")) {\n        writers=Integer.parseInt(args[i++]);\n        b_writers=true;\n      } else if (arg.equals(\"-schema\")) {\n        schemaFile=args[i++];\n      } else if (arg.equals(\"-test\")) {\n        testFile=args[i++];\n      } else if (arg.equals(\"-noValidate\")) {\n        doValidate=false;\n      } else {\n        System.out.println(\"Unknown option: \" + arg);\n        return;\n      }\n    }\n\n    try {\n\n    IndexSchema schema = new IndexSchema(schemaFile);\n    countdown = requests;\n    core=new SolrCore(luceneDir,schema);\n\n    try {\n      if (readers > 0) requestDict = readDict(filename);\n      if (writers > 0) updateDict = readDict(updateFilename);\n      if (testFile != null) {\n        testDict = readDict(testFile);\n        testDictLineno = lineno;\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n      System.out.println(\"Can't read \"+filename);\n      return;\n    }\n\n    SolrTest[] clients = new SolrTest[readers+writers];\n    for (i=0; i<readers; i++) {\n      clients[i] = new SolrTest();\n      if (testFile != null) clients[i].sequenceTest=true;\n      clients[i].start();\n    }\n    for (i=readers; i<readers+writers; i++) {\n      clients[i] = new SolrTest();\n      clients[i].isWriter = true;\n      clients[i].start();\n    }\n\n    for (i=0; i<readers; i++) {\n      clients[i].join();\n    }\n    for (i=readers; i<readers+writers; i++) {\n      clients[i].join();\n    }\n\n    } finally {\n      if (core != null) core.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c13d66f95c29c45eef256f6d79ceaf5fb41456b","date":1139349879,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/apps/SolarTest/src/SolrTest#main(String[]).mjava","pathOld":"src/apps/SolarTest/src/SolrTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    int readers=1;\n    int requests=1;\n    int writers=0;\n\n    Logger log = Logger.getLogger(\"solar\");\n    log.setUseParentHandlers(false);\n    log.setLevel(Level.FINEST);\n    Handler handler = new ConsoleHandler();\n    handler.setLevel(Level.FINEST);\n    log.addHandler(handler);\n\n    String filename=\"dict.txt\";\n    String updateFilename=\"update_dict.txt\";\n    String dataDir =null;\n    String schemaFile=null;\n    String testFile=null;\n\n    boolean b_numUpdates=false; boolean b_writers=false;\n\n    int i=0; String arg;\n    while (i < args.length && args[i].startsWith(\"-\")) {\n      arg = args[i++];\n      if (arg.equals(\"-verbose\")) {\n        verbose=true;\n      } else if (arg.equals(\"-dict\")) {\n        filename=args[i++];\n      } else if (arg.equals(\"-data\")) {\n        dataDir =args[i++];\n      } else if (arg.equals(\"-readers\")) {\n        readers=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-numRequests\")) {\n        requests=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-writers\")) {\n        writers=Integer.parseInt(args[i++]);\n        b_writers=true;\n      } else if (arg.equals(\"-schema\")) {\n        schemaFile=args[i++];\n      } else if (arg.equals(\"-test\")) {\n        testFile=args[i++];\n      } else if (arg.equals(\"-noValidate\")) {\n        doValidate=false;\n      } else {\n        System.out.println(\"Unknown option: \" + arg);\n        return;\n      }\n    }\n\n    try {\n\n      IndexSchema schema = schemaFile==null ? null : new IndexSchema(schemaFile);\n      countdown = requests;\n      core=new SolrCore(dataDir,schema);\n\n      try {\n        if (testFile != null) {\n          testDict = readDict(testFile);\n          testDictLineno = lineno;\n        }  else {\n          if (readers > 0) requestDict = readDict(filename);\n          if (writers > 0) updateDict = readDict(updateFilename);\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n        System.out.println(\"Can't read \"+filename);\n        return;\n      }\n\n      SolrTest[] clients = new SolrTest[readers+writers];\n      for (i=0; i<readers; i++) {\n        clients[i] = new SolrTest();\n        if (testFile != null) clients[i].sequenceTest=true;\n        clients[i].start();\n      }\n      for (i=readers; i<readers+writers; i++) {\n        clients[i] = new SolrTest();\n        clients[i].isWriter = true;\n        clients[i].start();\n      }\n\n      for (i=0; i<readers; i++) {\n        clients[i].join();\n      }\n      for (i=readers; i<readers+writers; i++) {\n        clients[i].join();\n      }\n\n      core.close();\n      core=null;\n\n      if (testFile!=null) {\n        if (clients[0].numErr == 0) {\n          System.out.println(\">>>>>>>>>>>>>>>>>>>>>>>> SUCCESS <<<<<<<<<<<<<<<<<<<<<<<<<<\");\n        } else {\n          System.exit(1);\n        }\n      }\n\n    } catch (Throwable e) {\n      if (core!=null) {try{core.close();} catch (Throwable th){}}\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    int readers=1;\n    int requests=1;\n    int writers=0;\n\n    Logger log = Logger.getLogger(\"solar\");\n    log.setUseParentHandlers(false);\n    log.setLevel(Level.FINEST);\n    Handler handler = new ConsoleHandler();\n    handler.setLevel(Level.FINEST);\n    log.addHandler(handler);\n\n    String filename=\"dict.txt\";\n    String updateFilename=\"update_dict.txt\";\n    String dataDir =null;\n    String schemaFile=null;\n    String testFile=null;\n\n    boolean b_numUpdates=false; boolean b_writers=false;\n\n    int i=0; String arg;\n    while (i < args.length && args[i].startsWith(\"-\")) {\n      arg = args[i++];\n      if (arg.equals(\"-verbose\")) {\n        verbose=true;\n      } else if (arg.equals(\"-dict\")) {\n        filename=args[i++];\n      } else if (arg.equals(\"-data\")) {\n        dataDir =args[i++];\n      } else if (arg.equals(\"-readers\")) {\n        readers=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-numRequests\")) {\n        requests=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-writers\")) {\n        writers=Integer.parseInt(args[i++]);\n        b_writers=true;\n      } else if (arg.equals(\"-schema\")) {\n        schemaFile=args[i++];\n      } else if (arg.equals(\"-test\")) {\n        testFile=args[i++];\n      } else if (arg.equals(\"-noValidate\")) {\n        doValidate=false;\n      } else {\n        System.out.println(\"Unknown option: \" + arg);\n        return;\n      }\n    }\n\n    try {\n\n    IndexSchema schema = schemaFile==null ? null : new IndexSchema(schemaFile);\n    countdown = requests;\n    core=new SolrCore(dataDir,schema);\n\n    try {\n      if (testFile != null) {\n        testDict = readDict(testFile);\n        testDictLineno = lineno;\n      }  else {\n        if (readers > 0) requestDict = readDict(filename);\n        if (writers > 0) updateDict = readDict(updateFilename);\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n      System.out.println(\"Can't read \"+filename);\n      return;\n    }\n\n    SolrTest[] clients = new SolrTest[readers+writers];\n    for (i=0; i<readers; i++) {\n      clients[i] = new SolrTest();\n      if (testFile != null) clients[i].sequenceTest=true;\n      clients[i].start();\n    }\n    for (i=readers; i<readers+writers; i++) {\n      clients[i] = new SolrTest();\n      clients[i].isWriter = true;\n      clients[i].start();\n    }\n\n    for (i=0; i<readers; i++) {\n      clients[i].join();\n    }\n    for (i=readers; i<readers+writers; i++) {\n      clients[i].join();\n    }\n\n    } finally {\n      if (core != null) core.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd1be603b11b775ddafa5c4992cf204880586294","date":1139350157,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/apps/SolrTest/src/SolrTest#main(String[]).mjava","pathOld":"src/apps/SolarTest/src/SolrTest#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    int readers=1;\n    int requests=1;\n    int writers=0;\n\n    Logger log = Logger.getLogger(\"solar\");\n    log.setUseParentHandlers(false);\n    log.setLevel(Level.FINEST);\n    Handler handler = new ConsoleHandler();\n    handler.setLevel(Level.FINEST);\n    log.addHandler(handler);\n\n    String filename=\"dict.txt\";\n    String updateFilename=\"update_dict.txt\";\n    String dataDir =null;\n    String schemaFile=null;\n    String testFile=null;\n\n    boolean b_numUpdates=false; boolean b_writers=false;\n\n    int i=0; String arg;\n    while (i < args.length && args[i].startsWith(\"-\")) {\n      arg = args[i++];\n      if (arg.equals(\"-verbose\")) {\n        verbose=true;\n      } else if (arg.equals(\"-dict\")) {\n        filename=args[i++];\n      } else if (arg.equals(\"-data\")) {\n        dataDir =args[i++];\n      } else if (arg.equals(\"-readers\")) {\n        readers=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-numRequests\")) {\n        requests=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-writers\")) {\n        writers=Integer.parseInt(args[i++]);\n        b_writers=true;\n      } else if (arg.equals(\"-schema\")) {\n        schemaFile=args[i++];\n      } else if (arg.equals(\"-test\")) {\n        testFile=args[i++];\n      } else if (arg.equals(\"-noValidate\")) {\n        doValidate=false;\n      } else {\n        System.out.println(\"Unknown option: \" + arg);\n        return;\n      }\n    }\n\n    try {\n\n      IndexSchema schema = schemaFile==null ? null : new IndexSchema(schemaFile);\n      countdown = requests;\n      core=new SolrCore(dataDir,schema);\n\n      try {\n        if (testFile != null) {\n          testDict = readDict(testFile);\n          testDictLineno = lineno;\n        }  else {\n          if (readers > 0) requestDict = readDict(filename);\n          if (writers > 0) updateDict = readDict(updateFilename);\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n        System.out.println(\"Can't read \"+filename);\n        return;\n      }\n\n      SolrTest[] clients = new SolrTest[readers+writers];\n      for (i=0; i<readers; i++) {\n        clients[i] = new SolrTest();\n        if (testFile != null) clients[i].sequenceTest=true;\n        clients[i].start();\n      }\n      for (i=readers; i<readers+writers; i++) {\n        clients[i] = new SolrTest();\n        clients[i].isWriter = true;\n        clients[i].start();\n      }\n\n      for (i=0; i<readers; i++) {\n        clients[i].join();\n      }\n      for (i=readers; i<readers+writers; i++) {\n        clients[i].join();\n      }\n\n      core.close();\n      core=null;\n\n      if (testFile!=null) {\n        if (clients[0].numErr == 0) {\n          System.out.println(\">>>>>>>>>>>>>>>>>>>>>>>> SUCCESS <<<<<<<<<<<<<<<<<<<<<<<<<<\");\n        } else {\n          System.exit(1);\n        }\n      }\n\n    } catch (Throwable e) {\n      if (core!=null) {try{core.close();} catch (Throwable th){}}\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    int readers=1;\n    int requests=1;\n    int writers=0;\n\n    Logger log = Logger.getLogger(\"solar\");\n    log.setUseParentHandlers(false);\n    log.setLevel(Level.FINEST);\n    Handler handler = new ConsoleHandler();\n    handler.setLevel(Level.FINEST);\n    log.addHandler(handler);\n\n    String filename=\"dict.txt\";\n    String updateFilename=\"update_dict.txt\";\n    String dataDir =null;\n    String schemaFile=null;\n    String testFile=null;\n\n    boolean b_numUpdates=false; boolean b_writers=false;\n\n    int i=0; String arg;\n    while (i < args.length && args[i].startsWith(\"-\")) {\n      arg = args[i++];\n      if (arg.equals(\"-verbose\")) {\n        verbose=true;\n      } else if (arg.equals(\"-dict\")) {\n        filename=args[i++];\n      } else if (arg.equals(\"-data\")) {\n        dataDir =args[i++];\n      } else if (arg.equals(\"-readers\")) {\n        readers=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-numRequests\")) {\n        requests=Integer.parseInt(args[i++]);\n      } else if (arg.equals(\"-writers\")) {\n        writers=Integer.parseInt(args[i++]);\n        b_writers=true;\n      } else if (arg.equals(\"-schema\")) {\n        schemaFile=args[i++];\n      } else if (arg.equals(\"-test\")) {\n        testFile=args[i++];\n      } else if (arg.equals(\"-noValidate\")) {\n        doValidate=false;\n      } else {\n        System.out.println(\"Unknown option: \" + arg);\n        return;\n      }\n    }\n\n    try {\n\n      IndexSchema schema = schemaFile==null ? null : new IndexSchema(schemaFile);\n      countdown = requests;\n      core=new SolrCore(dataDir,schema);\n\n      try {\n        if (testFile != null) {\n          testDict = readDict(testFile);\n          testDictLineno = lineno;\n        }  else {\n          if (readers > 0) requestDict = readDict(filename);\n          if (writers > 0) updateDict = readDict(updateFilename);\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n        System.out.println(\"Can't read \"+filename);\n        return;\n      }\n\n      SolrTest[] clients = new SolrTest[readers+writers];\n      for (i=0; i<readers; i++) {\n        clients[i] = new SolrTest();\n        if (testFile != null) clients[i].sequenceTest=true;\n        clients[i].start();\n      }\n      for (i=readers; i<readers+writers; i++) {\n        clients[i] = new SolrTest();\n        clients[i].isWriter = true;\n        clients[i].start();\n      }\n\n      for (i=0; i<readers; i++) {\n        clients[i].join();\n      }\n      for (i=readers; i<readers+writers; i++) {\n        clients[i].join();\n      }\n\n      core.close();\n      core=null;\n\n      if (testFile!=null) {\n        if (clients[0].numErr == 0) {\n          System.out.println(\">>>>>>>>>>>>>>>>>>>>>>>> SUCCESS <<<<<<<<<<<<<<<<<<<<<<<<<<\");\n        } else {\n          System.exit(1);\n        }\n      }\n\n    } catch (Throwable e) {\n      if (core!=null) {try{core.close();} catch (Throwable th){}}\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"268776364d28ac43d2fac972c45f929978145470":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"fd1be603b11b775ddafa5c4992cf204880586294":["5c13d66f95c29c45eef256f6d79ceaf5fb41456b"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5c13d66f95c29c45eef256f6d79ceaf5fb41456b":["268776364d28ac43d2fac972c45f929978145470"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"268776364d28ac43d2fac972c45f929978145470":["5c13d66f95c29c45eef256f6d79ceaf5fb41456b"],"fd1be603b11b775ddafa5c4992cf204880586294":[],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["268776364d28ac43d2fac972c45f929978145470"],"5c13d66f95c29c45eef256f6d79ceaf5fb41456b":["fd1be603b11b775ddafa5c4992cf204880586294"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd1be603b11b775ddafa5c4992cf204880586294","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}