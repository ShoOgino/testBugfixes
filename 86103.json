{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#calculateHash(Tuple,List[String]).mjava","commits":[{"id":"84bc3a0dd894d2448badac45302b79cc2e445214","date":1462494639,"type":1,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#calculateHash(Tuple,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#calculateHash(Tuple).mjava","sourceNew":"  protected Integer calculateHash(Tuple tuple, List<String> hashOn){\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      Object obj = tuple.get(part);\n      if(null == obj){\n        return null;\n      }\n      sb.append(obj.toString());\n      sb.append(\"::\"); // this is here to separate fields\n    }\n    \n    return sb.toString().hashCode();\n  }\n\n","sourceOld":"  protected Integer calculateHash(Tuple tuple){\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      Object obj = tuple.get(part);\n      if(null == obj){\n        return null;\n      }\n      sb.append(obj.toString());\n      sb.append(\"::\"); // this is here to seperate fields\n    }\n    \n    return sb.toString().hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2233462ade0e629affa69a6f1e8d0205e4d6e596","date":1462534852,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#calculateHash(Tuple,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#calculateHash(Tuple).mjava","sourceNew":"  protected Integer calculateHash(Tuple tuple, List<String> hashOn){\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      Object obj = tuple.get(part);\n      if(null == obj){\n        return null;\n      }\n      sb.append(obj.toString());\n      sb.append(\"::\"); // this is here to separate fields\n    }\n    \n    return sb.toString().hashCode();\n  }\n\n","sourceOld":"  protected Integer calculateHash(Tuple tuple){\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      Object obj = tuple.get(part);\n      if(null == obj){\n        return null;\n      }\n      sb.append(obj.toString());\n      sb.append(\"::\"); // this is here to seperate fields\n    }\n    \n    return sb.toString().hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#calculateHash(Tuple,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#calculateHash(Tuple).mjava","sourceNew":"  protected Integer calculateHash(Tuple tuple, List<String> hashOn){\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      Object obj = tuple.get(part);\n      if(null == obj){\n        return null;\n      }\n      sb.append(obj.toString());\n      sb.append(\"::\"); // this is here to separate fields\n    }\n    \n    return sb.toString().hashCode();\n  }\n\n","sourceOld":"  protected Integer calculateHash(Tuple tuple){\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      Object obj = tuple.get(part);\n      if(null == obj){\n        return null;\n      }\n      sb.append(obj.toString());\n      sb.append(\"::\"); // this is here to seperate fields\n    }\n    \n    return sb.toString().hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#calculateHash(Tuple,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  protected Integer calculateHash(Tuple tuple, List<String> hashOn){\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      Object obj = tuple.get(part);\n      if(null == obj){\n        return null;\n      }\n      sb.append(obj.toString());\n      sb.append(\"::\"); // this is here to separate fields\n    }\n    \n    return sb.toString().hashCode();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdae1e0c97cc515dc80915258f7cec88edfbdfa6","date":1526678079,"type":5,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#computeHash(Tuple,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream#calculateHash(Tuple,List[String]).mjava","sourceNew":"  protected String computeHash(Tuple tuple, List<String> hashOn){\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      Object obj = tuple.get(part);\n      if(null == obj){\n        return null;\n      }\n      sb.append(obj.toString());\n      sb.append(\"::\"); // this is here to separate fields\n    }\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  protected Integer calculateHash(Tuple tuple, List<String> hashOn){\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      Object obj = tuple.get(part);\n      if(null == obj){\n        return null;\n      }\n      sb.append(obj.toString());\n      sb.append(\"::\"); // this is here to separate fields\n    }\n    \n    return sb.toString().hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2233462ade0e629affa69a6f1e8d0205e4d6e596"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bdae1e0c97cc515dc80915258f7cec88edfbdfa6":["2233462ade0e629affa69a6f1e8d0205e4d6e596"],"2233462ade0e629affa69a6f1e8d0205e4d6e596":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","84bc3a0dd894d2448badac45302b79cc2e445214"],"84bc3a0dd894d2448badac45302b79cc2e445214":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2233462ade0e629affa69a6f1e8d0205e4d6e596"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bdae1e0c97cc515dc80915258f7cec88edfbdfa6"]},"commit2Childs":{"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","2233462ade0e629affa69a6f1e8d0205e4d6e596","84bc3a0dd894d2448badac45302b79cc2e445214","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bdae1e0c97cc515dc80915258f7cec88edfbdfa6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2233462ade0e629affa69a6f1e8d0205e4d6e596":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","bdae1e0c97cc515dc80915258f7cec88edfbdfa6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"84bc3a0dd894d2448badac45302b79cc2e445214":["2233462ade0e629affa69a6f1e8d0205e4d6e596"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}