{"path":"solr/core/src/test/org/apache/solr/schema/SchemaApiFailureTest#testAddTheSameFieldTwice().mjava","commits":[{"id":"03d29de0abdd3a2150c0dabfe1bf98024bbfa367","date":1515464714,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/SchemaApiFailureTest#testAddTheSameFieldTwice().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddTheSameFieldTwice() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    SchemaRequest.Update fieldAddition = new SchemaRequest.AddField\n        (Utils.makeMap(\"name\",\"myfield\", \"type\",\"string\"));\n    SchemaResponse.UpdateResponse updateResponse = fieldAddition.process(client, COLLECTION);\n\n    HttpSolrClient.RemoteExecutionException ex = expectThrows(HttpSolrClient.RemoteExecutionException.class,\n        () -> fieldAddition.process(client, COLLECTION));\n\n    assertTrue(\"expected error message 'Field 'myfield' already exists'.\",Utils.getObjectByPath(ex.getMetaData(), false, \"error/details[0]/errorMessages[0]\").toString().contains(\"Field 'myfield' already exists.\") );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/SchemaApiFailureTest#testAddTheSameFieldTwice().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddTheSameFieldTwice() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    SchemaRequest.Update fieldAddition = new SchemaRequest.AddField\n        (Utils.makeMap(\"name\",\"myfield\", \"type\",\"string\"));\n    SchemaResponse.UpdateResponse updateResponse = fieldAddition.process(client, COLLECTION);\n\n    HttpSolrClient.RemoteExecutionException ex = expectThrows(HttpSolrClient.RemoteExecutionException.class,\n        () -> fieldAddition.process(client, COLLECTION));\n\n    assertTrue(\"expected error message 'Field 'myfield' already exists'.\",Utils.getObjectByPath(ex.getMetaData(), false, \"error/details[0]/errorMessages[0]\").toString().contains(\"Field 'myfield' already exists.\") );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"648627dd57e08f78d7b6e3b59b1f43530995a69a","date":1535068798,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/SchemaApiFailureTest#testAddTheSameFieldTwice().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/SchemaApiFailureTest#testAddTheSameFieldTwice().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 23-Aug-2018\n  public void testAddTheSameFieldTwice() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    SchemaRequest.Update fieldAddition = new SchemaRequest.AddField\n        (Utils.makeMap(\"name\",\"myfield\", \"type\",\"string\"));\n    SchemaResponse.UpdateResponse updateResponse = fieldAddition.process(client, COLLECTION);\n\n    HttpSolrClient.RemoteExecutionException ex = expectThrows(HttpSolrClient.RemoteExecutionException.class,\n        () -> fieldAddition.process(client, COLLECTION));\n\n    assertTrue(\"expected error message 'Field 'myfield' already exists'.\",Utils.getObjectByPath(ex.getMetaData(), false, \"error/details[0]/errorMessages[0]\").toString().contains(\"Field 'myfield' already exists.\") );\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddTheSameFieldTwice() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    SchemaRequest.Update fieldAddition = new SchemaRequest.AddField\n        (Utils.makeMap(\"name\",\"myfield\", \"type\",\"string\"));\n    SchemaResponse.UpdateResponse updateResponse = fieldAddition.process(client, COLLECTION);\n\n    HttpSolrClient.RemoteExecutionException ex = expectThrows(HttpSolrClient.RemoteExecutionException.class,\n        () -> fieldAddition.process(client, COLLECTION));\n\n    assertTrue(\"expected error message 'Field 'myfield' already exists'.\",Utils.getObjectByPath(ex.getMetaData(), false, \"error/details[0]/errorMessages[0]\").toString().contains(\"Field 'myfield' already exists.\") );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/SchemaApiFailureTest#testAddTheSameFieldTwice().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/SchemaApiFailureTest#testAddTheSameFieldTwice().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 23-Aug-2018\n  public void testAddTheSameFieldTwice() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    SchemaRequest.Update fieldAddition = new SchemaRequest.AddField\n        (Utils.makeMap(\"name\",\"myfield\", \"type\",\"string\"));\n    SchemaResponse.UpdateResponse updateResponse = fieldAddition.process(client, COLLECTION);\n\n    HttpSolrClient.RemoteExecutionException ex = expectThrows(HttpSolrClient.RemoteExecutionException.class,\n        () -> fieldAddition.process(client, COLLECTION));\n\n    assertTrue(\"expected error message 'Field 'myfield' already exists'.\",Utils.getObjectByPath(ex.getMetaData(), false, \"error/details[0]/errorMessages[0]\").toString().contains(\"Field 'myfield' already exists.\") );\n\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 23-Aug-2018\n  public void testAddTheSameFieldTwice() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    SchemaRequest.Update fieldAddition = new SchemaRequest.AddField\n        (Utils.makeMap(\"name\",\"myfield\", \"type\",\"string\"));\n    SchemaResponse.UpdateResponse updateResponse = fieldAddition.process(client, COLLECTION);\n\n    HttpSolrClient.RemoteExecutionException ex = expectThrows(HttpSolrClient.RemoteExecutionException.class,\n        () -> fieldAddition.process(client, COLLECTION));\n\n    assertTrue(\"expected error message 'Field 'myfield' already exists'.\",Utils.getObjectByPath(ex.getMetaData(), false, \"error/details[0]/errorMessages[0]\").toString().contains(\"Field 'myfield' already exists.\") );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/SchemaApiFailureTest#testAddTheSameFieldTwice().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/SchemaApiFailureTest#testAddTheSameFieldTwice().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 23-Aug-2018\n  public void testAddTheSameFieldTwice() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    SchemaRequest.Update fieldAddition = new SchemaRequest.AddField\n        (Utils.makeMap(\"name\",\"myfield\", \"type\",\"string\"));\n    SchemaResponse.UpdateResponse updateResponse = fieldAddition.process(client, COLLECTION);\n\n    BaseHttpSolrClient.RemoteExecutionException ex = expectThrows(BaseHttpSolrClient.RemoteExecutionException.class,\n        () -> fieldAddition.process(client, COLLECTION));\n\n    assertTrue(\"expected error message 'Field 'myfield' already exists'.\",Utils.getObjectByPath(ex.getMetaData(), false, \"error/details[0]/errorMessages[0]\").toString().contains(\"Field 'myfield' already exists.\") );\n\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 23-Aug-2018\n  public void testAddTheSameFieldTwice() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    SchemaRequest.Update fieldAddition = new SchemaRequest.AddField\n        (Utils.makeMap(\"name\",\"myfield\", \"type\",\"string\"));\n    SchemaResponse.UpdateResponse updateResponse = fieldAddition.process(client, COLLECTION);\n\n    HttpSolrClient.RemoteExecutionException ex = expectThrows(HttpSolrClient.RemoteExecutionException.class,\n        () -> fieldAddition.process(client, COLLECTION));\n\n    assertTrue(\"expected error message 'Field 'myfield' already exists'.\",Utils.getObjectByPath(ex.getMetaData(), false, \"error/details[0]/errorMessages[0]\").toString().contains(\"Field 'myfield' already exists.\") );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"648627dd57e08f78d7b6e3b59b1f43530995a69a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["648627dd57e08f78d7b6e3b59b1f43530995a69a"],"db96734b79e26d948b59f68bd4564c4836a71acf":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db96734b79e26d948b59f68bd4564c4836a71acf"]},"commit2Childs":{"648627dd57e08f78d7b6e3b59b1f43530995a69a":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"b94236357aaa22b76c10629851fe4e376e0cea82":["648627dd57e08f78d7b6e3b59b1f43530995a69a"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["db96734b79e26d948b59f68bd4564c4836a71acf"],"db96734b79e26d948b59f68bd4564c4836a71acf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}