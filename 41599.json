{"path":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArrayByPrefix(char[],int,char[],int).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArrayByPrefix(char[],int,char[],int).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArrayByPrefix(char[],int,char[],int).mjava","sourceNew":"  /**\n   * Compare two arrays, starting at the specified offsets, but treating shortArray as a prefix to longArray.\n   * As long as shortArray is a prefix of longArray, return 0.\n   * Otherwise, behave as {@link Utility#compareArray(char[], int, char[], int)}\n   * \n   * @param shortArray prefix array\n   * @param shortIndex offset into shortArray\n   * @param longArray long array (word)\n   * @param longIndex offset into longArray\n   * @return 0 if shortArray is a prefix of longArray, otherwise act as {@link Utility#compareArray(char[], int, char[], int)}\n   */\n  public static int compareArrayByPrefix(char[] shortArray, int shortIndex,\n      char[] longArray, int longIndex) {\n\n    // a null prefix is a prefix of longArray\n    if (shortArray == null)\n      return 0;\n    else if (longArray == null)\n      return (shortIndex < shortArray.length) ? 1 : 0;\n\n    int si = shortIndex, li = longIndex;\n    while (si < shortArray.length && li < longArray.length\n        && shortArray[si] == longArray[li]) {\n      si++;\n      li++;\n    }\n    if (si == shortArray.length) {\n      // shortArray is a prefix of longArray\n      return 0;\n    } else {\n      // shortArray > longArray because longArray ended first.\n      if (li == longArray.length)\n        return 1;\n      else\n        // determine by comparison\n        return (shortArray[si] > longArray[li]) ? 1 : -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Compare two arrays, starting at the specified offsets, but treating shortArray as a prefix to longArray.\n   * As long as shortArray is a prefix of longArray, return 0.\n   * Otherwise, behave as {@link Utility#compareArray(char[], int, char[], int)}\n   * \n   * @param shortArray prefix array\n   * @param shortIndex offset into shortArray\n   * @param longArray long array (word)\n   * @param longIndex offset into longArray\n   * @return 0 if shortArray is a prefix of longArray, otherwise act as {@link Utility#compareArray(char[], int, char[], int)}\n   */\n  public static int compareArrayByPrefix(char[] shortArray, int shortIndex,\n      char[] longArray, int longIndex) {\n\n    // a null prefix is a prefix of longArray\n    if (shortArray == null)\n      return 0;\n    else if (longArray == null)\n      return (shortIndex < shortArray.length) ? 1 : 0;\n\n    int si = shortIndex, li = longIndex;\n    while (si < shortArray.length && li < longArray.length\n        && shortArray[si] == longArray[li]) {\n      si++;\n      li++;\n    }\n    if (si == shortArray.length) {\n      // shortArray is a prefix of longArray\n      return 0;\n    } else {\n      // shortArray > longArray because longArray ended first.\n      if (li == longArray.length)\n        return 1;\n      else\n        // determine by comparison\n        return (shortArray[si] > longArray[li]) ? 1 : -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArrayByPrefix(char[],int,char[],int).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/Utility#compareArrayByPrefix(char[],int,char[],int).mjava","sourceNew":"  /**\n   * Compare two arrays, starting at the specified offsets, but treating shortArray as a prefix to longArray.\n   * As long as shortArray is a prefix of longArray, return 0.\n   * Otherwise, behave as {@link Utility#compareArray(char[], int, char[], int)}\n   * \n   * @param shortArray prefix array\n   * @param shortIndex offset into shortArray\n   * @param longArray long array (word)\n   * @param longIndex offset into longArray\n   * @return 0 if shortArray is a prefix of longArray, otherwise act as {@link Utility#compareArray(char[], int, char[], int)}\n   */\n  public static int compareArrayByPrefix(char[] shortArray, int shortIndex,\n      char[] longArray, int longIndex) {\n\n    // a null prefix is a prefix of longArray\n    if (shortArray == null)\n      return 0;\n    else if (longArray == null)\n      return (shortIndex < shortArray.length) ? 1 : 0;\n\n    int si = shortIndex, li = longIndex;\n    while (si < shortArray.length && li < longArray.length\n        && shortArray[si] == longArray[li]) {\n      si++;\n      li++;\n    }\n    if (si == shortArray.length) {\n      // shortArray is a prefix of longArray\n      return 0;\n    } else {\n      // shortArray > longArray because longArray ended first.\n      if (li == longArray.length)\n        return 1;\n      else\n        // determine by comparison\n        return (shortArray[si] > longArray[li]) ? 1 : -1;\n    }\n  }\n\n","sourceOld":"  /**\n   * Compare two arrays, starting at the specified offsets, but treating shortArray as a prefix to longArray.\n   * As long as shortArray is a prefix of longArray, return 0.\n   * Otherwise, behave as {@link Utility#compareArray(char[], int, char[], int)}\n   * \n   * @param shortArray prefix array\n   * @param shortIndex offset into shortArray\n   * @param longArray long array (word)\n   * @param longIndex offset into longArray\n   * @return 0 if shortArray is a prefix of longArray, otherwise act as {@link Utility#compareArray(char[], int, char[], int)}\n   */\n  public static int compareArrayByPrefix(char[] shortArray, int shortIndex,\n      char[] longArray, int longIndex) {\n\n    // a null prefix is a prefix of longArray\n    if (shortArray == null)\n      return 0;\n    else if (longArray == null)\n      return (shortIndex < shortArray.length) ? 1 : 0;\n\n    int si = shortIndex, li = longIndex;\n    while (si < shortArray.length && li < longArray.length\n        && shortArray[si] == longArray[li]) {\n      si++;\n      li++;\n    }\n    if (si == shortArray.length) {\n      // shortArray is a prefix of longArray\n      return 0;\n    } else {\n      // shortArray > longArray because longArray ended first.\n      if (li == longArray.length)\n        return 1;\n      else\n        // determine by comparison\n        return (shortArray[si] > longArray[li]) ? 1 : -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}