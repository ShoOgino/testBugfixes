{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#doInit().mjava","commits":[{"id":"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e","date":1496661458,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#doInit().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doInit() {\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f6277e241765fc74f894a305d964fba9b3085b31"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#doInit().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doInit() {\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#doInit().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doInit() {\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a","date":1499173980,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6277e241765fc74f894a305d964fba9b3085b31","date":1509364321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrGraphiteReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    if (pickled) {\n      graphite = new PickledGraphite(host, port);\n    } else {\n      graphite = new Graphite(host, port);\n    }\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    if (reporter != null) {\n      throw new IllegalStateException(\"Already started once?\");\n    }\n    GraphiteSender graphite;\n    String id = host + \":\" + port + \":\" + pickled;\n    graphite = serviceRegistry.getOrCreate(id, () -> {\n      if (pickled) {\n        return new PickledGraphite(host, port);\n      } else {\n        return new Graphite(host, port);\n      }\n    });\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    GraphiteReporter.Builder builder = GraphiteReporter\n        .forRegistry(metricManager.registry(registryName))\n        .prefixedWith(instancePrefix)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    reporter = builder.build(graphite);\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":["e3ee7308fb49e4d4f77d7a23584a2128a0d6921e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3ee7308fb49e4d4f77d7a23584a2128a0d6921e"],"13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a":["28288370235ed02234a64753cdbf0c6ec096304a"],"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["e9017cf144952056066919f1ebc7897ff9bd71b1","13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6277e241765fc74f894a305d964fba9b3085b31":["13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3ee7308fb49e4d4f77d7a23584a2128a0d6921e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6277e241765fc74f894a305d964fba9b3085b31"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","f6277e241765fc74f894a305d964fba9b3085b31"],"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","e3ee7308fb49e4d4f77d7a23584a2128a0d6921e","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a"],"f6277e241765fc74f894a305d964fba9b3085b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}