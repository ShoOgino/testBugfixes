{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#fromTokenCharPredicate(IntPredicate).mjava","commits":[{"id":"d87468ba199460e43121d57563bbc0560d509c29","date":1446677057,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer#fromTokenCharPredicate(IntPredicate).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new instance of CharTokenizer using a custom predicate, supplied as method reference or lambda expression.\n   * The predicate should return {@code true} for all valid token characters.\n   * <p>\n   * This factory is intended to be used with lambdas or method references. E.g., an elegant way\n   * to create an instance which behaves exactly as {@link LetterTokenizer} is:\n   * <pre class=\"prettyprint lang-java\">\n   * Tokenizer tok = CharTokenizer.fromTokenCharPredicate(Character::isLetter);\n   * </pre>\n   */\n  public static CharTokenizer fromTokenCharPredicate(final IntPredicate tokenCharPredicate) {\n    return fromTokenCharPredicate(DEFAULT_TOKEN_ATTRIBUTE_FACTORY, tokenCharPredicate);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d87468ba199460e43121d57563bbc0560d509c29"],"d87468ba199460e43121d57563bbc0560d509c29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d87468ba199460e43121d57563bbc0560d509c29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d87468ba199460e43121d57563bbc0560d509c29":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}