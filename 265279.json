{"path":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","commits":[{"id":"3301c97f51316f9c9937654c07d7a6a21e7aecb8","date":1503489616,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForRecovery(String collection) throws Exception {\n    boolean recovered = false;\n    for (int i = 0; i < 300; i++) {\n      ClusterState state = solrClient.getZkStateReader().getClusterState();\n      DocCollection collState = getCollectionState(collection);\n      log.debug(\"###### \" + collState);\n      Collection<Replica> replicas = collState.getReplicas();\n      boolean allActive = true;\n      boolean hasLeaders = true;\n      if (replicas != null && !replicas.isEmpty()) {\n        for (Replica r : replicas) {\n          if (!r.isActive(state.getLiveNodes())) {\n            log.info(\"Not active: \" + r);\n            allActive = false;\n          }\n        }\n      } else {\n        allActive = false;\n      }\n      for (Slice slice : collState.getSlices()) {\n        if (slice.getLeader() == null) {\n          hasLeaders = false;\n        }\n      }\n      if (allActive && hasLeaders) {\n        recovered = true;\n        break;\n      } else {\n        log.info(\"--- waiting, allActive=\" + allActive + \", hasLeaders=\" + hasLeaders);\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"replica never fully recovered\", recovered);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForRecovery(String collection) throws Exception {\n    boolean recovered = false;\n    for (int i = 0; i < 300; i++) {\n      ClusterState state = solrClient.getZkStateReader().getClusterState();\n      DocCollection collState = getCollectionState(collection);\n      log.debug(\"###### \" + collState);\n      Collection<Replica> replicas = collState.getReplicas();\n      boolean allActive = true;\n      boolean hasLeaders = true;\n      if (replicas != null && !replicas.isEmpty()) {\n        for (Replica r : replicas) {\n          if (!r.isActive(state.getLiveNodes())) {\n            log.info(\"Not active: \" + r);\n            allActive = false;\n          }\n        }\n      } else {\n        allActive = false;\n      }\n      for (Slice slice : collState.getSlices()) {\n        if (slice.getLeader() == null) {\n          hasLeaders = false;\n        }\n      }\n      if (allActive && hasLeaders) {\n        recovered = true;\n        break;\n      } else {\n        log.info(\"--- waiting, allActive=\" + allActive + \", hasLeaders=\" + hasLeaders);\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"replica never fully recovered\", recovered);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForRecovery(String collection) throws Exception {\n    boolean recovered = false;\n    for (int i = 0; i < 300; i++) {\n      ClusterState state = solrClient.getZkStateReader().getClusterState();\n      DocCollection collState = getCollectionState(collection);\n      log.debug(\"###### \" + collState);\n      Collection<Replica> replicas = collState.getReplicas();\n      boolean allActive = true;\n      boolean hasLeaders = true;\n      if (replicas != null && !replicas.isEmpty()) {\n        for (Replica r : replicas) {\n          if (!r.isActive(state.getLiveNodes())) {\n            log.info(\"Not active: \" + r);\n            allActive = false;\n          }\n        }\n      } else {\n        allActive = false;\n      }\n      for (Slice slice : collState.getSlices()) {\n        if (slice.getLeader() == null) {\n          hasLeaders = false;\n        }\n      }\n      if (allActive && hasLeaders) {\n        recovered = true;\n        break;\n      } else {\n        log.info(\"--- waiting, allActive=\" + allActive + \", hasLeaders=\" + hasLeaders);\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"replica never fully recovered\", recovered);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3cbda95649439c9769e17e19639b442eaa4666d","date":1507742760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","sourceNew":"  private void waitForRecovery(String collection) throws Exception {\n    log.info(\"Waiting for recovery of \" + collection);\n    boolean recovered = false;\n    boolean allActive = true;\n    boolean hasLeaders = true;\n    DocCollection collState = null;\n    for (int i = 0; i < 300; i++) {\n      ClusterState state = solrClient.getZkStateReader().getClusterState();\n      collState = getCollectionState(collection);\n      log.debug(\"###### \" + collState);\n      Collection<Replica> replicas = collState.getReplicas();\n      allActive = true;\n      hasLeaders = true;\n      if (replicas != null && !replicas.isEmpty()) {\n        for (Replica r : replicas) {\n          if (state.getLiveNodes().contains(r.getNodeName())) {\n            if (!r.isActive(state.getLiveNodes())) {\n              log.info(\"Not active: \" + r);\n              allActive = false;\n            }\n          } else {\n            log.info(\"Replica no longer on a live node, ignoring: \" + r);\n          }\n        }\n      } else {\n        allActive = false;\n      }\n      for (Slice slice : collState.getSlices()) {\n        if (slice.getLeader() == null) {\n          hasLeaders = false;\n        }\n      }\n      if (allActive && hasLeaders) {\n        recovered = true;\n        break;\n      } else {\n        log.info(\"--- waiting, allActive=\" + allActive + \", hasLeaders=\" + hasLeaders);\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"replica never fully recovered: allActive=\" + allActive + \", hasLeaders=\" + hasLeaders + \", collState=\" + collState, recovered);\n\n  }\n\n","sourceOld":"  private void waitForRecovery(String collection) throws Exception {\n    boolean recovered = false;\n    for (int i = 0; i < 300; i++) {\n      ClusterState state = solrClient.getZkStateReader().getClusterState();\n      DocCollection collState = getCollectionState(collection);\n      log.debug(\"###### \" + collState);\n      Collection<Replica> replicas = collState.getReplicas();\n      boolean allActive = true;\n      boolean hasLeaders = true;\n      if (replicas != null && !replicas.isEmpty()) {\n        for (Replica r : replicas) {\n          if (!r.isActive(state.getLiveNodes())) {\n            log.info(\"Not active: \" + r);\n            allActive = false;\n          }\n        }\n      } else {\n        allActive = false;\n      }\n      for (Slice slice : collState.getSlices()) {\n        if (slice.getLeader() == null) {\n          hasLeaders = false;\n        }\n      }\n      if (allActive && hasLeaders) {\n        recovered = true;\n        break;\n      } else {\n        log.info(\"--- waiting, allActive=\" + allActive + \", hasLeaders=\" + hasLeaders);\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"replica never fully recovered\", recovered);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1ff601a12d12d08405c7e451d64604d94292953","date":1507795721,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","sourceNew":"  private void waitForRecovery(String collection) throws Exception {\n    log.info(\"Waiting for recovery of \" + collection);\n    boolean recovered = false;\n    boolean allActive = true;\n    boolean hasLeaders = true;\n    DocCollection collState = null;\n    for (int i = 0; i < 300; i++) {\n      ClusterState state = solrClient.getZkStateReader().getClusterState();\n      collState = getCollectionState(collection);\n      log.debug(\"###### \" + collState);\n      Collection<Replica> replicas = collState.getReplicas();\n      allActive = true;\n      hasLeaders = true;\n      if (replicas != null && !replicas.isEmpty()) {\n        for (Replica r : replicas) {\n          if (state.getLiveNodes().contains(r.getNodeName())) {\n            if (!r.isActive(state.getLiveNodes())) {\n              log.info(\"Not active: \" + r);\n              allActive = false;\n            }\n          } else {\n            log.info(\"Replica no longer on a live node, ignoring: \" + r);\n          }\n        }\n      } else {\n        allActive = false;\n      }\n      for (Slice slice : collState.getSlices()) {\n        if (slice.getLeader() == null) {\n          hasLeaders = false;\n        }\n      }\n      if (allActive && hasLeaders) {\n        recovered = true;\n        break;\n      } else {\n        log.info(\"--- waiting, allActive=\" + allActive + \", hasLeaders=\" + hasLeaders);\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"replica never fully recovered: allActive=\" + allActive + \", hasLeaders=\" + hasLeaders + \", collState=\" + collState, recovered);\n\n  }\n\n","sourceOld":"  private void waitForRecovery(String collection) throws Exception {\n    boolean recovered = false;\n    for (int i = 0; i < 300; i++) {\n      ClusterState state = solrClient.getZkStateReader().getClusterState();\n      DocCollection collState = getCollectionState(collection);\n      log.debug(\"###### \" + collState);\n      Collection<Replica> replicas = collState.getReplicas();\n      boolean allActive = true;\n      boolean hasLeaders = true;\n      if (replicas != null && !replicas.isEmpty()) {\n        for (Replica r : replicas) {\n          if (!r.isActive(state.getLiveNodes())) {\n            log.info(\"Not active: \" + r);\n            allActive = false;\n          }\n        }\n      } else {\n        allActive = false;\n      }\n      for (Slice slice : collState.getSlices()) {\n        if (slice.getLeader() == null) {\n          hasLeaders = false;\n        }\n      }\n      if (allActive && hasLeaders) {\n        recovered = true;\n        break;\n      } else {\n        log.info(\"--- waiting, allActive=\" + allActive + \", hasLeaders=\" + hasLeaders);\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"replica never fully recovered\", recovered);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb20b0fc832c8504676c4d2fed3548c987adcda8","date":1519819971,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","sourceNew":"  private static void waitForRecovery(String collection) throws Exception {\n    log.info(\"Waiting for recovery of \" + collection);\n    boolean recovered = false;\n    boolean allActive = true;\n    boolean hasLeaders = true;\n    DocCollection collState = null;\n    for (int i = 0; i < 300; i++) {\n      ClusterState state = solrClient.getZkStateReader().getClusterState();\n      collState = getCollectionState(collection);\n      log.debug(\"###### \" + collState);\n      Collection<Replica> replicas = collState.getReplicas();\n      allActive = true;\n      hasLeaders = true;\n      if (replicas != null && !replicas.isEmpty()) {\n        for (Replica r : replicas) {\n          if (state.getLiveNodes().contains(r.getNodeName())) {\n            if (!r.isActive(state.getLiveNodes())) {\n              log.info(\"Not active: \" + r);\n              allActive = false;\n            }\n          } else {\n            log.info(\"Replica no longer on a live node, ignoring: \" + r);\n          }\n        }\n      } else {\n        allActive = false;\n      }\n      for (Slice slice : collState.getSlices()) {\n        if (slice.getLeader() == null) {\n          hasLeaders = false;\n        }\n      }\n      if (allActive && hasLeaders) {\n        recovered = true;\n        break;\n      } else {\n        log.info(\"--- waiting, allActive=\" + allActive + \", hasLeaders=\" + hasLeaders);\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"replica never fully recovered: allActive=\" + allActive + \", hasLeaders=\" + hasLeaders + \", collState=\" + collState, recovered);\n\n  }\n\n","sourceOld":"  private void waitForRecovery(String collection) throws Exception {\n    log.info(\"Waiting for recovery of \" + collection);\n    boolean recovered = false;\n    boolean allActive = true;\n    boolean hasLeaders = true;\n    DocCollection collState = null;\n    for (int i = 0; i < 300; i++) {\n      ClusterState state = solrClient.getZkStateReader().getClusterState();\n      collState = getCollectionState(collection);\n      log.debug(\"###### \" + collState);\n      Collection<Replica> replicas = collState.getReplicas();\n      allActive = true;\n      hasLeaders = true;\n      if (replicas != null && !replicas.isEmpty()) {\n        for (Replica r : replicas) {\n          if (state.getLiveNodes().contains(r.getNodeName())) {\n            if (!r.isActive(state.getLiveNodes())) {\n              log.info(\"Not active: \" + r);\n              allActive = false;\n            }\n          } else {\n            log.info(\"Replica no longer on a live node, ignoring: \" + r);\n          }\n        }\n      } else {\n        allActive = false;\n      }\n      for (Slice slice : collState.getSlices()) {\n        if (slice.getLeader() == null) {\n          hasLeaders = false;\n        }\n      }\n      if (allActive && hasLeaders) {\n        recovered = true;\n        break;\n      } else {\n        log.info(\"--- waiting, allActive=\" + allActive + \", hasLeaders=\" + hasLeaders);\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"replica never fully recovered: allActive=\" + allActive + \", hasLeaders=\" + hasLeaders + \", collState=\" + collState, recovered);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","sourceNew":"  private static void waitForRecovery(String collection) throws Exception {\n    log.info(\"Waiting for recovery of {}\", collection);\n    boolean recovered = false;\n    boolean allActive = true;\n    boolean hasLeaders = true;\n    DocCollection collState = null;\n    for (int i = 0; i < 300; i++) {\n      ClusterState state = solrClient.getZkStateReader().getClusterState();\n      collState = getCollectionState(collection);\n      log.debug(\"###### {}\", collState);\n      Collection<Replica> replicas = collState.getReplicas();\n      allActive = true;\n      hasLeaders = true;\n      if (replicas != null && !replicas.isEmpty()) {\n        for (Replica r : replicas) {\n          if (state.getLiveNodes().contains(r.getNodeName())) {\n            if (!r.isActive(state.getLiveNodes())) {\n              log.info(\"Not active: {}\", r);\n              allActive = false;\n            }\n          } else {\n            log.info(\"Replica no longer on a live node, ignoring: {}\", r);\n          }\n        }\n      } else {\n        allActive = false;\n      }\n      for (Slice slice : collState.getSlices()) {\n        if (slice.getLeader() == null) {\n          hasLeaders = false;\n        }\n      }\n      if (allActive && hasLeaders) {\n        recovered = true;\n        break;\n      } else {\n        log.info(\"--- waiting, allActive={}, hasLeaders={}\", allActive, hasLeaders);\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"replica never fully recovered: allActive=\" + allActive + \", hasLeaders=\" + hasLeaders + \", collState=\" + collState, recovered);\n\n  }\n\n","sourceOld":"  private static void waitForRecovery(String collection) throws Exception {\n    log.info(\"Waiting for recovery of \" + collection);\n    boolean recovered = false;\n    boolean allActive = true;\n    boolean hasLeaders = true;\n    DocCollection collState = null;\n    for (int i = 0; i < 300; i++) {\n      ClusterState state = solrClient.getZkStateReader().getClusterState();\n      collState = getCollectionState(collection);\n      log.debug(\"###### \" + collState);\n      Collection<Replica> replicas = collState.getReplicas();\n      allActive = true;\n      hasLeaders = true;\n      if (replicas != null && !replicas.isEmpty()) {\n        for (Replica r : replicas) {\n          if (state.getLiveNodes().contains(r.getNodeName())) {\n            if (!r.isActive(state.getLiveNodes())) {\n              log.info(\"Not active: \" + r);\n              allActive = false;\n            }\n          } else {\n            log.info(\"Replica no longer on a live node, ignoring: \" + r);\n          }\n        }\n      } else {\n        allActive = false;\n      }\n      for (Slice slice : collState.getSlices()) {\n        if (slice.getLeader() == null) {\n          hasLeaders = false;\n        }\n      }\n      if (allActive && hasLeaders) {\n        recovered = true;\n        break;\n      } else {\n        log.info(\"--- waiting, allActive=\" + allActive + \", hasLeaders=\" + hasLeaders);\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"replica never fully recovered: allActive=\" + allActive + \", hasLeaders=\" + hasLeaders + \", collState=\" + collState, recovered);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/AutoscalingHistoryHandlerTest#waitForRecovery(String).mjava","sourceNew":null,"sourceOld":"  private static void waitForRecovery(String collection) throws Exception {\n    log.info(\"Waiting for recovery of {}\", collection);\n    boolean recovered = false;\n    boolean allActive = true;\n    boolean hasLeaders = true;\n    DocCollection collState = null;\n    for (int i = 0; i < 300; i++) {\n      ClusterState state = solrClient.getZkStateReader().getClusterState();\n      collState = getCollectionState(collection);\n      log.debug(\"###### {}\", collState);\n      Collection<Replica> replicas = collState.getReplicas();\n      allActive = true;\n      hasLeaders = true;\n      if (replicas != null && !replicas.isEmpty()) {\n        for (Replica r : replicas) {\n          if (state.getLiveNodes().contains(r.getNodeName())) {\n            if (!r.isActive(state.getLiveNodes())) {\n              log.info(\"Not active: {}\", r);\n              allActive = false;\n            }\n          } else {\n            log.info(\"Replica no longer on a live node, ignoring: {}\", r);\n          }\n        }\n      } else {\n        allActive = false;\n      }\n      for (Slice slice : collState.getSlices()) {\n        if (slice.getLeader() == null) {\n          hasLeaders = false;\n        }\n      }\n      if (allActive && hasLeaders) {\n        recovered = true;\n        break;\n      } else {\n        log.info(\"--- waiting, allActive={}, hasLeaders={}\", allActive, hasLeaders);\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"replica never fully recovered: allActive=\" + allActive + \", hasLeaders=\" + hasLeaders + \", collState=\" + collState, recovered);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3301c97f51316f9c9937654c07d7a6a21e7aecb8"],"3f504512a03d978990cbff30db0522b354e846db":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"3301c97f51316f9c9937654c07d7a6a21e7aecb8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1ff601a12d12d08405c7e451d64604d94292953":["560c18d71dad43d675158783c3840f8c80d6d39c","f3cbda95649439c9769e17e19639b442eaa4666d"],"f3cbda95649439c9769e17e19639b442eaa4666d":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["eb20b0fc832c8504676c4d2fed3548c987adcda8"],"eb20b0fc832c8504676c4d2fed3548c987adcda8":["e1ff601a12d12d08405c7e451d64604d94292953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3301c97f51316f9c9937654c07d7a6a21e7aecb8":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","3301c97f51316f9c9937654c07d7a6a21e7aecb8","560c18d71dad43d675158783c3840f8c80d6d39c"],"e1ff601a12d12d08405c7e451d64604d94292953":["eb20b0fc832c8504676c4d2fed3548c987adcda8"],"f3cbda95649439c9769e17e19639b442eaa4666d":["e1ff601a12d12d08405c7e451d64604d94292953"],"560c18d71dad43d675158783c3840f8c80d6d39c":["e1ff601a12d12d08405c7e451d64604d94292953","f3cbda95649439c9769e17e19639b442eaa4666d"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["3f504512a03d978990cbff30db0522b354e846db"],"eb20b0fc832c8504676c4d2fed3548c987adcda8":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}