{"path":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","sourceNew":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","sourceNew":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","bugFix":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","sourceNew":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dce99db8590cdd065839ae4e6b228b66eeee8f38","date":1367579599,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","sourceNew":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) {\n    if (commits.isEmpty()) {\n      return;\n    }\n    final IndexCommit firstCommit = commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dce99db8590cdd065839ae4e6b228b66eeee8f38":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dce99db8590cdd065839ae4e6b228b66eeee8f38"]},"commit2Childs":{"dce99db8590cdd065839ae4e6b228b66eeee8f38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["dce99db8590cdd065839ae4e6b228b66eeee8f38","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}