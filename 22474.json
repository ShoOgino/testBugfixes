{"path":"lucene/backwards/src/java/org/apache/lucene/search/FilterManager#getFilter(Filter).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/FilterManager#getFilter(Filter).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/FilterManager#getFilter(Filter).mjava","sourceNew":"  /**\n   * Returns the cached version of the filter.  Allows the caller to pass up\n   * a small filter but this will keep a persistent version around and allow\n   * the caching filter to do its job.\n   * \n   * @param filter The input filter\n   * @return The cached version of the filter\n   */\n  public Filter getFilter(Filter filter) {\n    synchronized(cache) {\n      FilterItem fi = null;\n      fi = cache.get(Integer.valueOf(filter.hashCode()));\n      if (fi != null) {\n        fi.timestamp = new Date().getTime();\n        return fi.filter;\n      }\n      cache.put(Integer.valueOf(filter.hashCode()), new FilterItem(filter));\n      return filter;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the cached version of the filter.  Allows the caller to pass up\n   * a small filter but this will keep a persistent version around and allow\n   * the caching filter to do its job.\n   * \n   * @param filter The input filter\n   * @return The cached version of the filter\n   */\n  public Filter getFilter(Filter filter) {\n    synchronized(cache) {\n      FilterItem fi = null;\n      fi = cache.get(Integer.valueOf(filter.hashCode()));\n      if (fi != null) {\n        fi.timestamp = new Date().getTime();\n        return fi.filter;\n      }\n      cache.put(Integer.valueOf(filter.hashCode()), new FilterItem(filter));\n      return filter;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/FilterManager#getFilter(Filter).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the cached version of the filter.  Allows the caller to pass up\n   * a small filter but this will keep a persistent version around and allow\n   * the caching filter to do its job.\n   * \n   * @param filter The input filter\n   * @return The cached version of the filter\n   */\n  public Filter getFilter(Filter filter) {\n    synchronized(cache) {\n      FilterItem fi = null;\n      fi = cache.get(Integer.valueOf(filter.hashCode()));\n      if (fi != null) {\n        fi.timestamp = new Date().getTime();\n        return fi.filter;\n      }\n      cache.put(Integer.valueOf(filter.hashCode()), new FilterItem(filter));\n      return filter;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}