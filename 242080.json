{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#consumeSubQuery(State).mjava","commits":[{"id":"fdc91c6aee685b616507b9e44fcc69315b8a9e6c","date":1384275771,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#consumeSubQuery(State).mjava","pathOld":"/dev/null","sourceNew":"  private void consumeSubQuery(State state) {\n    assert (flags & PRECEDENCE_OPERATORS) != 0;\n    int start = ++state.index;\n    int precedence = 1;\n    boolean escaped = false;\n\n    while (state.index < state.length) {\n      if (!escaped) {\n        if (state.data[state.index] == '\\\\' && (flags & ESCAPE_OPERATOR) != 0) {\n          // an escape character has been found so\n          // whatever character is next will become\n          // part of the subquery unless the escape\n          // character is the last one in the data\n          escaped = true;\n          ++state.index;\n\n          continue;\n        } else if (state.data[state.index] == '(') {\n          // increase the precedence as there is a\n          // subquery in the current subquery\n          ++precedence;\n        } else if (state.data[state.index] == ')') {\n          --precedence;\n\n          if (precedence == 0) {\n            // this should be the end of the subquery\n            // all characters found will used for\n            // creating the subquery\n            break;\n          }\n        }\n      }\n\n      escaped = false;\n      ++state.index;\n    }\n\n    if (state.index == state.length) {\n      // a closing parenthesis was never found so the opening\n      // parenthesis is considered extraneous and will be ignored\n      state.index = start;\n    } else if (state.index == start) {\n      // a closing parenthesis was found immediately after the opening\n      // parenthesis so the current operation is reset since it would\n      // have been applied to this subquery\n      state.currentOperation = null;\n\n      ++state.index;\n    } else {\n      // a complete subquery has been found and is recursively parsed by\n      // starting over with a new state object\n      State subState = new State(state.data, state.buffer, start, state.index);\n      parseSubQuery(subState);\n      buildQueryTree(state, subState.top);\n\n      ++state.index;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}