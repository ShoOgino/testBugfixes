{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","sourceNew":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    int hash = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      hash = 31 * hash + bytes[i];\n    }\n    return hash;\n  }\n\n","sourceOld":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    int hash = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      hash = 31 * hash + bytes[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8471c0f357621e859602d44e1af230581b739319","date":1347468766,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","sourceNew":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre class=\"prettyprint\">\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    int hash = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      hash = 31 * hash + bytes[i];\n    }\n    return hash;\n  }\n\n","sourceOld":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    int hash = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      hash = 31 * hash + bytes[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fe9fa09df804ce770f1b667401a7a7647301ed","date":1397554534,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","sourceNew":"  /** Calculates the hash code as required by TermsHash during indexing.\n   *  <p> This is currently implemented as MurmurHash3 (32\n   *  bit), using the seed from {@link\n   *  StringHelper#GOOD_FAST_HASH_SEED}, but is subject to\n   *  change from release to release. */\n  @Override\n  public int hashCode() {\n    return StringHelper.murmurhash3_x86_32(this, StringHelper.GOOD_FAST_HASH_SEED);\n  }\n\n","sourceOld":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre class=\"prettyprint\">\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    int hash = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      hash = 31 * hash + bytes[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["8471c0f357621e859602d44e1af230581b739319"],"8471c0f357621e859602d44e1af230581b739319":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30fe9fa09df804ce770f1b667401a7a7647301ed"]},"commit2Childs":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8471c0f357621e859602d44e1af230581b739319":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8471c0f357621e859602d44e1af230581b739319"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}