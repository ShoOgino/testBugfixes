{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","commits":[{"id":"40aa98241c87d86a0077beb8023713d93a0becfe","date":1459784560,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    while (true) {\n      // Pick the next random pole\n      final double poleLat = generator.nextDouble() * Math.PI - Math.PI * 0.5;\n      final double poleLon = generator.nextDouble() * Math.PI * 2.0 - Math.PI;\n      final GeoPoint pole = new GeoPoint(planetModel, poleLat, poleLon);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, pointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        return makeGeoPolygon(planetModel, pointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba81c43c13d92ea74a6388471cf358eb7068744d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    while (true) {\n      // Pick the next random pole\n      final double poleLat = generator.nextDouble() * Math.PI - Math.PI * 0.5;\n      final double poleLon = generator.nextDouble() * Math.PI * 2.0 - Math.PI;\n      final GeoPoint pole = new GeoPoint(planetModel, poleLat, poleLon);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, pointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        return makeGeoPolygon(planetModel, pointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7b7a8973b4a2628b97962e152e513b0d3af02c8","date":1460145192,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","sourceNew":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    while (true) {\n      // Pick the next random pole\n      final double poleLat = generator.nextDouble() * Math.PI - Math.PI * 0.5;\n      final double poleLon = generator.nextDouble() * Math.PI * 2.0 - Math.PI;\n      final GeoPoint pole = new GeoPoint(planetModel, poleLat, poleLon);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, pointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        //System.out.println(\"Pole = \"+pole+\"; isInside=\"+isPoleInside+\"; pointList = \"+pointList);\n        return makeGeoPolygon(planetModel, pointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n  }\n\n","sourceOld":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    while (true) {\n      // Pick the next random pole\n      final double poleLat = generator.nextDouble() * Math.PI - Math.PI * 0.5;\n      final double poleLon = generator.nextDouble() * Math.PI * 2.0 - Math.PI;\n      final GeoPoint pole = new GeoPoint(planetModel, poleLat, poleLon);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, pointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        return makeGeoPolygon(planetModel, pointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ae680950e0cfd56d7b4ea40918fee662023726","date":1460293099,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","sourceNew":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    //int counter = 0;\n    while (true) {\n      //counter++;\n      // Pick the next random pole\n      final GeoPoint pole = pickPole(generator, planetModel, pointList);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, pointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        //System.out.println(\"Took \"+counter+\" iterations to find pole\");\n        //System.out.println(\"Pole = \"+pole+\"; isInside=\"+isPoleInside+\"; pointList = \"+pointList);\n        return makeGeoPolygon(planetModel, pointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n  }\n\n","sourceOld":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    while (true) {\n      // Pick the next random pole\n      final double poleLat = generator.nextDouble() * Math.PI - Math.PI * 0.5;\n      final double poleLon = generator.nextDouble() * Math.PI * 2.0 - Math.PI;\n      final GeoPoint pole = new GeoPoint(planetModel, poleLat, poleLon);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, pointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        //System.out.println(\"Pole = \"+pole+\"; isInside=\"+isPoleInside+\"; pointList = \"+pointList);\n        return makeGeoPolygon(planetModel, pointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"414425421ced68c7064f08c9da6a2c95399226d9","date":1460921822,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","sourceNew":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    for (int counter = 0; counter < 10000; counter++) {\n      //counter++;\n      // Pick the next random pole\n      final GeoPoint pole = pickPole(generator, planetModel, pointList);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, pointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        //System.out.println(\"Took \"+counter+\" iterations to find pole\");\n        //System.out.println(\"Pole = \"+pole+\"; isInside=\"+isPoleInside+\"; pointList = \"+pointList);\n        return makeGeoPolygon(planetModel, pointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n    throw new IllegalArgumentException(\"cannot find a point that is inside the polygon\");\n  }\n\n","sourceOld":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    //int counter = 0;\n    while (true) {\n      //counter++;\n      // Pick the next random pole\n      final GeoPoint pole = pickPole(generator, planetModel, pointList);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, pointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        //System.out.println(\"Took \"+counter+\" iterations to find pole\");\n        //System.out.println(\"Pole = \"+pole+\"; isInside=\"+isPoleInside+\"; pointList = \"+pointList);\n        return makeGeoPolygon(planetModel, pointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa76b98015a97f0eca94f0f11fd1b6975838c3ee","date":1461000501,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","sourceNew":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    //System.err.println(\"points=\"+pointList);\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    for (int counter = 0; counter < 10000; counter++) {\n      //counter++;\n      // Pick the next random pole\n      final GeoPoint pole = pickPole(generator, planetModel, pointList);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, pointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        //System.out.println(\"Took \"+counter+\" iterations to find pole\");\n        //System.out.println(\"Pole = \"+pole+\"; isInside=\"+isPoleInside+\"; pointList = \"+pointList);\n        return makeGeoPolygon(planetModel, pointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n    throw new IllegalArgumentException(\"cannot find a point that is inside the polygon\");\n  }\n\n","sourceOld":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    for (int counter = 0; counter < 10000; counter++) {\n      //counter++;\n      // Pick the next random pole\n      final GeoPoint pole = pickPole(generator, planetModel, pointList);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, pointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        //System.out.println(\"Took \"+counter+\" iterations to find pole\");\n        //System.out.println(\"Pole = \"+pole+\"; isInside=\"+isPoleInside+\"; pointList = \"+pointList);\n        return makeGeoPolygon(planetModel, pointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n    throw new IllegalArgumentException(\"cannot find a point that is inside the polygon\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"536a864ce38bf14fb3f072a3129a389e95200e20","date":1461068886,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","sourceNew":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified, or null if a valid polygon cannot be generated\n   *  from this input.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // First, exercise a sanity filter on the provided pointList, and remove identical points, linear points, and backtracks\n    final List<GeoPoint> filteredPointList = filterPoints(pointList);\n    if (filteredPointList == null) {\n      return null;\n    }\n    //System.err.println(\"points=\"+pointList);\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    for (int counter = 0; counter < 1000000; counter++) {\n      //counter++;\n      // Pick the next random pole\n      final GeoPoint pole = pickPole(generator, planetModel, filteredPointList);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, filteredPointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        //System.out.println(\"Took \"+counter+\" iterations to find pole\");\n        //System.out.println(\"Pole = \"+pole+\"; isInside=\"+isPoleInside+\"; pointList = \"+pointList);\n        return generateGeoPolygon(planetModel, filteredPointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n    throw new IllegalArgumentException(\"cannot find a point that is inside the polygon\");\n  }\n\n","sourceOld":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    //System.err.println(\"points=\"+pointList);\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    for (int counter = 0; counter < 10000; counter++) {\n      //counter++;\n      // Pick the next random pole\n      final GeoPoint pole = pickPole(generator, planetModel, pointList);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, pointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        //System.out.println(\"Took \"+counter+\" iterations to find pole\");\n        //System.out.println(\"Pole = \"+pole+\"; isInside=\"+isPoleInside+\"; pointList = \"+pointList);\n        return makeGeoPolygon(planetModel, pointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n    throw new IllegalArgumentException(\"cannot find a point that is inside the polygon\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c4ea54ac6c0e876359818ff9634e6c179769c1e","date":1461111125,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","sourceNew":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified, or null if a valid polygon cannot be generated\n   *  from this input.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // First, exercise a sanity filter on the provided pointList, and remove identical points, linear points, and backtracks\n    //System.err.println(\" filtering \"+pointList.size()+\" points...\");\n    //final long startTime = System.currentTimeMillis();\n    final List<GeoPoint> filteredPointList = filterPoints(pointList);\n    //System.err.println(\"  ...done in \"+(System.currentTimeMillis()-startTime)+\"ms (\"+((filteredPointList==null)?\"degenerate\":(filteredPointList.size()+\" points\"))+\")\");\n    if (filteredPointList == null) {\n      return null;\n    }\n    //System.err.println(\"points=\"+pointList);\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    for (int counter = 0; counter < 1000000; counter++) {\n      //counter++;\n      // Pick the next random pole\n      final GeoPoint pole = pickPole(generator, planetModel, filteredPointList);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, filteredPointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        //System.out.println(\"Took \"+counter+\" iterations to find pole\");\n        //System.out.println(\"Pole = \"+pole+\"; isInside=\"+isPoleInside+\"; pointList = \"+pointList);\n        return generateGeoPolygon(planetModel, filteredPointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n    throw new IllegalArgumentException(\"cannot find a point that is inside the polygon \"+filteredPointList);\n  }\n\n","sourceOld":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified, or null if a valid polygon cannot be generated\n   *  from this input.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // First, exercise a sanity filter on the provided pointList, and remove identical points, linear points, and backtracks\n    final List<GeoPoint> filteredPointList = filterPoints(pointList);\n    if (filteredPointList == null) {\n      return null;\n    }\n    //System.err.println(\"points=\"+pointList);\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    for (int counter = 0; counter < 1000000; counter++) {\n      //counter++;\n      // Pick the next random pole\n      final GeoPoint pole = pickPole(generator, planetModel, filteredPointList);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, filteredPointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        //System.out.println(\"Took \"+counter+\" iterations to find pole\");\n        //System.out.println(\"Pole = \"+pole+\"; isInside=\"+isPoleInside+\"; pointList = \"+pointList);\n        return generateGeoPolygon(planetModel, filteredPointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n    throw new IllegalArgumentException(\"cannot find a point that is inside the polygon\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"99b0a9e4d18bb364d2546e5230cc61abcd2d366b","date":1461241852,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","sourceNew":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified, or null if a valid polygon cannot be generated\n   *  from this input.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    return makeGeoPolygon(planetModel, pointList, holes, 0.0);\n  }\n\n","sourceOld":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified, or null if a valid polygon cannot be generated\n   *  from this input.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    // First, exercise a sanity filter on the provided pointList, and remove identical points, linear points, and backtracks\n    //System.err.println(\" filtering \"+pointList.size()+\" points...\");\n    //final long startTime = System.currentTimeMillis();\n    final List<GeoPoint> filteredPointList = filterPoints(pointList);\n    //System.err.println(\"  ...done in \"+(System.currentTimeMillis()-startTime)+\"ms (\"+((filteredPointList==null)?\"degenerate\":(filteredPointList.size()+\" points\"))+\")\");\n    if (filteredPointList == null) {\n      return null;\n    }\n    //System.err.println(\"points=\"+pointList);\n    // Create a random number generator.  Effectively this furnishes us with a repeatable sequence\n    // of points to use for poles.\n    final Random generator = new Random(1234);\n    for (int counter = 0; counter < 1000000; counter++) {\n      //counter++;\n      // Pick the next random pole\n      final GeoPoint pole = pickPole(generator, planetModel, filteredPointList);\n      // Is it inside or outside?\n      final Boolean isPoleInside = isInsidePolygon(pole, filteredPointList);\n      if (isPoleInside != null) {\n        // Legal pole\n        //System.out.println(\"Took \"+counter+\" iterations to find pole\");\n        //System.out.println(\"Pole = \"+pole+\"; isInside=\"+isPoleInside+\"; pointList = \"+pointList);\n        return generateGeoPolygon(planetModel, filteredPointList, holes, pole, isPoleInside);\n      }\n      // If pole choice was illegal, try another one\n    }\n    throw new IllegalArgumentException(\"cannot find a point that is inside the polygon \"+filteredPointList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba81c43c13d92ea74a6388471cf358eb7068744d","date":1461408282,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","sourceNew":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Holes describe the area outside\n   *  each hole as being \"in set\".  Null == none.\n   * @return a GeoPolygon corresponding to what was specified, or null if a valid polygon cannot be generated\n   *  from this input.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    return makeGeoPolygon(planetModel, pointList, holes, 0.0);\n  }\n\n","sourceOld":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified, or null if a valid polygon cannot be generated\n   *  from this input.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    return makeGeoPolygon(planetModel, pointList, holes, 0.0);\n  }\n\n","bugFix":["40aa98241c87d86a0077beb8023713d93a0becfe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#makeGeoPolygon(PlanetModel,List[GeoPoint],List[GeoPolygon]).mjava","sourceNew":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Holes describe the area outside\n   *  each hole as being \"in set\".  Null == none.\n   * @return a GeoPolygon corresponding to what was specified, or null if a valid polygon cannot be generated\n   *  from this input.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    return makeGeoPolygon(planetModel, pointList, holes, 0.0);\n  }\n\n","sourceOld":"  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @param holes is a list of polygons representing \"holes\" in the outside polygon.  Null == none.\n   * @return a GeoPolygon corresponding to what was specified, or null if a valid polygon cannot be generated\n   *  from this input.\n   */\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final List<GeoPolygon> holes) {\n    return makeGeoPolygon(planetModel, pointList, holes, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa76b98015a97f0eca94f0f11fd1b6975838c3ee":["414425421ced68c7064f08c9da6a2c95399226d9"],"d7b7a8973b4a2628b97962e152e513b0d3af02c8":["40aa98241c87d86a0077beb8023713d93a0becfe"],"414425421ced68c7064f08c9da6a2c95399226d9":["d0ae680950e0cfd56d7b4ea40918fee662023726"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["99b0a9e4d18bb364d2546e5230cc61abcd2d366b","ba81c43c13d92ea74a6388471cf358eb7068744d"],"99b0a9e4d18bb364d2546e5230cc61abcd2d366b":["2c4ea54ac6c0e876359818ff9634e6c179769c1e"],"536a864ce38bf14fb3f072a3129a389e95200e20":["fa76b98015a97f0eca94f0f11fd1b6975838c3ee"],"d0ae680950e0cfd56d7b4ea40918fee662023726":["d7b7a8973b4a2628b97962e152e513b0d3af02c8"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40aa98241c87d86a0077beb8023713d93a0becfe"],"2c4ea54ac6c0e876359818ff9634e6c179769c1e":["536a864ce38bf14fb3f072a3129a389e95200e20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"40aa98241c87d86a0077beb8023713d93a0becfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"ba81c43c13d92ea74a6388471cf358eb7068744d":["99b0a9e4d18bb364d2546e5230cc61abcd2d366b"]},"commit2Childs":{"fa76b98015a97f0eca94f0f11fd1b6975838c3ee":["536a864ce38bf14fb3f072a3129a389e95200e20"],"d7b7a8973b4a2628b97962e152e513b0d3af02c8":["d0ae680950e0cfd56d7b4ea40918fee662023726"],"414425421ced68c7064f08c9da6a2c95399226d9":["fa76b98015a97f0eca94f0f11fd1b6975838c3ee"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"99b0a9e4d18bb364d2546e5230cc61abcd2d366b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","ba81c43c13d92ea74a6388471cf358eb7068744d"],"536a864ce38bf14fb3f072a3129a389e95200e20":["2c4ea54ac6c0e876359818ff9634e6c179769c1e"],"d0ae680950e0cfd56d7b4ea40918fee662023726":["414425421ced68c7064f08c9da6a2c95399226d9"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"2c4ea54ac6c0e876359818ff9634e6c179769c1e":["99b0a9e4d18bb364d2546e5230cc61abcd2d366b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09af2c9610ce53a4b25fd99344299b40318a4a1a","40aa98241c87d86a0077beb8023713d93a0becfe"],"40aa98241c87d86a0077beb8023713d93a0becfe":["d7b7a8973b4a2628b97962e152e513b0d3af02c8","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"ba81c43c13d92ea74a6388471cf358eb7068744d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}