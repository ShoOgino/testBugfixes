{"path":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","commits":[{"id":"3cdad2c6b6234338031bcc1f24c001a5ad66f714","date":1296866109,"type":1,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"/dev/null","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, String dirName) throws IOException {\n    String origDirName = dirName;\n    dirName = fullDir(dirName);\n\n    Directory dir = newFSDirectory(new File(dirName));\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origDirName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = new IndexSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", sim.encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", sim.encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", sim.encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", searcher.getSimilarityProvider().get(\"content\").encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", sim.encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", sim.encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", sim.encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", sim.encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // optimize\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.optimize();\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", sim.encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    IndexReader reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", sim.encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", sim.encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", sim.encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // make sure we can do delete & setNorm against this segment:\n    reader = IndexReader.open(dir, false);\n    searcher = newSearcher(reader);\n    Term searchTerm = new Term(\"id\", \"6\");\n    int delCount = reader.deleteDocuments(searchTerm);\n    assertEquals(\"wrong delete count\", 1, delCount);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    reader.setNorm(searcher.search(new TermQuery(new Term(\"id\", \"22\")), 10).scoreDocs[0].doc, \"content\", sim.encodeNormValue(2.0f));\n    reader.close();\n    searcher.close();\n\n    // make sure they \"took\":\n    reader = IndexReader.open(dir, true);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    doTestHits(hits, 43, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 43, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 43, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"22\", d.get(\"id\"));\n    searcher.close();\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    searcher.close();\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    searcher.close();\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,File,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, File oldIndexDir, String origOldName) throws IOException {\n\n    Directory dir = newFSDirectory(oldIndexDir);\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"21\", d.get(\"id\"));\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"06584e6e98d592b34e1329b384182f368d2025e8":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1291e4568eb7d9463d751627596ef14baf4c1603":["f2c5f0cb44df114db4228c8f77861714b5cabaea","0f3cee3d20b0c786e6fca20539454262e29edcab"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a3776dccca01c11e7046323cfad46a3b4a471233","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a3776dccca01c11e7046323cfad46a3b4a471233":["3cdad2c6b6234338031bcc1f24c001a5ad66f714","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be580b58bcc650d428f3f22de81cadcf51d650a"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["06584e6e98d592b34e1329b384182f368d2025e8","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"962d04139994fce5193143ef35615499a9a96d78":[],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["0f3cee3d20b0c786e6fca20539454262e29edcab","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1291e4568eb7d9463d751627596ef14baf4c1603","a3776dccca01c11e7046323cfad46a3b4a471233"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","8be580b58bcc650d428f3f22de81cadcf51d650a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdad2c6b6234338031bcc1f24c001a5ad66f714","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}