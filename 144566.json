{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","commits":[{"id":"b07132423639577d6f68cebbec9c83599d5d5a3a","date":1419020622,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"/dev/null","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), null);\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79700663e164dece87bed4adfd3e28bab6cb1385","date":1425241849,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), null);\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), null);\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, null, StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), null);\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    0, 0);\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e57158408015b1e7b1079de74aafe822e11811","date":1453058546,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getDimensionCount(), proto.getDimensionNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    0, 0);\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getDimensionCount(), proto.getDimensionNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw, true));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getDimensionCount(), proto.getDimensionNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getDimensionCount(), proto.getDimensionNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlySegmentReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":["2a1862266772deb28cdcb7d996b64d2177022687"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>());\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field, Collections.singleton(5));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = newDirectory();\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b6f36bb733c575dd04fdfa785127ebf82b0033f","date":1497502741,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(oneDocReader.fields());\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader), fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader));\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeba0a4d0845889a402dd225793d62f009d029c9","date":1527938093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader), fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader), fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab548c8f96022b4780f7500a30b19b4f4a5feeb6","date":1527940044,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader), fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader), fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader), fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader), fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader), fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader), fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader), fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader), fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(MultiFields.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      consumer.write(MultiFields.getFields(oneDocReader), fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDataDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(MultiFields.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(MultiFields.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDataDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDataDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(MultiFields.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790693f23f4e88a59fbb25e47cc25f6d493b03cb","date":1553077690,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDataDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, false, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDataDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ba24d6f9380e2463dbe5130d27502647f64904","date":1554881362,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDataDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, false, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), new HashMap<>(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDataDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, false, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDataDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, false, IOContext.READ, Collections.emptyMap());\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDataDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, false, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, false, IOContext.READ, Collections.emptyMap());\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDataDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, false, IOContext.READ, Collections.emptyMap());\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, false, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, false, IOContext.READ, Collections.emptyMap());\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bec68e7c41fed133827595747d853cad504e481e","date":1583501052,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase#testMultiClose().mjava","sourceNew":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","sourceOld":"  /** Calls close multiple times on closeable codec apis */\n  public void testMultiClose() throws IOException {\n    // first make a one doc index\n    Directory oneDocIndex = applyCreatedVersionMajor(newDirectory());\n    IndexWriter iw = new IndexWriter(oneDocIndex, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document oneDoc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    Field customField = new Field(\"field\", \"contents\", customType);\n    oneDoc.add(customField);\n    oneDoc.add(new NumericDocValuesField(\"field\", 5));\n    iw.addDocument(oneDoc);\n    LeafReader oneDocReader = getOnlyLeafReader(DirectoryReader.open(iw));\n    iw.close();\n    \n    // now feed to codec apis manually\n    // we use FSDir, things like ramdir are not guaranteed to cause fails if you write to them after close(), etc\n    Directory dir = newFSDirectory(createTempDir(\"justSoYouGetSomeChannelErrors\"));\n    Codec codec = getCodec();\n    \n    SegmentInfo segmentInfo = new SegmentInfo(dir, Version.LATEST, Version.LATEST, \"_0\", 1, false, codec, Collections.emptyMap(), StringHelper.randomId(), Collections.emptyMap(), null);\n    FieldInfo proto = oneDocReader.getFieldInfos().fieldInfo(\"field\");\n    FieldInfo field = new FieldInfo(proto.name, proto.number, proto.hasVectors(), proto.omitsNorms(), proto.hasPayloads(), \n                                    proto.getIndexOptions(), proto.getDocValuesType(), proto.getDocValuesGen(), new HashMap<>(),\n                                    proto.getPointDimensionCount(), proto.getPointIndexDimensionCount(), proto.getPointNumBytes(), proto.isSoftDeletesField());\n\n    FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { field } );\n\n    SegmentWriteState writeState = new SegmentWriteState(null, dir,\n                                                         segmentInfo, fieldInfos,\n                                                         null, new IOContext(new FlushInfo(1, 20)));\n    \n    SegmentReadState readState = new SegmentReadState(dir, segmentInfo, fieldInfos, false, IOContext.READ);\n\n    // PostingsFormat\n    NormsProducer fakeNorms = new NormsProducer() {\n\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public long ramBytesUsed() {\n        return 0;\n      }\n\n      @Override\n      public NumericDocValues getNorms(FieldInfo field) throws IOException {\n        if (field.hasNorms() == false) {\n          return null;\n        }\n        return oneDocReader.getNormValues(field.name);\n      }\n\n      @Override\n      public void checkIntegrity() throws IOException {}\n      \n    };\n    try (FieldsConsumer consumer = codec.postingsFormat().fieldsConsumer(writeState)) {\n      final Fields fields = new Fields() {\n        TreeSet<String> indexedFields = new TreeSet<>(FieldInfos.getIndexedFields(oneDocReader));\n\n        @Override\n        public Iterator<String> iterator() {\n          return indexedFields.iterator();\n        }\n\n        @Override\n        public Terms terms(String field) throws IOException {\n          return oneDocReader.terms(field);\n        }\n\n        @Override\n        public int size() {\n          return indexedFields.size();\n        }\n      };\n      consumer.write(fields, fakeNorms);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (FieldsProducer producer = codec.postingsFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // DocValuesFormat\n    try (DocValuesConsumer consumer = codec.docValuesFormat().fieldsConsumer(writeState)) {\n      consumer.addNumericField(field,\n                               new EmptyDocValuesProducer() {\n                                 @Override\n                                 public NumericDocValues getNumeric(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n                               });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (DocValuesProducer producer = codec.docValuesFormat().fieldsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // NormsFormat\n    try (NormsConsumer consumer = codec.normsFormat().normsConsumer(writeState)) {\n      consumer.addNormsField(field,\n                             new NormsProducer() {\n                                 @Override\n                                 public NumericDocValues getNorms(FieldInfo field) {\n                                   return new NumericDocValues() {\n                                     int docID = -1;\n                                 \n                                     @Override\n                                     public int docID() {\n                                       return docID;\n                                     }\n                                 \n                                     @Override\n                                     public int nextDoc() {\n                                       docID++;\n                                       if (docID == 1) {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                     public int advance(int target) {\n                                       if (docID <= 0 && target == 0) {\n                                         docID = 0;\n                                       } else {\n                                         docID = NO_MORE_DOCS;\n                                       }\n                                       return docID;\n                                     }\n\n                                     @Override\n                                    public boolean advanceExact(int target) throws IOException {\n                                      docID = target;\n                                      return target == 0;\n                                    }\n\n                                     @Override\n                                     public long cost() {\n                                       return 1;\n                                     }\n\n                                     @Override\n                                     public long longValue() {\n                                       return 5;\n                                     }\n                                   };\n                                 }\n\n                               @Override\n                               public void checkIntegrity() {\n                               }\n\n                               @Override\n                               public void close() {\n                               }\n\n                               @Override\n                               public long ramBytesUsed() {\n                                 return 0;\n                               }\n                             });\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (NormsProducer producer = codec.normsFormat().normsProducer(readState)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // TermVectorsFormat\n    try (TermVectorsWriter consumer = codec.termVectorsFormat().vectorsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument(1);\n      consumer.startField(field, 1, false, false, false);\n      consumer.startTerm(new BytesRef(\"testing\"), 2);\n      consumer.finishTerm();\n      consumer.finishField();\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (TermVectorsReader producer = codec.termVectorsFormat().vectorsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n    \n    // StoredFieldsFormat\n    try (StoredFieldsWriter consumer = codec.storedFieldsFormat().fieldsWriter(dir, segmentInfo, writeState.context)) {\n      consumer.startDocument();\n      consumer.writeField(field, customField);\n      consumer.finishDocument();\n      consumer.finish(fieldInfos, 1);\n      IOUtils.close(consumer);\n      IOUtils.close(consumer);\n    }\n    try (StoredFieldsReader producer = codec.storedFieldsFormat().fieldsReader(dir, segmentInfo, fieldInfos, readState.context)) {\n      IOUtils.close(producer);\n      IOUtils.close(producer);\n    }\n            \n    IOUtils.close(oneDocReader, oneDocIndex, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b07132423639577d6f68cebbec9c83599d5d5a3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"f6652c943595e92c187ee904c382863013eae28f":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["68ba24d6f9380e2463dbe5130d27502647f64904"],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"0ad30c6a479e764150a3316e57263319775f1df2":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","3d33e731a93d4b57e662ff094f64f94a745422d4"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0ad30c6a479e764150a3316e57263319775f1df2"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"43e57158408015b1e7b1079de74aafe822e11811":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b07132423639577d6f68cebbec9c83599d5d5a3a","79700663e164dece87bed4adfd3e28bab6cb1385"],"2a1862266772deb28cdcb7d996b64d2177022687":["43e57158408015b1e7b1079de74aafe822e11811"],"68ba24d6f9380e2463dbe5130d27502647f64904":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["eeba0a4d0845889a402dd225793d62f009d029c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"b70042a8a492f7054d480ccdd2be9796510d4327":["622a708571e534680618b3c5e0c28ac539a47776","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"622a708571e534680618b3c5e0c28ac539a47776":["28288370235ed02234a64753cdbf0c6ec096304a"],"79700663e164dece87bed4adfd3e28bab6cb1385":["b07132423639577d6f68cebbec9c83599d5d5a3a"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"299a2348fa24151d150182211b6208a38e5e3450":["b07132423639577d6f68cebbec9c83599d5d5a3a","79700663e164dece87bed4adfd3e28bab6cb1385"],"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["2a1862266772deb28cdcb7d996b64d2177022687"],"bec68e7c41fed133827595747d853cad504e481e":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"28288370235ed02234a64753cdbf0c6ec096304a":["31741cf1390044e38a2ec3127cf302ba841bfd75","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["79700663e164dece87bed4adfd3e28bab6cb1385"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"eeba0a4d0845889a402dd225793d62f009d029c9":["622a708571e534680618b3c5e0c28ac539a47776"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["f6652c943595e92c187ee904c382863013eae28f"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"f592209545c71895260367152601e9200399776d":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","2b6f36bb733c575dd04fdfa785127ebf82b0033f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bec68e7c41fed133827595747d853cad504e481e"]},"commit2Childs":{"b07132423639577d6f68cebbec9c83599d5d5a3a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","79700663e164dece87bed4adfd3e28bab6cb1385","299a2348fa24151d150182211b6208a38e5e3450"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"f6652c943595e92c187ee904c382863013eae28f":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"2b6f36bb733c575dd04fdfa785127ebf82b0033f":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["f6652c943595e92c187ee904c382863013eae28f"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["2b6f36bb733c575dd04fdfa785127ebf82b0033f","28288370235ed02234a64753cdbf0c6ec096304a"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["bec68e7c41fed133827595747d853cad504e481e"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"43e57158408015b1e7b1079de74aafe822e11811":["2a1862266772deb28cdcb7d996b64d2177022687"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2a1862266772deb28cdcb7d996b64d2177022687":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"68ba24d6f9380e2463dbe5130d27502647f64904":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b07132423639577d6f68cebbec9c83599d5d5a3a"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"79700663e164dece87bed4adfd3e28bab6cb1385":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450","ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"622a708571e534680618b3c5e0c28ac539a47776":["b70042a8a492f7054d480ccdd2be9796510d4327","eeba0a4d0845889a402dd225793d62f009d029c9"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"299a2348fa24151d150182211b6208a38e5e3450":[],"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["68ba24d6f9380e2463dbe5130d27502647f64904"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"bec68e7c41fed133827595747d853cad504e481e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["622a708571e534680618b3c5e0c28ac539a47776"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["43e57158408015b1e7b1079de74aafe822e11811"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"eeba0a4d0845889a402dd225793d62f009d029c9":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"f592209545c71895260367152601e9200399776d":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b70042a8a492f7054d480ccdd2be9796510d4327","299a2348fa24151d150182211b6208a38e5e3450","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","f592209545c71895260367152601e9200399776d","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}