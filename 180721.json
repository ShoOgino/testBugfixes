{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#getTopChildren(FacetLabel,int,int).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#getTopChildren(FacetLabel,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#getTopChildren(CategoryPath,int,int).mjava","sourceNew":"  private SimpleFacetResult getTopChildren(FacetLabel path, int dimOrd, int topN) throws IOException {\n\n    TopOrdValueQueue q = new TopOrdValueQueue(topN);\n    \n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValues = 0;\n\n    TopOrdValueQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValues += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdValueQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValues == 0) {\n      return null;\n    }\n\n    FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(path.components[0]);\n    if (ft.hierarchical && ft.multiValued) {\n      sumValues = values[dimOrd];\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdValueQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(path, sumValues, labelValues);\n  }\n\n","sourceOld":"  private SimpleFacetResult getTopChildren(CategoryPath path, int dimOrd, int topN) throws IOException {\n\n    TopOrdValueQueue q = new TopOrdValueQueue(topN);\n    \n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValues = 0;\n\n    TopOrdValueQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValues += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdValueQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValues == 0) {\n      return null;\n    }\n\n    FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(path.components[0]);\n    if (ft.hierarchical && ft.multiValued) {\n      sumValues = values[dimOrd];\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdValueQueue.OrdAndValue ordAndValue = q.pop();\n      CategoryPath child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(path, sumValues, labelValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0beaa29c2ed8a0b14b93f918dac041e6024d35d","date":1384809045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#getTopChildren(FacetLabel,int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#getTopChildren(FacetLabel,int,int).mjava","sourceNew":"  private SimpleFacetResult getTopChildren(FacetLabel path, int dimOrd, int topN) throws IOException {\n\n    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(topN);\n    \n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValues = 0;\n\n    TopOrdAndFloatQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValues += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndFloatQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValues == 0) {\n      return null;\n    }\n\n    FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(path.components[0]);\n    if (ft.hierarchical && ft.multiValued) {\n      sumValues = values[dimOrd];\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(path, sumValues, labelValues);\n  }\n\n","sourceOld":"  private SimpleFacetResult getTopChildren(FacetLabel path, int dimOrd, int topN) throws IOException {\n\n    TopOrdValueQueue q = new TopOrdValueQueue(topN);\n    \n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValues = 0;\n\n    TopOrdValueQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValues += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdValueQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValues == 0) {\n      return null;\n    }\n\n    FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(path.components[0]);\n    if (ft.hierarchical && ft.multiValued) {\n      sumValues = values[dimOrd];\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdValueQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(path, sumValues, labelValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18edd2e3f5560087a37442fa424cbbed7c295ebc","date":1384813900,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/TaxonomyFacetSumValueSource#getTopChildren(FacetLabel,int,int).mjava","sourceNew":null,"sourceOld":"  private SimpleFacetResult getTopChildren(FacetLabel path, int dimOrd, int topN) throws IOException {\n\n    TopOrdAndFloatQueue q = new TopOrdAndFloatQueue(topN);\n    \n    float bottomValue = 0;\n\n    int ord = children[dimOrd];\n    float sumValues = 0;\n\n    TopOrdAndFloatQueue.OrdAndValue reuse = null;\n    while(ord != TaxonomyReader.INVALID_ORDINAL) {\n      if (values[ord] > 0) {\n        sumValues += values[ord];\n        if (values[ord] > bottomValue) {\n          if (reuse == null) {\n            reuse = new TopOrdAndFloatQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = values[ord];\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomValue = q.top().value;\n          }\n        }\n      }\n\n      ord = siblings[ord];\n    }\n\n    if (sumValues == 0) {\n      return null;\n    }\n\n    FacetsConfig.DimConfig ft = facetsConfig.getDimConfig(path.components[0]);\n    if (ft.hierarchical && ft.multiValued) {\n      sumValues = values[dimOrd];\n    }\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndFloatQueue.OrdAndValue ordAndValue = q.pop();\n      FacetLabel child = taxoReader.getPath(ordAndValue.ord);\n      labelValues[i] = new LabelAndValue(child.components[path.length], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(path, sumValues, labelValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18edd2e3f5560087a37442fa424cbbed7c295ebc":["c0beaa29c2ed8a0b14b93f918dac041e6024d35d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c0beaa29c2ed8a0b14b93f918dac041e6024d35d":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"18edd2e3f5560087a37442fa424cbbed7c295ebc":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c0beaa29c2ed8a0b14b93f918dac041e6024d35d":["18edd2e3f5560087a37442fa424cbbed7c295ebc"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["c0beaa29c2ed8a0b14b93f918dac041e6024d35d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["18edd2e3f5560087a37442fa424cbbed7c295ebc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}